language: swift
name: HumanEval_17_parse_music
results:
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.split(separator: \"|\")\n \
    \   var result = [Int]()\n    for note in notes {\n        switch note {\n   \
    \     case \"o\":\n            result.append(4)\n        case \"o\":\n       \
    \     result.append(2)\n        case \".\":\n            result.append(1)\n  \
    \      default:\n            result.append(0)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpvk236bkn/tmpvk236bkn.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f1437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f14071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f14071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f140707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvk236bkn                        0x0000559c7f5369bf <unavailable> + 6591

    5    libc.so.6                          0x00002b4f14566460 __libc_start_main +
    245

    6    tmpvk236bkn                        0x0000559c7f5364f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_beat = 0\n   \
    \ for char in music_string {\n        switch char {\n        case \"o\":\n   \
    \         result.append(current_beat)\n            current_beat = 0\n        case\
    \ \"|\":\n            current_beat += 1\n        default:\n            continue\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpjbzlxoee/tmpjbzlxoee.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0050850c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0050547b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0050547988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00505467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjbzlxoee                        0x000055aabcdd076f <unavailable> + 5999

    5    libc.so.6                          0x00002b0050a3c460 __libc_start_main +
    245

    6    tmpjbzlxoee                        0x000055aabcdd02a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_beat = 0\n   \
    \ for char in music_string {\n        switch char {\n        case \"o\":\n   \
    \         current_beat += 4\n        case \"|\":\n            result.append(current_beat)\n\
    \            current_beat = 0\n        case \".\":\n            current_beat +=\
    \ 1\n        default:\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpdnvd4f25/tmpdnvd4f25.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bb31aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7bb2ea1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7bb2ea1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7bb2ea07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdnvd4f25                        0x000056230319776f <unavailable> + 5999

    5    libc.so.6                          0x00002b7bb3396460 __libc_start_main +
    245

    6    tmpdnvd4f25                        0x00005623031972a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        let index = music_string.index(of:\
    \ \"|\") ?? music_string.endIndex\n        let substring = music_string[..<index]\n\
    \        if substring.contains(\"o\") {\n            result.append(4)\n      \
    \  } else if substring.contains(\".\") {\n            result.append(1)\n     \
    \   } else {\n            result.append(2)\n        }\n        music_string =\
    \ String(music_string[index...])\n        if music_string.count > 0 {\n      \
    \      music_string = String(music_string[music_string.index(after: music_string.startIndex)...])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpfepydf2y/tmpfepydf2y.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94ee0e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94edddeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94eddde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94edddd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfepydf2y                        0x000055a8ee4dbc9f <unavailable> + 7327

    5    libc.so.6                          0x00002b94ee2d3460 __libc_start_main +
    245

    6    tmpfepydf2y                        0x000055a8ee4db7d9 <unavailable> + 6105

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_char = \"\"\n\
    \    var current_count = 0\n    for char in music_string {\n        if char ==\
    \ \"|\" {\n            if current_char == \"o\" {\n                result.append(4)\n\
    \            } else if current_char == \".\" {\n                result.append(1)\n\
    \            }\n            current_char = \"\"\n        } else {\n          \
    \  current_char += String(char)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpye9zdx5k/tmpye9zdx5k.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ddb403c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ddb0fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ddb0fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ddb0f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpye9zdx5k                        0x0000564865b1d86f <unavailable> + 6255

    5    libc.so.6                          0x00002b7ddb5ef460 __libc_start_main +
    245

    6    tmpye9zdx5k                        0x0000564865b1d3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music = music_string.components(separatedBy:\
    \ \" \")\n    for note in music {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpkvgznjlu.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    var music = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_beat = 0\n   \
    \ for char in music_string {\n        switch char {\n        case \"o\":\n   \
    \         result.append(current_beat)\n            current_beat = 0\n        case\
    \ \"|\":\n            current_beat += 1\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpnbt7xq0v/tmpnbt7xq0v.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26e04e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26e01dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26e01db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26e01da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnbt7xq0v                        0x000055788917676f <unavailable> + 5999

    5    libc.so.6                          0x00002b26e06d0460 __libc_start_main +
    245

    6    tmpnbt7xq0v                        0x00005578891762a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_note = \"\"\n\
    \    for char in music_string {\n        if char == \"|\" {\n            switch\
    \ current_note {\n            case \"o\":\n                result.append(4)\n\
    \            case \"o|\":\n                result.append(2)\n            case\
    \ \".|\":\n                result.append(1)\n            default:\n          \
    \      break\n            }\n            current_note = \"\"\n        } else {\n\
    \            current_note += String(char)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpjw0e3pwj/tmpjw0e3pwj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5fb145c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5fae3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5fae3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5fae3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjw0e3pwj                        0x000055d079eb386f <unavailable> + 6255

    5    libc.so.6                          0x00002ac5fb331460 __libc_start_main +
    245

    6    tmpjw0e3pwj                        0x000055d079eb33a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmprgjr9ewu.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_beat = 0\n   \
    \ for char in music_string {\n        if char == \"o\" {\n            current_beat\
    \ += 4\n        } else if char == \"|\" {\n            result.append(current_beat)\n\
    \            current_beat = 0\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp_ktu6m7b/tmp_ktu6m7b.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f7ee08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f7eaffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f7eaff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f7eafe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ktu6m7b                        0x00005595a34a476f <unavailable> + 5999

    5    libc.so.6                          0x00002b0f7eff4460 __libc_start_main +
    245

    6    tmp_ktu6m7b                        0x00005595a34a42a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let beats = [4, 2, 1]\n    var result: [Int] = []\n\
    \    var i = 0\n    for char in music_string {\n        if char == \"|\" {\n \
    \           result.append(beats[i])\n            i += 1\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpdgb17ptx/tmpdgb17ptx.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83cd6b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83cd3aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83cd3ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83cd3ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdgb17ptx                        0x000055c671f2176f <unavailable> + 5999

    5    libc.so.6                          0x00002b83cd8a3460 __libc_start_main +
    245

    6    tmpdgb17ptx                        0x000055c671f212a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.characters.split(separator:\
    \ \" \").map(String.init)\n    var beats = [Int]()\n    for note in notes {\n\
    \        switch note {\n        case \"o\":\n            beats.append(4)\n   \
    \     case \"o|\":\n            beats.append(2)\n        case \".|\":\n      \
    \      beats.append(1)\n        default:\n            break\n        }\n    }\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpw2lfy58j.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let notes = music_string.characters.split(separator:\
    \ \" \").map(String.init)\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_ba2i34i.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        if note == \"o\" {\n            result.append(4)\n\
    \        } else if note == \"o|\" {\n            result.append(2)\n        } else\
    \ if note == \".|\" {\n            result.append(1)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_ds7ftk5.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music = music_string.characters.split(\"\
    \ \").map(String.init)\n    for note in music {\n        if note == \"o\" {\n\
    \            result.append(4)\n        } else if note == \"o|\" {\n          \
    \  result.append(2)\n        } else if note == \".|\" {\n            result.append(1)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbcv9fbqz.swift:11:41: error: no exact matches in call to instance\
    \ method 'split'\n    var music = music_string.characters.split(\" \").map(String.init)\n\
    \                                        ^\nSwift.Sequence:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n    \
    \                                   ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        if note == \"o\" {\n            result.append(4)\n\
    \        } else if note == \"o|\" {\n            result.append(2)\n        } else\
    \ if note == \".|\" {\n            result.append(1)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpa1r6_0o2.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.characters.split(separator:\
    \ \" \").map(String.init)\n    var result = [Int]()\n    for note in notes {\n\
    \        switch note {\n        case \"o\":\n            result.append(4)\n  \
    \      case \"o|\":\n            result.append(2)\n        case \".|\":\n    \
    \        result.append(1)\n        default:\n            break\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpnhzrqfqk.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let notes = music_string.characters.split(separator:\
    \ \" \").map(String.init)\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        if note == \"o\" {\n            result.append(4)\n\
    \        } else if note == \"o|\" {\n            result.append(2)\n        } else\
    \ if note == \".|\" {\n            result.append(1)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpxm9ymkas.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    var notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        } else {\n            music_string.removeFirst()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp5b6qd_dt/tmp5b6qd_dt.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08b4593c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08b428ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08b428a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08b42897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5b6qd_dt                        0x000055c99cfbc9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b08b477f460 __libc_start_main +
    245

    6    tmp5b6qd_dt                        0x000055c99cfbc289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for note in notes {\n        switch note\
    \ {\n        case \"o\":\n            result.append(4)\n        case \"o|\":\n\
    \            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpto2d14q5.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_beat = 0\n   \
    \ for char in music_string {\n        if char == \"o\" {\n            result.append(4\
    \ - current_beat)\n            current_beat = 0\n        } else if char == \"\
    |\" {\n            current_beat += 1\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmptq4s5wzh/tmptq4s5wzh.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b582d610c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b582d307b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b582d307988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b582d3067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptq4s5wzh                        0x000055616e2af892 <unavailable> + 6290

    5    libc.so.6                          0x00002b582d7fc460 __libc_start_main +
    245

    6    tmptq4s5wzh                        0x000055616e2af2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music = music_string.characters.split{$0\
    \ == \" \"}.map(String.init)\n    for note in music {\n        if note == \"o\"\
    \ {\n            result.append(4)\n        } else if note == \"o|\" {\n      \
    \      result.append(2)\n        } else if note == \".|\" {\n            result.append(1)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpoez6vwfc.swift:11:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var music = music_string.characters.split{$0 == \"\
    \ \"}.map(String.init)\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpoez6vwfc.swift:11:9: warning: variable\
    \ 'music' was never mutated; consider changing to 'let' constant\n    var music\
    \ = music_string.characters.split{$0 == \" \"}.map(String.init)\n    ~~~ ^\n \
    \   let\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let beats: [Character: Int] = [\"o\": 4, \"|\": 2, \"\
    .\": 1]\n    var result: [Int] = []\n    var current_beat: Int = 0\n    for char\
    \ in music_string {\n        if let beat = beats[char] {\n            current_beat\
    \ += beat\n        } else {\n            result.append(current_beat)\n       \
    \     current_beat = 0\n        }\n    }\n    result.append(current_beat)\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpgtxi7cw5/tmpgtxi7cw5.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44ca9aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44ca6a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44ca6a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44ca6a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtxi7cw5                        0x000055d4452716de <unavailable> + 5854

    5    libc.so.6                          0x00002b44cab9a460 __libc_start_main +
    245

    6    tmpgtxi7cw5                        0x000055d445271329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        } else {\n            music_string.removeFirst()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpizkm3fvk/tmpizkm3fvk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b559c52dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b559c224b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b559c224988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b559c2237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpizkm3fvk                        0x000055fb27774a21 <unavailable> + 6689

    5    libc.so.6                          0x00002b559c719460 __libc_start_main +
    245

    6    tmpizkm3fvk                        0x000055fb277742d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.characters.split(separator:\
    \ \"|\").map(String.init)\n    var beats = [Int]()\n    for note in notes {\n\
    \        if note == \"o\" {\n            beats.append(4)\n        } else if note\
    \ == \"o\" {\n            beats.append(2)\n        } else if note == \".\" {\n\
    \            beats.append(1)\n        }\n    }\n    return beats\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmkkgjldh.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let notes = music_string.characters.split(separator:\
    \ \"|\").map(String.init)\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.characters.count > 0 {\n        if music_string.hasPrefix(\"\
    o\") {\n            result.append(4)\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \        } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \        } else if music_string.hasPrefix(\".|\") {\n            result.append(1)\n\
    \            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \        } else {\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp3bab61st.swift:12:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    while music_string.characters.count > 0 {\n       \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp3bab61st.swift:15:41: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp3bab61st.swift:15:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmp3bab61st.swift:18:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp3bab61st.swift:18:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmp3bab61st.swift:21:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp3bab61st.swift:21:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmp3bab61st.swift:23:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.s"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_beat = 0\n   \
    \ for char in music_string {\n        if char == \"o\" {\n            result.append(4)\n\
    \            current_beat += 4\n        } else if char == \"|\" {\n          \
    \  result.append(current_beat)\n            current_beat = 0\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpsakaw4aw/tmpsakaw4aw.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0afda5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0afd752b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0afd752988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0afd7517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsakaw4aw                        0x000055585230f892 <unavailable> + 6290

    5    libc.so.6                          0x00002b0afdc47460 __libc_start_main +
    245

    6    tmpsakaw4aw                        0x000055585230f2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmprgjr9ewu.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let music_string_array =\
    \ music_string.components(separatedBy: \" \")\n    for note in music_string_array\
    \ {\n        if note == \"o\" {\n            result.append(4)\n        } else\
    \ if note == \"o|\" {\n            result.append(2)\n        } else if note ==\
    \ \".|\" {\n            result.append(1)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmppy9seevx.swift:11:43: error: value of type 'String' has no member\
    \ 'components'\n    let music_string_array = music_string.components(separatedBy:\
    \ \" \")\n                             ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let beats = [4, 2, 1]\n    var result = [Int]()\n  \
    \  var i = 0\n    while i < music_string.count {\n        let char = music_string[i]\n\
    \        if char == \"o\" {\n            result.append(beats[0])\n           \
    \ i += 1\n        } else if char == \".\" {\n            result.append(beats[2])\n\
    \            i += 2\n        } else if char == \"o\" {\n            result.append(beats[1])\n\
    \            i += 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpkz3jdsan.swift:14:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        let char\
    \ = music_string[i]\n                   ^~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let notes = music_string.characters.split(separator:\
    \ \" \").map(String.init)\n    for note in notes {\n        if note == \"o\" {\n\
    \            result.append(4)\n        } else if note == \"o|\" {\n          \
    \  result.append(2)\n        } else if note == \".|\" {\n            result.append(1)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpxnnm5xls.swift:11:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let notes = music_string.characters.split(separator:\
    \ \" \").map(String.init)\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var temp = \"\"\n    for char\
    \ in music_string {\n        if char == \"|\" {\n            switch temp {\n \
    \           case \"o\":\n                result.append(4)\n            case \"\
    o\":\n                result.append(2)\n            case \".\":\n            \
    \    result.append(1)\n            default:\n                break\n         \
    \   }\n            temp = \"\"\n        } else {\n            temp += String(char)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpoucy4_rr/tmpoucy4_rr.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b985693dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9856634b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9856634988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98566337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoucy4_rr                        0x000055866fa6f86f <unavailable> + 6255

    5    libc.so.6                          0x00002b9856b29460 __libc_start_main +
    245

    6    tmpoucy4_rr                        0x000055866fa6f3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        } else {\n            music_string.removeFirst()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpizkm3fvk/tmpizkm3fvk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b559c52dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b559c224b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b559c224988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b559c2237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpizkm3fvk                        0x000055fb27774a21 <unavailable> + 6689

    5    libc.so.6                          0x00002b559c719460 __libc_start_main +
    245

    6    tmpizkm3fvk                        0x000055fb277742d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let notes = music_string.split(separator:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      result.append(0)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        } else {\n            music_string.removeFirst()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp5b6qd_dt/tmp5b6qd_dt.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08b4593c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08b428ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08b428a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08b42897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5b6qd_dt                        0x000055c99cfbc9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b08b477f460 __libc_start_main +
    245

    6    tmp5b6qd_dt                        0x000055c99cfbc289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        let index = music_string.index(music_string.startIndex,\
    \ offsetBy: 1)\n        let first_char = music_string[..<index]\n        switch\
    \ first_char {\n        case \"o\":\n            result.append(4)\n        case\
    \ \"o\":\n            result.append(2)\n        case \".\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n        music_string = String(music_string[index...])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp5u_zi7p_/tmp5u_zi7p_.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45fe28bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45fdf82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45fdf82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45fdf817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5u_zi7p_                        0x000055fe23025cf1 <unavailable> + 7409

    5    libc.so.6                          0x00002b45fe477460 __libc_start_main +
    245

    6    tmp5u_zi7p_                        0x000055fe230255a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.characters.count > 0 {\n        if music_string.hasPrefix(\"\
    o\") {\n            result.append(4)\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \        } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \        } else if music_string.hasPrefix(\".|\") {\n            result.append(1)\n\
    \            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \        } else {\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp3bab61st.swift:12:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    while music_string.characters.count > 0 {\n       \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp3bab61st.swift:15:41: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp3bab61st.swift:15:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmp3bab61st.swift:18:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp3bab61st.swift:18:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmp3bab61st.swift:21:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp3bab61st.swift:21:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmp3bab61st.swift:23:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.s"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    |\")\n    var result = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            result.append(4)\n        } else if note == \"o\" {\n     \
    \       result.append(2)\n        } else if note == \".\" {\n            result.append(1)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpi6vkpscz.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for note in notes {\n        switch note\
    \ {\n        case \"o\":\n            result.append(4)\n        case \"o|\":\n\
    \            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            result.append(0)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpfhnc3qqy.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for note in notes {\n        switch note\
    \ {\n        case \"o\":\n            result.append(4)\n        case \"o|\":\n\
    \            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpto2d14q5.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let beats = [4, 2, 1]\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    var result = [Int]()\n    for note in notes {\n        let index\
    \ = note.index(note.startIndex, offsetBy: 1)\n        let beat = note[index]\n\
    \        switch beat {\n        case \"o\":\n            result.append(beats[0])\n\
    \        case \"|\":\n            result.append(beats[1])\n        case \".\"\
    :\n            result.append(beats[2])\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1_6h0yzf.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_note = \"\"\n\
    \    for char in music_string {\n        if char == \"|\" {\n            switch\
    \ current_note {\n            case \"o\":\n                result.append(4)\n\
    \            case \"o|\":\n                result.append(2)\n            case\
    \ \".|\":\n                result.append(1)\n            default:\n          \
    \      break\n            }\n            current_note = \"\"\n        } else {\n\
    \            current_note += String(char)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpjw0e3pwj/tmpjw0e3pwj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5fb145c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5fae3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5fae3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5fae3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjw0e3pwj                        0x000055d079eb386f <unavailable> + 6255

    5    libc.so.6                          0x00002ac5fb331460 __libc_start_main +
    245

    6    tmpjw0e3pwj                        0x000055d079eb33a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            beats.append(4)\n        } else if note == \"o|\" {\n     \
    \       beats.append(2)\n        } else if note == \".|\" {\n            beats.append(1)\n\
    \        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp36ydcxuk.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.characters.split(separator:\
    \ \" \").map(String.init)\n    return notes.map {\n        switch $0 {\n     \
    \   case \"o\":\n            return 4\n        case \"o|\":\n            return\
    \ 2\n        case \".|\":\n            return 1\n        default:\n          \
    \  return 0\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpnis0kdmp.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let notes = music_string.characters.split(separator:\
    \ \" \").map(String.init)\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let music_string_array =\
    \ music_string.components(separatedBy: \" \")\n    for note in music_string_array\
    \ {\n        if note == \"o\" {\n            result.append(4)\n        } else\
    \ if note == \"o|\" {\n            result.append(2)\n        } else if note ==\
    \ \".|\" {\n            result.append(1)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmppy9seevx.swift:11:43: error: value of type 'String' has no member\
    \ 'components'\n    let music_string_array = music_string.components(separatedBy:\
    \ \" \")\n                             ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmprgjr9ewu.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music = music_string.characters.split{$0\
    \ == \" \"}.map(String.init)\n    for note in music {\n        if note == \"o\"\
    \ {\n            result.append(4)\n        } else if note == \"o|\" {\n      \
    \      result.append(2)\n        } else if note == \".|\" {\n            result.append(1)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpoez6vwfc.swift:11:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var music = music_string.characters.split{$0 == \"\
    \ \"}.map(String.init)\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpoez6vwfc.swift:11:9: warning: variable\
    \ 'music' was never mutated; consider changing to 'let' constant\n    var music\
    \ = music_string.characters.split{$0 == \" \"}.map(String.init)\n    ~~~ ^\n \
    \   let\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp5jjeup80.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.characters.split\
    \ { $0 == \" \" }.map(String.init)\n    for note in notes {\n        if note ==\
    \ \"o\" {\n            result.append(4)\n        } else if note == \"o|\" {\n\
    \            result.append(2)\n        } else if note == \".|\" {\n          \
    \  result.append(1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpwu2iubew.swift:11:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let notes = music_string.characters.split { $0 == \"\
    \ \" }.map(String.init)\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music = music_string.components(separatedBy:\
    \ \"|\")\n    for note in music {\n        if note == \"o\" {\n            result.append(4)\n\
    \        } else if note == \"o\" {\n            result.append(2)\n        } else\
    \ if note == \".|\" {\n            result.append(1)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp7a_db_4i.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    var music = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_beat = 0\n   \
    \ for char in music_string {\n        switch char {\n        case \"o\":\n   \
    \         result.append(current_beat)\n            current_beat = 0\n        case\
    \ \"|\":\n            current_beat += 1\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpnbt7xq0v/tmpnbt7xq0v.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26e04e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26e01dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26e01db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26e01da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnbt7xq0v                        0x000055788917676f <unavailable> + 5999

    5    libc.so.6                          0x00002b26e06d0460 __libc_start_main +
    245

    6    tmpnbt7xq0v                        0x00005578891762a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        if note == \"o\" {\n            result.append(4)\n\
    \        } else if note == \"o|\" {\n            result.append(2)\n        } else\
    \ if note == \".|\" {\n            result.append(1)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_ds7ftk5.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        } else {\n            music_string.removeFirst()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpizkm3fvk/tmpizkm3fvk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b559c52dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b559c224b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b559c224988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b559c2237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpizkm3fvk                        0x000055fb27774a21 <unavailable> + 6689

    5    libc.so.6                          0x00002b559c719460 __libc_start_main +
    245

    6    tmpizkm3fvk                        0x000055fb277742d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var note = \"\"\n    for char\
    \ in music_string {\n        note += String(char)\n        if note == \"o\" {\n\
    \            result.append(4)\n            note = \"\"\n        } else if note\
    \ == \"o|\" {\n            result.append(2)\n            note = \"\"\n       \
    \ } else if note == \".|\" {\n            result.append(1)\n            note =\
    \ \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpoifb8nzg/tmpoifb8nzg.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfa3257c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfa2f4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfa2f4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfa2f4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoifb8nzg                        0x000056036401e77f <unavailable> + 6015

    5    libc.so.6                          0x00002abfa3443460 __libc_start_main +
    245

    6    tmpoifb8nzg                        0x000056036401e2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_beat = 0\n   \
    \ for char in music_string {\n        if char == \"o\" {\n            result.append(4\
    \ - current_beat)\n            current_beat = 0\n        } else if char == \"\
    |\" {\n            current_beat += 1\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmptq4s5wzh/tmptq4s5wzh.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b582d610c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b582d307b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b582d307988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b582d3067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptq4s5wzh                        0x000055616e2af892 <unavailable> + 6290

    5    libc.so.6                          0x00002b582d7fc460 __libc_start_main +
    245

    6    tmptq4s5wzh                        0x000055616e2af2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    |\")\n    var beats = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            beats.append(4)\n        } else if note == \"o\" {\n      \
    \      beats.append(2)\n        } else if note == \".\" {\n            beats.append(1)\n\
    \        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpv0j0q6sy.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let music_array = music_string.components(separatedBy:\
    \ \" \")\n    for note in music_array {\n        switch note {\n        case \"\
    o\":\n            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      result.append(0)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp88scwadp.swift:11:36: error: value of type 'String' has no member\
    \ 'components'\n    let music_array = music_string.components(separatedBy: \"\
    \ \")\n                      ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_beat = 0\n   \
    \ for char in music_string {\n        if char == \"o\" {\n            result.append(4)\n\
    \            current_beat += 4\n        } else if char == \"|\" {\n          \
    \  result.append(current_beat)\n            current_beat = 0\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpsakaw4aw/tmpsakaw4aw.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0afda5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0afd752b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0afd752988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0afd7517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsakaw4aw                        0x000055585230f892 <unavailable> + 6290

    5    libc.so.6                          0x00002b0afdc47460 __libc_start_main +
    245

    6    tmpsakaw4aw                        0x000055585230f2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        } else {\n            music_string.removeFirst()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpizkm3fvk/tmpizkm3fvk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b559c52dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b559c224b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b559c224988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b559c2237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpizkm3fvk                        0x000055fb27774a21 <unavailable> + 6689

    5    libc.so.6                          0x00002b559c719460 __libc_start_main +
    245

    6    tmpizkm3fvk                        0x000055fb277742d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmprgjr9ewu.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music = music_string.characters.map\
    \ { String($0) }\n    var current_note = \"\"\n    for note in music {\n     \
    \   if note == \"|\" {\n            if current_note == \"o\" {\n             \
    \   result.append(4)\n            } else if current_note == \"o|\" {\n       \
    \         result.append(2)\n            } else if current_note == \".|\" {\n \
    \               result.append(1)\n            }\n            current_note = \"\
    \"\n        } else {\n            current_note += note\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp40czmbmr.swift:11:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var music = music_string.characters.map { String($0)\
    \ }\n                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp40czmbmr.swift:11:9: warning: variable 'music' was\
    \ never mutated; consider changing to 'let' constant\n    var music = music_string.characters.map\
    \ { String($0) }\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var current_number = 0\n\
    \    for char in music_string {\n        if char == \"o\" {\n            current_number\
    \ += 4\n        } else if char == \"|\" {\n            result.append(current_number)\n\
    \            current_number = 0\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpepj8zkga/tmpepj8zkga.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b928e3e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b928e0d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b928e0d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b928e0d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpepj8zkga                        0x000055735bcbe71f <unavailable> + 5919

    5    libc.so.6                          0x00002b928e5cd460 __libc_start_main +
    245

    6    tmpepj8zkga                        0x000055735bcbe259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        } else {\n            music_string.removeFirst()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpizkm3fvk/tmpizkm3fvk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b559c52dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b559c224b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b559c224988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b559c2237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpizkm3fvk                        0x000055fb27774a21 <unavailable> + 6689

    5    libc.so.6                          0x00002b559c719460 __libc_start_main +
    245

    6    tmpizkm3fvk                        0x000055fb277742d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        if note == \"o\" {\n            result.append(4)\n\
    \        } else if note == \"o|\" {\n            result.append(2)\n        } else\
    \ if note == \".|\" {\n            result.append(1)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_ds7ftk5.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_beat = 0\n   \
    \ for char in music_string {\n        if char == \"o\" {\n            current_beat\
    \ += 4\n        } else if char == \"o\" {\n            current_beat += 2\n   \
    \     } else if char == \".\" {\n            current_beat += 1\n        } else\
    \ if char == \"|\" {\n            result.append(current_beat)\n            current_beat\
    \ = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpf5rcuo_z/tmpf5rcuo_z.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb377fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb374f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb374f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb374f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf5rcuo_z                        0x000055d10b69b76f <unavailable> + 5999

    5    libc.so.6                          0x00002adb379e8460 __libc_start_main +
    245

    6    tmpf5rcuo_z                        0x000055d10b69b2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        if note == \"o\" {\n            result.append(4)\n\
    \        } else if note == \"o|\" {\n            result.append(2)\n        } else\
    \ if note == \".|\" {\n            result.append(1)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpa1r6_0o2.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_note = \"\"\n\
    \    for char in music_string {\n        if char == \"|\" {\n            switch\
    \ current_note {\n            case \"o\":\n                result.append(4)\n\
    \            case \"o|\":\n                result.append(2)\n            case\
    \ \".|\":\n                result.append(1)\n            default:\n          \
    \      result.append(0)\n            }\n            current_note = \"\"\n    \
    \    } else {\n            current_note += String(char)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp2h3x0_hg/tmp2h3x0_hg.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b623c430c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b623c127b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b623c127988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b623c1267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2h3x0_hg                        0x00005653b35f486f <unavailable> + 6255

    5    libc.so.6                          0x00002b623c61c460 __libc_start_main +
    245

    6    tmp2h3x0_hg                        0x00005653b35f43a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_note = \"\"\n\
    \    for char in music_string {\n        if char == \"|\" {\n            switch\
    \ current_note {\n            case \"o\":\n                result.append(4)\n\
    \            case \"o|\":\n                result.append(2)\n            case\
    \ \".|\":\n                result.append(1)\n            default:\n          \
    \      break\n            }\n            current_note = \"\"\n        } else {\n\
    \            current_note += String(char)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpjw0e3pwj/tmpjw0e3pwj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5fb145c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5fae3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5fae3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5fae3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjw0e3pwj                        0x000055d079eb386f <unavailable> + 6255

    5    libc.so.6                          0x00002ac5fb331460 __libc_start_main +
    245

    6    tmpjw0e3pwj                        0x000055d079eb33a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmprgjr9ewu.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_beat = 0\n   \
    \ for char in music_string {\n        if char == \"o\" {\n            result.append(4)\n\
    \            current_beat += 4\n        } else if char == \"|\" {\n          \
    \  result.append(current_beat)\n            current_beat = 0\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpsakaw4aw/tmpsakaw4aw.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0afda5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0afd752b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0afd752988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0afd7517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsakaw4aw                        0x000055585230f892 <unavailable> + 6290

    5    libc.so.6                          0x00002b0afdc47460 __libc_start_main +
    245

    6    tmpsakaw4aw                        0x000055585230f2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        } else {\n            music_string.removeFirst()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp5b6qd_dt/tmp5b6qd_dt.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08b4593c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08b428ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08b428a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08b42897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5b6qd_dt                        0x000055c99cfbc9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b08b477f460 __libc_start_main +
    245

    6    tmp5b6qd_dt                        0x000055c99cfbc289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    |\")\n    var result = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            result.append(4)\n        } else if note == \"o\" {\n     \
    \       result.append(2)\n        } else if note == \".\" {\n            result.append(1)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpi6vkpscz.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    |\")\n    var beats = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            beats.append(4)\n        } else if note == \"o\" {\n      \
    \      beats.append(2)\n        } else if note == \".\" {\n            beats.append(1)\n\
    \        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpv0j0q6sy.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        } else {\n            music_string.removeFirst()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpizkm3fvk/tmpizkm3fvk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b559c52dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b559c224b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b559c224988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b559c2237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpizkm3fvk                        0x000055fb27774a21 <unavailable> + 6689

    5    libc.so.6                          0x00002b559c719460 __libc_start_main +
    245

    6    tmpizkm3fvk                        0x000055fb277742d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        } else {\n            music_string.removeFirst()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp5b6qd_dt/tmp5b6qd_dt.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08b4593c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08b428ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08b428a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08b42897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5b6qd_dt                        0x000055c99cfbc9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b08b477f460 __libc_start_main +
    245

    6    tmp5b6qd_dt                        0x000055c99cfbc289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let note_types = [\"o\", \"o|\", \".|\"]\n    let note_lengths\
    \ = [4, 2, 1]\n    var result = [Int]()\n    for i in 0..<music_string.count {\n\
    \        let index = note_types.index(of: String(music_string[i]))\n        if\
    \ index != nil {\n            result.append(note_lengths[index!])\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp6tz7kg80.swift:14:32: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = note_types.index(of: String(music_string[i]))\n\
    \                               ^\n/tmp/tmp6tz7kg80.swift:14:32: note: use 'firstIndex(of:)'\
    \ instead\n        let index = note_types.index(of: String(music_string[i]))\n\
    \                               ^~~~~\n                               firstIndex\n\
    /tmp/tmp6tz7kg80.swift:14:49: error: 'subscript(_:)' is unavailable: cannot subscript\
    \ String with an Int, use a String.Index instead.\n        let index = note_types.index(of:\
    \ String(music_string[i]))\n                                                ^~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var count = 0\n    for char\
    \ in music_string {\n        if char == \"o\" {\n            result.append(4)\n\
    \        } else if char == \"|\" {\n            result[count] = result[count]\
    \ / 2\n            count += 1\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b464e9c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b464e6bb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b464e6bb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b464e6bb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b464e6babb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b464e4bae83 <unavailable> + 188035

    6    tmpad_58465                        0x000055724c9d0ebb <unavailable> + 7867

    7    tmpad_58465                        0x000055724c9d08db <unavailable> + 6363

    8    libc.so.6                          0x00002b464ebb0460 __libc_start_main +
    245

    9    tmpad_58465                        0x000055724c9d03e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_note = \"\"\n\
    \    for char in music_string {\n        if char == \"|\" {\n            switch\
    \ current_note {\n            case \"o\":\n                result.append(4)\n\
    \            case \"o|\":\n                result.append(2)\n            case\
    \ \".|\":\n                result.append(1)\n            default:\n          \
    \      break\n            }\n            current_note = \"\"\n        } else {\n\
    \            current_note += String(char)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpjw0e3pwj/tmpjw0e3pwj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5fb145c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5fae3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5fae3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5fae3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjw0e3pwj                        0x000055d079eb386f <unavailable> + 6255

    5    libc.so.6                          0x00002ac5fb331460 __libc_start_main +
    245

    6    tmpjw0e3pwj                        0x000055d079eb33a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        if note == \"o\" {\n            result.append(4)\n\
    \        } else if note == \"o|\" {\n            result.append(2)\n        } else\
    \ if note == \".|\" {\n            result.append(1)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpa1r6_0o2.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    // TODO: Implement this function\n    var result = [Int]()\n\
    \    var music_string = music_string\n    while music_string.count > 0 {\n   \
    \     if music_string.hasPrefix(\"o\") {\n            result.append(4)\n     \
    \       music_string.removeFirst()\n        } else if music_string.hasPrefix(\"\
    o|\") {\n            result.append(2)\n            music_string.removeFirst(2)\n\
    \        } else if music_string.hasPrefix(\".|\") {\n            result.append(1)\n\
    \            music_string.removeFirst(2)\n        } else {\n            music_string.removeFirst()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp7z7hijo1/tmp7z7hijo1.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6118ec8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6118bbfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6118bbf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6118bbe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7z7hijo1                        0x000055e033e80a21 <unavailable> + 6689

    5    libc.so.6                          0x00002b61190b4460 __libc_start_main +
    245

    6    tmp7z7hijo1                        0x000055e033e802d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    |\")\n    var beats = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            beats.append(4)\n        } else if note == \"o\" {\n      \
    \      beats.append(2)\n        } else if note == \".\" {\n            beats.append(1)\n\
    \        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpv0j0q6sy.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            result.append(4)\n        } else if note == \"o|\" {\n    \
    \        result.append(2)\n        } else if note == \".|\" {\n            result.append(1)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpf73ot89m.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_note = \"\"\n\
    \    for char in music_string {\n        if char == \"|\" {\n            if current_note\
    \ == \"o\" {\n                result.append(4)\n            } else if current_note\
    \ == \"o|\" {\n                result.append(2)\n            } else if current_note\
    \ == \".|\" {\n                result.append(1)\n            }\n            current_note\
    \ = \"\"\n        } else {\n            current_note += String(char)\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpw8u5kvf4/tmpw8u5kvf4.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b783b0e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b783add7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b783add7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b783add67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw8u5kvf4                        0x000055c03a11a86f <unavailable> + 6255

    5    libc.so.6                          0x00002b783b2cc460 __libc_start_main +
    245

    6    tmpw8u5kvf4                        0x000055c03a11a3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for note in notes {\n        switch note\
    \ {\n        case \"o\":\n            result.append(4)\n        case \"o|\":\n\
    \            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            result.append(0)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpfhnc3qqy.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    for char in music_string\
    \ {\n        switch char {\n        case \"o\":\n            result.append(4)\n\
    \        case \"o|\":\n            result.append(2)\n        case \".|\":\n  \
    \          result.append(1)\n        default:\n            break\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp5l1rmapq.swift:15:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n/tmp/tmp5l1rmapq.swift:17:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \".|\":\n            \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            beats.append(4)\n        } else if note == \"o|\" {\n     \
    \       beats.append(2)\n        } else if note == \".|\" {\n            beats.append(1)\n\
    \        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp36ydcxuk.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmprgjr9ewu.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for note in notes {\n        switch note\
    \ {\n        case \"o\":\n            result.append(4)\n        case \"o|\":\n\
    \            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpto2d14q5.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp5jjeup80.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp5jjeup80.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    for char in music_string {\n\
    \        switch char {\n        case \"o\":\n            result.append(4)\n  \
    \      case \"o|\":\n            result.append(2)\n        case \".|\":\n    \
    \        result.append(1)\n        default:\n            break\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp0jhfndg7.swift:15:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n/tmp/tmp0jhfndg7.swift:17:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \".|\":\n            \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var current_beat: Int =\
    \ 0\n    for char in music_string {\n        if char == \"o\" {\n            current_beat\
    \ = 4\n        } else if char == \"|\" {\n            result.append(current_beat)\n\
    \            current_beat = 0\n        } else if char == \".\" {\n           \
    \ current_beat += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp9j6bg5ph/tmp9j6bg5ph.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a73e34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a73b2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a73b2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a73b2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9j6bg5ph                        0x000055803ab4f71f <unavailable> + 5919

    5    libc.so.6                          0x00002b4a74020460 __libc_start_main +
    245

    6    tmp9j6bg5ph                        0x000055803ab4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        if note == \"o\" {\n            result.append(4)\n\
    \        } else if note == \"o|\" {\n            result.append(2)\n        } else\
    \ if note == \".|\" {\n            result.append(1)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_ds7ftk5.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music = music_string.characters.split(\"\
    \ \").map(String.init)\n    for note in music {\n        switch note {\n     \
    \   case \"o\":\n            result.append(4)\n        case \"o|\":\n        \
    \    result.append(2)\n        case \".|\":\n            result.append(1)\n  \
    \      default:\n            break\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp2n3yu5bw.swift:11:41: error: no exact matches in call to instance\
    \ method 'split'\n    var music = music_string.characters.split(\" \").map(String.init)\n\
    \                                        ^\nSwift.Sequence:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n    \
    \                                   ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        } else {\n            music_string.removeFirst()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpizkm3fvk/tmpizkm3fvk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b559c52dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b559c224b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b559c224988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b559c2237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpizkm3fvk                        0x000055fb27774a21 <unavailable> + 6689

    5    libc.so.6                          0x00002b559c719460 __libc_start_main +
    245

    6    tmpizkm3fvk                        0x000055fb277742d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.characters.split(separator:\
    \ \" \").map(String.init)\n    var result = [Int]()\n    for note in notes {\n\
    \        if note == \"o\" {\n            result.append(4)\n        } else if note\
    \ == \"o|\" {\n            result.append(2)\n        } else if note == \".|\"\
    \ {\n            result.append(1)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpihmdi47y.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let notes = music_string.characters.split(separator:\
    \ \" \").map(String.init)\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    |\")\n    var beats = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            beats.append(4)\n        } else if note == \"o\" {\n      \
    \      beats.append(2)\n        } else if note == \".\" {\n            beats.append(1)\n\
    \        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpv0j0q6sy.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            beats.append(4)\n        } else if note == \"o|\" {\n     \
    \       beats.append(2)\n        } else if note == \".|\" {\n            beats.append(1)\n\
    \        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp36ydcxuk.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_note = \"\"\n\
    \    for char in music_string {\n        if char == \"|\" {\n            switch\
    \ current_note {\n            case \"o\":\n                result.append(4)\n\
    \            case \"o|\":\n                result.append(2)\n            case\
    \ \".|\":\n                result.append(1)\n            default:\n          \
    \      break\n            }\n            current_note = \"\"\n        } else {\n\
    \            current_note += String(char)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpjw0e3pwj/tmpjw0e3pwj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5fb145c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5fae3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5fae3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5fae3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjw0e3pwj                        0x000055d079eb386f <unavailable> + 6255

    5    libc.so.6                          0x00002ac5fb331460 __libc_start_main +
    245

    6    tmpjw0e3pwj                        0x000055d079eb33a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var notes = music_string.characters.split{$0\
    \ == \" \"}.map(String.init)\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            result.append(4)\n        case \"o|\":\n   \
    \         result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpw68v_zhe.swift:11:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var notes = music_string.characters.split{$0 == \"\
    \ \"}.map(String.init)\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpw68v_zhe.swift:11:9: warning: variable\
    \ 'notes' was never mutated; consider changing to 'let' constant\n    var notes\
    \ = music_string.characters.split{$0 == \" \"}.map(String.init)\n    ~~~ ^\n \
    \   let\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        switch music_string.removeFirst()\
    \ {\n        case \"o\":\n            result.append(4)\n        case \"o\":\n\
    \            result.append(2)\n        case \".\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmplck7dnye/tmplck7dnye.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba429549c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba429240b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba429240988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba42923f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplck7dnye                        0x000055fd42663a61 <unavailable> + 6753

    5    libc.so.6                          0x00002ba429735460 __libc_start_main +
    245

    6    tmplck7dnye                        0x000055fd42663319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        } else {\n            music_string.removeFirst()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpizkm3fvk/tmpizkm3fvk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b559c52dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b559c224b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b559c224988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b559c2237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpizkm3fvk                        0x000055fb27774a21 <unavailable> + 6689

    5    libc.so.6                          0x00002b559c719460 __libc_start_main +
    245

    6    tmpizkm3fvk                        0x000055fb277742d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var note_length = 0\n    for\
    \ char in music_string {\n        if char == \"o\" {\n            note_length\
    \ = 4\n        } else if char == \"|\" {\n            result.append(note_length)\n\
    \            note_length = 0\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp65f7qfrd/tmp65f7qfrd.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e44f4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e44c43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e44c43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e44c427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp65f7qfrd                        0x000055dfa2e3776f <unavailable> + 5999

    5    libc.so.6                          0x00002b7e45138460 __libc_start_main +
    245

    6    tmp65f7qfrd                        0x000055dfa2e372a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var current_beat = 0\n \
    \   for char in music_string {\n        if char == \"o\" {\n            current_beat\
    \ += 4\n        } else if char == \"|\" {\n            result.append(current_beat)\n\
    \            current_beat = 0\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpi84fu4e4/tmpi84fu4e4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b988cca2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b988c999b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b988c999988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b988c9987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi84fu4e4                        0x0000562f4528971f <unavailable> + 5919

    5    libc.so.6                          0x00002b988ce8e460 __libc_start_main +
    245

    6    tmpi84fu4e4                        0x0000562f45289259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.characters.split(separator:\
    \ \"|\").map(String.init)\n    var beats = [Int]()\n    for note in notes {\n\
    \        if note == \"o\" {\n            beats.append(4)\n        } else if note\
    \ == \"o\" {\n            beats.append(2)\n        } else if note == \".\" {\n\
    \            beats.append(1)\n        }\n    }\n    return beats\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmkkgjldh.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let notes = music_string.characters.split(separator:\
    \ \"|\").map(String.init)\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            beats.append(4)\n        } else if note == \"o|\" {\n     \
    \       beats.append(2)\n        } else if note == \".|\" {\n            beats.append(1)\n\
    \        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp36ydcxuk.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for note in notes {\n        switch note\
    \ {\n        case \"o\":\n            result.append(4)\n        case \"o|\":\n\
    \            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpto2d14q5.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    |\")\n    var beats = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            beats.append(4)\n        } else if note == \"o\" {\n      \
    \      beats.append(2)\n        } else if note == \".\" {\n            beats.append(1)\n\
    \        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpv0j0q6sy.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var beats = 0\n    for char\
    \ in music_string {\n        if char == \"o\" {\n            beats += 4\n    \
    \    } else if char == \"|\" {\n            result.append(beats)\n           \
    \ beats = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpxinzb92s/tmpxinzb92s.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75c7a31c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75c7728b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75c7728988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75c77277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxinzb92s                        0x0000562fa29d576f <unavailable> + 5999

    5    libc.so.6                          0x00002b75c7c1d460 __libc_start_main +
    245

    6    tmpxinzb92s                        0x0000562fa29d52a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_beat = 0\n   \
    \ for char in music_string {\n        switch char {\n        case \"o\":\n   \
    \         result.append(current_beat)\n            current_beat = 0\n        case\
    \ \"|\":\n            current_beat += 1\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpnbt7xq0v/tmpnbt7xq0v.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26e04e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26e01dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26e01db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26e01da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnbt7xq0v                        0x000055788917676f <unavailable> + 5999

    5    libc.so.6                          0x00002b26e06d0460 __libc_start_main +
    245

    6    tmpnbt7xq0v                        0x00005578891762a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        } else {\n            music_string.removeFirst()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpizkm3fvk/tmpizkm3fvk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b559c52dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b559c224b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b559c224988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b559c2237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpizkm3fvk                        0x000055fb27774a21 <unavailable> + 6689

    5    libc.so.6                          0x00002b559c719460 __libc_start_main +
    245

    6    tmpizkm3fvk                        0x000055fb277742d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_note = \"\"\n\
    \    for char in music_string {\n        if char == \"|\" {\n            if current_note\
    \ == \"o\" {\n                result.append(4)\n            } else if current_note\
    \ == \"o|\" {\n                result.append(2)\n            } else if current_note\
    \ == \".|\" {\n                result.append(1)\n            }\n            current_note\
    \ = \"\"\n        } else {\n            current_note += String(char)\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpw8u5kvf4/tmpw8u5kvf4.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b783b0e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b783add7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b783add7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b783add67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw8u5kvf4                        0x000055c03a11a86f <unavailable> + 6255

    5    libc.so.6                          0x00002b783b2cc460 __libc_start_main +
    245

    6    tmpw8u5kvf4                        0x000055c03a11a3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp5jjeup80.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let beats = [4, 2, 1]\n    var result = [Int]()\n  \
    \  var i = 0\n    for char in music_string {\n        if char == \"o\" {\n   \
    \         result.append(beats[i])\n        } else if char == \"|\" {\n       \
    \     i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmppoa32p_k/tmppoa32p_k.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae65f001c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae65ecf8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae65ecf8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae65ecf77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppoa32p_k                        0x000055b38ffd78f2 <unavailable> + 6386

    5    libc.so.6                          0x00002ae65f1ed460 __libc_start_main +
    245

    6    tmppoa32p_k                        0x000055b38ffd7309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.characters.split(separator:\
    \ \" \").map(String.init)\n    var beats = [Int]()\n    for note in notes {\n\
    \        if note == \"o\" {\n            beats.append(4)\n        } else if note\
    \ == \"o|\" {\n            beats.append(2)\n        } else if note == \".|\" {\n\
    \            beats.append(1)\n        }\n    }\n    return beats\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpr3dlc9g6.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let notes = music_string.characters.split(separator:\
    \ \" \").map(String.init)\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.characters.split(separator:\
    \ \" \").map(String.init)\n    var result = [Int]()\n    for note in notes {\n\
    \        switch note {\n        case \"o\":\n            result.append(4)\n  \
    \      case \"o|\":\n            result.append(2)\n        case \".|\":\n    \
    \        result.append(1)\n        default:\n            break\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpnhzrqfqk.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let notes = music_string.characters.split(separator:\
    \ \" \").map(String.init)\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_beat = 0\n   \
    \ for character in music_string {\n        switch character {\n        case \"\
    o\":\n            result.append(current_beat)\n            current_beat = 0\n\
    \        case \"|\":\n            current_beat += 1\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpajd89ac3/tmpajd89ac3.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebe2518c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebe220fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebe220f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebe220e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajd89ac3                        0x000055d546da676f <unavailable> + 5999

    5    libc.so.6                          0x00002aebe2704460 __libc_start_main +
    245

    6    tmpajd89ac3                        0x000055d546da62a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var note_length = 0\n    for\
    \ char in music_string {\n        if char == \"o\" {\n            note_length\
    \ = 4\n        } else if char == \"|\" {\n            result.append(note_length)\n\
    \            note_length = 0\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp65f7qfrd/tmp65f7qfrd.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e44f4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e44c43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e44c43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e44c427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp65f7qfrd                        0x000055dfa2e3776f <unavailable> + 5999

    5    libc.so.6                          0x00002b7e45138460 __libc_start_main +
    245

    6    tmp65f7qfrd                        0x000055dfa2e372a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while !music_string.isEmpty {\n        if music_string.hasPrefix(\"o\") {\n\
    \            result.append(4)\n            music_string.removeFirst()\n      \
    \  } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        } else {\n            music_string.removeFirst()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpw2myw7c4/tmpw2myw7c4.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9ab6d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9ab3c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9ab3c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9ab3c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2myw7c4                        0x000055a7986c0a21 <unavailable> + 6689

    5    libc.so.6                          0x00002af9ab8bc460 __libc_start_main +
    245

    6    tmpw2myw7c4                        0x000055a7986c02d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_beat = 0\n   \
    \ for char in music_string {\n        if char == \"o\" {\n            current_beat\
    \ += 4\n        } else if char == \"|\" {\n            result.append(current_beat)\n\
    \            current_beat = 0\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp_ktu6m7b/tmp_ktu6m7b.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f7ee08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f7eaffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f7eaff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f7eafe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ktu6m7b                        0x00005595a34a476f <unavailable> + 5999

    5    libc.so.6                          0x00002b0f7eff4460 __libc_start_main +
    245

    6    tmp_ktu6m7b                        0x00005595a34a42a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.characters.count > 0 {\n        if music_string.hasPrefix(\"\
    o\") {\n            result.append(4)\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \        } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \        } else if music_string.hasPrefix(\".|\") {\n            result.append(1)\n\
    \            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \        } else {\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp3bab61st.swift:12:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    while music_string.characters.count > 0 {\n       \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp3bab61st.swift:15:41: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp3bab61st.swift:15:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmp3bab61st.swift:18:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp3bab61st.swift:18:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmp3bab61st.swift:21:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp3bab61st.swift:21:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmp3bab61st.swift:23:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.s"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    while i < music_string.characters.count\
    \ {\n        let index = music_string.index(music_string.startIndex, offsetBy:\
    \ i)\n        let char = music_string[index]\n        if char == \"o\" {\n   \
    \         result.append(4)\n            i += 1\n        } else if char == \".\"\
    \ {\n            result.append(1)\n            i += 2\n        } else if char\
    \ == \"|\" {\n            result.append(2)\n            i += 2\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp4n_1s2s3.swift:12:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    while i < music_string.characters.count {\n       \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_ba2i34i.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music = music_string.components(separatedBy:\
    \ \" \")\n    for note in music {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      print(\"Invalid note\")\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8e7x8mm6.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    var music = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        } else {\n            music_string.removeFirst()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp5b6qd_dt/tmp5b6qd_dt.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08b4593c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08b428ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08b428a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08b42897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5b6qd_dt                        0x000055c99cfbc9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b08b477f460 __libc_start_main +
    245

    6    tmp5b6qd_dt                        0x000055c99cfbc289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let beats = [4, 2, 1]\n    var result = [Int]()\n  \
    \  var currentBeat = 0\n    for note in music_string {\n        switch note {\n\
    \        case \"o\":\n            currentBeat = beats[0]\n        case \"o|\"\
    :\n            currentBeat = beats[1]\n        case \".|\":\n            currentBeat\
    \ = beats[2]\n        default:\n            result.append(currentBeat)\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpwtxrat38.swift:17:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n/tmp/tmpwtxrat38.swift:19:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \".|\":\n            \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_note = \"\"\n\
    \    for char in music_string {\n        if char == \"|\" {\n            switch\
    \ current_note {\n            case \"o\":\n                result.append(4)\n\
    \            case \"o|\":\n                result.append(2)\n            case\
    \ \".|\":\n                result.append(1)\n            default:\n          \
    \      break\n            }\n            current_note = \"\"\n        } else {\n\
    \            current_note += String(char)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpjw0e3pwj/tmpjw0e3pwj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5fb145c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5fae3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5fae3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5fae3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjw0e3pwj                        0x000055d079eb386f <unavailable> + 6255

    5    libc.so.6                          0x00002ac5fb331460 __libc_start_main +
    245

    6    tmpjw0e3pwj                        0x000055d079eb33a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let beats: [Character: Int] = [\"o\": 4, \"o|\": 2,\
    \ \".|\": 1]\n    return music_string.characters.map { beats[$0]! }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp7u9kwba6.swift:10:44: error: cannot convert value of type 'String'\
    \ to expected dictionary key type 'Character'\n    let beats: [Character: Int]\
    \ = [\"o\": 4, \"o|\": 2, \".|\": 1]\n                                       \
    \    ^\n/tmp/tmp7u9kwba6.swift:10:53: error: cannot convert value of type 'String'\
    \ to expected dictionary key type 'Character'\n    let beats: [Character: Int]\
    \ = [\"o\": 4, \"o|\": 2, \".|\": 1]\n                                       \
    \             ^\n/tmp/tmp7u9kwba6.swift:11:25: error: 'characters' is unavailable:\
    \ Please use String directly\n    return music_string.characters.map { beats[$0]!\
    \ }\n                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        } else {\n            music_string.removeFirst()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp5b6qd_dt/tmp5b6qd_dt.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08b4593c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08b428ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08b428a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08b42897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5b6qd_dt                        0x000055c99cfbc9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b08b477f460 __libc_start_main +
    245

    6    tmp5b6qd_dt                        0x000055c99cfbc289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_beat = 0\n   \
    \ for char in music_string {\n        if char == \"o\" {\n            result.append(4)\n\
    \            current_beat += 4\n        } else if char == \"|\" {\n          \
    \  result.append(current_beat)\n            current_beat = 0\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpsakaw4aw/tmpsakaw4aw.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0afda5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0afd752b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0afd752988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0afd7517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsakaw4aw                        0x000055585230f892 <unavailable> + 6290

    5    libc.so.6                          0x00002b0afdc47460 __libc_start_main +
    245

    6    tmpsakaw4aw                        0x000055585230f2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    |\")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o\":\n     \
    \       beats.append(2)\n        case \".\":\n            beats.append(1)\n  \
    \      default:\n            beats.append(0)\n        }\n    }\n    return beats\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp50tfz5u3.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_note = \"\"\n\
    \    for char in music_string {\n        if char == \"|\" {\n            switch\
    \ current_note {\n            case \"o\":\n                result.append(4)\n\
    \            case \"o|\":\n                result.append(2)\n            case\
    \ \".|\":\n                result.append(1)\n            default:\n          \
    \      break\n            }\n            current_note = \"\"\n        } else {\n\
    \            current_note += String(char)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpjw0e3pwj/tmpjw0e3pwj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5fb145c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5fae3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5fae3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5fae3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjw0e3pwj                        0x000055d079eb386f <unavailable> + 6255

    5    libc.so.6                          0x00002ac5fb331460 __libc_start_main +
    245

    6    tmpjw0e3pwj                        0x000055d079eb33a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        if note == \"o\" {\n            result.append(4)\n\
    \        } else if note == \"o|\" {\n            result.append(2)\n        } else\
    \ if note == \".|\" {\n            result.append(1)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_ds7ftk5.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_note = \"\"\n\
    \    for char in music_string {\n        if char == \"|\" {\n            if current_note\
    \ == \"o\" {\n                result.append(4)\n            } else if current_note\
    \ == \"o|\" {\n                result.append(2)\n            } else if current_note\
    \ == \".|\" {\n                result.append(1)\n            }\n            current_note\
    \ = \"\"\n        } else {\n            current_note += String(char)\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpw8u5kvf4/tmpw8u5kvf4.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b783b0e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b783add7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b783add7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b783add67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw8u5kvf4                        0x000055c03a11a86f <unavailable> + 6255

    5    libc.so.6                          0x00002b783b2cc460 __libc_start_main +
    245

    6    tmpw8u5kvf4                        0x000055c03a11a3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let notes = music_string.characters.split{$0\
    \ == \" \"}.map(String.init)\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            result.append(4)\n        case \"o|\":\n   \
    \         result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpnbofdpn2.swift:11:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let notes = music_string.characters.split{$0 == \"\
    \ \"}.map(String.init)\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let music_string_array =\
    \ music_string.components(separatedBy: \" \")\n    for note in music_string_array\
    \ {\n        switch note {\n        case \"o\":\n            result.append(4)\n\
    \        case \"o|\":\n            result.append(2)\n        case \".|\":\n  \
    \          result.append(1)\n        default:\n            break\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpgjesjjvq.swift:11:43: error: value of type 'String' has no member\
    \ 'components'\n    let music_string_array = music_string.components(separatedBy:\
    \ \" \")\n                             ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.characters.split(separator:\
    \ \" \").map(String.init)\n    var beats = [Int]()\n    for note in notes {\n\
    \        if note == \"o\" {\n            beats.append(4)\n        } else if note\
    \ == \"o|\" {\n            beats.append(2)\n        } else if note == \".|\" {\n\
    \            beats.append(1)\n        }\n    }\n    return beats\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpr3dlc9g6.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let notes = music_string.characters.split(separator:\
    \ \" \").map(String.init)\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        } else {\n            music_string.removeFirst()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp5b6qd_dt/tmp5b6qd_dt.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08b4593c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08b428ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08b428a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08b42897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5b6qd_dt                        0x000055c99cfbc9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b08b477f460 __libc_start_main +
    245

    6    tmp5b6qd_dt                        0x000055c99cfbc289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_array = music_string.characters.split{$0\
    \ == \" \"}.map(String.init)\n    for note in music_array {\n        if note ==\
    \ \"o\" {\n            result.append(4)\n        } else if note == \"o|\" {\n\
    \            result.append(2)\n        } else if note == \".|\" {\n          \
    \  result.append(1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpjd1cwxku.swift:11:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var music_array = music_string.characters.split{$0\
    \ == \" \"}.map(String.init)\n                                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpjd1cwxku.swift:11:9:\
    \ warning: variable 'music_array' was never mutated; consider changing to 'let'\
    \ constant\n    var music_array = music_string.characters.split{$0 == \" \"}.map(String.init)\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        } else {\n            music_string.removeFirst()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp5b6qd_dt/tmp5b6qd_dt.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08b4593c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08b428ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08b428a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08b42897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5b6qd_dt                        0x000055c99cfbc9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b08b477f460 __libc_start_main +
    245

    6    tmp5b6qd_dt                        0x000055c99cfbc289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_ba2i34i.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let music_string_array = music_string.characters.split(separator:\
    \ \" \").map(String.init)\n    for note in music_string_array {\n        if note\
    \ == \"o\" {\n            result.append(4)\n        } else if note == \"o|\" {\n\
    \            result.append(2)\n        } else if note == \".|\" {\n          \
    \  result.append(1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpaj9fl5ke.swift:11:43: error: 'characters' is unavailable: Please\
    \ use String directly\n    let music_string_array = music_string.characters.split(separator:\
    \ \" \").map(String.init)\n                                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        } else {\n            music_string.removeFirst()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpizkm3fvk/tmpizkm3fvk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b559c52dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b559c224b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b559c224988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b559c2237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpizkm3fvk                        0x000055fb27774a21 <unavailable> + 6689

    5    libc.so.6                          0x00002b559c719460 __libc_start_main +
    245

    6    tmpizkm3fvk                        0x000055fb277742d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        if note == \"o\" {\n            result.append(4)\n\
    \        } else if note == \"o|\" {\n            result.append(2)\n        } else\
    \ if note == \".|\" {\n            result.append(1)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpa1r6_0o2.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        } else {\n            music_string.removeFirst()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpizkm3fvk/tmpizkm3fvk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b559c52dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b559c224b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b559c224988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b559c2237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpizkm3fvk                        0x000055fb27774a21 <unavailable> + 6689

    5    libc.so.6                          0x00002b559c719460 __libc_start_main +
    245

    6    tmpizkm3fvk                        0x000055fb277742d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_beat = 0\n   \
    \ for char in music_string {\n        switch char {\n        case \"o\":\n   \
    \         result.append(current_beat)\n            current_beat = 0\n        case\
    \ \"|\":\n            current_beat += 1\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpnbt7xq0v/tmpnbt7xq0v.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26e04e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26e01dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26e01db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26e01da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnbt7xq0v                        0x000055788917676f <unavailable> + 5999

    5    libc.so.6                          0x00002b26e06d0460 __libc_start_main +
    245

    6    tmpnbt7xq0v                        0x00005578891762a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_note = \"\"\n\
    \    for char in music_string {\n        if char == \"|\" {\n            if current_note\
    \ == \"o\" {\n                result.append(4)\n            } else if current_note\
    \ == \"o|\" {\n                result.append(2)\n            } else if current_note\
    \ == \".|\" {\n                result.append(1)\n            }\n            current_note\
    \ = \"\"\n        } else {\n            current_note += String(char)\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpw8u5kvf4/tmpw8u5kvf4.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b783b0e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b783add7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b783add7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b783add67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw8u5kvf4                        0x000055c03a11a86f <unavailable> + 6255

    5    libc.so.6                          0x00002b783b2cc460 __libc_start_main +
    245

    6    tmpw8u5kvf4                        0x000055c03a11a3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    |\")\n    var result = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            result.append(4)\n        } else if note == \"o\" {\n     \
    \       result.append(2)\n        } else if note == \".\" {\n            result.append(1)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpi6vkpscz.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let music_string_array = music_string.components(separatedBy:\
    \ \"|\")\n    for note in music_string_array {\n        if note == \"o\" {\n \
    \           result.append(4)\n        } else if note == \"o\" {\n            result.append(2)\n\
    \        } else if note == \".\" {\n            result.append(1)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpq6x7bifp.swift:11:43: error: value of type 'String' has no member\
    \ 'components'\n    let music_string_array = music_string.components(separatedBy:\
    \ \"|\")\n                             ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        } else {\n            music_string.removeFirst()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp5b6qd_dt/tmp5b6qd_dt.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08b4593c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08b428ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08b428a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08b42897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5b6qd_dt                        0x000055c99cfbc9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b08b477f460 __libc_start_main +
    245

    6    tmp5b6qd_dt                        0x000055c99cfbc289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        } else {\n            music_string.removeFirst()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpizkm3fvk/tmpizkm3fvk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b559c52dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b559c224b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b559c224988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b559c2237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpizkm3fvk                        0x000055fb27774a21 <unavailable> + 6689

    5    libc.so.6                          0x00002b559c719460 __libc_start_main +
    245

    6    tmpizkm3fvk                        0x000055fb277742d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    for char in music_string {\n\
    \        switch char {\n        case \"o\":\n            result.append(4)\n  \
    \      case \"o|\":\n            result.append(2)\n        case \".|\":\n    \
    \        result.append(1)\n        default:\n            break\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp0jhfndg7.swift:15:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n/tmp/tmp0jhfndg7.swift:17:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \".|\":\n            \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_beat = 0\n   \
    \ for char in music_string {\n        switch char {\n        case \"o\":\n   \
    \         current_beat += 4\n        case \"o|\":\n            current_beat +=\
    \ 2\n        case \".|\":\n            current_beat += 1\n        default:\n \
    \           result.append(current_beat)\n            current_beat = 0\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpsgsdvxvi.swift:16:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n/tmp/tmpsgsdvxvi.swift:18:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \".|\":\n            \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    |\")\n    var result = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            result.append(4)\n        } else if note == \"o\" {\n     \
    \       result.append(2)\n        } else if note == \".\" {\n            result.append(1)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpi6vkpscz.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            beats.append(4)\n        } else if note == \"o|\" {\n     \
    \       beats.append(2)\n        } else if note == \".|\" {\n            beats.append(1)\n\
    \        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp36ydcxuk.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.characters.count > 0 {\n        if music_string.hasPrefix(\"\
    o\") {\n            result.append(4)\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \        } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \        } else if music_string.hasPrefix(\".|\") {\n            result.append(1)\n\
    \            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \        } else {\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp3bab61st.swift:12:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    while music_string.characters.count > 0 {\n       \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp3bab61st.swift:15:41: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp3bab61st.swift:15:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmp3bab61st.swift:18:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp3bab61st.swift:18:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmp3bab61st.swift:21:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp3bab61st.swift:21:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmp3bab61st.swift:23:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.s"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            result.append(4)\n        } else if note == \"o|\" {\n    \
    \        result.append(2)\n        } else if note == \".|\" {\n            result.append(1)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpf73ot89m.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let music = music_string.characters.split(separator:\
    \ \" \").map(String.init)\n    var result = [Int]()\n    for note in music {\n\
    \        switch note {\n        case \"o\":\n            result.append(4)\n  \
    \      case \"o|\":\n            result.append(2)\n        case \".|\":\n    \
    \        result.append(1)\n        default:\n            break\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpm501y97k.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let music = music_string.characters.split(separator:\
    \ \" \").map(String.init)\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_string = \"\"\n\
    \    for char in music_string {\n        if char == \"|\" {\n            if current_string\
    \ == \"o\" {\n                result.append(4)\n            } else if current_string\
    \ == \"o\" {\n                result.append(2)\n            } else if current_string\
    \ == \".\" {\n                result.append(1)\n            }\n            current_string\
    \ = \"\"\n        } else {\n            current_string += String(char)\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpcpel1tay/tmpcpel1tay.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0bffeec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0bfce5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0bfce5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0bfce47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpel1tay                        0x00005560f406386f <unavailable> + 6255

    5    libc.so.6                          0x00002ac0c01da460 __libc_start_main +
    245

    6    tmpcpel1tay                        0x00005560f40633a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660013698
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let music_string_array = music_string.components(separatedBy:\
    \ \" \")\n    for note in music_string_array {\n        if note == \"o\" {\n \
    \           result.append(4)\n        } else if note == \"o|\" {\n           \
    \ result.append(2)\n        } else if note == \".|\" {\n            result.append(1)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpm5iglx52.swift:11:43: error: value of type 'String' has no member\
    \ 'components'\n    let music_string_array = music_string.components(separatedBy:\
    \ \" \")\n                             ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_beat = 0\n   \
    \ for char in music_string {\n        switch char {\n        case \"o\":\n   \
    \         result.append(current_beat)\n            current_beat = 0\n        case\
    \ \"|\":\n            current_beat += 1\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpnbt7xq0v/tmpnbt7xq0v.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26e04e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26e01dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26e01db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26e01da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnbt7xq0v                        0x000055788917676f <unavailable> + 5999

    5    libc.so.6                          0x00002b26e06d0460 __libc_start_main +
    245

    6    tmpnbt7xq0v                        0x00005578891762a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            result.append(4)\n        } else if note == \"o|\" {\n    \
    \        result.append(2)\n        } else if note == \".|\" {\n            result.append(1)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpf73ot89m.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var note: String = \"\"\n\
    \    for char in music_string {\n        if char == \"|\" {\n            switch\
    \ note {\n            case \"o\":\n                result.append(4)\n        \
    \    case \"o|\":\n                result.append(2)\n            case \".|\":\n\
    \                result.append(1)\n            default:\n                break\n\
    \            }\n            note = \"\"\n        } else {\n            note +=\
    \ String(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpkuipl8ip/tmpkuipl8ip.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5155d21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5155a18b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5155a18988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5155a177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkuipl8ip                        0x000055fd2951a81f <unavailable> + 6175

    5    libc.so.6                          0x00002b5155f0d460 __libc_start_main +
    245

    6    tmpkuipl8ip                        0x000055fd2951a359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013698
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        if note == \"o\" {\n            result.append(4)\n\
    \        } else if note == \"o|\" {\n            result.append(2)\n        } else\
    \ if note == \".|\" {\n            result.append(1)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpa1r6_0o2.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            result.append(4)\n        } else if note == \"o|\" {\n    \
    \        result.append(2)\n        } else if note == \".|\" {\n            result.append(1)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpf73ot89m.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmprgjr9ewu.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_beat = 0\n   \
    \ var current_note = \"\"\n    for char in music_string {\n        if char ==\
    \ \" \" {\n            if current_note == \"o\" {\n                result.append(4)\n\
    \            } else if current_note == \"o|\" {\n                result.append(2)\n\
    \            } else if current_note == \".|\" {\n                result.append(1)\n\
    \            }\n            current_note = \"\"\n        } else {\n          \
    \  current_note += String(char)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpcyx6hjnh/tmpcyx6hjnh.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07ad58ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07ad285b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07ad285988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07ad2847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcyx6hjnh                        0x000055fdd91c986f <unavailable> + 6255

    5    libc.so.6                          0x00002b07ad77a460 __libc_start_main +
    245

    6    tmpcyx6hjnh                        0x000055fdd91c93a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660013698
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_beat = 0\n   \
    \ var current_note = \"\"\n    for char in music_string {\n        if char ==\
    \ \"|\" {\n            if current_note == \"o\" {\n                result.append(4)\n\
    \            } else if current_note == \"o|\" {\n                result.append(2)\n\
    \            } else if current_note == \".|\" {\n                result.append(1)\n\
    \            }\n            current_note = \"\"\n        } else {\n          \
    \  current_note += String(char)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpbz4ilpp8/tmpbz4ilpp8.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b395d605c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b395d2fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b395d2fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b395d2fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbz4ilpp8                        0x000055c809a8c86f <unavailable> + 6255

    5    libc.so.6                          0x00002b395d7f1460 __libc_start_main +
    245

    6    tmpbz4ilpp8                        0x000055c809a8c3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660013698
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_beat = 0\n   \
    \ for character in music_string {\n        switch character {\n        case \"\
    o\":\n            result.append(current_beat)\n            current_beat = 0\n\
    \        case \"|\":\n            current_beat += 1\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpajd89ac3/tmpajd89ac3.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebe2518c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebe220fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebe220f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebe220e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajd89ac3                        0x000055d546da676f <unavailable> + 5999

    5    libc.so.6                          0x00002aebe2704460 __libc_start_main +
    245

    6    tmpajd89ac3                        0x000055d546da62a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    for char in music_string\
    \ {\n        switch char {\n        case \"o\":\n            result.append(4)\n\
    \        case \"o|\":\n            result.append(2)\n        case \".|\":\n  \
    \          result.append(1)\n        default:\n            continue\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpl8ok5msc.swift:15:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n/tmp/tmpl8ok5msc.swift:17:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \".|\":\n            \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let music_string_array = music_string.components(separatedBy:\
    \ \"|\")\n    for note in music_string_array {\n        if note == \"o\" {\n \
    \           result.append(4)\n        } else if note == \"o\" {\n            result.append(2)\n\
    \        } else if note == \".|\" {\n            result.append(1)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp4yexitvz.swift:11:43: error: value of type 'String' has no member\
    \ 'components'\n    let music_string_array = music_string.components(separatedBy:\
    \ \"|\")\n                             ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var beats = 0\n    for char\
    \ in music_string {\n        if char == \"o\" {\n            beats += 4\n    \
    \    } else if char == \"|\" {\n            result.append(beats)\n           \
    \ beats = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpxinzb92s/tmpxinzb92s.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75c7a31c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75c7728b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75c7728988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75c77277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxinzb92s                        0x0000562fa29d576f <unavailable> + 5999

    5    libc.so.6                          0x00002b75c7c1d460 __libc_start_main +
    245

    6    tmpxinzb92s                        0x0000562fa29d52a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_ba2i34i.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var music_string = music_string\n\
    \    while music_string.characters.count > 0 {\n        if music_string.hasPrefix(\"\
    o\") {\n            result.append(4)\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \        } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \        } else if music_string.hasPrefix(\".|\") {\n            result.append(1)\n\
    \            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \        } else {\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp79fcl6m7.swift:12:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    while music_string.characters.count > 0 {\n       \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp79fcl6m7.swift:15:41: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp79fcl6m7.swift:15:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmp79fcl6m7.swift:18:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp79fcl6m7.swift:18:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmp79fcl6m7.swift:21:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp79fcl6m7.swift:21:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmp79fcl6m7.swift:23:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.s"
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.split(separator: \" \")\n \
    \   var result: [Int] = []\n    for note in notes {\n        switch note {\n \
    \       case \"o\":\n            result.append(4)\n        case \"o|\":\n    \
    \        result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            result.append(0)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013698
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    return music_string.components(separatedBy: \" \").map\
    \ {\n        switch $0 {\n        case \"o\":\n            return 4\n        case\
    \ \"o|\":\n            return 2\n        case \".|\":\n            return 1\n\
    \        default:\n            return 0\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpqapr8gm9.swift:10:25: error: value of type 'String' has no member\
    \ 'components'\n    return music_string.components(separatedBy: \" \").map {\n\
    \           ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        if note == \"o\" {\n            result.append(4)\n\
    \        } else if note == \"o|\" {\n            result.append(2)\n        } else\
    \ if note == \".|\" {\n            result.append(1)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpa1r6_0o2.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            beats.append(4)\n        } else if note == \"o|\" {\n     \
    \       beats.append(2)\n        } else if note == \".|\" {\n            beats.append(1)\n\
    \        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp36ydcxuk.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        let index = music_string.index(music_string.startIndex,\
    \ offsetBy: 1)\n        let first_char = music_string[..<index]\n        if first_char\
    \ == \"o\" {\n            result.append(4)\n            music_string = String(music_string[index...])\n\
    \        } else if first_char == \".\" {\n            result.append(1)\n     \
    \       music_string = String(music_string[index...])\n        } else {\n    \
    \        result.append(2)\n            music_string = String(music_string[index...])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmprqkbq1ub/tmprqkbq1ub.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00a1e26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00a1b1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00a1b1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00a1b1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprqkbq1ub                        0x0000560ff371eb3f <unavailable> + 6975

    5    libc.so.6                          0x00002b00a2012460 __libc_start_main +
    245

    6    tmprqkbq1ub                        0x0000560ff371e679 <unavailable> + 5753

    '
  stdout: ''
  timestamp: 1660013698
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_note = \"\"\n\
    \    for char in music_string {\n        if char == \"|\" {\n            switch\
    \ current_note {\n            case \"o\":\n                result.append(4)\n\
    \            case \"o|\":\n                result.append(2)\n            case\
    \ \".|\":\n                result.append(1)\n            default:\n          \
    \      break\n            }\n            current_note = \"\"\n        } else {\n\
    \            current_note += String(char)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpjw0e3pwj/tmpjw0e3pwj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5fb145c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5fae3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5fae3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5fae3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjw0e3pwj                        0x000055d079eb386f <unavailable> + 6255

    5    libc.so.6                          0x00002ac5fb331460 __libc_start_main +
    245

    6    tmpjw0e3pwj                        0x000055d079eb33a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660013696
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_beat = 0\n   \
    \ for char in music_string {\n        if char == \"o\" {\n            result.append(4)\n\
    \            current_beat += 4\n        } else if char == \"|\" {\n          \
    \  result.append(current_beat)\n            current_beat = 0\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpsakaw4aw/tmpsakaw4aw.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0afda5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0afd752b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0afd752988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0afd7517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsakaw4aw                        0x000055585230f892 <unavailable> + 6290

    5    libc.so.6                          0x00002b0afdc47460 __libc_start_main +
    245

    6    tmpsakaw4aw                        0x000055585230f2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while !music_string.isEmpty {\n        if music_string.hasPrefix(\"o\") {\n\
    \            result.append(4)\n            music_string.removeFirst()\n      \
    \  } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        } else {\n            music_string.removeFirst()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpw2myw7c4/tmpw2myw7c4.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9ab6d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9ab3c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9ab3c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9ab3c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2myw7c4                        0x000055a7986c0a21 <unavailable> + 6689

    5    libc.so.6                          0x00002af9ab8bc460 __libc_start_main +
    245

    6    tmpw2myw7c4                        0x000055a7986c02d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            result.append(4)\n        } else if note == \"o|\" {\n    \
    \        result.append(2)\n        } else if note == \".|\" {\n            result.append(1)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpf73ot89m.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var music_string = music_string\n\
    \    while music_string.characters.count > 0 {\n        if music_string.hasPrefix(\"\
    o\") {\n            result.append(4)\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \        } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \        } else if music_string.hasPrefix(\".|\") {\n            result.append(1)\n\
    \            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \        } else {\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp79fcl6m7.swift:12:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    while music_string.characters.count > 0 {\n       \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp79fcl6m7.swift:15:41: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp79fcl6m7.swift:15:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmp79fcl6m7.swift:18:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp79fcl6m7.swift:18:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmp79fcl6m7.swift:21:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp79fcl6m7.swift:21:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmp79fcl6m7.swift:23:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.s"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.split(separator: \" \")\n \
    \   var beats = [Int]()\n    for note in notes {\n        if note.contains(\"\
    o\") {\n            beats.append(4)\n        } else if note.contains(\"o|\") {\n\
    \            beats.append(2)\n        } else if note.contains(\".|\") {\n    \
    \        beats.append(1)\n        }\n    }\n    return beats\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b84f9583c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84f927a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b84f927a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b84f927a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b84f9279bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b84f93d4e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b84f93d985c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b84f92a6920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b84f8f61b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b84f8f60b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b84f8f61ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b84f8f4742d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b84f8f45840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b84f8f45e70 StringProtocol.contains(_:)
    + 64

    14   tmp6ldqo3hb                        0x000055843449b261 <unavailable> + 8801

    15   tmp6ldqo3hb                        0x000055843449aacb <unavailable> + 6859

    16   libc.so.6                          0x00002b84f976f460 __libc_start_main +
    245

    17   tmp6ldqo3hb                        0x000055843449a5d9 <unavailable> + 5593

    '
  stdout: ''
  timestamp: 1660013698
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmprgjr9ewu.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmprgjr9ewu.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let beats = music_string.components(separatedBy: \"\
    |\")\n    var result = [Int]()\n    for beat in beats {\n        if beat.contains(\"\
    o\") {\n            result.append(4)\n        } else {\n            result.append(2)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8_0ksv92.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let beats = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_beat = 0\n   \
    \ for char in music_string {\n        if char == \"o\" {\n            result.append(4)\n\
    \            current_beat += 4\n        } else if char == \"|\" {\n          \
    \  result.append(current_beat)\n            current_beat = 0\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpsakaw4aw/tmpsakaw4aw.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0afda5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0afd752b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0afd752988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0afd7517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsakaw4aw                        0x000055585230f892 <unavailable> + 6290

    5    libc.so.6                          0x00002b0afdc47460 __libc_start_main +
    245

    6    tmpsakaw4aw                        0x000055585230f2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var currentBeat = 0\n    for\
    \ char in music_string {\n        if char == \"o\" {\n            result.append(4\
    \ - currentBeat)\n            currentBeat = 0\n        } else if char == \"|\"\
    \ {\n            currentBeat += 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpk_69t8h5/tmpk_69t8h5.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b253bcd2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b253b9c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b253b9c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b253b9c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk_69t8h5                        0x0000563607eae892 <unavailable> + 6290

    5    libc.so.6                          0x00002b253bebe460 __libc_start_main +
    245

    6    tmpk_69t8h5                        0x0000563607eae2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013698
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while !music_string.isEmpty {\n        let index = music_string.index(music_string.startIndex,\
    \ offsetBy: 1)\n        let first_char = music_string.substring(to: index)\n \
    \       switch first_char {\n        case \"o\":\n            result.append(4)\n\
    \            music_string = music_string.substring(from: index)\n        case\
    \ \"o|\":\n            result.append(2)\n            music_string = music_string.substring(from:\
    \ index)\n        case \".|\":\n            result.append(1)\n            music_string\
    \ = music_string.substring(from: index)\n        default:\n            music_string\
    \ = music_string.substring(from: index)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpto4fh_cq.swift:14:39: error: value of type 'String' has no member\
    \ 'substring'\n        let first_char = music_string.substring(to: index)\n  \
    \                       ~~~~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpto4fh_cq.swift:18:41:\
    \ error: value of type 'String' has no member 'substring'\n            music_string\
    \ = music_string.substring(from: index)\n                           ~~~~~~~~~~~~\
    \ ^~~~~~~~~\n/tmp/tmpto4fh_cq.swift:21:41: error: value of type 'String' has no\
    \ member 'substring'\n            music_string = music_string.substring(from:\
    \ index)\n                           ~~~~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpto4fh_cq.swift:24:41:\
    \ error: value of type 'String' has no member 'substring'\n            music_string\
    \ = music_string.substring(from: index)\n                           ~~~~~~~~~~~~\
    \ ^~~~~~~~~\n/tmp/tmpto4fh_cq.swift:26:41: error: value of type 'String' has no\
    \ member 'substring'\n            music_string = music_string.substring(from:\
    \ index)\n                           ~~~~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    |\")\n    var beats = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            beats.append(4)\n        } else if note == \"o\" {\n      \
    \      beats.append(2)\n        } else if note == \".\" {\n            beats.append(1)\n\
    \        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpv0j0q6sy.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.characters.split(separator:\
    \ \" \").map(String.init)\n    return notes.map { note in\n        switch note\
    \ {\n        case \"o\":\n            return 4\n        case \"o|\":\n       \
    \     return 2\n        case \".|\":\n            return 1\n        default:\n\
    \            return 0\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp853rlyq5.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let notes = music_string.characters.split(separator:\
    \ \" \").map(String.init)\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013698
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            beats.append(4)\n        } else if note == \"o|\" {\n     \
    \       beats.append(2)\n        } else if note == \".|\" {\n            beats.append(1)\n\
    \        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp36ydcxuk.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            beats.append(4)\n        } else if note == \"o|\" {\n     \
    \       beats.append(2)\n        } else if note == \".|\" {\n            beats.append(1)\n\
    \        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp36ydcxuk.swift:10:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var current_note = \"\"\n\
    \    for char in music_string {\n        if char == \"|\" {\n            if current_note\
    \ == \"o\" {\n                result.append(4)\n            } else if current_note\
    \ == \"o|\" {\n                result.append(2)\n            } else if current_note\
    \ == \".|\" {\n                result.append(1)\n            }\n            current_note\
    \ = \"\"\n        } else {\n            current_note += String(char)\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpgdbt3v4f/tmpgdbt3v4f.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41bbef4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41bbbebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41bbbeb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41bbbea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgdbt3v4f                        0x00005654325f681f <unavailable> + 6175

    5    libc.so.6                          0x00002b41bc0e0460 __libc_start_main +
    245

    6    tmpgdbt3v4f                        0x00005654325f6359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013698
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_beat = 0\n   \
    \ for char in music_string {\n        switch char {\n        case \"o\":\n   \
    \         current_beat += 4\n        case \"o|\":\n            current_beat +=\
    \ 2\n        case \".|\":\n            current_beat += 1\n        default:\n \
    \           result.append(current_beat)\n            current_beat = 0\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpsgsdvxvi.swift:16:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n/tmp/tmpsgsdvxvi.swift:18:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \".|\":\n            \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \"|\")\n    for note in notes {\n        if note == \"o\" {\n            result.append(4)\n\
    \        } else if note == \"o\" {\n            result.append(2)\n        } else\
    \ if note == \".\" {\n            result.append(1)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp4nhyjo8n.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        let index = music_string.index(of:\
    \ \"|\") ?? music_string.endIndex\n        let note = music_string[..<index]\n\
    \        if note == \"o\" {\n            result.append(4)\n        } else if note\
    \ == \"o|\" {\n            result.append(2)\n        } else if note == \".|\"\
    \ {\n            result.append(1)\n        }\n        music_string = String(music_string[index...])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp3_u005u1/tmp3_u005u1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b889fb54c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b889f84bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b889f84b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b889f84a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_u005u1                        0x000055e4b931ac1f <unavailable> + 7199

    5    libc.so.6                          0x00002b889fd40460 __libc_start_main +
    245

    6    tmp3_u005u1                        0x000055e4b931a759 <unavailable> + 5977

    '
  stdout: ''
  timestamp: 1660013698
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var music_string = music_string\n\
    \    while !music_string.isEmpty {\n        if music_string.hasPrefix(\"o\") {\n\
    \            result.append(4)\n            music_string.removeFirst()\n      \
    \  } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        } else {\n            music_string.removeFirst()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpzny2rtjb/tmpzny2rtjb.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab19db64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab19d85bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab19d85b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab19d85a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzny2rtjb                        0x0000561ef84509d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ab19dd50460 __libc_start_main +
    245

    6    tmpzny2rtjb                        0x0000561ef8450289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013698
