language: swift
name: HumanEval_161_solve
results:
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpyxznp6ll/tmpyxznp6ll.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3014c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3011b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3011b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3011b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxznp6ll                        0x0000556d2f6d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba3016ad460 __libc_start_main +
    245

    6    tmpyxznp6ll                        0x0000556d2f6d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpyxznp6ll/tmpyxznp6ll.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3014c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3011b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3011b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3011b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxznp6ll                        0x0000556d2f6d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba3016ad460 __libc_start_main +
    245

    6    tmpyxznp6ll                        0x0000556d2f6d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpt2xy3dyl/tmpt2xy3dyl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d473dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d470d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d470d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d470d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2xy3dyl                        0x000055ec2833b8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b1d475ca460 __libc_start_main +
    245

    6    tmpt2xy3dyl                        0x000055ec2833b429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpt2xy3dyl/tmpt2xy3dyl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d473dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d470d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d470d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d470d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2xy3dyl                        0x000055ec2833b8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b1d475ca460 __libc_start_main +
    245

    6    tmpt2xy3dyl                        0x000055ec2833b429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    if s.rangeOfCharacter(from: CharacterSet.letters)\
    \ == nil {\n        result = String(s.reversed())\n    } else {\n        for char\
    \ in s {\n            if char.isLetter {\n                result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n            } else {\n           \
    \     result += String(char)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpyna7y5f5.swift:10:33: error: cannot find 'CharacterSet' in scope\n\
    \    if s.rangeOfCharacter(from: CharacterSet.letters) == nil {\n            \
    \                    ^~~~~~~~~~~~\n/tmp/tmpyna7y5f5.swift:10:10: error: value\
    \ of type 'String' has no member 'rangeOfCharacter'\n    if s.rangeOfCharacter(from:\
    \ CharacterSet.letters) == nil {\n       ~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty {\n      \
    \  return String(s.reversed())\n    }\n    return String(s.map { $0.isLetter ?\
    \ $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) : $0\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\"\
    )\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\n\
    assert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\"\
    )\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\"\
    )\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ {\n            result.append(c)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4uti60xe/tmp4uti60xe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a50c20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a50917b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a50917988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a509167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uti60xe                        0x00005622aabf28d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b8a50e0c460 __libc_start_main +
    245

    6    tmp4uti60xe                        0x00005622aabf2429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4wgmr0pi/tmp4wgmr0pi.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22c5301c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22c4ff8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22c4ff8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22c4ff77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wgmr0pi                        0x0000559919c296b7 <unavailable> + 5815

    5    libc.so.6                          0x00002b22c54ed460 __libc_start_main +
    245

    6    tmp4wgmr0pi                        0x0000559919c29209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    if s.isEmpty {\n        return s\n    }\n    var result = \"\"\n    for char\
    \ in s {\n        if char.isLetter {\n            result.append(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: Exception
  stderr: 'tmp5orrp6rq/tmp5orrp6rq.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1331f02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1331bf9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1331bf9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1331bf87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5orrp6rq                        0x000055e05c2a0707 <unavailable> + 5895

    5    libc.so.6                          0x00002b13320ee460 __libc_start_main +
    245

    6    tmp5orrp6rq                        0x000055e05c2a0259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? s : result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: Exception
  stderr: 'tmpovanbu_s/tmpovanbu_s.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b675c4acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b675c1a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b675c1a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b675c1a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovanbu_s                        0x00005650709bd707 <unavailable> + 5895

    5    libc.so.6                          0x00002b675c698460 __libc_start_main +
    245

    6    tmpovanbu_s                        0x00005650709bd259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    return s.isEmpty ? \"\" : String(s.map { $0.isLetter ? $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() : $0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpmdqshs1t.swift:9:73: error: result values in '? :' expression have\
    \ mismatching types 'String' and 'String.Element' (aka 'Character')\n    return\
    \ s.isEmpty ? \"\" : String(s.map { $0.isLetter ? $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() : $0 })\n                                                \
    \         ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    if s.isEmpty {\n        return \"\"\n    }\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: Exception
  stderr: 'tmp771905gn/tmp771905gn.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acdb68efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acdb65e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acdb65e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acdb65e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp771905gn                        0x00005604d3901707 <unavailable> + 5895

    5    libc.so.6                          0x00002acdb6adb460 __libc_start_main +
    245

    6    tmp771905gn                        0x00005604d3901259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ {\n            result.append(c)\n        }\n    }\n    return result.isEmpty\
    \ ? s.reversed() : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpfa7k3ds2.swift:17:27: error: cannot convert return expression of\
    \ type 'ReversedCollection<String>' to return type 'String'\n    return result.isEmpty\
    \ ? s.reversed() : result\n           ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty {\n      \
    \  return String(s.reversed())\n    }\n    return String(s.map { $0.isLetter ?\
    \ $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) : $0\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\"\
    )\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\n\
    assert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\"\
    )\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\"\
    )\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpt2xy3dyl/tmpt2xy3dyl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d473dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d470d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d470d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d470d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2xy3dyl                        0x000055ec2833b8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b1d475ca460 __libc_start_main +
    245

    6    tmpt2xy3dyl                        0x000055ec2833b429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    return s.isEmpty ? s : String(s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased())\
    \ : Character($0.uppercased()) : $0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: Exception
  stderr: 'tmp47aaza83/tmp47aaza83.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b128f67fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b128f376b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b128f376988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b128f3757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp47aaza83                        0x00005632db67d767 <unavailable> + 5991

    5    libc.so.6                          0x00002b128f86b460 __libc_start_main +
    245

    6    tmp47aaza83                        0x00005632db67d2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty {\n      \
    \  return String(s.reversed())\n    }\n    return String(s.map { $0.isLetter ?\
    \ $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) : $0\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\"\
    )\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\n\
    assert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\"\
    )\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\"\
    )\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? s : result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: Exception
  stderr: 'tmpovanbu_s/tmpovanbu_s.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b675c4acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b675c1a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b675c1a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b675c1a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovanbu_s                        0x00005650709bd707 <unavailable> + 5895

    5    libc.so.6                          0x00002b675c698460 __libc_start_main +
    245

    6    tmpovanbu_s                        0x00005650709bd259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? s : result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: Exception
  stderr: 'tmpovanbu_s/tmpovanbu_s.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b675c4acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b675c1a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b675c1a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b675c1a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovanbu_s                        0x00005650709bd707 <unavailable> + 5895

    5    libc.so.6                          0x00002b675c698460 __libc_start_main +
    245

    6    tmpovanbu_s                        0x00005650709bd259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpyxznp6ll/tmpyxznp6ll.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3014c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3011b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3011b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3011b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxznp6ll                        0x0000556d2f6d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba3016ad460 __libc_start_main +
    245

    6    tmpyxznp6ll                        0x0000556d2f6d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty {\n      \
    \  return String(s.reversed())\n    }\n    return s.map { $0.isLetter ? $0.isUppercase\
    \ ? Character($0.lowercased()) : Character($0.uppercased()) : $0 }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpht7xduw4.swift:13:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    return s.isEmpty ? \"\" : String(s.map { $0.isLetter ? $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() : $0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpmdqshs1t.swift:9:73: error: result values in '? :' expression have\
    \ mismatching types 'String' and 'String.Element' (aka 'Character')\n    return\
    \ s.isEmpty ? \"\" : String(s.map { $0.isLetter ? $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() : $0 })\n                                                \
    \         ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty {\n      \
    \  return String(s.reversed())\n    }\n    return s.map { $0.isLetter ? $0.isUppercase\
    \ ? Character($0.lowercased()) : Character($0.uppercased()) : $0 }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpht7xduw4.swift:13:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpyxznp6ll/tmpyxznp6ll.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3014c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3011b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3011b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3011b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxznp6ll                        0x0000556d2f6d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba3016ad460 __libc_start_main +
    245

    6    tmpyxznp6ll                        0x0000556d2f6d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? s : result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: Exception
  stderr: 'tmpovanbu_s/tmpovanbu_s.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b675c4acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b675c1a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b675c1a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b675c1a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovanbu_s                        0x00005650709bd707 <unavailable> + 5895

    5    libc.so.6                          0x00002b675c698460 __libc_start_main +
    245

    6    tmpovanbu_s                        0x00005650709bd259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpt2xy3dyl/tmpt2xy3dyl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d473dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d470d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d470d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d470d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2xy3dyl                        0x000055ec2833b8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b1d475ca460 __libc_start_main +
    245

    6    tmpt2xy3dyl                        0x000055ec2833b429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpt2xy3dyl/tmpt2xy3dyl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d473dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d470d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d470d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d470d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2xy3dyl                        0x000055ec2833b8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b1d475ca460 __libc_start_main +
    245

    6    tmpt2xy3dyl                        0x000055ec2833b429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    if s.isEmpty {\n        return \"\"\n    }\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isUppercase ?\
    \ c.lowercased() : c.uppercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: Exception
  stderr: 'tmpuhpg7_40/tmpuhpg7_40.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac19e495c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac19e18cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac19e18c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac19e18b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuhpg7_40                        0x000055bbfbda5707 <unavailable> + 5895

    5    libc.so.6                          0x00002ac19e681460 __libc_start_main +
    245

    6    tmpuhpg7_40                        0x000055bbfbda5259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpt2xy3dyl/tmpt2xy3dyl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d473dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d470d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d470d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d470d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2xy3dyl                        0x000055ec2833b8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b1d475ca460 __libc_start_main +
    245

    6    tmpt2xy3dyl                        0x000055ec2833b429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpt2xy3dyl/tmpt2xy3dyl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d473dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d470d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d470d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d470d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2xy3dyl                        0x000055ec2833b8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b1d475ca460 __libc_start_main +
    245

    6    tmpt2xy3dyl                        0x000055ec2833b429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty {\n      \
    \  return String(s.reversed())\n    }\n    return s.map { $0.isLetter ? $0.isUppercase\
    \ ? Character($0.lowercased()) : Character($0.uppercased()) : $0 }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpht7xduw4.swift:13:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? s.reversed() : result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp45_p2cx3.swift:17:27: error: cannot convert return expression of\
    \ type 'ReversedCollection<String>' to return type 'String'\n    return result.isEmpty\
    \ ? s.reversed() : result\n           ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4wgmr0pi/tmp4wgmr0pi.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22c5301c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22c4ff8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22c4ff8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22c4ff77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wgmr0pi                        0x0000559919c296b7 <unavailable> + 5815

    5    libc.so.6                          0x00002b22c54ed460 __libc_start_main +
    245

    6    tmp4wgmr0pi                        0x0000559919c29209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpyxznp6ll/tmpyxznp6ll.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3014c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3011b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3011b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3011b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxznp6ll                        0x0000556d2f6d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba3016ad460 __libc_start_main +
    245

    6    tmpyxznp6ll                        0x0000556d2f6d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    return s.isEmpty ? s : s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased())\
    \ : Character($0.uppercased()) : $0 }.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp7lyymtz6.swift:9:48: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to closure result type 'String'\n    return s.isEmpty ? s\
    \ : s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased())\
    \ : $0 }.reduce(\"\", +)\n                                   ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ {\n            result.append(c)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4uti60xe/tmp4uti60xe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a50c20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a50917b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a50917988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a509167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uti60xe                        0x00005622aabf28d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b8a50e0c460 __libc_start_main +
    245

    6    tmp4uti60xe                        0x00005622aabf2429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ {\n            result.append(c)\n        }\n    }\n    return result.isEmpty\
    \ ? s.reversed() : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpfa7k3ds2.swift:17:27: error: cannot convert return expression of\
    \ type 'ReversedCollection<String>' to return type 'String'\n    return result.isEmpty\
    \ ? s.reversed() : result\n           ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4wgmr0pi/tmp4wgmr0pi.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22c5301c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22c4ff8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22c4ff8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22c4ff77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wgmr0pi                        0x0000559919c296b7 <unavailable> + 5815

    5    libc.so.6                          0x00002b22c54ed460 __libc_start_main +
    245

    6    tmp4wgmr0pi                        0x0000559919c29209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    if s.isEmpty {\n        return s\n    }\n    var result = \"\"\n    for char\
    \ in s {\n        if char.isLetter {\n            result.append(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: Exception
  stderr: 'tmp5orrp6rq/tmp5orrp6rq.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1331f02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1331bf9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1331bf9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1331bf87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5orrp6rq                        0x000055e05c2a0707 <unavailable> + 5895

    5    libc.so.6                          0x00002b13320ee460 __libc_start_main +
    245

    6    tmp5orrp6rq                        0x000055e05c2a0259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    if s.isEmpty {\n        return s\n    }\n    var result = \"\"\n    for c\
    \ in s {\n        if c.isLetter {\n            result.append(c.isUppercase ? c.lowercased()\
    \ : c.uppercased())\n        } else {\n            result.append(c)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4aoxhosi/tmp4aoxhosi.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b747d9b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b747d6a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b747d6a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b747d6a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4aoxhosi                        0x000055ea81730707 <unavailable> + 5895

    5    libc.so.6                          0x00002b747db9c460 __libc_start_main +
    245

    6    tmp4aoxhosi                        0x000055ea81730259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4wgmr0pi/tmp4wgmr0pi.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22c5301c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22c4ff8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22c4ff8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22c4ff77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wgmr0pi                        0x0000559919c296b7 <unavailable> + 5815

    5    libc.so.6                          0x00002b22c54ed460 __libc_start_main +
    245

    6    tmp4wgmr0pi                        0x0000559919c29209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var str = \"\"\n    for c in s {\n        if c.isLetter {\n            str.append(c.isUppercase\
    \ ? c.lowercased() : c.uppercased())\n        } else {\n            str.append(c)\n\
    \        }\n    }\n    return str.isEmpty ? String(s.reversed()) : str\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpk7ypj_s7/tmpk7ypj_s7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b213eca8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b213e99fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b213e99f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b213e99e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk7ypj_s7                        0x0000556353e258d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b213ee94460 __libc_start_main +
    245

    6    tmpk7ypj_s7                        0x0000556353e25429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpyxznp6ll/tmpyxznp6ll.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3014c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3011b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3011b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3011b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxznp6ll                        0x0000556d2f6d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba3016ad460 __libc_start_main +
    245

    6    tmpyxznp6ll                        0x0000556d2f6d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ {\n            result.append(c)\n        }\n    }\n    return result.isEmpty\
    \ ? s.reversed() : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpfa7k3ds2.swift:17:27: error: cannot convert return expression of\
    \ type 'ReversedCollection<String>' to return type 'String'\n    return result.isEmpty\
    \ ? s.reversed() : result\n           ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? s : result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: Exception
  stderr: 'tmpovanbu_s/tmpovanbu_s.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b675c4acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b675c1a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b675c1a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b675c1a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovanbu_s                        0x00005650709bd707 <unavailable> + 5895

    5    libc.so.6                          0x00002b675c698460 __libc_start_main +
    245

    6    tmpovanbu_s                        0x00005650709bd259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ {\n            result.append(c)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4uti60xe/tmp4uti60xe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a50c20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a50917b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a50917988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a509167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uti60xe                        0x00005622aabf28d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b8a50e0c460 __libc_start_main +
    245

    6    tmp4uti60xe                        0x00005622aabf2429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpt2xy3dyl/tmpt2xy3dyl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d473dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d470d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d470d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d470d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2xy3dyl                        0x000055ec2833b8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b1d475ca460 __libc_start_main +
    245

    6    tmpt2xy3dyl                        0x000055ec2833b429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ {\n            result.append(c)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4uti60xe/tmp4uti60xe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a50c20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a50917b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a50917988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a509167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uti60xe                        0x00005622aabf28d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b8a50e0c460 __libc_start_main +
    245

    6    tmp4uti60xe                        0x00005622aabf2429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpyxznp6ll/tmpyxznp6ll.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3014c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3011b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3011b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3011b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxznp6ll                        0x0000556d2f6d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba3016ad460 __libc_start_main +
    245

    6    tmpyxznp6ll                        0x0000556d2f6d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? s : result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: Exception
  stderr: 'tmpovanbu_s/tmpovanbu_s.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b675c4acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b675c1a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b675c1a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b675c1a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovanbu_s                        0x00005650709bd707 <unavailable> + 5895

    5    libc.so.6                          0x00002b675c698460 __libc_start_main +
    245

    6    tmpovanbu_s                        0x00005650709bd259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? s : result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: Exception
  stderr: 'tmpovanbu_s/tmpovanbu_s.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b675c4acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b675c1a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b675c1a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b675c1a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovanbu_s                        0x00005650709bd707 <unavailable> + 5895

    5    libc.so.6                          0x00002b675c698460 __libc_start_main +
    245

    6    tmpovanbu_s                        0x00005650709bd259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? s : result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: Exception
  stderr: 'tmpovanbu_s/tmpovanbu_s.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b675c4acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b675c1a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b675c1a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b675c1a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovanbu_s                        0x00005650709bd707 <unavailable> + 5895

    5    libc.so.6                          0x00002b675c698460 __libc_start_main +
    245

    6    tmpovanbu_s                        0x00005650709bd259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? s.reversed() : result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp45_p2cx3.swift:17:27: error: cannot convert return expression of\
    \ type 'ReversedCollection<String>' to return type 'String'\n    return result.isEmpty\
    \ ? s.reversed() : result\n           ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ {\n            result.append(c)\n        }\n    }\n    return result.isEmpty\
    \ ? s.reversed() : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpfa7k3ds2.swift:17:27: error: cannot convert return expression of\
    \ type 'ReversedCollection<String>' to return type 'String'\n    return result.isEmpty\
    \ ? s.reversed() : result\n           ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ {\n            result.append(c)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4uti60xe/tmp4uti60xe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a50c20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a50917b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a50917988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a509167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uti60xe                        0x00005622aabf28d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b8a50e0c460 __libc_start_main +
    245

    6    tmp4uti60xe                        0x00005622aabf2429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? s : result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: Exception
  stderr: 'tmpovanbu_s/tmpovanbu_s.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b675c4acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b675c1a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b675c1a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b675c1a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovanbu_s                        0x00005650709bd707 <unavailable> + 5895

    5    libc.so.6                          0x00002b675c698460 __libc_start_main +
    245

    6    tmpovanbu_s                        0x00005650709bd259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ {\n            result.append(c)\n        }\n    }\n    return result.isEmpty\
    \ ? s.reversed() : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpfa7k3ds2.swift:17:27: error: cannot convert return expression of\
    \ type 'ReversedCollection<String>' to return type 'String'\n    return result.isEmpty\
    \ ? s.reversed() : result\n           ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpt2xy3dyl/tmpt2xy3dyl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d473dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d470d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d470d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d470d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2xy3dyl                        0x000055ec2833b8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b1d475ca460 __libc_start_main +
    245

    6    tmpt2xy3dyl                        0x000055ec2833b429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty {\n      \
    \  return String(s.reversed())\n    }\n    return s.map { $0.isLetter ? $0.isUppercase\
    \ ? Character($0.lowercased()) : Character($0.uppercased()) : $0 }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpht7xduw4.swift:13:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ {\n            result.append(c)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4uti60xe/tmp4uti60xe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a50c20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a50917b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a50917988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a509167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uti60xe                        0x00005622aabf28d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b8a50e0c460 __libc_start_main +
    245

    6    tmp4uti60xe                        0x00005622aabf2429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ {\n            result.append(c)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4uti60xe/tmp4uti60xe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a50c20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a50917b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a50917988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a509167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uti60xe                        0x00005622aabf28d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b8a50e0c460 __libc_start_main +
    245

    6    tmp4uti60xe                        0x00005622aabf2429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpyxznp6ll/tmpyxznp6ll.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3014c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3011b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3011b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3011b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxznp6ll                        0x0000556d2f6d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba3016ad460 __libc_start_main +
    245

    6    tmpyxznp6ll                        0x0000556d2f6d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    if s.isEmpty {\n        return s\n    }\n    var result = \"\"\n    for c\
    \ in s {\n        if c.isLetter {\n            result.append(c.isUppercase ? c.lowercased()\
    \ : c.uppercased())\n        } else {\n            result.append(c)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4aoxhosi/tmp4aoxhosi.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b747d9b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b747d6a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b747d6a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b747d6a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4aoxhosi                        0x000055ea81730707 <unavailable> + 5895

    5    libc.so.6                          0x00002b747db9c460 __libc_start_main +
    245

    6    tmp4aoxhosi                        0x000055ea81730259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? s : result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: Exception
  stderr: 'tmpovanbu_s/tmpovanbu_s.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b675c4acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b675c1a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b675c1a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b675c1a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovanbu_s                        0x00005650709bd707 <unavailable> + 5895

    5    libc.so.6                          0x00002b675c698460 __libc_start_main +
    245

    6    tmpovanbu_s                        0x00005650709bd259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? s : result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: Exception
  stderr: 'tmpovanbu_s/tmpovanbu_s.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b675c4acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b675c1a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b675c1a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b675c1a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovanbu_s                        0x00005650709bd707 <unavailable> + 5895

    5    libc.so.6                          0x00002b675c698460 __libc_start_main +
    245

    6    tmpovanbu_s                        0x00005650709bd259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    if s.isEmpty {\n        return \"\"\n    }\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: Exception
  stderr: 'tmp771905gn/tmp771905gn.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acdb68efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acdb65e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acdb65e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acdb65e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp771905gn                        0x00005604d3901707 <unavailable> + 5895

    5    libc.so.6                          0x00002acdb6adb460 __libc_start_main +
    245

    6    tmp771905gn                        0x00005604d3901259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpt2xy3dyl/tmpt2xy3dyl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d473dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d470d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d470d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d470d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2xy3dyl                        0x000055ec2833b8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b1d475ca460 __libc_start_main +
    245

    6    tmpt2xy3dyl                        0x000055ec2833b429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? s : result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: Exception
  stderr: 'tmpovanbu_s/tmpovanbu_s.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b675c4acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b675c1a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b675c1a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b675c1a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovanbu_s                        0x00005650709bd707 <unavailable> + 5895

    5    libc.so.6                          0x00002b675c698460 __libc_start_main +
    245

    6    tmpovanbu_s                        0x00005650709bd259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpyxznp6ll/tmpyxznp6ll.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3014c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3011b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3011b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3011b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxznp6ll                        0x0000556d2f6d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba3016ad460 __libc_start_main +
    245

    6    tmpyxznp6ll                        0x0000556d2f6d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? s.reversed() : result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpralo4xq_.swift:17:27: error: cannot convert return expression of\
    \ type 'ReversedCollection<String>' to return type 'String'\n    return result.isEmpty\
    \ ? s.reversed() : result\n           ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpt2xy3dyl/tmpt2xy3dyl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d473dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d470d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d470d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d470d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2xy3dyl                        0x000055ec2833b8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b1d475ca460 __libc_start_main +
    245

    6    tmpt2xy3dyl                        0x000055ec2833b429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty {\n      \
    \  return String(s.reversed())\n    }\n    return s.map { $0.isLetter ? $0.isUppercase\
    \ ? Character($0.lowercased()) : Character($0.uppercased()) : $0 }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpht7xduw4.swift:13:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpyxznp6ll/tmpyxznp6ll.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3014c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3011b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3011b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3011b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxznp6ll                        0x0000556d2f6d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba3016ad460 __libc_start_main +
    245

    6    tmpyxznp6ll                        0x0000556d2f6d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ {\n            result.append(c)\n        }\n    }\n    return result.isEmpty\
    \ ? s.reversed() : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpfa7k3ds2.swift:17:27: error: cannot convert return expression of\
    \ type 'ReversedCollection<String>' to return type 'String'\n    return result.isEmpty\
    \ ? s.reversed() : result\n           ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ {\n            result.append(c)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4uti60xe/tmp4uti60xe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a50c20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a50917b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a50917988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a509167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uti60xe                        0x00005622aabf28d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b8a50e0c460 __libc_start_main +
    245

    6    tmp4uti60xe                        0x00005622aabf2429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ {\n            result.append(c)\n        }\n    }\n    return result.isEmpty\
    \ ? s.reversed() : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpfa7k3ds2.swift:17:27: error: cannot convert return expression of\
    \ type 'ReversedCollection<String>' to return type 'String'\n    return result.isEmpty\
    \ ? s.reversed() : result\n           ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    let str = s.map { $0.isLetter ? $0.isUppercase ? $0.lowercased() : $0.uppercased()\
    \ : $0 }\n    return str.contains(where: { $0.isLetter }) ? String(str) : String(str.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpegf_cpk3.swift:9:52: error: result values in '? :' expression have\
    \ mismatching types 'String' and 'String.Element' (aka 'Character')\n    let str\
    \ = s.map { $0.isLetter ? $0.isUppercase ? $0.lowercased() : $0.uppercased() :\
    \ $0 }\n                                    ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty {\n      \
    \  return String(s.reversed())\n    }\n    return s.map { $0.isLetter ? $0.isUppercase\
    \ ? Character($0.lowercased()) : Character($0.uppercased()) : $0 }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpht7xduw4.swift:13:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ {\n            result.append(c)\n        }\n    }\n    return result.isEmpty\
    \ ? s.reversed() : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpfa7k3ds2.swift:17:27: error: cannot convert return expression of\
    \ type 'ReversedCollection<String>' to return type 'String'\n    return result.isEmpty\
    \ ? s.reversed() : result\n           ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? s : result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: Exception
  stderr: 'tmpovanbu_s/tmpovanbu_s.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b675c4acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b675c1a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b675c1a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b675c1a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovanbu_s                        0x00005650709bd707 <unavailable> + 5895

    5    libc.so.6                          0x00002b675c698460 __libc_start_main +
    245

    6    tmpovanbu_s                        0x00005650709bd259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    if s.isEmpty {\n        return s\n    }\n    var result = \"\"\n    for char\
    \ in s {\n        if char.isLetter {\n            result.append(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: Exception
  stderr: 'tmp5orrp6rq/tmp5orrp6rq.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1331f02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1331bf9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1331bf9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1331bf87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5orrp6rq                        0x000055e05c2a0707 <unavailable> + 5895

    5    libc.so.6                          0x00002b13320ee460 __libc_start_main +
    245

    6    tmp5orrp6rq                        0x000055e05c2a0259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ {\n            result.append(c)\n        }\n    }\n    return result.isEmpty\
    \ ? s.reversed() : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpfa7k3ds2.swift:17:27: error: cannot convert return expression of\
    \ type 'ReversedCollection<String>' to return type 'String'\n    return result.isEmpty\
    \ ? s.reversed() : result\n           ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpyxznp6ll/tmpyxznp6ll.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3014c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3011b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3011b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3011b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxznp6ll                        0x0000556d2f6d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba3016ad460 __libc_start_main +
    245

    6    tmpyxznp6ll                        0x0000556d2f6d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp83kbiroh/tmp83kbiroh.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c9b9d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c9b6cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c9b6cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c9b6ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp83kbiroh                        0x000055b0b635e657 <unavailable> + 5719

    5    libc.so.6                          0x00002b8c9bbc0460 __libc_start_main +
    245

    6    tmp83kbiroh                        0x000055b0b635e299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ {\n            result.append(c)\n        }\n    }\n    return result.isEmpty\
    \ ? s.reversed() : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpfa7k3ds2.swift:17:27: error: cannot convert return expression of\
    \ type 'ReversedCollection<String>' to return type 'String'\n    return result.isEmpty\
    \ ? s.reversed() : result\n           ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ {\n            result.append(c)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4uti60xe/tmp4uti60xe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a50c20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a50917b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a50917988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a509167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uti60xe                        0x00005622aabf28d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b8a50e0c460 __libc_start_main +
    245

    6    tmp4uti60xe                        0x00005622aabf2429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? s : result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: Exception
  stderr: 'tmpovanbu_s/tmpovanbu_s.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b675c4acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b675c1a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b675c1a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b675c1a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovanbu_s                        0x00005650709bd707 <unavailable> + 5895

    5    libc.so.6                          0x00002b675c698460 __libc_start_main +
    245

    6    tmpovanbu_s                        0x00005650709bd259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpyxznp6ll/tmpyxznp6ll.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3014c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3011b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3011b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3011b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxznp6ll                        0x0000556d2f6d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba3016ad460 __libc_start_main +
    245

    6    tmpyxznp6ll                        0x0000556d2f6d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpt2xy3dyl/tmpt2xy3dyl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d473dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d470d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d470d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d470d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2xy3dyl                        0x000055ec2833b8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b1d475ca460 __libc_start_main +
    245

    6    tmpt2xy3dyl                        0x000055ec2833b429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var result = \"\"\n   \
    \ for c in s {\n        if letters.contains(c) {\n            if c.isUppercase\
    \ {\n                result.append(c.lowercased())\n            } else {\n   \
    \             result.append(c.uppercased())\n            }\n        } else {\n\
    \            result.append(c)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") ==\
    \ \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") ==\
    \ \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp2po5lqlr/tmp2po5lqlr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6c92d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6c8fc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6c8fc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6c8fc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2po5lqlr                        0x00005627a76af877 <unavailable> + 6263

    5    libc.so.6                          0x00002ae6c94bd460 __libc_start_main +
    245

    6    tmp2po5lqlr                        0x00005627a76af4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ {\n            result.append(c)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4uti60xe/tmp4uti60xe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a50c20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a50917b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a50917988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a509167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uti60xe                        0x00005622aabf28d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b8a50e0c460 __libc_start_main +
    245

    6    tmp4uti60xe                        0x00005622aabf2429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    return s.isEmpty ? \"\" : String(s.map { $0.isLetter ? $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() : $0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpmdqshs1t.swift:9:73: error: result values in '? :' expression have\
    \ mismatching types 'String' and 'String.Element' (aka 'Character')\n    return\
    \ s.isEmpty ? \"\" : String(s.map { $0.isLetter ? $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() : $0 })\n                                                \
    \         ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    if s.isEmpty {\n        return s\n    }\n    var result = \"\"\n    for char\
    \ in s {\n        if char.isLetter {\n            result.append(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: Exception
  stderr: 'tmp5orrp6rq/tmp5orrp6rq.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1331f02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1331bf9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1331bf9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1331bf87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5orrp6rq                        0x000055e05c2a0707 <unavailable> + 5895

    5    libc.so.6                          0x00002b13320ee460 __libc_start_main +
    245

    6    tmp5orrp6rq                        0x000055e05c2a0259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty {\n      \
    \  return String(s.reversed())\n    }\n    return s.map { $0.isLetter ? $0.isUppercase\
    \ ? Character($0.lowercased()) : Character($0.uppercased()) : $0 }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpht7xduw4.swift:13:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    if s.isEmpty {\n        return s\n    }\n    var result = \"\"\n    for c\
    \ in s {\n        if c.isLetter {\n            result.append(c.isUppercase ? c.lowercased()\
    \ : c.uppercased())\n        } else {\n            result.append(c)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4aoxhosi/tmp4aoxhosi.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b747d9b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b747d6a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b747d6a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b747d6a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4aoxhosi                        0x000055ea81730707 <unavailable> + 5895

    5    libc.so.6                          0x00002b747db9c460 __libc_start_main +
    245

    6    tmp4aoxhosi                        0x000055ea81730259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? s : result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: Exception
  stderr: 'tmpovanbu_s/tmpovanbu_s.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b675c4acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b675c1a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b675c1a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b675c1a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovanbu_s                        0x00005650709bd707 <unavailable> + 5895

    5    libc.so.6                          0x00002b675c698460 __libc_start_main +
    245

    6    tmpovanbu_s                        0x00005650709bd259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    if s.isEmpty {\n        return s\n    }\n    var result = \"\"\n    for char\
    \ in s {\n        if char.isLetter {\n            result.append(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: Exception
  stderr: 'tmp5orrp6rq/tmp5orrp6rq.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1331f02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1331bf9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1331bf9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1331bf87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5orrp6rq                        0x000055e05c2a0707 <unavailable> + 5895

    5    libc.so.6                          0x00002b13320ee460 __libc_start_main +
    245

    6    tmp5orrp6rq                        0x000055e05c2a0259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpyxznp6ll/tmpyxznp6ll.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3014c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3011b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3011b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3011b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxznp6ll                        0x0000556d2f6d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba3016ad460 __libc_start_main +
    245

    6    tmpyxznp6ll                        0x0000556d2f6d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpt2xy3dyl/tmpt2xy3dyl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d473dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d470d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d470d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d470d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2xy3dyl                        0x000055ec2833b8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b1d475ca460 __libc_start_main +
    245

    6    tmpt2xy3dyl                        0x000055ec2833b429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ {\n            result.append(c)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4uti60xe/tmp4uti60xe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a50c20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a50917b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a50917988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a509167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uti60xe                        0x00005622aabf28d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b8a50e0c460 __libc_start_main +
    245

    6    tmp4uti60xe                        0x00005622aabf2429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ {\n            result.append(c)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4uti60xe/tmp4uti60xe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a50c20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a50917b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a50917988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a509167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uti60xe                        0x00005622aabf28d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b8a50e0c460 __libc_start_main +
    245

    6    tmp4uti60xe                        0x00005622aabf2429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty {\n      \
    \  return String(s.reversed())\n    }\n    let lettersReversed = letters.map {\
    \ $0.isUppercase ? $0.lowercased() : $0.uppercased() }\n    var result = \"\"\n\
    \    var j = 0\n    for i in 0..<s.count {\n        if s[i].isLetter {\n     \
    \       result.append(lettersReversed[j])\n            j += 1\n        } else\
    \ {\n            result.append(s[i])\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmprd7l7349.swift:17:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i].isLetter\
    \ {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmprd7l7349.swift:21:27: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \   result.append(s[i])\n                          ^~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ {\n            result.append(c)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4uti60xe/tmp4uti60xe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a50c20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a50917b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a50917988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a509167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uti60xe                        0x00005622aabf28d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b8a50e0c460 __libc_start_main +
    245

    6    tmp4uti60xe                        0x00005622aabf2429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ {\n            result.append(c)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4uti60xe/tmp4uti60xe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a50c20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a50917b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a50917988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a509167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uti60xe                        0x00005622aabf28d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b8a50e0c460 __libc_start_main +
    245

    6    tmp4uti60xe                        0x00005622aabf2429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    return s.isEmpty ? \"\" : s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased())\
    \ : Character($0.uppercased()) : $0 }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpzfj_pnpu.swift:9:49: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to closure result type 'String'\n    return s.isEmpty ? \"\
    \" : s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased())\
    \ : $0 }.joined()\n                                    ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var result = \"\"\n   \
    \ for char in s {\n        if letters.contains(char) {\n            if char.isUppercase\
    \ {\n                result.append(char.lowercased())\n            } else {\n\
    \                result.append(char.uppercased())\n            }\n        } else\
    \ {\n            result.append(char)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmprmxlsr24/tmprmxlsr24.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1e0f8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1e0c82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1e0c82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1e0c817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprmxlsr24                        0x000055878ff40877 <unavailable> + 6263

    5    libc.so.6                          0x00002ad1e1177460 __libc_start_main +
    245

    6    tmprmxlsr24                        0x000055878ff404b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    return String(s.map { $0.isLetter ? $0.isUppercase ? $0.lowercased() : $0.uppercased()\
    \ : $0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") ==\
    \ \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") ==\
    \ \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiulkis_7.swift:9:56: error: result values in '? :' expression have\
    \ mismatching types 'String' and 'String.Element' (aka 'Character')\n    return\
    \ String(s.map { $0.isLetter ? $0.isUppercase ? $0.lowercased() : $0.uppercased()\
    \ : $0 })\n                                        ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpyxznp6ll/tmpyxznp6ll.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3014c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3011b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3011b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3011b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxznp6ll                        0x0000556d2f6d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba3016ad460 __libc_start_main +
    245

    6    tmpyxznp6ll                        0x0000556d2f6d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    guard s.contains(\"[a-zA-Z]\") else { return String(s.reversed()) }\n   \
    \ return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased())\
    \ : $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") ==\
    \ \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") ==\
    \ \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmptamcdk5m.swift:10:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    let letters = Set(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )\n    var result = \"\"\n    for c in s {\n        if letters.contains(c) {\n\
    \            if c.isUppercase {\n                result.append(c.lowercased())\n\
    \            } else {\n                result.append(c.uppercased())\n       \
    \     }\n        } else {\n            result.append(c)\n        }\n    }\n  \
    \  return result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpogd91f58/tmpogd91f58.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c53c2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c53926b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c53926988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c539257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpogd91f58                        0x0000563ef4c0d9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8c53e1b460 __libc_start_main +
    245

    6    tmpogd91f58                        0x0000563ef4c0d549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? s : result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: Exception
  stderr: 'tmpovanbu_s/tmpovanbu_s.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b675c4acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b675c1a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b675c1a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b675c1a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovanbu_s                        0x00005650709bd707 <unavailable> + 5895

    5    libc.so.6                          0x00002b675c698460 __libc_start_main +
    245

    6    tmpovanbu_s                        0x00005650709bd259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpt2xy3dyl/tmpt2xy3dyl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d473dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d470d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d470d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d470d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2xy3dyl                        0x000055ec2833b8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b1d475ca460 __libc_start_main +
    245

    6    tmpt2xy3dyl                        0x000055ec2833b429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpt2xy3dyl/tmpt2xy3dyl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d473dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d470d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d470d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d470d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2xy3dyl                        0x000055ec2833b8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b1d475ca460 __libc_start_main +
    245

    6    tmpt2xy3dyl                        0x000055ec2833b429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    if s.isEmpty {\n        return s\n    }\n    var result = \"\"\n    for char\
    \ in s {\n        if char.isLetter {\n            result.append(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: Exception
  stderr: 'tmp5orrp6rq/tmp5orrp6rq.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1331f02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1331bf9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1331bf9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1331bf87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5orrp6rq                        0x000055e05c2a0707 <unavailable> + 5895

    5    libc.so.6                          0x00002b13320ee460 __libc_start_main +
    245

    6    tmp5orrp6rq                        0x000055e05c2a0259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ {\n            result.append(c)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4uti60xe/tmp4uti60xe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a50c20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a50917b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a50917988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a509167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uti60xe                        0x00005622aabf28d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b8a50e0c460 __libc_start_main +
    245

    6    tmp4uti60xe                        0x00005622aabf2429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty {\n      \
    \  return String(s.reversed())\n    }\n    let result = s.map { $0.isLetter ?\
    \ $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) : $0\
    \ }\n    return String(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ {\n            result.append(c)\n        }\n    }\n    return result.isEmpty\
    \ ? s.reversed() : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpfa7k3ds2.swift:17:27: error: cannot convert return expression of\
    \ type 'ReversedCollection<String>' to return type 'String'\n    return result.isEmpty\
    \ ? s.reversed() : result\n           ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\nfunc solve(s: String) -> String {\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp231vhhkp/tmp231vhhkp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp231vhhkp                        0x000055fe48a7b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b8e6ef52460 __libc_start_main +
    245

    6    tmp231vhhkp                        0x000055fe48a7b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978772
