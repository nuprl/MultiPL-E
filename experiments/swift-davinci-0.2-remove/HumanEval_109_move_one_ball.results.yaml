language: swift
name: HumanEval_109_move_one_ball
results:
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   while i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            arr.remove(at:\
    \ i)\n            arr.insert(arr[i], at: 0)\n            i = 0\n        } else\
    \ {\n            i += 1\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp4_f4jamq/tmp4_f4jamq.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6dca0e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dc9ddbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dc9ddb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dc9dda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4_f4jamq                        0x00005575300965fe <unavailable> + 5630

    5    libc.so.6                          0x00002b6dca2d0460 __libc_start_main +
    245

    6    tmp4_f4jamq                        0x00005575300960c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var sorted_arr = arr.sorted()\n    var i = 0\n    var j = 0\n\
    \    while i < arr.count {\n        if arr[i] == sorted_arr[j] {\n           \
    \ i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n\
    \    }\n    return j == arr.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp0t8gmxjb/tmp0t8gmxjb.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9058155c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9057e4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9057e4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9057e4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0t8gmxjb                        0x000056071471645a <unavailable> + 5210

    5    libc.so.6                          0x00002b9058341460 __libc_start_main +
    245

    6    tmp0t8gmxjb                        0x00005607147160b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n   \
    \     } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpybgfyl61/tmpybgfyl61.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a164aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a161a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a161a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a161a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpybgfyl61                        0x0000555f8edcc59a <unavailable> + 5530

    5    libc.so.6                          0x00002b6a16696460 __libc_start_main +
    245

    6    tmpybgfyl61                        0x0000555f8edcc1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // check if the array is empty\n\
    \    if arr.count == 0 {\n        return true\n    }\n    // check if the array\
    \ is sorted\n    if arr == arr.sorted() {\n        return true\n    }\n    //\
    \ check if the array is sorted in reverse order\n    if arr == arr.sorted(by:\
    \ >) {\n        return false\n    }\n    // check if the array is sorted in reverse\
    \ order\n    if arr == arr.sorted(by: <) {\n        return true\n    }\n    //\
    \ check if the array is sorted in reverse order\n    if arr == arr.sorted(by:\
    \ >) {\n        return false\n    }\n    // check if the array is sorted in reverse\
    \ order\n    if arr == arr.sorted(by: <) {\n        return true\n    }\n    //\
    \ check if the array is sorted in reverse order\n    if arr == arr.sorted(by:\
    \ >) {\n        return false\n    }\n    // check if the array is sorted in reverse\
    \ order\n    if arr == arr.sorted(by: <) {\n        return true\n    }\n    //\
    \ check if the array is sorted in reverse order\n    if arr == arr.sorted(by:\
    \ >) {\n        return false\n    }\n    // check if the array is sorted in reverse\
    \ order\n    if arr == arr.sorted(by: <) {\n        return true\n    }\n    //\
    \ check if the array is sorted in reverse order\n    if arr == arr.sorted(by:\
    \ >) {\n        return false\n    }\n    // check if the array is sorted in reverse\
    \ order\n    if arr == arr.sorted(by: <) {\n        return true\n    }\n    //\
    \ check if the array is sorted in reverse order\n    if arr == arr.sorted(by:\
    \ >) {\n        return false\n    }\n    // check if the array is sorted in reverse\
    \ order\n    if arr == arr.sorted(by: <) {\n        return true\n    }\n    //\
    \ check if the array is sorted in reverse order\n    if arr == arr.sorted(by:\
    \ >) {\n        return false\n    }\n    // check if the array is sorted in reverse\
    \ order\n    if arr == arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpfzopz53y.swift:81:18: error: expected '{' after 'if' condition\n\
    \    if arr == arr\n                 ^\n"
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    var i = arr.count - 1\n    while i >\
    \ 0 {\n        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n     \
    \       arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n\
    \        } else {\n            break\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpdzdg_aw7/tmpdzdg_aw7.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fbb24fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fbaf46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fbaf46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fbaf457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdzdg_aw7                        0x000055aca818359a <unavailable> + 5530

    5    libc.so.6                          0x00002b8fbb43b460 __libc_start_main +
    245

    6    tmpdzdg_aw7                        0x000055aca81831f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   while i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            let\
    \ temp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n\
    \            i = 0\n        } else {\n            i += 1\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmppt624049/tmppt624049.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1630561c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1630258b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1630258988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16302577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppt624049                        0x000055e27471c5ae <unavailable> + 5550

    5    libc.so.6                          0x00002b163074d460 __libc_start_main +
    245

    6    tmppt624049                        0x000055e27471c079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = arr.count\
    \ - 1\n    while i > 0 {\n        if arr[i] < arr[i - 1] {\n            let temp\
    \ = arr[i]\n            arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n \
    \           i -= 1\n        } else {\n            i -= 1\n        }\n    }\n \
    \   for i in 0..<arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpvf8r2219/tmpvf8r2219.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3545d43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3545a3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3545a3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3545a397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvf8r2219                        0x000055ef5d6fd59a <unavailable> + 5530

    5    libc.so.6                          0x00002b3545f2f460 __libc_start_main +
    245

    6    tmpvf8r2219                        0x000055ef5d6fd1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // check if the array is empty\n\
    \    if arr.count == 0 {\n        return true\n    }\n    // check if the array\
    \ is already sorted\n    var sorted_arr = arr.sorted()\n    if arr == sorted_arr\
    \ {\n        return true\n    }\n    // check if the array is sorted in reverse\
    \ order\n    sorted_arr = arr.sorted(by: >)\n    if arr == sorted_arr {\n    \
    \    return false\n    }\n    // check if the array is sorted in non-decreasing\
    \ order\n    // after performing right shift operation\n    var right_shifted_arr\
    \ = arr\n    for _ in 0..<arr.count {\n        right_shifted_arr.insert(right_shifted_arr.removeLast(),\
    \ at: 0)\n        sorted_arr = right_shifted_arr.sorted()\n        if right_shifted_arr\
    \ == sorted_arr {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var count = 0\n    for i in 0..<arr.count-1 {\n        if arr[i]\
    \ > arr[i+1] {\n            count += 1\n        }\n    }\n    if count > 1 {\n\
    \        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var max_value = arr[0]\n    var max_index = 0\n    for i in\
    \ 1..<arr.count {\n        if arr[i] > max_value {\n            max_value = arr[i]\n\
    \            max_index = i\n        }\n    }\n    if max_index == arr.count -\
    \ 1 {\n        return true\n    }\n    if max_index == 0 {\n        return false\n\
    \    }\n    for i in max_index+1..<arr.count {\n        if arr[i] < max_value\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp9g1js8pv/tmp9g1js8pv.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dce033c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dcdd2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dcdd2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dcdd297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9g1js8pv                        0x000055862ba5c54a <unavailable> + 5450

    5    libc.so.6                          0x00002b5dce21f460 __libc_start_main +
    245

    6    tmp9g1js8pv                        0x000055862ba5c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i = arr.count\
    \ - 1\n        } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp713u2bam/tmp713u2bam.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44bd00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44bcd05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44bcd05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44bcd047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp713u2bam                        0x000055aef2edd72e <unavailable> + 5934

    5    libc.so.6                          0x00002b44bd1fa460 __libc_start_main +
    245

    6    tmp713u2bam                        0x000055aef2edd1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpyk9_23nf/tmpyk9_23nf.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1fbf60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1fbc57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1fbc57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1fbc567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyk9_23nf                        0x000055cb128905ae <unavailable> + 5550

    5    libc.so.6                          0x00002ab1fc14c460 __libc_start_main +
    245

    6    tmpyk9_23nf                        0x000055cb12890079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   while i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            arr.remove(at:\
    \ i)\n            arr.insert(arr[i], at: 0)\n            i = 0\n        } else\
    \ {\n            i += 1\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp4_f4jamq/tmp4_f4jamq.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6dca0e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dc9ddbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dc9ddb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dc9dda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4_f4jamq                        0x00005575300965fe <unavailable> + 5630

    5    libc.so.6                          0x00002b6dca2d0460 __libc_start_main +
    245

    6    tmp4_f4jamq                        0x00005575300960c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return arr == arr.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpgq81ddvx/tmpgq81ddvx.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d2609dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d25d94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d25d94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d25d937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgq81ddvx                        0x000055f2afca669e <unavailable> + 5790

    5    libc.so.6                          0x00002b1d26289460 __libc_start_main +
    245

    6    tmpgq81ddvx                        0x000055f2afca6169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n   \
    \     } else {\n            break\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp0q9y8szk/tmp0q9y8szk.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55ad3dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55ad0d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55ad0d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55ad0d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0q9y8szk                        0x0000558e9cb6c59a <unavailable> + 5530

    5    libc.so.6                          0x00002b55ad5cb460 __libc_start_main +
    245

    6    tmp0q9y8szk                        0x0000558e9cb6c1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // check if the array is empty\n\
    \    if arr.count == 0 {\n        return true\n    }\n    // check if the array\
    \ is already sorted\n    if is_sorted(arr: arr) {\n        return true\n    }\n\
    \    // check if the array is sorted in reverse order\n    if is_sorted_reverse(arr:\
    \ arr) {\n        return false\n    }\n    // check if the array is sorted in\
    \ non-decreasing order\n    if is_sorted_non_decreasing(arr: arr) {\n        return\
    \ true\n    }\n    // check if the array is sorted in non-increasing order\n \
    \   if is_sorted_non_increasing(arr: arr) {\n        return false\n    }\n   \
    \ // check if the array is sorted in non-decreasing order after one shift\n  \
    \  if is_sorted_non_decreasing_after_one_shift(arr: arr) {\n        return true\n\
    \    }\n    // check if the array is sorted in non-increasing order after one\
    \ shift\n    if is_sorted_non_increasing_after_one_shift(arr: arr) {\n       \
    \ return false\n    }\n    // check if the array is sorted in non-decreasing order\
    \ after two shifts\n    if is_sorted_non_decreasing_after_two_shifts(arr: arr)\
    \ {\n        return true\n    }\n    // check if the array is sorted in non-increasing\
    \ order after two shifts\n    if is_sorted_non_increasing_after_two_shifts(arr:\
    \ arr) {\n        return false\n    }\n    // check if the array is sorted in\
    \ non-decreasing order after three shifts\n    if is_sorted_non_decreasing_after_three_shifts(arr:\
    \ arr) {\n        return true\n    }\n    // check if the array is sorted in non-increasing\
    \ order after three shifts\n    if is_sorted_non_increasing_after_three_shifts(arr:\
    \ arr) {\n        return false\n    }\n    // check if the array is sorted in\
    \ non-decreasing order after four shifts\n    if is_sorted_non_decreasing_after_four_shifts(arr:\
    \ arr) {\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8yhi15xj.swift:85:48: error: expected '}' at end of brace statement\n\
    assert(move_one_ball(arr: [] as [Int]) == true)\n                            \
    \                   ^\n/tmp/tmp8yhi15xj.swift:19:40: note: to match this opening\
    \ '{'\nfunc move_one_ball(arr: [Int]) -> Bool {\n                            \
    \           ^\n/tmp/tmp8yhi15xj.swift:25:8: error: cannot find 'is_sorted' in\
    \ scope\n    if is_sorted(arr: arr) {\n       ^~~~~~~~~\n/tmp/tmp8yhi15xj.swift:29:8:\
    \ error: cannot find 'is_sorted_reverse' in scope\n    if is_sorted_reverse(arr:\
    \ arr) {\n       ^~~~~~~~~~~~~~~~~\n/tmp/tmp8yhi15xj.swift:33:8: error: cannot\
    \ find 'is_sorted_non_decreasing' in scope\n    if is_sorted_non_decreasing(arr:\
    \ arr) {\n       ^~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8yhi15xj.swift:37:8: error:\
    \ cannot find 'is_sorted_non_increasing' in scope\n    if is_sorted_non_increasing(arr:\
    \ arr) {\n       ^~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8yhi15xj.swift:41:8: error:\
    \ cannot find 'is_sorted_non_decreasing_after_one_shift' in scope\n    if is_sorted_non_decreasing_after_one_shift(arr:\
    \ arr) {\n       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8yhi15xj.swift:45:8:\
    \ error: cannot find 'is_sorted_non_increasing_after_one_shift' in scope\n   \
    \ if is_sorted_non_increasing_after_one_shift(arr: arr) {\n       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp8yhi15xj.swift:49:8: error: cannot find 'is_sorted_non_decreasing_after_two_shifts'\
    \ in scope\n    if is_sorted_non_decreasing_after_two_shifts(arr: arr) {\n   \
    \    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8yhi15xj.swift:53:8: error:\
    \ cannot find 'is_sorted_non_increasing_after_two_shifts' in scope\n    if is_sorted_non_increasing_after_two_shifts(arr:\
    \ arr) {\n       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8yhi15xj.swift:57:8:\
    \ error: cannot find 'is_sorted_non_decreasing_after_three_shifts' in scope\n\
    \    if is_sorted_non_decreasing_after_three_shifts(arr: arr) {\n       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp8yhi15xj.swift:61:8: error: cannot find 'is_sorted_non_increasing_after_three_shifts'\
    \ in scope"
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    var i = 0\n    while\
    \ i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            count +=\
    \ 1\n            let temp = arr[i]\n            arr[i] = arr[i + 1]\n        \
    \    arr[i + 1] = temp\n            i = 0\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    return count <= 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpud2t_sj1/tmpud2t_sj1.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1b9e82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1b9b79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1b9b79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1b9b787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpud2t_sj1                        0x00005574a002b41a <unavailable> + 5146

    5    libc.so.6                          0x00002ac1ba06e460 __libc_start_main +
    245

    6    tmpud2t_sj1                        0x00005574a002b079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   var j = 0\n    var k = 0\n    var n = arr.count\n    var flag = false\n  \
    \  var flag2 = false\n    var flag3 = false\n    var flag4 = false\n    var flag5\
    \ = false\n    var flag6 = false\n    var flag7 = false\n    var flag8 = false\n\
    \    var flag9 = false\n    var flag10 = false\n    var flag11 = false\n    var\
    \ flag12 = false\n    var flag13 = false\n    var flag14 = false\n    var flag15\
    \ = false\n    var flag16 = false\n    var flag17 = false\n    var flag18 = false\n\
    \    var flag19 = false\n    var flag20 = false\n    var flag21 = false\n    var\
    \ flag22 = false\n    var flag23 = false\n    var flag24 = false\n    var flag25\
    \ = false\n    var flag26 = false\n    var flag27 = false\n    var flag28 = false\n\
    \    var flag29 = false\n    var flag30 = false\n    var flag31 = false\n    var\
    \ flag32 = false\n    var flag33 = false\n    var flag34 = false\n    var flag35\
    \ = false\n    var flag36 = false\n    var flag37 = false\n    var flag38 = false\n\
    \    var flag39 = false\n    var flag40 = false\n    var flag41 = false\n    var\
    \ flag42 = false\n    var flag43 = false\n    var flag44 = false\n    var flag45\
    \ = false\n    var flag46 = false\n    var flag47 = false\n    var flag48 = false\n\
    \    var flag49 = false\n    var flag50 = false\n    var flag51 = false\n    var\
    \ flag52 = false\n    var flag53 = false\n    var flag54 = false\n    var flag55\
    \ = false\n    var flag56 = false\n    var flag57 = false\n    var flag58 = false\n\
    \    var flag59 = false\n    var flag60 = false\n    var flag61 = false\n    var\
    \ flag62 = false\n    var flag63 = false\n    var flag64 = false\n    var flag65\
    \ = false\n    var flag66 = false\n    var flag67 = false\n    var flag68 = false\n\
    \    var flag69\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpy4li86ts.swift:93:9: error: type annotation missing in pattern\n\
    \    var flag69\n        ^\n"
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   while i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            let\
    \ tmp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = tmp\n\
    \            i = 0\n        } else {\n            i += 1\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp5omlpw8d/tmp5omlpw8d.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fe9acfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fe97c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fe97c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fe97c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5omlpw8d                        0x000055ddb35d65ae <unavailable> + 5550

    5    libc.so.6                          0x00002b0fe9cbb460 __libc_start_main +
    245

    6    tmp5omlpw8d                        0x000055ddb35d6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    let n = arr.count\n    if n == 0\
    \ {\n        return true\n    }\n    var arr = arr\n    for _ in 0..<n {\n   \
    \     var i = 0\n        while i < n - 1 {\n            if arr[i] > arr[i + 1]\
    \ {\n                return false\n            }\n            i += 1\n       \
    \ }\n        let temp = arr[n - 1]\n        for j in (1..<n).reversed() {\n  \
    \          arr[j] = arr[j - 1]\n        }\n        arr[0] = temp\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp0swakb1d/tmp0swakb1d.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80fbbaec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80fb8a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80fb8a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80fb8a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0swakb1d                        0x00005609401a385a <unavailable> + 6234

    5    libc.so.6                          0x00002b80fbd9a460 __libc_start_main +
    245

    6    tmp0swakb1d                        0x00005609401a34b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n   \
    \     } else {\n            break\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp0q9y8szk/tmp0q9y8szk.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55ad3dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55ad0d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55ad0d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55ad0d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0q9y8szk                        0x0000558e9cb6c59a <unavailable> + 5530

    5    libc.so.6                          0x00002b55ad5cb460 __libc_start_main +
    245

    6    tmp0q9y8szk                        0x0000558e9cb6c1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i = arr.count\
    \ - 1\n        } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp713u2bam/tmp713u2bam.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44bd00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44bcd05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44bcd05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44bcd047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp713u2bam                        0x000055aef2edd72e <unavailable> + 5934

    5    libc.so.6                          0x00002b44bd1fa460 __libc_start_main +
    245

    6    tmp713u2bam                        0x000055aef2edd1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while count < arr.count {\n        var i = count\n        while i < arr.count\
    \ - 1 {\n            if arr[i] > arr[i + 1] {\n                let temp = arr[i]\n\
    \                arr[i] = arr[i + 1]\n                arr[i + 1] = temp\n    \
    \        }\n            i += 1\n        }\n        count += 1\n    }\n    for\
    \ i in 0..<arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp63og_bjs/tmp63og_bjs.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8d4690c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8d4387b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8d4387988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8d43867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp63og_bjs                        0x0000558c78d7e59a <unavailable> + 5530

    5    libc.so.6                          0x00002af8d487c460 __libc_start_main +
    245

    6    tmp63og_bjs                        0x0000558c78d7e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpyk9_23nf/tmpyk9_23nf.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1fbf60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1fbc57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1fbc57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1fbc567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyk9_23nf                        0x000055cb128905ae <unavailable> + 5550

    5    libc.so.6                          0x00002ab1fc14c460 __libc_start_main +
    245

    6    tmpyk9_23nf                        0x000055cb12890079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            break\n        }\n        i -=\
    \ 1\n    }\n    if i == 0 {\n        return true\n    }\n    var j = i\n    while\
    \ j > 0 {\n        if arr[j] > arr[j - 1] {\n            break\n        }\n  \
    \      j -= 1\n    }\n    if j == 0 {\n        return false\n    }\n    var k\
    \ = j\n    while k > 0 {\n        if arr[k] < arr[k - 1] {\n            break\n\
    \        }\n        k -= 1\n    }\n    if k == 0 {\n        return true\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpmlha_eqx/tmpmlha_eqx.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c0ac5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c0a951b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c0a951988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c0a9507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmlha_eqx                        0x00005576e768463b <unavailable> + 5691

    5    libc.so.6                          0x00002b2c0ae46460 __libc_start_main +
    245

    6    tmpmlha_eqx                        0x00005576e7684019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count <= 1 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return arr == arr.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpr6uyeq6q/tmpr6uyeq6q.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab940327c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab94001eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab94001e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab94001d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr6uyeq6q                        0x00005652237a769e <unavailable> + 5790

    5    libc.so.6                          0x00002ab940513460 __libc_start_main +
    245

    6    tmpr6uyeq6q                        0x00005652237a7169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return arr == arr.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpgq81ddvx/tmpgq81ddvx.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d2609dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d25d94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d25d94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d25d937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgq81ddvx                        0x000055f2afca669e <unavailable> + 5790

    5    libc.so.6                          0x00002b1d26289460 __libc_start_main +
    245

    6    tmpgq81ddvx                        0x000055f2afca6169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   while i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            let\
    \ temp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n\
    \            i = 0\n        } else {\n            i += 1\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmppt624049/tmppt624049.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1630561c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1630258b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1630258988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16302577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppt624049                        0x000055e27471c5ae <unavailable> + 5550

    5    libc.so.6                          0x00002b163074d460 __libc_start_main +
    245

    6    tmppt624049                        0x000055e27471c079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   while i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            let\
    \ temp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n\
    \            i = 0\n        } else {\n            i += 1\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmppt624049/tmppt624049.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1630561c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1630258b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1630258988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16302577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppt624049                        0x000055e27471c5ae <unavailable> + 5550

    5    libc.so.6                          0x00002b163074d460 __libc_start_main +
    245

    6    tmppt624049                        0x000055e27471c079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpyk9_23nf/tmpyk9_23nf.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1fbf60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1fbc57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1fbc57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1fbc567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyk9_23nf                        0x000055cb128905ae <unavailable> + 5550

    5    libc.so.6                          0x00002ab1fc14c460 __libc_start_main +
    245

    6    tmpyk9_23nf                        0x000055cb12890079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count <= 1 {\n        return\
    \ true\n    }\n    var max_val = arr[0]\n    var max_index = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max_val {\n            max_val = arr[i]\n           \
    \ max_index = i\n        }\n    }\n    if max_index == arr.count - 1 {\n     \
    \   return true\n    }\n    var new_arr = arr\n    new_arr.remove(at: max_index)\n\
    \    new_arr.insert(max_val, at: 0)\n    return move_one_ball(arr: new_arr)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028275
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    var i = 0\n    while i < arr.count -\
    \ 1 {\n        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n     \
    \       arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n\
    \        } else {\n            i += 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpyg2v3av4/tmpyg2v3av4.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ea0d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36e9dcab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36e9dca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36e9dc97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyg2v3av4                        0x00005571be98e72e <unavailable> + 5934

    5    libc.so.6                          0x00002b36ea2bf460 __libc_start_main +
    245

    6    tmpyg2v3av4                        0x00005571be98e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            break\n        }\n        i -=\
    \ 1\n    }\n    if i == 0 {\n        return true\n    }\n    var j = i\n    while\
    \ j > 0 {\n        if arr[j] < arr[j - 1] {\n            return false\n      \
    \  }\n        j -= 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpnffk0zj1/tmpnffk0zj1.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe1815fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe17e56b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe17e56988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe17e557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnffk0zj1                        0x000055deabc483ba <unavailable> + 5050

    5    libc.so.6                          0x00002afe1834b460 __libc_start_main +
    245

    6    tmpnffk0zj1                        0x000055deabc48019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while true {\n      \
    \  var flag = true\n        for i in 0..<arr.count-1 {\n            if arr[i]\
    \ > arr[i+1] {\n                flag = false\n                break\n        \
    \    }\n        }\n        if flag {\n            return true\n        }\n   \
    \     count += 1\n        if count > arr.count {\n            return false\n \
    \       }\n        let last = arr.last!\n        arr.removeLast()\n        arr.insert(last,\
    \ at: 0)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n   \
    \     } else {\n            break\n        }\n    }\n    for j in 1..<arr.count\
    \ {\n        if arr[j] < arr[j - 1] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpq3ndm_fn/tmpq3ndm_fn.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92a8676c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92a836db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92a836d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92a836c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3ndm_fn                        0x0000564bcea1559a <unavailable> + 5530

    5    libc.so.6                          0x00002b92a8862460 __libc_start_main +
    245

    6    tmpq3ndm_fn                        0x0000564bcea151f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = arr.count\
    \ - 1\n    while i > 0 {\n        if arr[i] < arr[i - 1] {\n            let temp\
    \ = arr[i]\n            arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n \
    \           i -= 1\n        } else {\n            i -= 1\n        }\n    }\n \
    \   for i in 0..<arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpvf8r2219/tmpvf8r2219.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3545d43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3545a3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3545a3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3545a397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvf8r2219                        0x000055ef5d6fd59a <unavailable> + 5530

    5    libc.so.6                          0x00002b3545f2f460 __libc_start_main +
    245

    6    tmpvf8r2219                        0x000055ef5d6fd1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    for i in 0..<arr.count {\n        if arr[i] == i + 1 {\n            count\
    \ += 1\n        }\n    }\n    if count == arr.count {\n        return true\n \
    \   }\n    for i in 0..<arr.count {\n        if arr[i] == i + 1 {\n          \
    \  continue\n        }\n        let temp = arr[i]\n        arr[i] = arr[temp -\
    \ 1]\n        arr[temp - 1] = temp\n        count = 0\n        for j in 0..<arr.count\
    \ {\n            if arr[j] == j + 1 {\n                count += 1\n          \
    \  }\n        }\n        if count == arr.count {\n            return true\n  \
    \      }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpin9cig5y/tmpin9cig5y.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71869b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71866aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71866aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71866a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpin9cig5y                        0x0000564486c2c59a <unavailable> + 5530

    5    libc.so.6                          0x00002b7186b9f460 __libc_start_main +
    245

    6    tmpin9cig5y                        0x0000564486c2c1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    var i = 0\n    while i < arr.count -\
    \ 1 {\n        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n     \
    \       arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n\
    \        } else {\n            i += 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpyg2v3av4/tmpyg2v3av4.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ea0d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36e9dcab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36e9dca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36e9dc97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyg2v3av4                        0x00005571be98e72e <unavailable> + 5934

    5    libc.so.6                          0x00002b36ea2bf460 __libc_start_main +
    245

    6    tmpyg2v3av4                        0x00005571be98e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = arr.count\
    \ - 1\n    while i > 0 {\n        if arr[i] < arr[i - 1] {\n            let temp\
    \ = arr[i]\n            arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n \
    \           i = arr.count - 1\n        } else {\n            i -= 1\n        }\n\
    \    }\n    return arr == arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpuzemejw_/tmpuzemejw_.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64ee090c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64edd87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64edd87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64edd867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuzemejw_                        0x00005622f3d6069e <unavailable> + 5790

    5    libc.so.6                          0x00002b64ee27c460 __libc_start_main +
    245

    6    tmpuzemejw_                        0x00005622f3d60169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    for i in 0..<arr.count {\n        if arr[i] != i+1 {\n            count +=\
    \ 1\n        }\n    }\n    if count > 2 {\n        return false\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpziefz890/tmpziefz890.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac88e584c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac88e27bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac88e27b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac88e27a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpziefz890                        0x00005609b599354a <unavailable> + 5450

    5    libc.so.6                          0x00002ac88e770460 __libc_start_main +
    245

    6    tmpziefz890                        0x00005609b59931a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = arr.count\
    \ - 1\n    while i > 0 {\n        if arr[i] < arr[i - 1] {\n            let temp\
    \ = arr[i]\n            arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n \
    \           i -= 1\n        } else {\n            i -= 1\n        }\n    }\n \
    \   for i in 0..<arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpvf8r2219/tmpvf8r2219.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3545d43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3545a3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3545a3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3545a397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvf8r2219                        0x000055ef5d6fd59a <unavailable> + 5530

    5    libc.so.6                          0x00002b3545f2f460 __libc_start_main +
    245

    6    tmpvf8r2219                        0x000055ef5d6fd1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var max_value = arr[0]\n    for i in 1..<arr.count {\n    \
    \    if arr[i] < max_value {\n            return false\n        }\n        max_value\
    \ = max(max_value, arr[i])\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmps_ilabty/tmps_ilabty.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2581752c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2581449b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2581449988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25814487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps_ilabty                        0x00005607cf1f35da <unavailable> + 5594

    5    libc.so.6                          0x00002b258193e460 __libc_start_main +
    245

    6    tmps_ilabty                        0x00005607cf1f3239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    var i = arr.count - 1\n    while i >\
    \ 0 {\n        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n     \
    \       arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n\
    \        } else {\n            break\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpdzdg_aw7/tmpdzdg_aw7.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fbb24fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fbaf46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fbaf46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fbaf457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdzdg_aw7                        0x000055aca818359a <unavailable> + 5530

    5    libc.so.6                          0x00002b8fbb43b460 __libc_start_main +
    245

    6    tmpdzdg_aw7                        0x000055aca81831f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpyk9_23nf/tmpyk9_23nf.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1fbf60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1fbc57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1fbc57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1fbc567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyk9_23nf                        0x000055cb128905ae <unavailable> + 5550

    5    libc.so.6                          0x00002ab1fc14c460 __libc_start_main +
    245

    6    tmpyk9_23nf                        0x000055cb12890079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   while i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            let\
    \ temp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n\
    \            i = 0\n        } else {\n            i += 1\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmppt624049/tmppt624049.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1630561c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1630258b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1630258988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16302577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppt624049                        0x000055e27471c5ae <unavailable> + 5550

    5    libc.so.6                          0x00002b163074d460 __libc_start_main +
    245

    6    tmppt624049                        0x000055e27471c079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            break\n        }\n        i -=\
    \ 1\n    }\n    if i == 0 {\n        return true\n    }\n    var j = i\n    while\
    \ j > 0 {\n        if arr[j] > arr[j - 1] {\n            break\n        }\n  \
    \      j -= 1\n    }\n    if j == 0 {\n        return false\n    }\n    var k\
    \ = j\n    while k < arr.count - 1 {\n        if arr[k] > arr[k + 1] {\n     \
    \       break\n        }\n        k += 1\n    }\n    if k == arr.count - 1 {\n\
    \        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpongf9oqd/tmpongf9oqd.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5719a35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b571972cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b571972c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b571972b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpongf9oqd                        0x0000561ad5cf03ba <unavailable> + 5050

    5    libc.so.6                          0x00002b5719c21460 __libc_start_main +
    245

    6    tmpongf9oqd                        0x0000561ad5cf0019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] > arr[i + 1]\
    \ {\n            arr.remove(at: i)\n            arr.insert(arr[i], at: 0)\n  \
    \          count += 1\n        } else {\n            i += 1\n        }\n    }\n\
    \    return count <= 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpyhj54kj5/tmpyhj54kj5.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cfe4eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cfe1e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cfe1e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cfe1e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyhj54kj5                        0x000055d08829946a <unavailable> + 5226

    5    libc.so.6                          0x00002b7cfe6da460 __libc_start_main +
    245

    6    tmpyhj54kj5                        0x000055d0882990c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   while i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            let\
    \ temp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n\
    \            i = 0\n        } else {\n            i += 1\n        }\n    }\n \
    \   return arr == arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpfi3t8sen/tmpfi3t8sen.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7284824c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b728451bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b728451b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b728451a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfi3t8sen                        0x000055e789d1269e <unavailable> + 5790

    5    libc.so.6                          0x00002b7284a10460 __libc_start_main +
    245

    6    tmpfi3t8sen                        0x000055e789d12169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    for i in 0..<arr.count {\n        if arr[i] == i + 1 {\n            count\
    \ += 1\n        }\n    }\n    if count == arr.count {\n        return true\n \
    \   }\n    for i in 0..<arr.count {\n        if arr[i] == i + 1 {\n          \
    \  continue\n        }\n        var j = i\n        while j < arr.count {\n   \
    \         if arr[j] == i + 1 {\n                break\n            }\n       \
    \     j += 1\n        }\n        if j == arr.count {\n            return false\n\
    \        }\n        while j > i {\n            arr.swapAt(j, j - 1)\n        \
    \    j -= 1\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpvspyqnu4/tmpvspyqnu4.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac69cb3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac69c836b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac69c836988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac69c8357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvspyqnu4                        0x00005654dc35a6b7 <unavailable> + 5815

    5    libc.so.6                          0x00002ac69cd2b460 __libc_start_main +
    245

    6    tmpvspyqnu4                        0x00005654dc35a249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] > arr[i + 1]\
    \ {\n            count += 1\n            if count > 1 {\n                return\
    \ false\n            }\n            i += 1\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var max_val = arr[0]\n    for i in 1..<arr.count {\n      \
    \  if arr[i] < max_val {\n            return false\n        }\n        max_val\
    \ = max(max_val, arr[i])\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpwuwkmvr0/tmpwuwkmvr0.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f1924dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f18f44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f18f44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f18f437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuwkmvr0                        0x000055cf3edf55da <unavailable> + 5594

    5    libc.so.6                          0x00002b1f19439460 __libc_start_main +
    245

    6    tmpwuwkmvr0                        0x000055cf3edf5239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    var j = 1\n    var count\
    \ = 0\n    while i < arr.count - 1 {\n        if arr[i] > arr[j] {\n         \
    \   count += 1\n            if count > 1 {\n                return false\n   \
    \         }\n            i = 0\n            j = 1\n        } else {\n        \
    \    i += 1\n            j += 1\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp73egu_40/tmp73egu_40.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f299e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f296e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f296e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f296df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp73egu_40                        0x000055c36068a3ba <unavailable> + 5050

    5    libc.so.6                          0x00002b0f29bd5460 __libc_start_main +
    245

    6    tmp73egu_40                        0x000055c36068a019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] > arr[i + 1]\
    \ {\n            count += 1\n            if count > 1 {\n                return\
    \ false\n            }\n            i += 1\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    var i = 0\n    while\
    \ i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            count +=\
    \ 1\n            let temp = arr[i]\n            arr[i] = arr[i + 1]\n        \
    \    arr[i + 1] = temp\n            i = 0\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    return count <= 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpud2t_sj1/tmpud2t_sj1.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1b9e82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1b9b79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1b9b79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1b9b787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpud2t_sj1                        0x00005574a002b41a <unavailable> + 5146

    5    libc.so.6                          0x00002ac1ba06e460 __libc_start_main +
    245

    6    tmpud2t_sj1                        0x00005574a002b079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpkgy2yacv/tmpkgy2yacv.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae475f01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae475bf8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae475bf8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae475bf77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkgy2yacv                        0x00005622535fe72e <unavailable> + 5934

    5    libc.so.6                          0x00002ae4760ed460 __libc_start_main +
    245

    6    tmpkgy2yacv                        0x00005622535fe1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i = arr.count\
    \ - 1\n        } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp713u2bam/tmp713u2bam.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44bd00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44bcd05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44bcd05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44bcd047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp713u2bam                        0x000055aef2edd72e <unavailable> + 5934

    5    libc.so.6                          0x00002b44bd1fa460 __libc_start_main +
    245

    6    tmp713u2bam                        0x000055aef2edd1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let tmp = arr[i]\n            arr[i]\
    \ = arr[i + 1]\n            arr[i + 1] = tmp\n            i = 0\n        } else\
    \ {\n            i += 1\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpj59jsixy/tmpj59jsixy.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c5a4f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c5a1e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c5a1e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c5a1e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj59jsixy                        0x000055634c07f5ae <unavailable> + 5550

    5    libc.so.6                          0x00002b5c5a6dd460 __libc_start_main +
    245

    6    tmpj59jsixy                        0x000055634c07f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while !is_sorted(arr: arr) {\n        if count == arr.count {\n         \
    \   return false\n        }\n        arr = right_shift(arr: arr)\n        count\
    \ += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpdbbo9gfo.swift:22:12: error: cannot find 'is_sorted' in scope\n\
    \    while !is_sorted(arr: arr) {\n           ^~~~~~~~~\n/tmp/tmpdbbo9gfo.swift:26:15:\
    \ error: cannot find 'right_shift' in scope\n        arr = right_shift(arr: arr)\n\
    \              ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var i = 0\n    var j = 1\n    while j < arr.count {\n     \
    \   if arr[i] <= arr[j] {\n            i += 1\n            j += 1\n        } else\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpmx_au2wr/tmpmx_au2wr.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a612b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a60fb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a60fb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a60faf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmx_au2wr                        0x00005577353923ba <unavailable> + 5050

    5    libc.so.6                          0x00002b1a614a5460 __libc_start_main +
    245

    6    tmpmx_au2wr                        0x0000557735392019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i = arr.count\
    \ - 1\n        } else {\n            i -= 1\n        }\n    }\n    return arr\
    \ == arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp4w7pt4n4/tmp4w7pt4n4.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fd597ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fd5671b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fd5671988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fd56707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4w7pt4n4                        0x000055de2983f69e <unavailable> + 5790

    5    libc.so.6                          0x00002b1fd5b66460 __libc_start_main +
    245

    6    tmp4w7pt4n4                        0x000055de2983f169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   var j = 0\n    var count = 0\n    var flag = false\n    while i < arr.count\
    \ {\n        if arr[i] > arr[i+1] {\n            flag = true\n            j =\
    \ i\n            while j < arr.count - 1 {\n                if arr[j] > arr[j+1]\
    \ {\n                    count += 1\n                    j += 1\n            \
    \    } else {\n                    break\n                }\n            }\n \
    \           if count > 1 {\n                return false\n            }\n    \
    \        i = j\n        }\n        i += 1\n    }\n    if flag == false {\n   \
    \     return true\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8623655c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b862334c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b862334c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b862334c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b862334bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b862314be83 <unavailable> + 188035

    6    tmpu_luku6f                        0x00005600a7bcd86d <unavailable> + 6253

    7    tmpu_luku6f                        0x00005600a7bcd345 <unavailable> + 4933

    8    libc.so.6                          0x00002b8623841460 __libc_start_main +
    245

    9    tmpu_luku6f                        0x00005600a7bcd019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   var j = 1\n    while j < arr.count {\n        if arr[i] > arr[j] {\n     \
    \       return false\n        }\n        i += 1\n        j += 1\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpsetpftky/tmpsetpftky.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f9b544c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f9b23bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f9b23b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f9b23a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsetpftky                        0x0000563ab66743ba <unavailable> + 5050

    5    libc.so.6                          0x00002b3f9b730460 __libc_start_main +
    245

    6    tmpsetpftky                        0x0000563ab6674019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    var j = 1\n    while j <\
    \ arr.count {\n        if arr[i] > arr[j] {\n            return false\n      \
    \  }\n        i += 1\n        j += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpzx6bp1tt/tmpzx6bp1tt.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed4c3d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed4c0cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed4c0cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed4c0cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzx6bp1tt                        0x000055ff6dd393ba <unavailable> + 5050

    5    libc.so.6                          0x00002aed4c5c2460 __libc_start_main +
    245

    6    tmpzx6bp1tt                        0x000055ff6dd39019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n   \
    \     } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpybgfyl61/tmpybgfyl61.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a164aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a161a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a161a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a161a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpybgfyl61                        0x0000555f8edcc59a <unavailable> + 5530

    5    libc.so.6                          0x00002b6a16696460 __libc_start_main +
    245

    6    tmpybgfyl61                        0x0000555f8edcc1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpkgy2yacv/tmpkgy2yacv.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae475f01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae475bf8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae475bf8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae475bf77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkgy2yacv                        0x00005622535fe72e <unavailable> + 5934

    5    libc.so.6                          0x00002ae4760ed460 __libc_start_main +
    245

    6    tmpkgy2yacv                        0x00005622535fe1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while count < arr.count - 1 {\n        if arr[count] > arr[count + 1] {\n\
    \            return false\n        }\n        count += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp75tb4cgc/tmp75tb4cgc.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14f6e2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14f6b21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14f6b21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14f6b207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp75tb4cgc                        0x000055c9abf043ba <unavailable> + 5050

    5    libc.so.6                          0x00002b14f7016460 __libc_start_main +
    245

    6    tmp75tb4cgc                        0x000055c9abf04019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    var i = arr.count - 1\n    while i >\
    \ 0 {\n        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n     \
    \       arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i = arr.count\
    \ - 1\n        } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpqhku8u2z/tmpqhku8u2z.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55b507dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55b4d74b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55b4d74988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55b4d737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqhku8u2z                        0x000055fcaeac572e <unavailable> + 5934

    5    libc.so.6                          0x00002b55b5269460 __libc_start_main +
    245

    6    tmpqhku8u2z                        0x000055fcaeac51f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    let n = arr.count\n\
    \    if n <= 1 {\n        return true\n    }\n    var i = n - 1\n    while i >\
    \ 0 {\n        if arr[i] < arr[i - 1] {\n            break\n        }\n      \
    \  i -= 1\n    }\n    if i == 0 {\n        return true\n    }\n    var j = i -\
    \ 1\n    while j > 0 {\n        if arr[j] > arr[j - 1] {\n            break\n\
    \        }\n        j -= 1\n    }\n    if j == 0 {\n        return false\n   \
    \ }\n    var k = j - 1\n    while k > 0 {\n        if arr[k] > arr[k - 1] {\n\
    \            break\n        }\n        k -= 1\n    }\n    if k == 0 {\n      \
    \  return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp9krwksvh/tmp9krwksvh.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae64723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae6441ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae6441a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae644197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9krwksvh                        0x0000555a78c793ba <unavailable> + 5050

    5    libc.so.6                          0x00002aae6490f460 __libc_start_main +
    245

    6    tmp9krwksvh                        0x0000555a78c79019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // check if the array is empty\n\
    \    if arr.count == 0 {\n        return true\n    }\n    // check if the array\
    \ is sorted\n    var sorted_arr = arr.sorted()\n    if sorted_arr == arr {\n \
    \       return true\n    }\n    // check if the array is sorted in reverse order\n\
    \    sorted_arr = arr.sorted(by: >)\n    if sorted_arr == arr {\n        return\
    \ false\n    }\n    // check if the array is sorted in reverse order\n    var\
    \ sorted_arr_rev = arr.sorted(by: >)\n    var sorted_arr_rev_shifted = [Int]()\n\
    \    for i in 0..<arr.count {\n        sorted_arr_rev_shifted.append(sorted_arr_rev[i])\n\
    \        sorted_arr_rev_shifted.append(sorted_arr_rev[i])\n    }\n    sorted_arr_rev_shifted.removeLast()\n\
    \    sorted_arr_rev_shifted.removeLast()\n    if sorted_arr_rev_shifted == arr\
    \ {\n        return false\n    }\n    // check if the array is sorted in reverse\
    \ order\n    var sorted_arr_rev_shifted_2 = [Int]()\n    for i in 0..<arr.count\
    \ {\n        sorted_arr_rev_shifted_2.append(sorted_arr_rev[i])\n        sorted_arr_rev_shifted_2.append(sorted_arr_rev[i])\n\
    \        sorted_arr_rev_shifted_2.append(sorted_arr_rev[i])\n    }\n    sorted_arr_rev_shifted_2.removeLast()\n\
    \    sorted_arr_rev_shifted_2.removeLast()\n    sorted_arr_rev_shifted_2.removeLast()\n\
    \    if sorted_arr_rev_shifted_2 == arr {\n        return false\n    }\n    //\
    \ check if the array is sorted in reverse order\n    var sorted_arr_rev_shifted_3\
    \ = [Int]()\n    for i in 0..<arr.count {\n        sorted_arr_rev_shifted_3.append(sorted_arr_rev[i\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp2trlsg3j.swift:63:1: error: expected ']' in expression list\n}\n\
    ^\n/tmp/tmp2trlsg3j.swift:62:55: note: to match this opening '['\n        sorted_arr_rev_shifted_3.append(sorted_arr_rev[i\n\
    \                                                      ^\n/tmp/tmp2trlsg3j.swift:82:48:\
    \ error: expected '}' at end of brace statement\nassert(move_one_ball(arr: []\
    \ as [Int]) == true)\n                                               ^\n/tmp/tmp2trlsg3j.swift:19:40:\
    \ note: to match this opening '{'\nfunc move_one_ball(arr: [Int]) -> Bool {\n\
    \                                       ^\n/tmp/tmp2trlsg3j.swift:66:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp2trlsg3j.swift:35:9:\
    \ warning: variable 'sorted_arr_rev' was never mutated; consider changing to 'let'\
    \ constant\n    var sorted_arr_rev = arr.sorted(by: >)\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var sorted_arr = arr.sorted()\n    var count = 0\n    for i\
    \ in 0..<arr.count {\n        if arr[i] != sorted_arr[i] {\n            count\
    \ += 1\n        }\n    }\n    if count == 1 {\n        return true\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp8ee55lds/tmp8ee55lds.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a27e86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a27b7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a27b7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a27b7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ee55lds                        0x000055d22ac7e5ea <unavailable> + 5610

    5    libc.so.6                          0x00002b8a28072460 __libc_start_main +
    245

    6    tmp8ee55lds                        0x000055d22ac7e249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i = arr.count\
    \ - 1\n        } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp713u2bam/tmp713u2bam.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44bd00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44bcd05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44bcd05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44bcd047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp713u2bam                        0x000055aef2edd72e <unavailable> + 5934

    5    libc.so.6                          0x00002b44bd1fa460 __libc_start_main +
    245

    6    tmp713u2bam                        0x000055aef2edd1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n   \
    \     } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpybgfyl61/tmpybgfyl61.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a164aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a161a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a161a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a161a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpybgfyl61                        0x0000555f8edcc59a <unavailable> + 5530

    5    libc.so.6                          0x00002b6a16696460 __libc_start_main +
    245

    6    tmpybgfyl61                        0x0000555f8edcc1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n   \
    \     } else {\n            break\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp0q9y8szk/tmp0q9y8szk.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55ad3dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55ad0d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55ad0d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55ad0d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0q9y8szk                        0x0000558e9cb6c59a <unavailable> + 5530

    5    libc.so.6                          0x00002b55ad5cb460 __libc_start_main +
    245

    6    tmp0q9y8szk                        0x0000558e9cb6c1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   while i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            let\
    \ tmp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = tmp\n\
    \            i = 0\n        } else {\n            i += 1\n        }\n    }\n \
    \   return arr == arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpgsgtl0s8/tmpgsgtl0s8.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab90d6ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab90d3e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab90d3e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab90d3e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgsgtl0s8                        0x0000558bbd01469e <unavailable> + 5790

    5    libc.so.6                          0x00002ab90d8d7460 __libc_start_main +
    245

    6    tmpgsgtl0s8                        0x0000558bbd014169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    var i = 0\n    while i < arr.count -\
    \ 1 {\n        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n     \
    \       arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n\
    \        } else {\n            i += 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpyg2v3av4/tmpyg2v3av4.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ea0d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36e9dcab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36e9dca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36e9dc97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyg2v3av4                        0x00005571be98e72e <unavailable> + 5934

    5    libc.so.6                          0x00002b36ea2bf460 __libc_start_main +
    245

    6    tmpyg2v3av4                        0x00005571be98e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   while i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            let\
    \ temp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n\
    \            i = 0\n        } else {\n            i += 1\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmppt624049/tmppt624049.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1630561c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1630258b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1630258988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16302577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppt624049                        0x000055e27471c5ae <unavailable> + 5550

    5    libc.so.6                          0x00002b163074d460 __libc_start_main +
    245

    6    tmppt624049                        0x000055e27471c079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   while i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            let\
    \ temp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n\
    \            i = 0\n        } else {\n            i += 1\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmppt624049/tmppt624049.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1630561c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1630258b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1630258988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16302577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppt624049                        0x000055e27471c5ae <unavailable> + 5550

    5    libc.so.6                          0x00002b163074d460 __libc_start_main +
    245

    6    tmppt624049                        0x000055e27471c079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n   \
    \     } else {\n            break\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp0q9y8szk/tmp0q9y8szk.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55ad3dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55ad0d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55ad0d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55ad0d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0q9y8szk                        0x0000558e9cb6c59a <unavailable> + 5530

    5    libc.so.6                          0x00002b55ad5cb460 __libc_start_main +
    245

    6    tmp0q9y8szk                        0x0000558e9cb6c1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    for i in 0..<arr.count {\n        if arr[i] > arr[i+1] {\n            count\
    \ += 1\n        }\n    }\n    if count > 1 {\n        return false\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c275fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c272f3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2c272f3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2c272f313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2c272f2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2c270f2e83 <unavailable> + 188035

    6    tmpmbzfyn43                        0x0000561f66067a84 <unavailable> + 6788

    7    tmpmbzfyn43                        0x0000561f660674d5 <unavailable> + 5333

    8    libc.so.6                          0x00002b2c277e8460 __libc_start_main +
    245

    9    tmpmbzfyn43                        0x0000561f660671a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpyk9_23nf/tmpyk9_23nf.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1fbf60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1fbc57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1fbc57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1fbc567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyk9_23nf                        0x000055cb128905ae <unavailable> + 5550

    5    libc.so.6                          0x00002ab1fc14c460 __libc_start_main +
    245

    6    tmpyk9_23nf                        0x000055cb12890079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return arr == arr.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpgq81ddvx/tmpgq81ddvx.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d2609dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d25d94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d25d94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d25d937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgq81ddvx                        0x000055f2afca669e <unavailable> + 5790

    5    libc.so.6                          0x00002b1d26289460 __libc_start_main +
    245

    6    tmpgq81ddvx                        0x000055f2afca6169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] > arr[i + 1]\
    \ {\n            count += 1\n            let temp = arr[i]\n            arr[i]\
    \ = arr[i + 1]\n            arr[i + 1] = temp\n        }\n        i += 1\n   \
    \ }\n    return count <= 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpjsgbvwut/tmpjsgbvwut.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad05872cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad058423b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad058423988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0584227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjsgbvwut                        0x0000560dcb89641a <unavailable> + 5146

    5    libc.so.6                          0x00002ad058918460 __libc_start_main +
    245

    6    tmpjsgbvwut                        0x0000560dcb896079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   while i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            let\
    \ temp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n\
    \            i = 0\n        } else {\n            i += 1\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmppt624049/tmppt624049.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1630561c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1630258b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1630258988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16302577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppt624049                        0x000055e27471c5ae <unavailable> + 5550

    5    libc.so.6                          0x00002b163074d460 __libc_start_main +
    245

    6    tmppt624049                        0x000055e27471c079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    for i in 0..<arr.count {\n        if arr[i] == i + 1 {\n            count\
    \ += 1\n        }\n    }\n    if count == arr.count {\n        return true\n \
    \   }\n    for i in 0..<arr.count {\n        if arr[i] == i + 1 {\n          \
    \  continue\n        }\n        let temp = arr[i]\n        arr[i] = arr[temp -\
    \ 1]\n        arr[temp - 1] = temp\n        count = 0\n        for j in 0..<arr.count\
    \ {\n            if arr[j] == j + 1 {\n                count += 1\n          \
    \  }\n        }\n        if count == arr.count {\n            return true\n  \
    \      }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpin9cig5y/tmpin9cig5y.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71869b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71866aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71866aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71866a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpin9cig5y                        0x0000564486c2c59a <unavailable> + 5530

    5    libc.so.6                          0x00002b7186b9f460 __libc_start_main +
    245

    6    tmpin9cig5y                        0x0000564486c2c1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var sorted_arr = arr.sorted()\n    var count = 0\n    for i\
    \ in 0..<arr.count {\n        if arr[i] != sorted_arr[i] {\n            count\
    \ += 1\n        }\n    }\n    if count == 1 {\n        return true\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp8ee55lds/tmp8ee55lds.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a27e86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a27b7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a27b7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a27b7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ee55lds                        0x000055d22ac7e5ea <unavailable> + 5610

    5    libc.so.6                          0x00002b8a28072460 __libc_start_main +
    245

    6    tmp8ee55lds                        0x000055d22ac7e249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   while i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            let\
    \ temp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n\
    \            i = 0\n        } else {\n            i += 1\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmppt624049/tmppt624049.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1630561c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1630258b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1630258988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16302577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppt624049                        0x000055e27471c5ae <unavailable> + 5550

    5    libc.so.6                          0x00002b163074d460 __libc_start_main +
    245

    6    tmppt624049                        0x000055e27471c079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let tmp = arr[i]\n            arr[i]\
    \ = arr[i + 1]\n            arr[i + 1] = tmp\n            i = 0\n        } else\
    \ {\n            i += 1\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpj59jsixy/tmpj59jsixy.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c5a4f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c5a1e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c5a1e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c5a1e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj59jsixy                        0x000055634c07f5ae <unavailable> + 5550

    5    libc.so.6                          0x00002b5c5a6dd460 __libc_start_main +
    245

    6    tmpj59jsixy                        0x000055634c07f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            arr.insert(arr.removeLast(), at:\
    \ 0)\n            i = 0\n        } else {\n            i += 1\n        }\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028276
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    var i = 0\n    while\
    \ i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            count +=\
    \ 1\n            if count > 1 {\n                return false\n            }\n\
    \            var j = i + 1\n            while j < arr.count - 1 {\n          \
    \      if arr[j] > arr[j + 1] {\n                    return false\n          \
    \      }\n                j += 1\n            }\n        }\n        i += 1\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while count < arr.count {\n        if arr[count] > arr[count + 1] {\n   \
    \         let temp = arr[count]\n            arr[count] = arr[count + 1]\n   \
    \         arr[count + 1] = temp\n            count = 0\n        } else {\n   \
    \         count += 1\n        }\n    }\n    return arr == arr.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b14d301fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14d2d16561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b14d2d16286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b14d2d1613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b14d2d15bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b14d2b15e83 <unavailable> + 188035

    6    tmpyqzv1js3                        0x0000561d972c095d <unavailable> + 6493

    7    tmpyqzv1js3                        0x0000561d972c0495 <unavailable> + 5269

    8    libc.so.6                          0x00002b14d320b460 __libc_start_main +
    245

    9    tmpyqzv1js3                        0x0000561d972c0169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   var j = 1\n    var k = 2\n    var count = 0\n    while k < arr.count {\n \
    \       if arr[i] > arr[j] && arr[j] > arr[k] {\n            return false\n  \
    \      }\n        if arr[i] > arr[j] {\n            arr.swapAt(j, k)\n       \
    \     count += 1\n        }\n        i += 1\n        j += 1\n        k += 1\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n   \
    \     } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpybgfyl61/tmpybgfyl61.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a164aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a161a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a161a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a161a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpybgfyl61                        0x0000555f8edcc59a <unavailable> + 5530

    5    libc.so.6                          0x00002b6a16696460 __libc_start_main +
    245

    6    tmpybgfyl61                        0x0000555f8edcc1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   while i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            let\
    \ temp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n\
    \            i = 0\n        } else {\n            i += 1\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmppt624049/tmppt624049.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1630561c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1630258b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1630258988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16302577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppt624049                        0x000055e27471c5ae <unavailable> + 5550

    5    libc.so.6                          0x00002b163074d460 __libc_start_main +
    245

    6    tmppt624049                        0x000055e27471c079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    var j = 1\n    while j <\
    \ arr.count {\n        if arr[i] > arr[j] {\n            return false\n      \
    \  }\n        i += 1\n        j += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpzx6bp1tt/tmpzx6bp1tt.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed4c3d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed4c0cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed4c0cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed4c0cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzx6bp1tt                        0x000055ff6dd393ba <unavailable> + 5050

    5    libc.so.6                          0x00002aed4c5c2460 __libc_start_main +
    245

    6    tmpzx6bp1tt                        0x000055ff6dd39019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    var i = 0\n    while\
    \ i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            count +=\
    \ 1\n            if count > 1 {\n                return false\n            }\n\
    \            let temp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i\
    \ + 1] = temp\n            i += 1\n        } else {\n            i += 1\n    \
    \    }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp8w79lh_g/tmp8w79lh_g.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f6d20fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f6cf06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f6cf06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f6cf057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8w79lh_g                        0x000055fbb0ebb41a <unavailable> + 5146

    5    libc.so.6                          0x00002b6f6d3fb460 __libc_start_main +
    245

    6    tmp8w79lh_g                        0x000055fbb0ebb079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpyk9_23nf/tmpyk9_23nf.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1fbf60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1fbc57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1fbc57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1fbc567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyk9_23nf                        0x000055cb128905ae <unavailable> + 5550

    5    libc.so.6                          0x00002ab1fc14c460 __libc_start_main +
    245

    6    tmpyk9_23nf                        0x000055cb12890079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    for _ in 0..<arr.count {\n        let last = arr.removeLast()\n        arr.insert(last,\
    \ at: 0)\n        if arr == arr.sorted() {\n            count += 1\n        }\n\
    \    }\n    return count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmppo3hi_2f/tmppo3hi_2f.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bba0e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bb9dddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bb9ddd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bb9ddc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppo3hi_2f                        0x0000564c9257ca73 <unavailable> + 6771

    5    libc.so.6                          0x00002b5bba2d2460 __libc_start_main +
    245

    6    tmppo3hi_2f                        0x0000564c9257c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while count < arr.count - 1 {\n        if arr[count] > arr[count + 1] {\n\
    \            return false\n        }\n        count += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp75tb4cgc/tmp75tb4cgc.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14f6e2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14f6b21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14f6b21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14f6b207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp75tb4cgc                        0x000055c9abf043ba <unavailable> + 5050

    5    libc.so.6                          0x00002b14f7016460 __libc_start_main +
    245

    6    tmp75tb4cgc                        0x000055c9abf04019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n   \
    \     } else {\n            break\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp0q9y8szk/tmp0q9y8szk.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55ad3dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55ad0d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55ad0d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55ad0d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0q9y8szk                        0x0000558e9cb6c59a <unavailable> + 5530

    5    libc.so.6                          0x00002b55ad5cb460 __libc_start_main +
    245

    6    tmp0q9y8szk                        0x0000558e9cb6c1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n   \
    \     } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpybgfyl61/tmpybgfyl61.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a164aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a161a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a161a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a161a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpybgfyl61                        0x0000555f8edcc59a <unavailable> + 5530

    5    libc.so.6                          0x00002b6a16696460 __libc_start_main +
    245

    6    tmpybgfyl61                        0x0000555f8edcc1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = arr.count\
    \ - 1\n    while i > 0 {\n        if arr[i] < arr[i - 1] {\n            let temp\
    \ = arr[i]\n            arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n \
    \           i -= 1\n        } else {\n            i -= 1\n        }\n    }\n \
    \   for i in 0..<arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpvf8r2219/tmpvf8r2219.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3545d43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3545a3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3545a3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3545a397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvf8r2219                        0x000055ef5d6fd59a <unavailable> + 5530

    5    libc.so.6                          0x00002b3545f2f460 __libc_start_main +
    245

    6    tmpvf8r2219                        0x000055ef5d6fd1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var last_index\
    \ = arr.count - 1\n    var last_value = arr[last_index]\n    var index = last_index\
    \ - 1\n    while index >= 0 {\n        if arr[index] > last_value {\n        \
    \    last_value = arr[index]\n            index -= 1\n        } else {\n     \
    \       break\n        }\n    }\n    if index == -1 {\n        return true\n \
    \   }\n    var last_index_value = arr[last_index]\n    var index_value = arr[index]\n\
    \    arr[last_index] = index_value\n    arr[index] = last_index_value\n    last_index\
    \ -= 1\n    index -= 1\n    while index >= 0 {\n        if arr[index] > last_index_value\
    \ {\n            last_index_value = arr[index]\n            index -= 1\n     \
    \   } else {\n            break\n        }\n    }\n    if index == -1 {\n    \
    \    return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpy8p42hbj/tmpy8p42hbj.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb1b1e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb1aed7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb1aed7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb1aed67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy8p42hbj                        0x000055986ef2141a <unavailable> + 5146

    5    libc.so.6                          0x00002acb1b3cc460 __libc_start_main +
    245

    6    tmpy8p42hbj                        0x000055986ef21079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var max_val = arr[0]\n    for i in 1..<arr.count {\n      \
    \  if arr[i] < max_val {\n            return false\n        }\n        max_val\
    \ = max(max_val, arr[i])\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpwuwkmvr0/tmpwuwkmvr0.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f1924dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f18f44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f18f44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f18f437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuwkmvr0                        0x000055cf3edf55da <unavailable> + 5594

    5    libc.so.6                          0x00002b1f19439460 __libc_start_main +
    245

    6    tmpwuwkmvr0                        0x000055cf3edf5239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    var i = 0\n    while\
    \ i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            count +=\
    \ 1\n            let temp = arr[i]\n            arr[i] = arr[i + 1]\n        \
    \    arr[i + 1] = temp\n            i = 0\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    if count > 1 {\n        return false\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp2kzuaz63/tmp2kzuaz63.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad84b1fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad84aef1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad84aef1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad84aef07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2kzuaz63                        0x000055f018b1041a <unavailable> + 5146

    5    libc.so.6                          0x00002ad84b3e6460 __libc_start_main +
    245

    6    tmp2kzuaz63                        0x000055f018b10079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while count < arr.count {\n        var i = arr.count - 1\n        while i\
    \ > 0 {\n            if arr[i] < arr[i - 1] {\n                let temp = arr[i]\n\
    \                arr[i] = arr[i - 1]\n                arr[i - 1] = temp\n    \
    \            count += 1\n            }\n            i -= 1\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmplengh2w3/tmplengh2w3.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a50c07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a508feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a508fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a508fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplengh2w3                        0x000055d665def5ae <unavailable> + 5550

    5    libc.so.6                          0x00002b6a50df3460 __libc_start_main +
    245

    6    tmplengh2w3                        0x000055d665def079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   while i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            let\
    \ tmp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = tmp\n\
    \            i = 0\n        } else {\n            i += 1\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp5omlpw8d/tmp5omlpw8d.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fe9acfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fe97c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fe97c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fe97c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5omlpw8d                        0x000055ddb35d65ae <unavailable> + 5550

    5    libc.so.6                          0x00002b0fe9cbb460 __libc_start_main +
    245

    6    tmp5omlpw8d                        0x000055ddb35d6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   while i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            let\
    \ tmp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = tmp\n\
    \            i = 0\n        } else {\n            i += 1\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp5omlpw8d/tmp5omlpw8d.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fe9acfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fe97c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fe97c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fe97c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5omlpw8d                        0x000055ddb35d65ae <unavailable> + 5550

    5    libc.so.6                          0x00002b0fe9cbb460 __libc_start_main +
    245

    6    tmp5omlpw8d                        0x000055ddb35d6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    let n = arr.count\n    if n == 0\
    \ {\n        return true\n    }\n    var max_val = arr[0]\n    var max_idx = 0\n\
    \    for i in 1..<n {\n        if arr[i] > max_val {\n            max_val = arr[i]\n\
    \            max_idx = i\n        }\n    }\n    if max_idx == n - 1 {\n      \
    \  return true\n    }\n    for i in max_idx..<n - 1 {\n        if arr[i] > arr[i\
    \ + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpyw9ebhfo/tmpyw9ebhfo.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2c901ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2c8d11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2c8d11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2c8d107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyw9ebhfo                        0x000055c1ca35f54a <unavailable> + 5450

    5    libc.so.6                          0x00002af2c9206460 __libc_start_main +
    245

    6    tmpyw9ebhfo                        0x000055c1ca35f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpkgy2yacv/tmpkgy2yacv.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae475f01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae475bf8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae475bf8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae475bf77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkgy2yacv                        0x00005622535fe72e <unavailable> + 5934

    5    libc.so.6                          0x00002ae4760ed460 __libc_start_main +
    245

    6    tmpkgy2yacv                        0x00005622535fe1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var max_val = arr[0]\n    for i in 1..<arr.count {\n      \
    \  if arr[i] < max_val {\n            return false\n        }\n        max_val\
    \ = max(max_val, arr[i])\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpwuwkmvr0/tmpwuwkmvr0.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f1924dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f18f44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f18f44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f18f437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuwkmvr0                        0x000055cf3edf55da <unavailable> + 5594

    5    libc.so.6                          0x00002b1f19439460 __libc_start_main +
    245

    6    tmpwuwkmvr0                        0x000055cf3edf5239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   var j = 0\n    var count = 0\n    var flag = false\n    var temp = 0\n   \
    \ var n = arr.count\n    if n == 0 {\n        return true\n    }\n    while i\
    \ < n - 1 {\n        if arr[i] > arr[i + 1] {\n            count += 1\n      \
    \      if count > 1 {\n                return false\n            }\n         \
    \   j = i + 1\n            while j < n - 1 && arr[j] > arr[j + 1] {\n        \
    \        j += 1\n            }\n            temp = arr[j]\n            for k in\
    \ stride(from: j, to: i, by: -1) {\n                arr[k] = arr[k - 1]\n    \
    \        }\n            arr[i] = temp\n            if j - i > 1 {\n          \
    \      flag = true\n            }\n        }\n        i += 1\n    }\n    if flag\
    \ {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp75mfq1ka/tmp75mfq1ka.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b416d344c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b416d03bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b416d03b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b416d03a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp75mfq1ka                        0x000055cdb3e3861a <unavailable> + 5658

    5    libc.so.6                          0x00002b416d530460 __libc_start_main +
    245

    6    tmp75mfq1ka                        0x000055cdb3e38279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // Base case\n    if arr.count ==\
    \ 0 {\n        return true\n    }\n    // Find the index of the first element\
    \ which is not in the correct position\n    var i = 0\n    while i < arr.count\
    \ - 1 && arr[i] <= arr[i + 1] {\n        i += 1\n    }\n    // If the array is\
    \ already sorted\n    if i == arr.count - 1 {\n        return true\n    }\n  \
    \  // Find the index of the first element which is not in the correct position\n\
    \    var j = arr.count - 1\n    while j > 0 && arr[j] >= arr[j - 1] {\n      \
    \  j -= 1\n    }\n    // If the array is already sorted\n    if j == 0 {\n   \
    \     return true\n    }\n    // If the array is not sorted, then check if the\
    \ elements at index i and j\n    // are in the correct position\n    if arr[i]\
    \ <= arr[j - 1] || arr[i + 1] >= arr[j] {\n        return false\n    }\n    //\
    \ If the elements at index i and j are not in the correct position, then\n   \
    \ // check if the elements at index i and j - 1 are in the correct position\n\
    \    if arr[i] <= arr[j - 2] || arr[i + 1] >= arr[j - 1] {\n        return false\n\
    \    }\n    // If the elements at index i and j - 1 are in the correct position,\
    \ then\n    // check if the elements at index i + 1 and j are in the correct position\n\
    \    if arr[i + 2] >= arr[j] || arr[i + 1] >= arr[j - 1] {\n        return false\n\
    \    }\n    // If the elements at index i + 1 and j are in the correct position,\
    \ then\n    // check if the elements at index i + 1 and j - 1 are in the correct\
    \ position\n    if arr[i + 2] >= arr[j - 1] || arr[i + 1] >= arr[j - 2] {\n  \
    \      return false\n    }\n    // If all the elements are in the correct position,\
    \ then return true\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp5vn_d4kj/tmp5vn_d4kj.swift:79: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab97500fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab974d06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab974d06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab974d057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5vn_d4kj                        0x000055e8294ee3ba <unavailable> + 5050

    5    libc.so.6                          0x00002ab9751fb460 __libc_start_main +
    245

    6    tmp5vn_d4kj                        0x000055e8294ee019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    var i = 0\n    var j = 1\n    while\
    \ j < arr.count {\n        if arr[i] > arr[j] {\n            return false\n  \
    \      }\n        i += 1\n        j += 1\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpv0no05w4/tmpv0no05w4.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b094396bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0943662b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0943662988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09436617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0no05w4                        0x00005624638093ba <unavailable> + 5050

    5    libc.so.6                          0x00002b0943b57460 __libc_start_main +
    245

    6    tmpv0no05w4                        0x0000562463809019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while count < arr.count {\n        if arr[count] > arr[count + 1] {\n   \
    \         let temp = arr[count]\n            arr[count] = arr[count + 1]\n   \
    \         arr[count + 1] = temp\n            count = 0\n        } else {\n   \
    \         count += 1\n        }\n    }\n    return arr == arr.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b14d301fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14d2d16561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b14d2d16286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b14d2d1613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b14d2d15bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b14d2b15e83 <unavailable> + 188035

    6    tmpyqzv1js3                        0x0000561d972c095d <unavailable> + 6493

    7    tmpyqzv1js3                        0x0000561d972c0495 <unavailable> + 5269

    8    libc.so.6                          0x00002b14d320b460 __libc_start_main +
    245

    9    tmpyqzv1js3                        0x0000561d972c0169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    var i = 0\n    while i < arr.count -\
    \ 1 {\n        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n     \
    \       arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n\
    \        } else {\n            i += 1\n        }\n    }\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmphnhq4bnv/tmphnhq4bnv.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2b9bb2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2b98a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2b98a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2b98a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphnhq4bnv                        0x000056302adcd5ae <unavailable> + 5550

    5    libc.so.6                          0x00002ae2b9d9e460 __libc_start_main +
    245

    6    tmphnhq4bnv                        0x000056302adcd079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n  \
    \  var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n   \
    \ var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var\
    \ y = 0\n    var z = 0\n    var aa = 0\n    var bb = 0\n    var cc = 0\n    var\
    \ dd = 0\n    var ee = 0\n    var ff = 0\n    var gg = 0\n    var hh = 0\n   \
    \ var ii = 0\n    var jj = 0\n    var kk = 0\n    var ll = 0\n    var mm = 0\n\
    \    var nn = 0\n    var oo = 0\n    var pp = 0\n    var qq = 0\n    var rr =\
    \ 0\n    var ss = 0\n    var tt = 0\n    var uu = 0\n    var vv = 0\n    var ww\
    \ = 0\n    var xx = 0\n    var yy = 0\n    var zz = 0\n    var aaa = 0\n    var\
    \ bbb = 0\n    var ccc = 0\n    var ddd = 0\n    var eee = 0\n    var fff = 0\n\
    \    var ggg = 0\n    var hhh = 0\n    var iii = 0\n    var jjj = 0\n    var kkk\
    \ = 0\n    var lll = 0\n    var mmm = 0\n    var nnn = 0\n    var ooo = 0\n  \
    \  var ppp = 0\n    var qqq = 0\n    var rrr = 0\n    var sss = 0\n    var ttt\
    \ = 0\n    var uuu = 0\n    var vvv = 0\n    var www = 0\n    var xxx = 0\n  \
    \  var yyy = 0\n    var zzz = 0\n    var aaaa = 0\n    var bbbb = 0\n    var cccc\
    \ = 0\n    var dddd = 0\n    var eeee = 0\n    var ffff =\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp0u848ahz.swift:96:15: error: expected initial value after '='\n\
    \    var ffff =\n              ^\n"
  stdout: ''
  timestamp: 1660028271
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   var j = 0\n    var k = 0\n    var n = arr.count\n    var flag = false\n  \
    \  var count = 0\n    var temp = 0\n    var flag2 = false\n    var flag3 = false\n\
    \    var flag4 = false\n    var flag5 = false\n    var flag6 = false\n    var\
    \ flag7 = false\n    var flag8 = false\n    var flag9 = false\n    var flag10\
    \ = false\n    var flag11 = false\n    var flag12 = false\n    var flag13 = false\n\
    \    var flag14 = false\n    var flag15 = false\n    var flag16 = false\n    var\
    \ flag17 = false\n    var flag18 = false\n    var flag19 = false\n    var flag20\
    \ = false\n    var flag21 = false\n    var flag22 = false\n    var flag23 = false\n\
    \    var flag24 = false\n    var flag25 = false\n    var flag26 = false\n    var\
    \ flag27 = false\n    var flag28 = false\n    var flag29 = false\n    var flag30\
    \ = false\n    var flag31 = false\n    var flag32 = false\n    var flag33 = false\n\
    \    var flag34 = false\n    var flag35 = false\n    var flag36 = false\n    var\
    \ flag37 = false\n    var flag38 = false\n    var flag39 = false\n    var flag40\
    \ = false\n    var flag41 = false\n    var flag42 = false\n    var flag43 = false\n\
    \    var flag44 = false\n    var flag45 = false\n    var flag46 = false\n    var\
    \ flag47 = false\n    var flag48 = false\n    var flag49 = false\n    var flag50\
    \ = false\n    var flag51 = false\n    var flag52 = false\n    var flag53 = false\n\
    \    var flag54 = false\n    var flag55 = false\n    var flag56 = false\n    var\
    \ flag57 = false\n    var flag58 = false\n    var flag59 = false\n    var flag60\
    \ = false\n    var flag61 = false\n    var flag62 = false\n    var flag63 = false\n\
    \    var flag64 = false\n    var flag65 = false\n    var flag66 = false\n    var\
    \ flag67 = false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpvfulpc6t.swift:20:9: warning: variable 'arr' was never mutated;\
    \ consider changing to 'let' constant\n    var arr = arr\n    ~~~ ^\n    let\n\
    /tmp/tmpvfulpc6t.swift:21:9: warning: initialization of variable 'i' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var i =\
    \ 0\n    ~~~~^\n    _\n/tmp/tmpvfulpc6t.swift:22:9: warning: initialization of\
    \ variable 'j' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    var j = 0\n    ~~~~^\n    _\n/tmp/tmpvfulpc6t.swift:23:9: warning: initialization\
    \ of variable 'k' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var k = 0\n    ~~~~^\n    _\n/tmp/tmpvfulpc6t.swift:24:9: warning:\
    \ initialization of variable 'n' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var n = arr.count\n    ~~~~^\n    _\n/tmp/tmpvfulpc6t.swift:25:9:\
    \ warning: initialization of variable 'flag' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var flag = false\n    ~~~~^~~~\n\
    \    _\n/tmp/tmpvfulpc6t.swift:26:9: warning: initialization of variable 'count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var count = 0\n    ~~~~^~~~~\n    _\n/tmp/tmpvfulpc6t.swift:27:9: warning:\
    \ initialization of variable 'temp' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var temp = 0\n    ~~~~^~~~\n    _\n/tmp/tmpvfulpc6t.swift:28:9:\
    \ warning: initialization of variable 'flag2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var flag2 = false\n    ~~~~^~~~~\n\
    \    _\n/tmp/tmpvfulpc6t.swift:29:9: warning: initialization of variable 'flag3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var flag3 = false\n    ~~~~^~~~~\n    _\n/tmp/tmpvfulpc6t.swift:30:9: warning:\
    \ initialization of variable 'flag4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var flag4 = false\n    ~~~~^~~~~\n    _\n/tmp/tmpvfulpc6t.swift:31:9:\
    \ warning: initialization of variable 'flag5' was never used; consi"
  stdout: ''
  timestamp: 1660028271
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   var j = arr.count - 1\n    while i < j {\n        if arr[i] > arr[i + 1] {\n\
    \            swap(&arr[i], &arr[i + 1])\n            i += 1\n        } else if\
    \ arr[j] < arr[j - 1] {\n            swap(&arr[j], &arr[j - 1])\n            j\
    \ -= 1\n        } else {\n            i += 1\n            j -= 1\n        }\n\
    \    }\n    return arr == arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpipo957dk.swift:28:18: error: overlapping accesses to 'arr', but\
    \ modification requires exclusive access; consider calling MutableCollection.swapAt(_:_:)\n\
    \            swap(&arr[j], &arr[j - 1])\n            ~~~~~^~~~~~~~~~~~~~~~~~~~~\n\
    \            arr.swapAt(j, j - 1)\n/tmp/tmpipo957dk.swift:28:27: note: conflicting\
    \ access is here\n            swap(&arr[j], &arr[j - 1])\n                   \
    \       ^~~~~~~~~~~\n/tmp/tmpipo957dk.swift:25:18: error: overlapping accesses\
    \ to 'arr', but modification requires exclusive access; consider calling MutableCollection.swapAt(_:_:)\n\
    \            swap(&arr[i], &arr[i + 1])\n            ~~~~~^~~~~~~~~~~~~~~~~~~~~\n\
    \            arr.swapAt(i, i + 1)\n/tmp/tmpipo957dk.swift:25:27: note: conflicting\
    \ access is here\n            swap(&arr[i], &arr[i + 1])\n                   \
    \       ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let tmp = arr[i]\n            arr[i]\
    \ = arr[i + 1]\n            arr[i + 1] = tmp\n            i = 0\n        } else\
    \ {\n            i += 1\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpj59jsixy/tmpj59jsixy.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c5a4f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c5a1e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c5a1e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c5a1e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj59jsixy                        0x000055634c07f5ae <unavailable> + 5550

    5    libc.so.6                          0x00002b5c5a6dd460 __libc_start_main +
    245

    6    tmpj59jsixy                        0x000055634c07f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    let n = arr.count\n    if n == 0\
    \ {\n        return true\n    }\n    var max_val = arr[0]\n    for i in 1..<n\
    \ {\n        if arr[i] < max_val {\n            return false\n        }\n    \
    \    max_val = max(max_val, arr[i])\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpnkit2y95/tmpnkit2y95.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b2ac05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b2a8fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b2a8fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b2a8fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnkit2y95                        0x0000559d17e405da <unavailable> + 5594

    5    libc.so.6                          0x00002b6b2adf1460 __libc_start_main +
    245

    6    tmpnkit2y95                        0x0000559d17e40239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    var i = 0\n    var j = arr.count - 1\n\
    \    while i < j {\n        if arr[i] > arr[i + 1] {\n            break\n    \
    \    }\n        i += 1\n    }\n    while j > i {\n        if arr[j] < arr[j -\
    \ 1] {\n            break\n        }\n        j -= 1\n    }\n    if i == j {\n\
    \        return true\n    }\n    var k = i + 1\n    while k < j {\n        if\
    \ arr[k] < arr[i] || arr[k] > arr[j] {\n            return false\n        }\n\
    \        k += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var max_value = arr[0]\n    var max_index = 0\n    for i in\
    \ 1..<arr.count {\n        if arr[i] > max_value {\n            max_value = arr[i]\n\
    \            max_index = i\n        }\n    }\n    if max_index == arr.count -\
    \ 1 {\n        return move_one_ball(arr: Array(arr[0..<arr.count - 1]))\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp4en6yvfu/tmp4en6yvfu.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ed9c87c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ed997eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ed997e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ed997d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4en6yvfu                        0x00005575a6e6969a <unavailable> + 5786

    5    libc.so.6                          0x00002b9ed9e73460 __libc_start_main +
    245

    6    tmp4en6yvfu                        0x00005575a6e692f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    var i = 0\n    while\
    \ i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            count +=\
    \ 1\n            let temp = arr[i]\n            arr[i] = arr[i + 1]\n        \
    \    arr[i + 1] = temp\n            i = 0\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    return count <= 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpud2t_sj1/tmpud2t_sj1.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1b9e82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1b9b79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1b9b79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1b9b787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpud2t_sj1                        0x00005574a002b41a <unavailable> + 5146

    5    libc.so.6                          0x00002ac1ba06e460 __libc_start_main +
    245

    6    tmpud2t_sj1                        0x00005574a002b079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // return true if the array is empty\n\
    \    if arr.count == 0 {\n        return true\n    }\n    // return false if the\
    \ array is not sorted\n    if arr != arr.sorted() {\n        return false\n  \
    \  }\n    // return true if the array is sorted\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp7i00h52k/tmp7i00h52k.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5aa756cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5aa7263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5aa7263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5aa72627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7i00h52k                        0x000055cae642a46a <unavailable> + 5226

    5    libc.so.6                          0x00002b5aa7758460 __libc_start_main +
    245

    6    tmp7i00h52k                        0x000055cae642a0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   while i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            let\
    \ temp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n\
    \            i = 0\n        } else {\n            i += 1\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmppt624049/tmppt624049.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1630561c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1630258b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1630258988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16302577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppt624049                        0x000055e27471c5ae <unavailable> + 5550

    5    libc.so.6                          0x00002b163074d460 __libc_start_main +
    245

    6    tmppt624049                        0x000055e27471c079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let tmp = arr[i]\n            arr[i]\
    \ = arr[i - 1]\n            arr[i - 1] = tmp\n            i = arr.count - 1\n\
    \        } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpkfr_llw0/tmpkfr_llw0.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33f6388c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33f607fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33f607f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33f607e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkfr_llw0                        0x000056246134072e <unavailable> + 5934

    5    libc.so.6                          0x00002b33f6574460 __libc_start_main +
    245

    6    tmpkfr_llw0                        0x00005624613401f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] > arr[i + 1]\
    \ {\n            count += 1\n            let temp = arr[i]\n            arr[i]\
    \ = arr[i + 1]\n            arr[i + 1] = temp\n        }\n        i += 1\n   \
    \ }\n    if count == 0 {\n        return true\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmph_i453_u/tmph_i453_u.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac01d63bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac01d332b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac01d332988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac01d3317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph_i453_u                        0x000055fa670a741a <unavailable> + 5146

    5    libc.so.6                          0x00002ac01d827460 __libc_start_main +
    245

    6    tmph_i453_u                        0x000055fa670a7079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   while i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            let\
    \ temp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n\
    \            i = 0\n        } else {\n            i += 1\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmppt624049/tmppt624049.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1630561c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1630258b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1630258988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16302577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppt624049                        0x000055e27471c5ae <unavailable> + 5550

    5    libc.so.6                          0x00002b163074d460 __libc_start_main +
    245

    6    tmppt624049                        0x000055e27471c079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let tmp = arr[i]\n            arr[i]\
    \ = arr[i - 1]\n            arr[i - 1] = tmp\n            i = arr.count - 1\n\
    \        } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpkfr_llw0/tmpkfr_llw0.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33f6388c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33f607fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33f607f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33f607e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkfr_llw0                        0x000056246134072e <unavailable> + 5934

    5    libc.so.6                          0x00002b33f6574460 __libc_start_main +
    245

    6    tmpkfr_llw0                        0x00005624613401f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] > arr[i + 1]\
    \ {\n            count += 1\n            let temp = arr[i]\n            arr[i]\
    \ = arr[i + 1]\n            arr[i + 1] = temp\n        }\n        i += 1\n   \
    \ }\n    return count <= 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpjsgbvwut/tmpjsgbvwut.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad05872cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad058423b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad058423988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0584227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjsgbvwut                        0x0000560dcb89641a <unavailable> + 5146

    5    libc.so.6                          0x00002ad058918460 __libc_start_main +
    245

    6    tmpjsgbvwut                        0x0000560dcb896079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = arr.count\
    \ - 1\n    while i > 0 {\n        if arr[i] < arr[i - 1] {\n            let temp\
    \ = arr[i]\n            arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n \
    \           i -= 1\n        } else {\n            i -= 1\n        }\n    }\n \
    \   for i in 0..<arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpvf8r2219/tmpvf8r2219.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3545d43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3545a3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3545a3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3545a397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvf8r2219                        0x000055ef5d6fd59a <unavailable> + 5530

    5    libc.so.6                          0x00002b3545f2f460 __libc_start_main +
    245

    6    tmpvf8r2219                        0x000055ef5d6fd1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   var j = 0\n    var k = 0\n    var n = arr.count\n    var count = 0\n    var\
    \ flag = false\n    var flag1 = false\n    var flag2 = false\n    var flag3 =\
    \ false\n    var flag4 = false\n    var flag5 = false\n    var flag6 = false\n\
    \    var flag7 = false\n    var flag8 = false\n    var flag9 = false\n    var\
    \ flag10 = false\n    var flag11 = false\n    var flag12 = false\n    var flag13\
    \ = false\n    var flag14 = false\n    var flag15 = false\n    var flag16 = false\n\
    \    var flag17 = false\n    var flag18 = false\n    var flag19 = false\n    var\
    \ flag20 = false\n    var flag21 = false\n    var flag22 = false\n    var flag23\
    \ = false\n    var flag24 = false\n    var flag25 = false\n    var flag26 = false\n\
    \    var flag27 = false\n    var flag28 = false\n    var flag29 = false\n    var\
    \ flag30 = false\n    var flag31 = false\n    var flag32 = false\n    var flag33\
    \ = false\n    var flag34 = false\n    var flag35 = false\n    var flag36 = false\n\
    \    var flag37 = false\n    var flag38 = false\n    var flag39 = false\n    var\
    \ flag40 = false\n    var flag41 = false\n    var flag42 = false\n    var flag43\
    \ = false\n    var flag44 = false\n    var flag45 = false\n    var flag46 = false\n\
    \    var flag47 = false\n    var flag48 = false\n    var flag49 = false\n    var\
    \ flag50 = false\n    var flag51 = false\n    var flag52 = false\n    var flag53\
    \ = false\n    var flag54 = false\n    var flag55 = false\n    var flag56 = false\n\
    \    var flag57 = false\n    var flag58 = false\n    var flag59 = false\n    var\
    \ flag60 = false\n    var flag61 = false\n    var flag62 = false\n    var flag63\
    \ = false\n    var flag64 = false\n    var flag65 = false\n    var flag66 = false\n\
    \    var flag67 =\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqq69o4qf.swift:93:17: error: expected initial value after '='\n\
    \    var flag67 =\n                ^\n"
  stdout: ''
  timestamp: 1660028271
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    var j = arr.count - 1\n \
    \   while i < j {\n        if arr[i] > arr[i + 1] {\n            break\n     \
    \   }\n        i += 1\n    }\n    while j > i {\n        if arr[j] < arr[j - 1]\
    \ {\n            break\n        }\n        j -= 1\n    }\n    if i == j {\n  \
    \      return true\n    }\n    var k = i + 1\n    while k < j {\n        if arr[k]\
    \ < arr[i] || arr[k] > arr[j] {\n            return false\n        }\n       \
    \ k += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   var j = 1\n    while j < arr.count {\n        if arr[i] > arr[j] {\n     \
    \       return false\n        }\n        i += 1\n        j += 1\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpsetpftky/tmpsetpftky.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f9b544c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f9b23bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f9b23b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f9b23a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsetpftky                        0x0000563ab66743ba <unavailable> + 5050

    5    libc.so.6                          0x00002b3f9b730460 __libc_start_main +
    245

    6    tmpsetpftky                        0x0000563ab6674019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = arr.count\
    \ - 1\n    while i > 0 {\n        if arr[i] < arr[i - 1] {\n            let temp\
    \ = arr[i]\n            arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n \
    \           i -= 1\n        } else {\n            i -= 1\n        }\n    }\n \
    \   return arr == arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpylyp2nr5/tmpylyp2nr5.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad666ea0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad666b97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad666b97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad666b967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpylyp2nr5                        0x00005608f72e950a <unavailable> + 5386

    5    libc.so.6                          0x00002ad66708c460 __libc_start_main +
    245

    6    tmpylyp2nr5                        0x00005608f72e9169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else {\n   \
    \     return true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while\
    \ i > 0 {\n        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n \
    \           arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i\
    \ -= 1\n        } else {\n            break\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpys7v3cg8/tmpys7v3cg8.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e2f735c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e2f42cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e2f42c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e2f42b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpys7v3cg8                        0x0000565472c3a59a <unavailable> + 5530

    5    libc.so.6                          0x00002b9e2f921460 __libc_start_main +
    245

    6    tmpys7v3cg8                        0x0000565472c3a1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    var i = arr.count - 1\n    while i >\
    \ 0 {\n        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n     \
    \       arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n\
    \        } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpefg_jpzo/tmpefg_jpzo.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b421e725c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b421e41cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b421e41c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b421e41b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpefg_jpzo                        0x000055f60e40459a <unavailable> + 5530

    5    libc.so.6                          0x00002b421e911460 __libc_start_main +
    245

    6    tmpefg_jpzo                        0x000055f60e4041f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ <= 1 {\n        return true\n    }\n    var i = arr.count - 1\n    while i >\
    \ 0 {\n        if arr[i] < arr[i - 1] {\n            break\n        }\n      \
    \  i -= 1\n    }\n    if i == 0 {\n        return true\n    }\n    var j = i -\
    \ 1\n    while j > 0 {\n        if arr[j] > arr[j - 1] {\n            break\n\
    \        }\n        j -= 1\n    }\n    if j == 0 {\n        return false\n   \
    \ }\n    var k = j - 1\n    while k > 0 {\n        if arr[k] > arr[k - 1] {\n\
    \            break\n        }\n        k -= 1\n    }\n    if k == 0 {\n      \
    \  return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp0l7sb3vq/tmp0l7sb3vq.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9d66afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9d63a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9d63a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9d63a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0l7sb3vq                        0x000055cee67913ba <unavailable> + 5050

    5    libc.so.6                          0x00002ac9d689b460 __libc_start_main +
    245

    6    tmp0l7sb3vq                        0x000055cee6791019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpyk9_23nf/tmpyk9_23nf.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1fbf60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1fbc57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1fbc57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1fbc567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyk9_23nf                        0x000055cb128905ae <unavailable> + 5550

    5    libc.so.6                          0x00002ab1fc14c460 __libc_start_main +
    245

    6    tmpyk9_23nf                        0x000055cb12890079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var max_value = arr[0]\n    var max_index = 0\n    for i in\
    \ 1..<arr.count {\n        if arr[i] > max_value {\n            max_value = arr[i]\n\
    \            max_index = i\n        }\n    }\n    if max_index == arr.count -\
    \ 1 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpdpkmhpo3/tmpdpkmhpo3.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49a3331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49a3028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49a3028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49a30277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdpkmhpo3                        0x000055aca940654a <unavailable> + 5450

    5    libc.so.6                          0x00002b49a351d460 __libc_start_main +
    245

    6    tmpdpkmhpo3                        0x000055aca94061a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    var j = 0\n    var k = 0\n\
    \    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n \
    \   var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n  \
    \  var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n   \
    \ var aa = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n    var ae = 0\n\
    \    var af = 0\n    var ag = 0\n    var ah = 0\n    var ai = 0\n    var aj =\
    \ 0\n    var ak = 0\n    var al = 0\n    var am = 0\n    var an = 0\n    var ao\
    \ = 0\n    var ap = 0\n    var aq = 0\n    var ar = 0\n    var as_ = 0\n    var\
    \ at = 0\n    var au = 0\n    var av = 0\n    var aw = 0\n    var ax = 0\n   \
    \ var ay = 0\n    var az = 0\n    var ba = 0\n    var bb = 0\n    var bc = 0\n\
    \    var bd = 0\n    var be = 0\n    var bf = 0\n    var bg = 0\n    var bh =\
    \ 0\n    var bi = 0\n    var bj = 0\n    var bk = 0\n    var bl = 0\n    var bm\
    \ = 0\n    var bn = 0\n    var bo = 0\n    var bp = 0\n    var bq = 0\n    var\
    \ br = 0\n    var bs = 0\n    var bt = 0\n    var bu = 0\n    var bv = 0\n   \
    \ var bw = 0\n    var bx = 0\n    var by = 0\n    var bz = 0\n    var ca = 0\n\
    \    var cb = 0\n    var cc = 0\n    var cd = 0\n    var ce = 0\n    var cf =\
    \ 0\n    var cg = 0\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8msk60ag.swift:23:9: warning: initialization of variable 'arr'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var arr = arr\n    ~~~~^~~\n    _\n/tmp/tmp8msk60ag.swift:24:9: warning: initialization\
    \ of variable 'i' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var i = 0\n    ~~~~^\n    _\n/tmp/tmp8msk60ag.swift:25:9: warning:\
    \ initialization of variable 'j' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var j = 0\n    ~~~~^\n    _\n/tmp/tmp8msk60ag.swift:26:9:\
    \ warning: initialization of variable 'k' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var k = 0\n    ~~~~^\n    _\n/tmp/tmp8msk60ag.swift:27:9:\
    \ warning: initialization of variable 'l' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var l = 0\n    ~~~~^\n    _\n/tmp/tmp8msk60ag.swift:28:9:\
    \ warning: initialization of variable 'm' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var m = 0\n    ~~~~^\n    _\n/tmp/tmp8msk60ag.swift:29:9:\
    \ warning: initialization of variable 'n' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var n = 0\n    ~~~~^\n    _\n/tmp/tmp8msk60ag.swift:30:9:\
    \ warning: initialization of variable 'o' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var o = 0\n    ~~~~^\n    _\n/tmp/tmp8msk60ag.swift:31:9:\
    \ warning: initialization of variable 'p' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var p = 0\n    ~~~~^\n    _\n/tmp/tmp8msk60ag.swift:32:9:\
    \ warning: initialization of variable 'q' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var q = 0\n    ~~~~^\n    _\n/tmp/tmp8msk60ag.swift:33:9:\
    \ warning: initialization of variable 'r' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var r = 0\n    ~~~~^\n    _\n/tmp/tmp8msk60ag.swift:34:9:\
    \ warning: initialization of variable 's' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    va"
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            break\n        }\n        i -=\
    \ 1\n    }\n    if i == 0 {\n        return true\n    }\n    var j = i - 1\n \
    \   while j > 0 {\n        if arr[j] > arr[j - 1] {\n            break\n     \
    \   }\n        j -= 1\n    }\n    if j == 0 {\n        return false\n    }\n \
    \   var k = j - 1\n    while k > 0 {\n        if arr[k] > arr[k - 1] {\n     \
    \       break\n        }\n        k -= 1\n    }\n    if k == 0 {\n        return\
    \ true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp2gxe009w/tmp2gxe009w.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af08648ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af086181b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af086181988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0861807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2gxe009w                        0x000055bb3d3343ba <unavailable> + 5050

    5    libc.so.6                          0x00002af086676460 __libc_start_main +
    245

    6    tmp2gxe009w                        0x000055bb3d334019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    for i in 0..<arr.count {\n        if arr[i] != i+1 {\n            count +=\
    \ 1\n        }\n    }\n    if count > 2 {\n        return false\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpziefz890/tmpziefz890.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac88e584c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac88e27bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac88e27b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac88e27a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpziefz890                        0x00005609b599354a <unavailable> + 5450

    5    libc.so.6                          0x00002ac88e770460 __libc_start_main +
    245

    6    tmpziefz890                        0x00005609b59931a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    for i in 1..<arr.count {\n        if arr[i] < arr[i-1] {\n            count\
    \ += 1\n        }\n    }\n    return count <= 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aae93d0bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae93a02561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aae93a02286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aae93a0213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aae93a01bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxz2t5ib5                        0x0000562de82f49d3 <unavailable> + 6611

    6    tmpxz2t5ib5                        0x0000562de82f47ee <unavailable> + 6126

    7    libc.so.6                          0x00002aae93ef7460 __libc_start_main +
    245

    8    tmpxz2t5ib5                        0x0000562de82f41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    for i in 0..<arr.count {\n        if arr[i] == i + 1 {\n            count\
    \ += 1\n        }\n    }\n    if count == arr.count {\n        return true\n \
    \   }\n    if count == 0 {\n        return false\n    }\n    var temp = arr[arr.count\
    \ - 1]\n    for i in (0..<arr.count - 1).reversed() {\n        arr[i + 1] = arr[i]\n\
    \    }\n    arr[0] = temp\n    return move_one_ball(arr: arr)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpqsc1ckt2/tmpqsc1ckt2.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af28ef1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af28ec14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af28ec14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af28ec137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsc1ckt2                        0x000055b5a1dff85a <unavailable> + 6234

    5    libc.so.6                          0x00002af28f109460 __libc_start_main +
    245

    6    tmpqsc1ckt2                        0x000055b5a1dff4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpkgy2yacv/tmpkgy2yacv.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae475f01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae475bf8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae475bf8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae475bf77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkgy2yacv                        0x00005622535fe72e <unavailable> + 5934

    5    libc.so.6                          0x00002ae4760ed460 __libc_start_main +
    245

    6    tmpkgy2yacv                        0x00005622535fe1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n   \
    \     } else {\n            break\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp0q9y8szk/tmp0q9y8szk.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55ad3dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55ad0d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55ad0d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55ad0d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0q9y8szk                        0x0000558e9cb6c59a <unavailable> + 5530

    5    libc.so.6                          0x00002b55ad5cb460 __libc_start_main +
    245

    6    tmp0q9y8szk                        0x0000558e9cb6c1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    var j = 1\n    while j <\
    \ arr.count {\n        if arr[i] > arr[j] {\n            return false\n      \
    \  }\n        i += 1\n        j += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpzx6bp1tt/tmpzx6bp1tt.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed4c3d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed4c0cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed4c0cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed4c0cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzx6bp1tt                        0x000055ff6dd393ba <unavailable> + 5050

    5    libc.so.6                          0x00002aed4c5c2460 __libc_start_main +
    245

    6    tmpzx6bp1tt                        0x000055ff6dd39019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   while i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            let\
    \ temp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n\
    \            i = 0\n        } else {\n            i += 1\n        }\n    }\n \
    \   return arr == arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpfi3t8sen/tmpfi3t8sen.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7284824c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b728451bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b728451b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b728451a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfi3t8sen                        0x000055e789d1269e <unavailable> + 5790

    5    libc.so.6                          0x00002b7284a10460 __libc_start_main +
    245

    6    tmpfi3t8sen                        0x000055e789d12169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] > arr[i + 1]\
    \ {\n            count += 1\n            if count > 1 {\n                return\
    \ false\n            }\n            i += 1\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else {\n   \
    \     return true\n    }\n    var arr = arr\n    var count = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < arr[i-1] {\n            count += 1\n        }\n    }\n\
    \    if count > 1 {\n        return false\n    }\n    var min = arr[0]\n    for\
    \ i in 1..<arr.count {\n        if arr[i] < min {\n            min = arr[i]\n\
    \        }\n    }\n    var index = 0\n    for i in 0..<arr.count {\n        if\
    \ arr[i] == min {\n            index = i\n            break\n        }\n    }\n\
    \    if index == 0 {\n        return true\n    }\n    var temp = arr[0]\n    for\
    \ i in 1...index {\n        arr[i-1] = arr[i]\n    }\n    arr[index] = temp\n\
    \    return move_one_ball(arr: arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpvfiqzldy/tmpvfiqzldy.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67ce24ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67cdf41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67cdf41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67cdf407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfiqzldy                        0x000055f6ebb5b68a <unavailable> + 5770

    5    libc.so.6                          0x00002b67ce436460 __libc_start_main +
    245

    6    tmpvfiqzldy                        0x000055f6ebb5b2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpyk9_23nf/tmpyk9_23nf.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1fbf60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1fbc57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1fbc57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1fbc567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyk9_23nf                        0x000055cb128905ae <unavailable> + 5550

    5    libc.so.6                          0x00002ab1fc14c460 __libc_start_main +
    245

    6    tmpyk9_23nf                        0x000055cb12890079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while count < arr.count {\n        if arr[count] == count + 1 {\n       \
    \     count += 1\n        } else {\n            if arr[count] == arr.count {\n\
    \                let temp = arr[count]\n                arr[count] = arr[0]\n\
    \                arr[0] = temp\n            } else {\n                let temp\
    \ = arr[count]\n                arr[count] = arr[temp - 1]\n                arr[temp\
    \ - 1] = temp\n            }\n        }\n    }\n    return arr == Array(1...arr.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028276
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   var j = 1\n    while i < arr.count && j < arr.count {\n        if arr[i] >\
    \ arr[j] {\n            let temp = arr[i]\n            arr[i] = arr[j]\n     \
    \       arr[j] = temp\n            i += 1\n            j += 1\n        } else\
    \ {\n            i += 1\n            j += 1\n        }\n    }\n    return is_sorted(arr:\
    \ arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpbmjj92q1.swift:35:12: error: cannot find 'is_sorted' in scope\n\
    \    return is_sorted(arr: arr)\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while count < arr.count - 1 {\n        if arr[count] > arr[count + 1] {\n\
    \            let temp = arr[count]\n            arr[count] = arr[count + 1]\n\
    \            arr[count + 1] = temp\n            count = 0\n        } else {\n\
    \            count += 1\n        }\n    }\n    return arr == arr.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpsp03nq9i/tmpsp03nq9i.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadcc82bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadcc522b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadcc522988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadcc5217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsp03nq9i                        0x000055d88604e69e <unavailable> + 5790

    5    libc.so.6                          0x00002aadcca17460 __libc_start_main +
    245

    6    tmpsp03nq9i                        0x000055d88604e169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            arr.insert(arr.removeLast(), at:\
    \ 0)\n        } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpiwl4j4m7/tmpiwl4j4m7.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2565c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2562bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2562bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2562be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiwl4j4m7                        0x00005631666dd68a <unavailable> + 5770

    5    libc.so.6                          0x00002ba2567b4460 __libc_start_main +
    245

    6    tmpiwl4j4m7                        0x00005631666dd2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // check if the array is empty\n\
    \    if arr.count == 0 {\n        return true\n    }\n    // check if the array\
    \ is already sorted\n    if arr.sorted() == arr {\n        return true\n    }\n\
    \    // check if the array is sorted in reverse order\n    if arr.sorted(by: >)\
    \ == arr {\n        return false\n    }\n    // check if the array is sorted in\
    \ reverse order\n    // and if it is possible to get a non-decreasing order\n\
    \    // by performing right shift operation\n    var arr_copy = arr\n    for _\
    \ in 0..<arr.count {\n        arr_copy.insert(arr_copy.removeLast(), at: 0)\n\
    \        if arr_copy.sorted() == arr_copy {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            break\n        }\n        i -=\
    \ 1\n    }\n    if i == 0 {\n        return true\n    }\n    var j = i - 1\n \
    \   while j > 0 {\n        if arr[j] > arr[j - 1] {\n            break\n     \
    \   }\n        j -= 1\n    }\n    let temp = arr[j]\n    for k in (j + 1)...i\
    \ {\n        arr[k - 1] = arr[k]\n    }\n    arr[i] = temp\n    return arr ==\
    \ arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmppdwo4ehs/tmppdwo4ehs.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba81ea06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba81e6fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba81e6fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba81e6fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppdwo4ehs                        0x000055fda3e8969a <unavailable> + 5786

    5    libc.so.6                          0x00002ba81ebf2460 __libc_start_main +
    245

    6    tmppdwo4ehs                        0x000055fda3e892f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var max_value = arr[0]\n    for i in 1..<arr.count {\n    \
    \    if arr[i] < max_value {\n            return false\n        }\n        max_value\
    \ = max(max_value, arr[i])\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmps_ilabty/tmps_ilabty.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2581752c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2581449b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2581449988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25814487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps_ilabty                        0x00005607cf1f35da <unavailable> + 5594

    5    libc.so.6                          0x00002b258193e460 __libc_start_main +
    245

    6    tmps_ilabty                        0x00005607cf1f3239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    var i = arr.count - 1\n\
    \    while i > 0 {\n        if arr[i] < arr[i - 1] {\n            count += 1\n\
    \            if count > 1 {\n                return false\n            }\n   \
    \         let temp = arr[i]\n            arr[i] = arr[i - 1]\n            arr[i\
    \ - 1] = temp\n            i += 1\n        } else {\n            i -= 1\n    \
    \    }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp3zncpgqo/tmp3zncpgqo.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0b33adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0b30a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0b30a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0b30a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3zncpgqo                        0x00005599587b341a <unavailable> + 5146

    5    libc.so.6                          0x00002ac0b3599460 __libc_start_main +
    245

    6    tmp3zncpgqo                        0x00005599587b3079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpyk9_23nf/tmpyk9_23nf.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1fbf60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1fbc57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1fbc57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1fbc567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyk9_23nf                        0x000055cb128905ae <unavailable> + 5550

    5    libc.so.6                          0x00002ab1fc14c460 __libc_start_main +
    245

    6    tmpyk9_23nf                        0x000055cb12890079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] > arr[i + 1]\
    \ {\n            count += 1\n            arr.remove(at: i)\n            arr.insert(arr[i],\
    \ at: 0)\n            i = 0\n        } else {\n            i += 1\n        }\n\
    \    }\n    return count <= 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp052akqt2/tmp052akqt2.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cd580cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cd5503b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cd5503988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cd55027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp052akqt2                        0x0000558681fe646a <unavailable> + 5226

    5    libc.so.6                          0x00002b6cd59f8460 __libc_start_main +
    245

    6    tmp052akqt2                        0x0000558681fe60c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = arr.count\
    \ - 1\n    while i > 0 {\n        if arr[i] < arr[i - 1] {\n            let temp\
    \ = arr[i]\n            arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n \
    \           i -= 1\n        } else {\n            i -= 1\n        }\n    }\n \
    \   for i in 0..<arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpvf8r2219/tmpvf8r2219.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3545d43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3545a3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3545a3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3545a397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvf8r2219                        0x000055ef5d6fd59a <unavailable> + 5530

    5    libc.so.6                          0x00002b3545f2f460 __libc_start_main +
    245

    6    tmpvf8r2219                        0x000055ef5d6fd1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    for i in 0..<arr.count {\n        if arr[i] != i+1 {\n            count +=\
    \ 1\n        }\n    }\n    if count > 2 {\n        return false\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpziefz890/tmpziefz890.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac88e584c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac88e27bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac88e27b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac88e27a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpziefz890                        0x00005609b599354a <unavailable> + 5450

    5    libc.so.6                          0x00002ac88e770460 __libc_start_main +
    245

    6    tmpziefz890                        0x00005609b59931a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while count < arr.count {\n        if arr[count] == count + 1 {\n       \
    \     count += 1\n        } else {\n            if count == arr.count - 1 {\n\
    \                return false\n            }\n            let temp = arr[count]\n\
    \            arr[count] = arr[count + 1]\n            arr[count + 1] = temp\n\
    \            count += 1\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpingw5ru7/tmpingw5ru7.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad69e6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad69b62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad69b62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad69b617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpingw5ru7                        0x000055996066d41a <unavailable> + 5146

    5    libc.so.6                          0x00002aad6a057460 __libc_start_main +
    245

    6    tmpingw5ru7                        0x000055996066d079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var max = arr[0]\n    var min = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n        if\
    \ arr[i] < min {\n            min = arr[i]\n        }\n    }\n    if max - min\
    \ == arr.count - 1 {\n        return true\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpvfd372f6/tmpvfd372f6.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a6ea44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a6e73bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a6e73b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a6e73a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfd372f6                        0x000055d479552617 <unavailable> + 5655

    5    libc.so.6                          0x00002b5a6ec30460 __libc_start_main +
    245

    6    tmpvfd372f6                        0x000055d4795521a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpyk9_23nf/tmpyk9_23nf.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1fbf60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1fbc57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1fbc57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1fbc567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyk9_23nf                        0x000055cb128905ae <unavailable> + 5550

    5    libc.so.6                          0x00002ab1fc14c460 __libc_start_main +
    245

    6    tmpyk9_23nf                        0x000055cb12890079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    for i in 0..<arr.count {\n        if arr[i] != i+1 {\n            count +=\
    \ 1\n        }\n    }\n    if count == 0 {\n        return true\n    }\n    if\
    \ count == 1 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpilsofwhf/tmpilsofwhf.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2850f21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2850c18b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2850c18988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2850c177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpilsofwhf                        0x000055680750954a <unavailable> + 5450

    5    libc.so.6                          0x00002b285110d460 __libc_start_main +
    245

    6    tmpilsofwhf                        0x00005568075091a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return arr == arr.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpgq81ddvx/tmpgq81ddvx.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d2609dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d25d94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d25d94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d25d937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgq81ddvx                        0x000055f2afca669e <unavailable> + 5790

    5    libc.so.6                          0x00002b1d26289460 __libc_start_main +
    245

    6    tmpgq81ddvx                        0x000055f2afca6169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return arr == arr.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpgq81ddvx/tmpgq81ddvx.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d2609dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d25d94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d25d94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d25d937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgq81ddvx                        0x000055f2afca669e <unavailable> + 5790

    5    libc.so.6                          0x00002b1d26289460 __libc_start_main +
    245

    6    tmpgq81ddvx                        0x000055f2afca6169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i = arr.count\
    \ - 1\n        } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp713u2bam/tmp713u2bam.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44bd00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44bcd05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44bcd05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44bcd047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp713u2bam                        0x000055aef2edd72e <unavailable> + 5934

    5    libc.so.6                          0x00002b44bd1fa460 __libc_start_main +
    245

    6    tmp713u2bam                        0x000055aef2edd1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return arr == arr.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpgq81ddvx/tmpgq81ddvx.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d2609dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d25d94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d25d94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d25d937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgq81ddvx                        0x000055f2afca669e <unavailable> + 5790

    5    libc.so.6                          0x00002b1d26289460 __libc_start_main +
    245

    6    tmpgq81ddvx                        0x000055f2afca6169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // Check if the array is empty\n\
    \    if arr.count == 0 {\n        return true\n    }\n    // Check if the array\
    \ is already sorted\n    if arr.sorted() == arr {\n        return true\n    }\n\
    \    // Check if the array is sorted in reverse order\n    if arr.sorted(by: >)\
    \ == arr {\n        return false\n    }\n    // Check if the array is sorted in\
    \ non-decreasing order\n    var is_sorted = true\n    for i in 1..<arr.count {\n\
    \        if arr[i] < arr[i-1] {\n            is_sorted = false\n            break\n\
    \        }\n    }\n    if is_sorted {\n        return true\n    }\n    // Check\
    \ if the array is sorted in non-increasing order\n    is_sorted = true\n    for\
    \ i in 1..<arr.count {\n        if arr[i] > arr[i-1] {\n            is_sorted\
    \ = false\n            break\n        }\n    }\n    if is_sorted {\n        return\
    \ false\n    }\n    // Check if the array is sorted in non-decreasing order after\
    \ one right shift\n    var arr_copy = arr\n    arr_copy.insert(arr_copy.removeLast(),\
    \ at: 0)\n    is_sorted = true\n    for i in 1..<arr_copy.count {\n        if\
    \ arr_copy[i] < arr_copy[i-1] {\n            is_sorted = false\n            break\n\
    \        }\n    }\n    if is_sorted {\n        return true\n    }\n    // Check\
    \ if the array is sorted in non-increasing order after one right shift\n    is_sorted\
    \ = true\n    for i in 1..<arr_copy.count {\n        if arr_copy[i] > arr_copy[i-1]\
    \ {\n            is_sorted = false\n            break\n        }\n    }\n    if\
    \ is_sorted {\n        return false\n    }\n    // Check if the array is sorted\
    \ in non-decreasing order after two right shifts\n    arr_copy = arr\n    arr_copy.insert(arr_copy.removeLast(),\
    \ at: 0)\n    arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpdspo_r2v.swift:81:5: warning: expression of type '[Int]' is unused\n\
    \    arr\n    ^~~\n/tmp/tmpdspo_r2v.swift:82:1: error: missing return in global\
    \ function expected to return 'Bool'\n}\n^\n"
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var sorted_arr = arr.sorted()\n    var count = 0\n    for i\
    \ in 0..<arr.count {\n        if arr[i] != sorted_arr[i] {\n            count\
    \ += 1\n        }\n    }\n    if count > 1 {\n        return false\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp5o2ddf7f/tmp5o2ddf7f.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dfcdcdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dfcac4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dfcac4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dfcac37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5o2ddf7f                        0x000055ebc2d495ea <unavailable> + 5610

    5    libc.so.6                          0x00002b0dfcfb9460 __libc_start_main +
    245

    6    tmp5o2ddf7f                        0x000055ebc2d49249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return arr == arr.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpgq81ddvx/tmpgq81ddvx.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d2609dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d25d94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d25d94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d25d937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgq81ddvx                        0x000055f2afca669e <unavailable> + 5790

    5    libc.so.6                          0x00002b1d26289460 __libc_start_main +
    245

    6    tmpgq81ddvx                        0x000055f2afca6169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var i = 0\n    var j = 1\n    var count = 0\n    while j <\
    \ arr.count {\n        if arr[i] > arr[j] {\n            count += 1\n        }\n\
    \        i += 1\n        j += 1\n    }\n    return count <= 1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return arr == arr.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpgq81ddvx/tmpgq81ddvx.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d2609dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d25d94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d25d94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d25d937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgq81ddvx                        0x000055f2afca669e <unavailable> + 5790

    5    libc.so.6                          0x00002b1d26289460 __libc_start_main +
    245

    6    tmpgq81ddvx                        0x000055f2afca6169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i = arr.count\
    \ - 1\n        } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp713u2bam/tmp713u2bam.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44bd00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44bcd05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44bcd05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44bcd047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp713u2bam                        0x000055aef2edd72e <unavailable> + 5934

    5    libc.so.6                          0x00002b44bd1fa460 __libc_start_main +
    245

    6    tmp713u2bam                        0x000055aef2edd1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // check if the array is empty\n\
    \    if arr.count == 0 {\n        return true\n    }\n    // check if the array\
    \ is sorted\n    if arr == arr.sorted() {\n        return true\n    }\n    //\
    \ check if the array is sorted in reverse order\n    if arr == arr.sorted(by:\
    \ >) {\n        return false\n    }\n    // check if the array is sorted in reverse\
    \ order\n    if arr == arr.sorted(by: <) {\n        return true\n    }\n    //\
    \ check if the array is sorted in reverse order\n    if arr == arr.sorted(by:\
    \ >) {\n        return false\n    }\n    // check if the array is sorted in reverse\
    \ order\n    if arr == arr.sorted(by: >) {\n        return false\n    }\n    //\
    \ check if the array is sorted in reverse order\n    if arr == arr.sorted(by:\
    \ >) {\n        return false\n    }\n    // check if the array is sorted in reverse\
    \ order\n    if arr == arr.sorted(by: >) {\n        return false\n    }\n    //\
    \ check if the array is sorted in reverse order\n    if arr == arr.sorted(by:\
    \ >) {\n        return false\n    }\n    // check if the array is sorted in reverse\
    \ order\n    if arr == arr.sorted(by: >) {\n        return false\n    }\n    //\
    \ check if the array is sorted in reverse order\n    if arr == arr.sorted(by:\
    \ >) {\n        return false\n    }\n    // check if the array is sorted in reverse\
    \ order\n    if arr == arr.sorted(by: >) {\n        return false\n    }\n    //\
    \ check if the array is sorted in reverse order\n    if arr == arr.sorted(by:\
    \ >) {\n        return false\n    }\n    // check if the array is sorted in reverse\
    \ order\n    if arr == arr.sorted(by: >) {\n        return false\n    }\n    //\
    \ check if the array is sorted in reverse order\n    if arr == arr.sorted(by:\
    \ >) {\n        return false\n    }\n    // check if the array is sorted in reverse\
    \ order\n    if arr == arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzh043otm.swift:81:18: error: expected '{' after 'if' condition\n\
    \    if arr == arr\n                 ^\n"
  stdout: ''
  timestamp: 1660028271
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while true {\n      \
    \  var i = 0\n        while i < arr.count - 1 {\n            if arr[i] > arr[i\
    \ + 1] {\n                break\n            }\n            i += 1\n        }\n\
    \        if i == arr.count - 1 {\n            return true\n        }\n       \
    \ if count == arr.count {\n            return false\n        }\n        let temp\
    \ = arr[arr.count - 1]\n        arr.removeLast()\n        arr.insert(temp, at:\
    \ 0)\n        count += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    var i = 0\n    while i < arr.count -\
    \ 1 {\n        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n     \
    \       arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n\
    \        } else {\n            i += 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpyg2v3av4/tmpyg2v3av4.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ea0d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36e9dcab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36e9dca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36e9dc97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyg2v3av4                        0x00005571be98e72e <unavailable> + 5934

    5    libc.so.6                          0x00002b36ea2bf460 __libc_start_main +
    245

    6    tmpyg2v3av4                        0x00005571be98e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n   \
    \     } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpybgfyl61/tmpybgfyl61.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a164aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a161a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a161a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a161a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpybgfyl61                        0x0000555f8edcc59a <unavailable> + 5530

    5    libc.so.6                          0x00002b6a16696460 __libc_start_main +
    245

    6    tmpybgfyl61                        0x0000555f8edcc1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpyk9_23nf/tmpyk9_23nf.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1fbf60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1fbc57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1fbc57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1fbc567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyk9_23nf                        0x000055cb128905ae <unavailable> + 5550

    5    libc.so.6                          0x00002ab1fc14c460 __libc_start_main +
    245

    6    tmpyk9_23nf                        0x000055cb12890079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // Base case\n    if arr.count ==\
    \ 0 {\n        return true\n    }\n    // Create a copy of the array\n    var\
    \ arr_copy = arr\n    // Sort the array\n    arr_copy.sort()\n    // Check if\
    \ the array is sorted\n    for i in 0..<arr.count {\n        if arr[i] != arr_copy[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpnmxo85b3/tmpnmxo85b3.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a79805c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a794fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a794fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a794fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnmxo85b3                        0x0000557b60e9666a <unavailable> + 5738

    5    libc.so.6                          0x00002b5a799f1460 __libc_start_main +
    245

    6    tmpnmxo85b3                        0x0000557b60e962c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    for i in 0..<arr.count {\n        if arr[i] > arr[i+1] {\n            count\
    \ += 1\n        }\n    }\n    if count > 1 {\n        return false\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c275fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c272f3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2c272f3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2c272f313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2c272f2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2c270f2e83 <unavailable> + 188035

    6    tmpmbzfyn43                        0x0000561f66067a84 <unavailable> + 6788

    7    tmpmbzfyn43                        0x0000561f660674d5 <unavailable> + 5333

    8    libc.so.6                          0x00002b2c277e8460 __libc_start_main +
    245

    9    tmpmbzfyn43                        0x0000561f660671a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n   \
    \     } else {\n            break\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp0q9y8szk/tmp0q9y8szk.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55ad3dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55ad0d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55ad0d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55ad0d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0q9y8szk                        0x0000558e9cb6c59a <unavailable> + 5530

    5    libc.so.6                          0x00002b55ad5cb460 __libc_start_main +
    245

    6    tmp0q9y8szk                        0x0000558e9cb6c1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n   \
    \     } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpybgfyl61/tmpybgfyl61.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a164aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a161a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a161a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a161a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpybgfyl61                        0x0000555f8edcc59a <unavailable> + 5530

    5    libc.so.6                          0x00002b6a16696460 __libc_start_main +
    245

    6    tmpybgfyl61                        0x0000555f8edcc1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count <= 1 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpggyswdv_/tmpggyswdv_.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a7849cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a78193b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a78193988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a781927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpggyswdv_                        0x000055634af1e72e <unavailable> + 5934

    5    libc.so.6                          0x00002b3a78688460 __libc_start_main +
    245

    6    tmpggyswdv_                        0x000055634af1e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while count < arr.count {\n        var i = 0\n        while i < arr.count\
    \ - 1 {\n            if arr[i] > arr[i + 1] {\n                let temp = arr[i]\n\
    \                arr[i] = arr[i + 1]\n                arr[i + 1] = temp\n    \
    \        }\n            i += 1\n        }\n        count += 1\n    }\n    return\
    \ arr == arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpzbzhg74o/tmpzbzhg74o.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e2deb9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e2dbb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e2dbb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e2dbaf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzbzhg74o                        0x0000562f9ac4669e <unavailable> + 5790

    5    libc.so.6                          0x00002b4e2e0a5460 __libc_start_main +
    245

    6    tmpzbzhg74o                        0x0000562f9ac46169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660028272
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    var i = 0\n    while i < arr.count {\n        if i == arr.count - 1 {\n \
    \           break\n        }\n        if arr[i] > arr[i + 1] {\n            count\
    \ += 1\n            let temp = arr[i]\n            arr[i] = arr[i + 1]\n     \
    \       arr[i + 1] = temp\n            i = 0\n        } else {\n            i\
    \ += 1\n        }\n    }\n    return count <= 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_3thq82m/tmp_3thq82m.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4138d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4135c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4135c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4135c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_3thq82m                        0x0000563dfe30e41a <unavailable> + 5146

    5    libc.so.6                          0x00002af413abe460 __libc_start_main +
    245

    6    tmp_3thq82m                        0x0000563dfe30e079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var sorted_arr = arr.sorted()\n    var count = 0\n    for i\
    \ in 0..<arr.count {\n        if arr[i] != sorted_arr[i] {\n            count\
    \ += 1\n        }\n    }\n    if count == 1 {\n        return true\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp8ee55lds/tmp8ee55lds.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a27e86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a27b7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a27b7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a27b7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ee55lds                        0x000055d22ac7e5ea <unavailable> + 5610

    5    libc.so.6                          0x00002b8a28072460 __libc_start_main +
    245

    6    tmp8ee55lds                        0x000055d22ac7e249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i = arr.count\
    \ - 1\n        } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp713u2bam/tmp713u2bam.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44bd00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44bcd05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44bcd05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44bcd047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp713u2bam                        0x000055aef2edd72e <unavailable> + 5934

    5    libc.so.6                          0x00002b44bd1fa460 __libc_start_main +
    245

    6    tmp713u2bam                        0x000055aef2edd1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var max_element = arr[0]\n    var max_index = 0\n    for i\
    \ in 1..<arr.count {\n        if arr[i] > max_element {\n            max_element\
    \ = arr[i]\n            max_index = i\n        }\n    }\n    if max_index == arr.count\
    \ - 1 {\n        return move_one_ball(arr: Array(arr[0..<arr.count - 1]))\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpnqlqkd8y/tmpnqlqkd8y.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c9b179c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c9ae70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c9ae70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c9ae6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnqlqkd8y                        0x000055ab53a9a69a <unavailable> + 5786

    5    libc.so.6                          0x00002b4c9b365460 __libc_start_main +
    245

    6    tmpnqlqkd8y                        0x000055ab53a9a2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1660028271
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   while i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            let\
    \ temp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n\
    \            i = 0\n        } else {\n            i += 1\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmppt624049/tmppt624049.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1630561c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1630258b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1630258988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16302577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppt624049                        0x000055e27471c5ae <unavailable> + 5550

    5    libc.so.6                          0x00002b163074d460 __libc_start_main +
    245

    6    tmppt624049                        0x000055e27471c079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpyk9_23nf/tmpyk9_23nf.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1fbf60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1fbc57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1fbc57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1fbc567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyk9_23nf                        0x000055cb128905ae <unavailable> + 5550

    5    libc.so.6                          0x00002ab1fc14c460 __libc_start_main +
    245

    6    tmpyk9_23nf                        0x000055cb12890079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var a = arr\n    var i = 0\n    var j = 0\n    var k = 0\n\
    \    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n \
    \   var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n  \
    \  var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n   \
    \ var aa = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n    var ae = 0\n\
    \    var af = 0\n    var ag = 0\n    var ah = 0\n    var ai = 0\n    var aj =\
    \ 0\n    var ak = 0\n    var al = 0\n    var am = 0\n    var an = 0\n    var ao\
    \ = 0\n    var ap = 0\n    var aq = 0\n    var ar = 0\n    var as_ = 0\n    var\
    \ at = 0\n    var au = 0\n    var av = 0\n    var aw = 0\n    var ax = 0\n   \
    \ var ay = 0\n    var az = 0\n    var ba = 0\n    var bb = 0\n    var bc = 0\n\
    \    var bd = 0\n    var be = 0\n    var bf = 0\n    var bg = 0\n    var bh =\
    \ 0\n    var bi = 0\n    var bj = 0\n    var bk = 0\n    var bl = 0\n    var bm\
    \ = 0\n    var bn = 0\n    var bo = 0\n    var bp = 0\n    var bq = 0\n    var\
    \ br = 0\n    var bs = 0\n    var bt = 0\n    var bu = 0\n    var bv = 0\n   \
    \ var bw = 0\n    var bx = 0\n    var by = 0\n    var bz = 0\n    var ca = 0\n\
    \    var cb = 0\n    var cc = 0\n    var cd = 0\n    var ce = 0\n    var cf =\
    \ 0\n    var cg = 0\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8u0w6dsm.swift:23:9: warning: initialization of variable 'a' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ a = arr\n    ~~~~^\n    _\n/tmp/tmp8u0w6dsm.swift:24:9: warning: initialization\
    \ of variable 'i' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var i = 0\n    ~~~~^\n    _\n/tmp/tmp8u0w6dsm.swift:25:9: warning:\
    \ initialization of variable 'j' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var j = 0\n    ~~~~^\n    _\n/tmp/tmp8u0w6dsm.swift:26:9:\
    \ warning: initialization of variable 'k' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var k = 0\n    ~~~~^\n    _\n/tmp/tmp8u0w6dsm.swift:27:9:\
    \ warning: initialization of variable 'l' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var l = 0\n    ~~~~^\n    _\n/tmp/tmp8u0w6dsm.swift:28:9:\
    \ warning: initialization of variable 'm' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var m = 0\n    ~~~~^\n    _\n/tmp/tmp8u0w6dsm.swift:29:9:\
    \ warning: initialization of variable 'n' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var n = 0\n    ~~~~^\n    _\n/tmp/tmp8u0w6dsm.swift:30:9:\
    \ warning: initialization of variable 'o' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var o = 0\n    ~~~~^\n    _\n/tmp/tmp8u0w6dsm.swift:31:9:\
    \ warning: initialization of variable 'p' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var p = 0\n    ~~~~^\n    _\n/tmp/tmp8u0w6dsm.swift:32:9:\
    \ warning: initialization of variable 'q' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var q = 0\n    ~~~~^\n    _\n/tmp/tmp8u0w6dsm.swift:33:9:\
    \ warning: initialization of variable 'r' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var r = 0\n    ~~~~^\n    _\n/tmp/tmp8u0w6dsm.swift:34:9:\
    \ warning: initialization of variable 's' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var s = "
  stdout: ''
  timestamp: 1660028271
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            break\n        }\n        i -=\
    \ 1\n    }\n    if i == 0 {\n        return true\n    }\n    var j = i - 1\n \
    \   while j > 0 {\n        if arr[j] < arr[j - 1] {\n            break\n     \
    \   }\n        j -= 1\n    }\n    if j == 0 {\n        return true\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028272
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   while i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            let\
    \ temp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n\
    \            i = 0\n        } else {\n            i += 1\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmppt624049/tmppt624049.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1630561c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1630258b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1630258988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16302577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppt624049                        0x000055e27471c5ae <unavailable> + 5550

    5    libc.so.6                          0x00002b163074d460 __libc_start_main +
    245

    6    tmppt624049                        0x000055e27471c079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpyk9_23nf/tmpyk9_23nf.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1fbf60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1fbc57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1fbc57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1fbc567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyk9_23nf                        0x000055cb128905ae <unavailable> + 5550

    5    libc.so.6                          0x00002ab1fc14c460 __libc_start_main +
    245

    6    tmpyk9_23nf                        0x000055cb12890079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028270
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// Explanation: By performin\
    \ 2 right shift operations, non-decreasing order can\n/// be achieved for the\
    \ given array.\n/// Explanation:It is not possible to get non-decreasing order\
    \ for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while count < arr.count {\n        var i = arr.count - 1\n        while i\
    \ > 0 {\n            if arr[i] < arr[i - 1] {\n                let temp = arr[i]\n\
    \                arr[i] = arr[i - 1]\n                arr[i - 1] = temp\n    \
    \            count += 1\n            }\n            i -= 1\n        }\n    }\n\
    \    return count < arr.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpg3kgrev9/tmpg3kgrev9.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a9017dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a8fe74b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a8fe74988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a8fe737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg3kgrev9                        0x00005620162e441a <unavailable> + 5146

    5    libc.so.6                          0x00002b9a90369460 __libc_start_main +
    245

    6    tmpg3kgrev9                        0x00005620162e4079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028272
