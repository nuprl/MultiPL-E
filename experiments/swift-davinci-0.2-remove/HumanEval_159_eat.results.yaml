language: swift
name: HumanEval_159_eat
results:
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total - need\n    return [eaten, total - eaten]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpco8vx30b/tmpco8vx30b.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0689860c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0689557b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0689557988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06895567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpco8vx30b                        0x00005611eb1ee384 <unavailable> + 4996

    5    libc.so.6                          0x00002b0689a4c460 __libc_start_main +
    245

    6    tmpco8vx30b                        0x00005611eb1edfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, remaining - (eaten - number)]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmprvs5cl6w/tmprvs5cl6w.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d09c2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d09922b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d09922988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d099217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprvs5cl6w                        0x00005585d7006424 <unavailable> + 5156

    5    libc.so.6                          0x00002b6d09e17460 __libc_start_main +
    245

    6    tmprvs5cl6w                        0x00005585d7006069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    if total >= need {\n        return [need, total - need]\n \
    \   } else {\n        return [total, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9emnby2/tmpz9emnby2.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7064873c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b706456ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b706456a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70645697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9emnby2                        0x000055e89aff3384 <unavailable> + 4996

    5    libc.so.6                          0x00002b7064a5f460 __libc_start_main +
    245

    6    tmpz9emnby2                        0x000055e89aff2fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let carrots =\
    \ number + remaining\n    let eaten = carrots >= need ? need : carrots\n    return\
    \ [eaten, carrots - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: Exception
  stderr: 'tmpm4a1np2x/tmpm4a1np2x.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fdb06ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fdad61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fdad61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fdad607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm4a1np2x                        0x000055ae8cbcd384 <unavailable> + 4996

    5    libc.so.6                          0x00002b2fdb256460 __libc_start_main +
    245

    6    tmpm4a1np2x                        0x000055ae8cbccfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let carrots =\
    \ number + remaining\n    let eaten = carrots >= need ? need : carrots\n    return\
    \ [eaten, carrots - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: Exception
  stderr: 'tmpm4a1np2x/tmpm4a1np2x.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fdb06ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fdad61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fdad61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fdad607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm4a1np2x                        0x000055ae8cbcd384 <unavailable> + 4996

    5    libc.so.6                          0x00002b2fdb256460 __libc_start_main +
    245

    6    tmpm4a1np2x                        0x000055ae8cbccfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    return [total, total < need ? 0 : total - need]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpvkpmjyhy/tmpvkpmjyhy.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98e03f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98e00ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98e00eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98e00ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvkpmjyhy                        0x0000559ecf2f5384 <unavailable> + 4996

    5    libc.so.6                          0x00002b98e05e0460 __libc_start_main +
    245

    6    tmpvkpmjyhy                        0x0000559ecf2f4fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    return [number\
    \ + min(need, remaining), max(0, remaining - need)]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013972
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let carrots =\
    \ number + remaining\n    return carrots >= need ? [need, carrots - need] : [carrots,\
    \ 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining:\
    \ 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\n\
    assert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmppgl1r2np/tmppgl1r2np.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6dba55c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6db74cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6db74c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6db74b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppgl1r2np                        0x0000564b2601b384 <unavailable> + 4996

    5    libc.so.6                          0x00002ab6dbc41460 __libc_start_main +
    245

    6    tmppgl1r2np                        0x0000564b2601afc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [number, remaining]\n    if number < need {\n        result[0] += remaining\n\
    \        result[1] = 0\n    } else {\n        result[1] = remaining - (need -\
    \ number)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp41qhc4fc/tmp41qhc4fc.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b160cefcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b160cbf3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b160cbf3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b160cbf27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp41qhc4fc                        0x000055830709b3e4 <unavailable> + 5092

    5    libc.so.6                          0x00002b160d0e8460 __libc_start_main +
    245

    6    tmp41qhc4fc                        0x000055830709b029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let left = total - need\n    return left >= 0 ? [need, left]\
    \ : [total, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp2_n4eojh/tmp2_n4eojh.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83440ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8343dc3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8343dc3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8343dc27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2_n4eojh                        0x000055dc5a92c384 <unavailable> + 4996

    5    libc.so.6                          0x00002b83442b8460 __libc_start_main +
    245

    6    tmp2_n4eojh                        0x000055dc5a92bfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let carrots =\
    \ number + remaining\n    let eaten = carrots > need ? need : carrots\n    return\
    \ [eaten, carrots - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: Exception
  stderr: 'tmp6747_5j8/tmp6747_5j8.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d4634ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d46041b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d46041988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d460407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6747_5j8                        0x000055b7c7f79384 <unavailable> + 4996

    5    libc.so.6                          0x00002b2d46536460 __libc_start_main +
    245

    6    tmp6747_5j8                        0x000055b7c7f78fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var eaten = number\n\
    \    var left = remaining\n    if number + remaining >= need {\n        eaten\
    \ += need\n        left -= need\n    } else {\n        eaten += remaining\n  \
    \      left = 0\n    }\n    return [eaten, left]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpl1y4ifvw/tmpl1y4ifvw.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb6d9c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb6d6c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb6d6c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb6d6bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1y4ifvw                        0x0000556112200873 <unavailable> + 6259

    5    libc.so.6                          0x00002adb6dbb5460 __libc_start_main +
    245

    6    tmpl1y4ifvw                        0x00005561121fffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    if total >= need {\n        return [need, total - need]\n \
    \   } else {\n        return [total, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9emnby2/tmpz9emnby2.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7064873c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b706456ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b706456a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70645697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9emnby2                        0x000055e89aff3384 <unavailable> + 4996

    5    libc.so.6                          0x00002b7064a5f460 __libc_start_main +
    245

    6    tmpz9emnby2                        0x000055e89aff2fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let carrots =\
    \ number + remaining\n    let eaten = carrots >= need ? need : carrots\n    return\
    \ [eaten, carrots - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: Exception
  stderr: 'tmpm4a1np2x/tmpm4a1np2x.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fdb06ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fdad61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fdad61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fdad607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm4a1np2x                        0x000055ae8cbcd384 <unavailable> + 4996

    5    libc.so.6                          0x00002b2fdb256460 __libc_start_main +
    245

    6    tmpm4a1np2x                        0x000055ae8cbccfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [Int]()\n    if number + remaining < need {\n        result.append(number +\
    \ remaining)\n        result.append(0)\n    } else {\n        result.append(need)\n\
    \        result.append(number + remaining - need)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp70zp1pwq/tmp70zp1pwq.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea25049c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea24d40b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea24d40988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea24d3f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp70zp1pwq                        0x000055d483321444 <unavailable> + 5188

    5    libc.so.6                          0x00002aea25235460 __libc_start_main +
    245

    6    tmp70zp1pwq                        0x000055d483321089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [number, remaining]\n    if number + remaining >= need {\n        result[0]\
    \ = need\n        result[1] = number + remaining - need\n    } else {\n      \
    \  result[0] = number + remaining\n        result[1] = 0\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp6w3z48y6/tmp6w3z48y6.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf786d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf783c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf783c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf783c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6w3z48y6                        0x0000557e658923e4 <unavailable> + 5092

    5    libc.so.6                          0x00002aaf788bd460 __libc_start_main +
    245

    6    tmp6w3z48y6                        0x0000557e65892029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, need - eaten]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpsrb0ciu8/tmpsrb0ciu8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2504b5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2504853b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2504853988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25048527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsrb0ciu8                        0x00005631bde0b424 <unavailable> + 5156

    5    libc.so.6                          0x00002b2504d48460 __libc_start_main +
    245

    6    tmpsrb0ciu8                        0x00005631bde0b069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp49086_dz/tmp49086_dz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d6c880c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d6c577b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d6c577988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d6c5767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49086_dz                        0x0000559bb7320384 <unavailable> + 4996

    5    libc.so.6                          0x00002b9d6ca6c460 __libc_start_main +
    245

    6    tmp49086_dz                        0x0000559bb731ffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [number, remaining]\n    if need > remaining {\n        result[0] += remaining\n\
    \        result[1] = 0\n    } else {\n        result[0] += need\n        result[1]\
    \ -= need\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let carrotsEaten\
    \ = min(number + remaining, need)\n    let carrotsLeft = remaining - (carrotsEaten\
    \ - number)\n    return [carrotsEaten, carrotsLeft]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp8ymtf9b3/tmp8ymtf9b3.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d24749c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d24440b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d24440988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d2443f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ymtf9b3                        0x00005605027f4424 <unavailable> + 5156

    5    libc.so.6                          0x00002b2d24935460 __libc_start_main +
    245

    6    tmp8ymtf9b3                        0x00005605027f4069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp49086_dz/tmp49086_dz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d6c880c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d6c577b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d6c577988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d6c5767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49086_dz                        0x0000559bb7320384 <unavailable> + 4996

    5    libc.so.6                          0x00002b9d6ca6c460 __libc_start_main +
    245

    6    tmp49086_dz                        0x0000559bb731ffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    if total >= need {\n        return [need, total - need]\n \
    \   } else {\n        return [total, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9emnby2/tmpz9emnby2.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7064873c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b706456ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b706456a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70645697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9emnby2                        0x000055e89aff3384 <unavailable> + 4996

    5    libc.so.6                          0x00002b7064a5f460 __libc_start_main +
    245

    6    tmpz9emnby2                        0x000055e89aff2fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp49086_dz/tmp49086_dz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d6c880c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d6c577b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d6c577988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d6c5767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49086_dz                        0x0000559bb7320384 <unavailable> + 4996

    5    libc.so.6                          0x00002b9d6ca6c460 __libc_start_main +
    245

    6    tmp49086_dz                        0x0000559bb731ffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    if total >= need {\n        return [need, total - need]\n \
    \   } else {\n        return [total, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9emnby2/tmpz9emnby2.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7064873c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b706456ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b706456a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70645697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9emnby2                        0x000055e89aff3384 <unavailable> + 4996

    5    libc.so.6                          0x00002b7064a5f460 __libc_start_main +
    245

    6    tmpz9emnby2                        0x000055e89aff2fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [number, remaining]\n    if remaining >= need {\n        result[0] += need\n\
    \        result[1] -= need\n    } else {\n        result[0] += remaining\n   \
    \     result[1] = 0\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number + remaining\
    \ < need {\n        return [number + remaining, 0]\n    } else {\n        return\
    \ [need, number + remaining - need]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp3068g3vk/tmp3068g3vk.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30a878cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30a8483b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30a8483988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30a84827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3068g3vk                        0x0000563ca0b4a384 <unavailable> + 4996

    5    libc.so.6                          0x00002b30a8978460 __libc_start_main +
    245

    6    tmp3068g3vk                        0x0000563ca0b49fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, remaining - (eaten - number)]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmprvs5cl6w/tmprvs5cl6w.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d09c2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d09922b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d09922988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d099217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprvs5cl6w                        0x00005585d7006424 <unavailable> + 5156

    5    libc.so.6                          0x00002b6d09e17460 __libc_start_main +
    245

    6    tmprvs5cl6w                        0x00005585d7006069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number + remaining\
    \ >= need {\n        return [need, number + remaining - need]\n    } else {\n\
    \        return [number + remaining, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpwebet1u0/tmpwebet1u0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95656e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95653dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95653db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95653da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwebet1u0                        0x000056184ed5f384 <unavailable> + 4996

    5    libc.so.6                          0x00002b95658d0460 __libc_start_main +
    245

    6    tmpwebet1u0                        0x000056184ed5efc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp49086_dz/tmp49086_dz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d6c880c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d6c577b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d6c577988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d6c5767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49086_dz                        0x0000559bb7320384 <unavailable> + 4996

    5    libc.so.6                          0x00002b9d6ca6c460 __libc_start_main +
    245

    6    tmp49086_dz                        0x0000559bb731ffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp49086_dz/tmp49086_dz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d6c880c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d6c577b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d6c577988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d6c5767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49086_dz                        0x0000559bb7320384 <unavailable> + 4996

    5    libc.so.6                          0x00002b9d6ca6c460 __libc_start_main +
    245

    6    tmp49086_dz                        0x0000559bb731ffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [number, remaining]\n    if number + remaining >= need {\n        result[0]\
    \ = need\n        result[1] = number + remaining - need\n    } else {\n      \
    \  result[0] = number + remaining\n        result[1] = 0\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp6w3z48y6/tmp6w3z48y6.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf786d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf783c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf783c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf783c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6w3z48y6                        0x0000557e658923e4 <unavailable> + 5092

    5    libc.so.6                          0x00002aaf788bd460 __libc_start_main +
    245

    6    tmp6w3z48y6                        0x0000557e65892029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total < need ? total : need\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpr1rli66z/tmpr1rli66z.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002addc17bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002addc14b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002addc14b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002addc14b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr1rli66z                        0x00005651135b2384 <unavailable> + 4996

    5    libc.so.6                          0x00002addc19aa460 __libc_start_main +
    245

    6    tmpr1rli66z                        0x00005651135b1fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013973
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let carrots =\
    \ number + remaining\n    if carrots >= need {\n        return [need, carrots\
    \ - need]\n    } else {\n        return [carrots, 0]\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpl3qjtmsm/tmpl3qjtmsm.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada7bc82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada7b979b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada7b979988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada7b9787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl3qjtmsm                        0x0000558ad42d3384 <unavailable> + 4996

    5    libc.so.6                          0x00002ada7be6e460 __libc_start_main +
    245

    6    tmpl3qjtmsm                        0x0000558ad42d2fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013973
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var eaten = number\n\
    \    var left = remaining\n    if number + remaining < need {\n        eaten +=\
    \ remaining\n        left = 0\n    } else {\n        eaten += need\n        left\
    \ -= need\n    }\n    return [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpu7yiy5eh/tmpu7yiy5eh.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002accefe4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accefb46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002accefb46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002accefb457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu7yiy5eh                        0x0000559b343f7873 <unavailable> + 6259

    5    libc.so.6                          0x00002accf003b460 __libc_start_main +
    245

    6    tmpu7yiy5eh                        0x0000559b343f6fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013973
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    return [number\
    \ + min(need, remaining), max(0, remaining - need)]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013972
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var eaten = number\n\
    \    var left = remaining\n    if number + remaining >= need {\n        eaten\
    \ += need\n        left -= need\n    } else {\n        eaten += remaining\n  \
    \      left = 0\n    }\n    return [eaten, left]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpl1y4ifvw/tmpl1y4ifvw.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb6d9c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb6d6c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb6d6c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb6d6bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1y4ifvw                        0x0000556112200873 <unavailable> + 6259

    5    libc.so.6                          0x00002adb6dbb5460 __libc_start_main +
    245

    6    tmpl1y4ifvw                        0x00005561121fffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, need - eaten]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpsrb0ciu8/tmpsrb0ciu8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2504b5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2504853b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2504853988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25048527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsrb0ciu8                        0x00005631bde0b424 <unavailable> + 5156

    5    libc.so.6                          0x00002b2504d48460 __libc_start_main +
    245

    6    tmpsrb0ciu8                        0x00005631bde0b069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var total = number\
    \ + remaining\n    if total >= need {\n        return [need, total - need]\n \
    \   } else {\n        return [total, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp75vxgs30/tmp75vxgs30.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c82b5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c82855b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c82855988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c828547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp75vxgs30                        0x0000560fb6882384 <unavailable> + 4996

    5    libc.so.6                          0x00002b4c82d4a460 __libc_start_main +
    245

    6    tmp75vxgs30                        0x0000560fb6881fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013973
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    return [total, total >= need ? total - need : 0]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpf7sp7sfa/tmpf7sp7sfa.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24edf9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24edc95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24edc95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24edc947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf7sp7sfa                        0x00005608c1b08384 <unavailable> + 4996

    5    libc.so.6                          0x00002b24ee18a460 __libc_start_main +
    245

    6    tmpf7sp7sfa                        0x00005608c1b07fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013973
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = min(total, need)\n    let left = total - eaten\n\
    \    return [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb91eld4x/tmpb91eld4x.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b479e642c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b479e339b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b479e339988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b479e3387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb91eld4x                        0x0000564af35a4424 <unavailable> + 5156

    5    libc.so.6                          0x00002b479e82e460 __libc_start_main +
    245

    6    tmpb91eld4x                        0x0000564af35a4069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013973
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, max(0, remaining - (need - number))]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpbb39n9yi/tmpbb39n9yi.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9ceb73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9ce86ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9ce86a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9ce8697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbb39n9yi                        0x0000557f47096474 <unavailable> + 5236

    5    libc.so.6                          0x00002ab9ced5f460 __libc_start_main +
    245

    6    tmpbb39n9yi                        0x0000557f470960b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013973
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013972
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    return [number\
    \ + min(need, remaining), max(0, remaining - need)]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp49086_dz/tmp49086_dz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d6c880c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d6c577b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d6c577988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d6c5767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49086_dz                        0x0000559bb7320384 <unavailable> + 4996

    5    libc.so.6                          0x00002b9d6ca6c460 __libc_start_main +
    245

    6    tmp49086_dz                        0x0000559bb731ffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013972
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    return [number\
    \ + min(need, remaining), max(0, remaining - need)]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [number, remaining]\n    if number + remaining >= need {\n        result[0]\
    \ = need\n        result[1] = number + remaining - need\n    } else {\n      \
    \  result[0] = number + remaining\n        result[1] = 0\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp6w3z48y6/tmp6w3z48y6.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf786d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf783c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf783c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf783c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6w3z48y6                        0x0000557e658923e4 <unavailable> + 5092

    5    libc.so.6                          0x00002aaf788bd460 __libc_start_main +
    245

    6    tmp6w3z48y6                        0x0000557e65892029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var number =\
    \ number\n    var remaining = remaining\n    var result = [number, remaining]\n\
    \    if number + remaining < need {\n        result[0] = number + remaining\n\
    \        result[1] = 0\n    } else {\n        result[0] = need\n        result[1]\
    \ = remaining - (need - number)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpctm194ty/tmpctm194ty.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46171bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4616eb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4616eb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4616eb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctm194ty                        0x00005621490353e4 <unavailable> + 5092

    5    libc.so.6                          0x00002b46173a6460 __libc_start_main +
    245

    6    tmpctm194ty                        0x0000562149035029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660013973
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total < need ? total : need\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpr1rli66z/tmpr1rli66z.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002addc17bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002addc14b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002addc14b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002addc14b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr1rli66z                        0x00005651135b2384 <unavailable> + 4996

    5    libc.so.6                          0x00002addc19aa460 __libc_start_main +
    245

    6    tmpr1rli66z                        0x00005651135b1fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013973
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number + remaining\
    \ < need {\n        return [number + remaining, 0]\n    } else {\n        return\
    \ [need, number + remaining - need]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp3068g3vk/tmp3068g3vk.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30a878cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30a8483b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30a8483988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30a84827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3068g3vk                        0x0000563ca0b4a384 <unavailable> + 4996

    5    libc.so.6                          0x00002b30a8978460 __libc_start_main +
    245

    6    tmp3068g3vk                        0x0000563ca0b49fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [Int]()\n    if number + remaining >= need {\n        result.append(need)\n\
    \        result.append(number + remaining - need)\n    } else {\n        result.append(number\
    \ + remaining)\n        result.append(0)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpvg3a8tqi/tmpvg3a8tqi.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c07e0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c07b05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c07b05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c07b047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvg3a8tqi                        0x000055776a27a444 <unavailable> + 5188

    5    libc.so.6                          0x00002b4c07ffa460 __libc_start_main +
    245

    6    tmpvg3a8tqi                        0x000055776a27a089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013973
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [number, remaining]\n    if number + remaining >= need {\n        result[0]\
    \ = need\n        result[1] = remaining - (need - number)\n    } else {\n    \
    \    result[0] = number + remaining\n        result[1] = 0\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp787k3qiz/tmp787k3qiz.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7dec479c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7dec170b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7dec170988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7dec16f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp787k3qiz                        0x000055557112e3e4 <unavailable> + 5092

    5    libc.so.6                          0x00002b7dec665460 __libc_start_main +
    245

    6    tmp787k3qiz                        0x000055557112e029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660013973
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    return [total, total >= need ? total - need : 0]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpf7sp7sfa/tmpf7sp7sfa.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24edf9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24edc95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24edc95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24edc947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf7sp7sfa                        0x00005608c1b08384 <unavailable> + 4996

    5    libc.so.6                          0x00002b24ee18a460 __libc_start_main +
    245

    6    tmpf7sp7sfa                        0x00005608c1b07fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013973
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp49086_dz/tmp49086_dz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d6c880c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d6c577b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d6c577988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d6c5767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49086_dz                        0x0000559bb7320384 <unavailable> + 4996

    5    libc.so.6                          0x00002b9d6ca6c460 __libc_start_main +
    245

    6    tmp49086_dz                        0x0000559bb731ffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total < need ? total : need\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpr1rli66z/tmpr1rli66z.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002addc17bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002addc14b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002addc14b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002addc14b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr1rli66z                        0x00005651135b2384 <unavailable> + 4996

    5    libc.so.6                          0x00002addc19aa460 __libc_start_main +
    245

    6    tmpr1rli66z                        0x00005651135b1fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013973
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var eaten = number\n\
    \    var left = remaining\n    if left >= need {\n        eaten += need\n    \
    \    left -= need\n    } else {\n        eaten += left\n        left = 0\n   \
    \ }\n    return [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013973
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    if total >= need {\n        return [need, total - need]\n \
    \   } else {\n        return [total, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9emnby2/tmpz9emnby2.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7064873c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b706456ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b706456a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70645697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9emnby2                        0x000055e89aff3384 <unavailable> + 4996

    5    libc.so.6                          0x00002b7064a5f460 __libc_start_main +
    245

    6    tmpz9emnby2                        0x000055e89aff2fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [number, remaining]\n    if number + remaining < need {\n        result[0] =\
    \ number + remaining\n        result[1] = 0\n    } else {\n        result[0] =\
    \ need\n        result[1] = remaining - (need - number)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmph6nrtena/tmph6nrtena.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7a0c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7a0916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7a0916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7a09157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph6nrtena                        0x00005631f06453e4 <unavailable> + 5092

    5    libc.so.6                          0x00002ac7a0e0b460 __libc_start_main +
    245

    6    tmph6nrtena                        0x00005631f0645029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660013973
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let carrots =\
    \ number + remaining\n    let eaten = carrots > need ? need : carrots\n    return\
    \ [eaten, carrots - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: Exception
  stderr: 'tmp6747_5j8/tmp6747_5j8.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d4634ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d46041b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d46041988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d460407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6747_5j8                        0x000055b7c7f79384 <unavailable> + 4996

    5    libc.so.6                          0x00002b2d46536460 __libc_start_main +
    245

    6    tmp6747_5j8                        0x000055b7c7f78fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let carrots =\
    \ number + remaining\n    let eaten = carrots >= need ? need : carrots\n    return\
    \ [eaten, carrots - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: Exception
  stderr: 'tmpm4a1np2x/tmpm4a1np2x.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fdb06ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fdad61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fdad61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fdad607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm4a1np2x                        0x000055ae8cbcd384 <unavailable> + 4996

    5    libc.so.6                          0x00002b2fdb256460 __libc_start_main +
    245

    6    tmpm4a1np2x                        0x000055ae8cbccfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp49086_dz/tmp49086_dz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d6c880c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d6c577b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d6c577988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d6c5767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49086_dz                        0x0000559bb7320384 <unavailable> + 4996

    5    libc.so.6                          0x00002b9d6ca6c460 __libc_start_main +
    245

    6    tmp49086_dz                        0x0000559bb731ffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, max(0, eaten - need)]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp59q4f54p/tmp59q4f54p.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92b415ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92b3e51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92b3e51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92b3e507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp59q4f54p                        0x000055b9d38bd474 <unavailable> + 5236

    5    libc.so.6                          0x00002b92b4346460 __libc_start_main +
    245

    6    tmp59q4f54p                        0x000055b9d38bd0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013973
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [Int]()\n    if number + remaining < need {\n        result.append(number +\
    \ remaining)\n        result.append(0)\n    } else {\n        result.append(need)\n\
    \        result.append(number + remaining - need)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp70zp1pwq/tmp70zp1pwq.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea25049c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea24d40b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea24d40988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea24d3f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp70zp1pwq                        0x000055d483321444 <unavailable> + 5188

    5    libc.so.6                          0x00002aea25235460 __libc_start_main +
    245

    6    tmp70zp1pwq                        0x000055d483321089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [number, remaining]\n    if need > remaining {\n        result[0] += remaining\n\
    \        result[1] = 0\n    } else {\n        result[0] += need\n        result[1]\
    \ -= need\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [number, remaining]\n    if number + remaining < need {\n        result[0] =\
    \ number + remaining\n        result[1] = 0\n    } else {\n        result[0] =\
    \ need\n        result[1] = remaining - (need - number)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmph6nrtena/tmph6nrtena.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7a0c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7a0916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7a0916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7a09157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph6nrtena                        0x00005631f06453e4 <unavailable> + 5092

    5    libc.so.6                          0x00002ac7a0e0b460 __libc_start_main +
    245

    6    tmph6nrtena                        0x00005631f0645029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660013973
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, remaining - (eaten - number)]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmprvs5cl6w/tmprvs5cl6w.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d09c2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d09922b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d09922988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d099217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprvs5cl6w                        0x00005585d7006424 <unavailable> + 5156

    5    libc.so.6                          0x00002b6d09e17460 __libc_start_main +
    245

    6    tmprvs5cl6w                        0x00005585d7006069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(need,\
    \ remaining)\n    return [number + eaten, remaining - eaten]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013973
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var carrots =\
    \ remaining + number\n    if carrots >= need {\n        return [need, carrots\
    \ - need]\n    } else {\n        return [carrots, 0]\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpuu1g8w4p/tmpuu1g8w4p.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af496d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af496a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af496a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af496a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuu1g8w4p                        0x0000563fe7bc0384 <unavailable> + 4996

    5    libc.so.6                          0x00002af496f65460 __libc_start_main +
    245

    6    tmpuu1g8w4p                        0x0000563fe7bbffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013973
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, need - eaten]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpsrb0ciu8/tmpsrb0ciu8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2504b5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2504853b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2504853988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25048527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsrb0ciu8                        0x00005631bde0b424 <unavailable> + 5156

    5    libc.so.6                          0x00002b2504d48460 __libc_start_main +
    245

    6    tmpsrb0ciu8                        0x00005631bde0b069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number + remaining\
    \ >= need {\n        return [need, number + remaining - need]\n    } else {\n\
    \        return [number + remaining, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpwebet1u0/tmpwebet1u0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95656e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95653dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95653db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95653da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwebet1u0                        0x000056184ed5f384 <unavailable> + 4996

    5    libc.so.6                          0x00002b95658d0460 __libc_start_main +
    245

    6    tmpwebet1u0                        0x000056184ed5efc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [number, remaining]\n    if number + remaining < need {\n        result[0] =\
    \ number + remaining\n        result[1] = 0\n    } else {\n        result[0] =\
    \ need\n        result[1] = remaining - (need - number)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmph6nrtena/tmph6nrtena.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7a0c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7a0916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7a0916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7a09157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph6nrtena                        0x00005631f06453e4 <unavailable> + 5092

    5    libc.so.6                          0x00002ac7a0e0b460 __libc_start_main +
    245

    6    tmph6nrtena                        0x00005631f0645029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660013973
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    if total >= need {\n        return [need, total - need]\n \
    \   } else {\n        return [total, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9emnby2/tmpz9emnby2.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7064873c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b706456ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b706456a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70645697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9emnby2                        0x000055e89aff3384 <unavailable> + 4996

    5    libc.so.6                          0x00002b7064a5f460 __libc_start_main +
    245

    6    tmpz9emnby2                        0x000055e89aff2fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    return [total, total >= need ? total - need : 0]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpf7sp7sfa/tmpf7sp7sfa.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24edf9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24edc95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24edc95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24edc947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf7sp7sfa                        0x00005608c1b08384 <unavailable> + 4996

    5    libc.so.6                          0x00002b24ee18a460 __libc_start_main +
    245

    6    tmpf7sp7sfa                        0x00005608c1b07fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013973
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let left = total - need\n    return [left, left < 0 ? 0 : left]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpp82_jq3v/tmpp82_jq3v.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0db4786c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0db447db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0db447d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0db447c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp82_jq3v                        0x000056450de03384 <unavailable> + 4996

    5    libc.so.6                          0x00002b0db4972460 __libc_start_main +
    245

    6    tmpp82_jq3v                        0x000056450de02fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013973
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp49086_dz/tmp49086_dz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d6c880c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d6c577b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d6c577988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d6c5767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49086_dz                        0x0000559bb7320384 <unavailable> + 4996

    5    libc.so.6                          0x00002b9d6ca6c460 __libc_start_main +
    245

    6    tmp49086_dz                        0x0000559bb731ffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let carrots =\
    \ number + remaining\n    return carrots >= need ? [need, carrots - need] : [carrots,\
    \ 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining:\
    \ 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\n\
    assert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmppgl1r2np/tmppgl1r2np.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6dba55c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6db74cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6db74c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6db74b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppgl1r2np                        0x0000564b2601b384 <unavailable> + 4996

    5    libc.so.6                          0x00002ab6dbc41460 __libc_start_main +
    245

    6    tmppgl1r2np                        0x0000564b2601afc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    return [number\
    \ + min(need, remaining), max(0, remaining - need)]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var eaten = number\n\
    \    var left = remaining\n    if number + remaining < need {\n        eaten +=\
    \ remaining\n        left = 0\n    } else {\n        eaten += need\n        left\
    \ -= need\n    }\n    return [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpu7yiy5eh/tmpu7yiy5eh.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002accefe4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accefb46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002accefb46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002accefb457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu7yiy5eh                        0x0000559b343f7873 <unavailable> + 6259

    5    libc.so.6                          0x00002accf003b460 __libc_start_main +
    245

    6    tmpu7yiy5eh                        0x0000559b343f6fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013973
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, remaining - (eaten - number)]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmprvs5cl6w/tmprvs5cl6w.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d09c2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d09922b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d09922988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d099217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprvs5cl6w                        0x00005585d7006424 <unavailable> + 5156

    5    libc.so.6                          0x00002b6d09e17460 __libc_start_main +
    245

    6    tmprvs5cl6w                        0x00005585d7006069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, remaining - (eaten - number)]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmprvs5cl6w/tmprvs5cl6w.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d09c2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d09922b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d09922988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d099217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprvs5cl6w                        0x00005585d7006424 <unavailable> + 5156

    5    libc.so.6                          0x00002b6d09e17460 __libc_start_main +
    245

    6    tmprvs5cl6w                        0x00005585d7006069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    if total < need {\n        return [total, 0]\n    }\n    return\
    \ [need, total - need]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: Exception
  stderr: 'tmpc8lpu_oo/tmpc8lpu_oo.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed1f471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed1f168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed1f168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed1f1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc8lpu_oo                        0x000055d7e5b31384 <unavailable> + 4996

    5    libc.so.6                          0x00002aed1f65d460 __libc_start_main +
    245

    6    tmpc8lpu_oo                        0x000055d7e5b30fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013973
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013972
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var eaten = number\n\
    \    var left = remaining\n    if left >= need {\n        eaten += need\n    \
    \    left -= need\n    } else {\n        eaten += left\n        left = 0\n   \
    \ }\n    return [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013973
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, remaining - (eaten - number)]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmprvs5cl6w/tmprvs5cl6w.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d09c2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d09922b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d09922988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d099217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprvs5cl6w                        0x00005585d7006424 <unavailable> + 5156

    5    libc.so.6                          0x00002b6d09e17460 __libc_start_main +
    245

    6    tmprvs5cl6w                        0x00005585d7006069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total < need ? total : need\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpr1rli66z/tmpr1rli66z.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002addc17bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002addc14b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002addc14b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002addc14b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr1rli66z                        0x00005651135b2384 <unavailable> + 4996

    5    libc.so.6                          0x00002addc19aa460 __libc_start_main +
    245

    6    tmpr1rli66z                        0x00005651135b1fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013973
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpb7512r5y/tmpb7512r5y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9355e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9352d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9352d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9352d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7512r5y                        0x00005653002da384 <unavailable> + 4996

    5    libc.so.6                          0x00002af9357ce460 __libc_start_main +
    245

    6    tmpb7512r5y                        0x00005653002d9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number + remaining\
    \ < need {\n        return [number + remaining, 0]\n    } else {\n        return\
    \ [need, number + remaining - need]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp3068g3vk/tmp3068g3vk.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30a878cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30a8483b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30a8483988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30a84827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3068g3vk                        0x0000563ca0b4a384 <unavailable> + 4996

    5    libc.so.6                          0x00002b30a8978460 __libc_start_main +
    245

    6    tmp3068g3vk                        0x0000563ca0b49fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// Variables:\n/// @number : integer\n/// the\
    \ number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpzyr254n0/tmpzyr254n0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a8331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a8028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a8028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a80277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyr254n0                        0x00005604768c3424 <unavailable> + 5156

    5    libc.so.6                          0x00002ba0a851d460 __libc_start_main +
    245

    6    tmpzyr254n0                        0x00005604768c3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013972
