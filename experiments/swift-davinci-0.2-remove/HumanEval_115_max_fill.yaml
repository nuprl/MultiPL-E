name: HumanEval_115_max_fill
language: swift
prompt: "\n/// You are given a rectangular grid of wells. Each row represents a single\
  \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each well\
  \ has a corresponding bucket that can be used to extract water from it, \n/// and\
  \ all buckets have the same capacity.\n/// Your task is to use the buckets to empty\
  \ the wells.\n/// Output the number of times you need to lower the buckets.\n///\
  \ Example 1:\n/// Example 2:\n/// Example 3:\n/// Constraints:\n/// * all wells\
  \ have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1 <= grid[:,1].length\
  \ <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity <= 10\nfunc max_fill(grid:\
  \ [[Int]], capacity: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(max_fill(grid: [[0, 0, 1, 0], [0, 1, 0,\
  \ 0], [1, 1, 1, 1]], capacity: 1) == 6)\nassert(max_fill(grid: [[0, 0, 1, 1], [0,\
  \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], capacity: 2) == 5)\nassert(max_fill(grid:\
  \ [[0, 0, 0], [0, 0, 0]], capacity: 5) == 0)\nassert(max_fill(grid: [[1, 1, 1, 1],\
  \ [1, 1, 1, 1]], capacity: 2) == 4)\nassert(max_fill(grid: [[1, 1, 1, 1], [1, 1,\
  \ 1, 1]], capacity: 9) == 2)"
completions: ["    var result = 0\n    for row in grid {\n        var sum = 0\n  \
    \      for col in row {\n            sum += col\n        }\n        result +=\
    \ sum / capacity\n        if sum % capacity > 0 {\n            result += 1\n \
    \       }\n    }\n    return result", "    var grid = grid\n    var count = 0\n\
    \    while true {\n        var filled = false\n        for i in 0..<grid.count\
    \ {\n            for j in 0..<grid[i].count {\n                if grid[i][j] ==\
    \ 1 {\n                    grid[i][j] = 0\n                    filled = true\n\
    \                }\n            }\n        }\n        if !filled {\n         \
    \   break\n        }\n        count += 1\n    }\n    return count", "    var grid\
    \ = grid\n    var count = 0\n    while true {\n        var filled = false\n  \
    \      for i in 0..<grid.count {\n            for j in 0..<grid[i].count {\n \
    \               if grid[i][j] == 1 {\n                    grid[i][j] = 0\n   \
    \                 filled = true\n                }\n            }\n        }\n\
    \        if !filled {\n            break\n        }\n        count += 1\n    }\n\
    \    return count", "    var result = 0\n    var row_max = 0\n    for row in grid\
    \ {\n        row_max = 0\n        for col in row {\n            if col > row_max\
    \ {\n                row_max = col\n            }\n        }\n        result +=\
    \ row_max\n    }\n    return result / capacity", "    var count = 0\n    var grid\
    \ = grid\n    for i in 0..<grid.count {\n        var row = grid[i]\n        var\
    \ sum = 0\n        for j in 0..<row.count {\n            sum += row[j]\n     \
    \   }\n        if sum > capacity {\n            count += 1\n            for j\
    \ in 0..<row.count {\n                if row[j] == 1 {\n                    row[j]\
    \ = 0\n                }\n            }\n        }\n        grid[i] = row\n  \
    \  }\n    return count", "    var count = 0\n    var grid = grid\n    for i in\
    \ 0..<grid.count {\n        for j in 0..<grid[i].count {\n            if grid[i][j]\
    \ == 1 {\n                count += 1\n                fill_bucket(grid: &grid,\
    \ i: i, j: j, capacity: capacity)\n            }\n        }\n    }\n    return\
    \ count", "    var grid = grid\n    var count = 0\n    for row in 0..<grid.count\
    \ {\n        for col in 0..<grid[row].count {\n            if grid[row][col] ==\
    \ 1 {\n                grid[row][col] = 0\n                count += 1\n      \
    \          fill_bucket(grid: &grid, row: row, col: col, capacity: capacity)\n\
    \            }\n        }\n    }\n    return count", "    var result = 0\n   \
    \ var max_fill = 0\n    for row in grid {\n        max_fill = 0\n        for i\
    \ in 0..<row.count {\n            if row[i] == 1 {\n                max_fill +=\
    \ 1\n            } else {\n                if max_fill > 0 {\n               \
    \     result += 1\n                    max_fill = 0\n                }\n     \
    \       }\n        }\n        if max_fill > 0 {\n            result += 1\n   \
    \     }\n    }\n    return result", "    var grid = grid\n    var count = 0\n\
    \    while true {\n        var filled = false\n        for i in 0..<grid.count\
    \ {\n            for j in 0..<grid[i].count {\n                if grid[i][j] ==\
    \ 1 {\n                    grid[i][j] = 0\n                    filled = true\n\
    \                }\n            }\n        }\n        if filled {\n          \
    \  count += 1\n        } else {\n            break\n        }\n    }\n    return\
    \ count", "    var result = 0\n    var max_fill = 0\n    for row in grid {\n \
    \       max_fill = 0\n        for i in 0..<row.count {\n            if row[i]\
    \ == 1 {\n                max_fill += 1\n            } else {\n              \
    \  max_fill = 0\n            }\n            if max_fill == capacity {\n      \
    \          result += 1\n                max_fill = 0\n            }\n        }\n\
    \    }\n    return result", "    var grid = grid\n    var count = 0\n    while\
    \ true {\n        var filled = false\n        for i in 0..<grid.count {\n    \
    \        for j in 0..<grid[i].count {\n                if grid[i][j] == 1 {\n\
    \                    filled = true\n                    grid[i][j] = 0\n     \
    \               if i > 0 {\n                        grid[i-1][j] = min(grid[i-1][j]\
    \ + 1, capacity)\n                    }\n                    if i < grid.count\
    \ - 1 {\n                        grid[i+1][j] = min(grid[i+1][j] + 1, capacity)\n\
    \                    }\n                    if j > 0 {\n                     \
    \   grid[i][j-1] = min(grid[i][j-1] + 1, capacity)\n                    }\n  \
    \                  if j < grid[i].count - 1 {\n                        grid[i][j+1]\
    \ = min(grid[i][j+1] + 1, capacity)\n                    }\n                }\n\
    \            }\n        }\n        if !filled {\n            break\n        }\n\
    \        count += 1\n    }\n    return count", "    var water = 0\n    var count\
    \ = 0\n    for row in grid {\n        for cell in row {\n            if cell ==\
    \ 1 {\n                water += 1\n            }\n        }\n    }\n    while\
    \ water > 0 {\n        count += 1\n        water -= capacity\n    }\n    return\
    \ count", "    var result = 0\n    for i in 0..<grid.count {\n        var sum\
    \ = 0\n        for j in 0..<grid[i].count {\n            sum += grid[i][j]\n \
    \       }\n        result += sum / capacity\n        if sum % capacity != 0 {\n\
    \            result += 1\n        }\n    }\n    return result", "    var result\
    \ = 0\n    var max_fill = 0\n    for row in grid {\n        max_fill = 0\n   \
    \     for col in row {\n            if col == 1 {\n                max_fill +=\
    \ 1\n            }\n        }\n        result += max_fill / capacity\n       \
    \ if max_fill % capacity != 0 {\n            result += 1\n        }\n    }\n \
    \   return result", "    var result = 0\n    var row_max = Array(repeating: 0,\
    \ count: grid[0].count)\n    for row in grid {\n        for col in 0..<row.count\
    \ {\n            if row[col] == 1 {\n                row_max[col] += 1\n     \
    \       }\n        }\n    }\n    for col in 0..<row_max.count {\n        result\
    \ += row_max[col] / capacity\n        if row_max[col] % capacity != 0 {\n    \
    \        result += 1\n        }\n    }\n    return result", "    var count = 0\n\
    \    var grid = grid\n    var row_max = [Int](repeating: 0, count: grid.count)\n\
    \    for row in 0..<grid.count {\n        for col in 0..<grid[row].count {\n \
    \           if grid[row][col] == 1 {\n                row_max[row] = col\n   \
    \         }\n        }\n    }\n    var max_col = row_max.max()!\n    while max_col\
    \ > 0 {\n        for row in 0..<grid.count {\n            if row_max[row] > 0\
    \ {\n                row_max[row] -= 1\n            }\n        }\n        max_col\
    \ -= 1\n        count += 1\n    }\n    return count", "    var count = 0\n   \
    \ var max_fill = 0\n    for row in grid {\n        for col in row {\n        \
    \    if col == 1 {\n                max_fill += 1\n            }\n        }\n\
    \    }\n    while max_fill > 0 {\n        for row in grid {\n            for col\
    \ in row {\n                if col == 1 {\n                    max_fill -= 1\n\
    \                }\n            }\n        }\n        count += 1\n    }\n    return\
    \ count", "    var result = 0\n    var i = 0\n    while i < grid.count {\n   \
    \     var j = 0\n        var current_capacity = capacity\n        while j < grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                if current_capacity > 0\
    \ {\n                    current_capacity -= 1\n                } else {\n   \
    \                 current_capacity = capacity\n                    result += 1\n\
    \                }\n            }\n            j += 1\n        }\n        i +=\
    \ 1\n    }\n    return result", "    var count = 0\n    var row = 0\n    var col\
    \ = 0\n    while row < grid.count {\n        col = 0\n        while col < grid[row].count\
    \ {\n            if grid[row][col] == 1 {\n                count += 1\n      \
    \          var row_ = row\n                var col_ = col\n                while\
    \ row_ < grid.count && col_ < grid[row_].count && grid[row_][col_] == 1 {\n  \
    \                  grid[row_][col_] = 0\n                    row_ += 1\n     \
    \               col_ += 1\n                }\n            }\n            col +=\
    \ 1\n        }\n        row += 1\n    }\n    return count", "    var max_fill\
    \ = 0\n    for row in grid {\n        var fill = 0\n        for well in row {\n\
    \            if well == 1 {\n                fill += 1\n            }\n      \
    \  }\n        if fill > max_fill {\n            max_fill = fill\n        }\n \
    \   }\n    return max_fill / capacity + (max_fill % capacity > 0 ? 1 : 0)", " \
    \   var count = 0\n    var grid = grid\n    while true {\n        var filled =\
    \ false\n        for i in 0..<grid.count {\n            var row = grid[i]\n  \
    \          if row.contains(1) {\n                filled = true\n             \
    \   row = row.map { $0 == 1 ? 0 : $0 }\n                grid[i] = row\n      \
    \          if i > 0 {\n                    var row = grid[i-1]\n             \
    \       row = row.map { $0 == capacity ? capacity : $0 + 1 }\n               \
    \     grid[i-1] = row\n                }\n                if i < grid.count -\
    \ 1 {\n                    var row = grid[i+1]\n                    row = row.map\
    \ { $0 == capacity ? capacity : $0 + 1 }\n                    grid[i+1] = row\n\
    \                }\n            }\n        }\n        if !filled {\n         \
    \   break\n        }\n        count += 1\n    }\n    return count", "    var count\
    \ = 0\n    for row in grid {\n        var sum = 0\n        for col in row {\n\
    \            sum += col\n            if sum == capacity {\n                count\
    \ += 1\n                sum = 0\n            }\n        }\n        if sum > 0\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    var wells = grid\n    var max_water = 0\n    for i in 0..<wells.count\
    \ {\n        for j in 0..<wells[i].count {\n            if wells[i][j] == 1 {\n\
    \                max_water += 1\n            }\n        }\n    }\n    while max_water\
    \ > 0 {\n        var water = 0\n        for i in 0..<wells.count {\n         \
    \   for j in 0..<wells[i].count {\n                if wells[i][j] == 1 {\n   \
    \                 water += 1\n                    wells[i][j] = 0\n          \
    \      }\n            }\n        }\n        max_water -= water\n        count\
    \ += 1\n    }\n    return count", "    var result = 0\n    var max_fill = 0\n\
    \    for row in grid {\n        max_fill = 0\n        for col in row {\n     \
    \       if col == 1 {\n                max_fill += 1\n            }\n        }\n\
    \        result += max_fill / capacity\n        if max_fill % capacity != 0 {\n\
    \            result += 1\n        }\n    }\n    return result", "    var grid\
    \ = grid\n    var count = 0\n    while true {\n        var min_row = -1\n    \
    \    var min_col = -1\n        var min_val = capacity + 1\n        for i in 0..<grid.count\
    \ {\n            for j in 0..<grid[i].count {\n                if grid[i][j] <\
    \ min_val {\n                    min_val = grid[i][j]\n                    min_row\
    \ = i\n                    min_col = j\n                }\n            }\n   \
    \     }\n        if min_val == capacity {\n            break\n        }\n    \
    \    count += 1\n        for i in 0..<grid.count {\n            grid[i][min_col]\
    \ = min(grid[i][min_col] + min_val, capacity)\n        }\n    }\n    return count",
  "    var count = 0\n    var max_row = 0\n    var max_col = 0\n    var max_val =\
    \ 0\n    for row in 0..<grid.count {\n        for col in 0..<grid[row].count {\n\
    \            if grid[row][col] == 1 {\n                max_row = row\n       \
    \         max_col = col\n                max_val = 1\n                break\n\
    \            }\n        }\n    }\n    var grid = grid\n    while max_val > 0 {\n\
    \        for row in 0...max_row {\n            for col in 0...max_col {\n    \
    \            if grid[row][col] == 1 {\n                    grid[row][col] = 0\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \        max_val = 0\n        for row in 0..<grid.count {\n            for col\
    \ in 0..<grid[row].count {\n                if grid[row][col] == 1 {\n       \
    \             max_row = row\n                    max_col = col\n             \
    \       max_val = 1\n                    break\n                }\n          \
    \  }\n        }\n    }\n    return count", "    var result = 0\n    var wells\
    \ = grid\n    var buckets = Array(repeating: capacity, count: wells.count)\n \
    \   while true {\n        var filled = false\n        for i in 0..<wells.count\
    \ {\n            if wells[i].isEmpty {\n                continue\n           \
    \ }\n            if wells[i][0] == 1 {\n                filled = true\n      \
    \          wells[i].removeFirst()\n                buckets[i] = capacity\n   \
    \         } else if buckets[i] > 0 {\n                filled = true\n        \
    \        wells[i].removeFirst()\n                buckets[i] -= 1\n           \
    \ }\n        }\n        if filled {\n            result += 1\n        } else {\n\
    \            break\n        }\n    }\n    return result", "    var result = 0\n\
    \    var row_max = 0\n    for row in grid {\n        row_max = max(row_max, row.max()!)\n\
    \    }\n    for _ in 0..<row_max {\n        var col_max = 0\n        for col in\
    \ 0..<grid[0].count {\n            col_max = max(col_max, grid.map{$0[col]}.max()!)\n\
    \        }\n        for _ in 0..<col_max {\n            for row in 0..<grid.count\
    \ {\n                for col in 0..<grid[0].count {\n                    if grid[row][col]\
    \ > 0 {\n                        grid[row][col] -= 1\n                    }\n\
    \                }\n            }\n            result += 1\n        }\n    }\n\
    \    return result", "    var total = 0\n    var max_fill = 0\n    for row in\
    \ grid {\n        for cell in row {\n            if cell == 1 {\n            \
    \    total += 1\n            }\n        }\n        max_fill = max(max_fill, total)\n\
    \        total = 0\n    }\n    return max_fill / capacity + (max_fill % capacity\
    \ > 0 ? 1 : 0)", "    var result = 0\n    var max_fill = 0\n    for row in grid\
    \ {\n        var fill = 0\n        for cell in row {\n            if cell == 1\
    \ {\n                fill += 1\n            }\n        }\n        max_fill = max(max_fill,\
    \ fill)\n        if max_fill > capacity {\n            result += 1\n         \
    \   max_fill = fill\n        }\n    }\n    return result", "    var count = 0\n\
    \    var grid = grid\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      fill(grid: &grid, i: i, j: j, capacity: capacity)\n            }\n    \
    \    }\n    }\n    return count", "    var water = 0\n    var count = 0\n    for\
    \ row in grid {\n        for cell in row {\n            if cell == 1 {\n     \
    \           water += 1\n            }\n        }\n    }\n    while water > 0 {\n\
    \        count += 1\n        water -= capacity\n    }\n    return count", "  \
    \  var result = 0\n    for row in grid {\n        var current_fill = 0\n     \
    \   for cell in row {\n            if cell == 1 {\n                current_fill\
    \ += 1\n            } else {\n                if current_fill > 0 {\n        \
    \            result += 1\n                    current_fill = 0\n             \
    \   }\n            }\n        }\n        if current_fill > 0 {\n            result\
    \ += 1\n        }\n    }\n    return result", "    var result = 0\n    var grid\
    \ = grid\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n\
    \            if grid[i][j] == 1 {\n                result += 1\n             \
    \   let bucket = Array(repeating: capacity, count: grid[i].count)\n          \
    \      fill_bucket(grid: &grid, bucket: bucket, i: i, j: j)\n            }\n \
    \       }\n    }\n    return result", "    var result = 0\n    for row in grid\
    \ {\n        var fill = 0\n        for cell in row {\n            if cell == 1\
    \ {\n                fill += 1\n            } else {\n                if fill\
    \ > 0 {\n                    result += 1\n                    fill = 0\n     \
    \           }\n            }\n        }\n        if fill > 0 {\n            result\
    \ += 1\n        }\n    }\n    return result", "    var result = 0\n    var bucket\
    \ = capacity\n    for row in grid {\n        for cell in row {\n            if\
    \ cell == 1 {\n                bucket -= 1\n            }\n            if bucket\
    \ == 0 {\n                result += 1\n                bucket = capacity\n   \
    \         }\n        }\n    }\n    return result", "    var grid = grid\n    var\
    \ count = 0\n    while true {\n        var fill = false\n        for i in 0..<grid.count\
    \ {\n            for j in 0..<grid[i].count {\n                if grid[i][j] ==\
    \ 1 {\n                    fill = true\n                    grid[i][j] = 0\n \
    \                   if i > 0 {\n                        grid[i-1][j] = min(grid[i-1][j]\
    \ + 1, capacity)\n                    }\n                    if i < grid.count\
    \ - 1 {\n                        grid[i+1][j] = min(grid[i+1][j] + 1, capacity)\n\
    \                    }\n                    if j > 0 {\n                     \
    \   grid[i][j-1] = min(grid[i][j-1] + 1, capacity)\n                    }\n  \
    \                  if j < grid[i].count - 1 {\n                        grid[i][j+1]\
    \ = min(grid[i][j+1] + 1, capacity)\n                    }\n                }\n\
    \            }\n        }\n        if !fill {\n            break\n        }\n\
    \        count += 1\n    }\n    return count", "    var grid = grid\n    var count\
    \ = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n \
    \           if grid[i][j] == 1 {\n                count += 1\n               \
    \ if i > 0 {\n                    grid[i - 1][j] = 1\n                }\n    \
    \            if i < grid.count - 1 {\n                    grid[i + 1][j] = 1\n\
    \                }\n                if j > 0 {\n                    grid[i][j\
    \ - 1] = 1\n                }\n                if j < grid[i].count - 1 {\n  \
    \                  grid[i][j + 1] = 1\n                }\n            }\n    \
    \    }\n    }\n    return count", "    var count = 0\n    var grid = grid\n  \
    \  var row = 0\n    var col = 0\n    while row < grid.count {\n        if grid[row][col]\
    \ == 1 {\n            grid[row][col] = 0\n            count += 1\n        }\n\
    \        if col == grid[row].count - 1 {\n            row += 1\n            col\
    \ = 0\n        } else {\n            col += 1\n        }\n    }\n    return count",
  "    var count = 0\n    for row in grid {\n        var sum = 0\n        for col\
    \ in row {\n            sum += col\n            if sum == capacity {\n       \
    \         count += 1\n                sum = 0\n            }\n        }\n    \
    \    if sum > 0 {\n            count += 1\n        }\n    }\n    return count",
  "    var grid = grid\n    var count = 0\n    while true {\n        var filled =\
    \ false\n        for i in 0..<grid.count {\n            for j in 0..<grid[i].count\
    \ {\n                if grid[i][j] == 1 {\n                    filled = true\n\
    \                    grid[i][j] = 0\n                    if i > 0 {\n        \
    \                grid[i-1][j] = min(grid[i-1][j] + 1, capacity)\n            \
    \        }\n                    if i < grid.count - 1 {\n                    \
    \    grid[i+1][j] = min(grid[i+1][j] + 1, capacity)\n                    }\n \
    \                   if j > 0 {\n                        grid[i][j-1] = min(grid[i][j-1]\
    \ + 1, capacity)\n                    }\n                    if j < grid[i].count\
    \ - 1 {\n                        grid[i][j+1] = min(grid[i][j+1] + 1, capacity)\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ !filled {\n            break\n        }\n        count += 1\n    }\n    return\
    \ count", "    var count = 0\n    var row = 0\n    while row < grid.count {\n\
    \        var col = 0\n        while col < grid[row].count {\n            if grid[row][col]\
    \ == 1 {\n                count += 1\n                var i = row\n          \
    \      while i < grid.count && grid[i][col] == 1 {\n                    grid[i][col]\
    \ = 0\n                    i += 1\n                }\n            }\n        \
    \    col += 1\n        }\n        row += 1\n    }\n    return count", "    var\
    \ water = 0\n    var fill = 0\n    for row in grid {\n        for well in row\
    \ {\n            water += well\n        }\n    }\n    while water > 0 {\n    \
    \    water -= capacity\n        fill += 1\n    }\n    return fill", "    var result\
    \ = 0\n    var max_fill = 0\n    for row in grid {\n        max_fill = 0\n   \
    \     for well in row {\n            if well == 1 {\n                max_fill\
    \ += 1\n            }\n        }\n        result += max_fill / capacity\n    \
    \    if max_fill % capacity != 0 {\n            result += 1\n        }\n    }\n\
    \    return result", "    var result = 0\n    var max_fill = 0\n    for row in\
    \ grid {\n        max_fill = 0\n        for cell in row {\n            if cell\
    \ == 1 {\n                max_fill += 1\n            }\n        }\n        result\
    \ += max_fill / capacity\n        if max_fill % capacity != 0 {\n            result\
    \ += 1\n        }\n    }\n    return result", "    var result = 0\n    var row\
    \ = 0\n    var col = 0\n    while row < grid.count {\n        col = 0\n      \
    \  while col < grid[row].count {\n            if grid[row][col] == 1 {\n     \
    \           result += 1\n                var i = row\n                while i\
    \ < grid.count && grid[i][col] == 1 {\n                    grid[i][col] = 0\n\
    \                    i += 1\n                }\n            }\n            col\
    \ += 1\n        }\n        row += 1\n    }\n    return result", "    var result\
    \ = 0\n    var bucket = capacity\n    for row in grid {\n        for well in row\
    \ {\n            if well == 1 {\n                if bucket == 0 {\n          \
    \          result += 1\n                    bucket = capacity\n              \
    \  }\n                bucket -= 1\n            }\n        }\n    }\n    return\
    \ result", "    var result = 0\n    var buckets = Array(repeating: capacity, count:\
    \ grid[0].count)\n    for row in grid {\n        for (i, well) in row.enumerated()\
    \ {\n            if well == 1 {\n                buckets[i] -= 1\n           \
    \ }\n        }\n        if buckets.contains(0) {\n            result += 1\n  \
    \          buckets = Array(repeating: capacity, count: grid[0].count)\n      \
    \  }\n    }\n    return result", "    var result = 0\n    for row in grid {\n\
    \        var sum = 0\n        for cell in row {\n            sum += cell\n   \
    \     }\n        result += sum / capacity\n        if sum % capacity != 0 {\n\
    \            result += 1\n        }\n    }\n    return result", "    var result\
    \ = 0\n    var max_fill = 0\n    for row in grid {\n        max_fill = 0\n   \
    \     for i in 0..<row.count {\n            if row[i] == 1 {\n               \
    \ max_fill += 1\n            } else {\n                if max_fill > 0 {\n   \
    \                 result += 1\n                    max_fill = 0\n            \
    \    }\n            }\n        }\n        if max_fill > 0 {\n            result\
    \ += 1\n        }\n    }\n    return result", "    var count = 0\n    var grid\
    \ = grid\n    while true {\n        var filled = false\n        for i in 0..<grid.count\
    \ {\n            for j in 0..<grid[i].count {\n                if grid[i][j] ==\
    \ 1 {\n                    filled = true\n                    grid[i][j] = 0\n\
    \                    if i > 0 && grid[i-1][j] == 0 {\n                       \
    \ grid[i-1][j] = 1\n                    }\n                    if i < grid.count-1\
    \ && grid[i+1][j] == 0 {\n                        grid[i+1][j] = 1\n         \
    \           }\n                    if j > 0 && grid[i][j-1] == 0 {\n         \
    \               grid[i][j-1] = 1\n                    }\n                    if\
    \ j < grid[i].count-1 && grid[i][j+1] == 0 {\n                        grid[i][j+1]\
    \ = 1\n                    }\n                }\n            }\n        }\n  \
    \      if filled {\n            count += 1\n        } else {\n            break\n\
    \        }\n    }\n    return count", "    var result = 0\n    for row in grid\
    \ {\n        var fill = 0\n        for cell in row {\n            if cell == 1\
    \ {\n                fill += 1\n            } else {\n                if fill\
    \ > 0 {\n                    result += 1\n                    fill = 0\n     \
    \           }\n            }\n        }\n        if fill > 0 {\n            result\
    \ += 1\n        }\n    }\n    return result", "    var result = 0\n    var max_fill\
    \ = 0\n    for row in grid {\n        max_fill = 0\n        for cell in row {\n\
    \            if cell == 1 {\n                max_fill += 1\n            }\n  \
    \      }\n        result += max_fill / capacity\n        if max_fill % capacity\
    \ != 0 {\n            result += 1\n        }\n    }\n    return result", "   \
    \ var grid = grid\n    var count = 0\n    while true {\n        var filled = false\n\
    \        for i in 0..<grid.count {\n            for j in 0..<grid[i].count {\n\
    \                if grid[i][j] == 1 {\n                    filled = true\n   \
    \                 grid[i][j] = 0\n                    if i > 0 {\n           \
    \             grid[i-1][j] = min(grid[i-1][j] + 1, capacity)\n               \
    \     }\n                    if i < grid.count - 1 {\n                       \
    \ grid[i+1][j] = min(grid[i+1][j] + 1, capacity)\n                    }\n    \
    \                if j > 0 {\n                        grid[i][j-1] = min(grid[i][j-1]\
    \ + 1, capacity)\n                    }\n                    if j < grid[i].count\
    \ - 1 {\n                        grid[i][j+1] = min(grid[i][j+1] + 1, capacity)\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ !filled {\n            break\n        }\n        count += 1\n    }\n    return\
    \ count", "    var result = 0\n    var grid = grid\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                result += 1\n                grid = fill(grid: grid, capacity:\
    \ capacity, row: i, col: j)\n            }\n        }\n    }\n    return result",
  "    var fill_count = 0\n    var grid = grid\n    var row_max = [Int]()\n    for\
    \ row in grid {\n        var max = 0\n        for cell in row {\n            if\
    \ cell > max {\n                max = cell\n            }\n        }\n       \
    \ row_max.append(max)\n    }\n    while row_max.max()! > 0 {\n        for i in\
    \ 0..<grid.count {\n            for j in 0..<grid[i].count {\n               \
    \ if grid[i][j] > 0 {\n                    grid[i][j] -= capacity\n          \
    \          if grid[i][j] < 0 {\n                        grid[i][j] = 0\n     \
    \               }\n                }\n            }\n        }\n        fill_count\
    \ += 1\n        for i in 0..<grid.count {\n            var max = 0\n         \
    \   for j in 0..<grid[i].count {\n                if grid[i][j] > max {\n    \
    \                max = grid[i][j]\n                }\n            }\n        \
    \    row_max[i] = max\n        }\n    }\n    return fill_count", "    var result\
    \ = 0\n    var water = 0\n    for row in grid {\n        for well in row {\n \
    \           water += well\n            if water == capacity {\n              \
    \  result += 1\n                water = 0\n            } else if water > capacity\
    \ {\n                result += 1\n                water = well\n            }\n\
    \        }\n        if water > 0 {\n            result += 1\n            water\
    \ = 0\n        }\n    }\n    return result", "    var result = 0\n    var water\
    \ = 0\n    for row in grid {\n        for well in row {\n            water +=\
    \ well\n            if water == capacity {\n                result += 1\n    \
    \            water = 0\n            } else if water > capacity {\n           \
    \     result += 1\n                water = well\n            }\n        }\n  \
    \      if water > 0 {\n            result += 1\n            water = 0\n      \
    \  }\n    }\n    return result", "    var count = 0\n    var grid = grid\n   \
    \ for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n          \
    \  if grid[i][j] == 1 {\n                count += 1\n                fill(grid:\
    \ &grid, capacity: capacity, i: i, j: j)\n            }\n        }\n    }\n  \
    \  return count", "    var result = 0\n    for row in grid {\n        var sum\
    \ = 0\n        for cell in row {\n            sum += cell\n        }\n       \
    \ result += sum / capacity\n        if sum % capacity > 0 {\n            result\
    \ += 1\n        }\n    }\n    return result", "    var result = 0\n    var bucket\
    \ = 0\n    for row in grid {\n        for well in row {\n            bucket +=\
    \ well\n            if bucket > capacity {\n                result += 1\n    \
    \            bucket = well\n            }\n        }\n        result += 1\n  \
    \  }\n    return result", "    var count = 0\n    for row in grid {\n        var\
    \ sum = 0\n        for i in row {\n            sum += i\n        }\n        count\
    \ += sum / capacity\n        if sum % capacity != 0 {\n            count += 1\n\
    \        }\n    }\n    return count", "    var grid = grid\n    var count = 0\n\
    \    while true {\n        var filled = false\n        for i in 0..<grid.count\
    \ {\n            for j in 0..<grid[i].count {\n                if grid[i][j] ==\
    \ 1 {\n                    grid[i][j] = 0\n                    filled = true\n\
    \                }\n            }\n        }\n        if filled {\n          \
    \  count += 1\n        } else {\n            break\n        }\n    }\n    return\
    \ count", "    var result = 0\n    var wells = grid\n    var buckets = Array(repeating:\
    \ capacity, count: wells.count)\n    var i = 0\n    while i < wells.count {\n\
    \        var j = 0\n        while j < wells[i].count {\n            if wells[i][j]\
    \ == 1 {\n                if buckets[i] > 0 {\n                    buckets[i]\
    \ -= 1\n                    wells[i][j] = 0\n                } else {\n      \
    \              break\n                }\n            }\n            j += 1\n \
    \       }\n        if j < wells[i].count {\n            i = 0\n            result\
    \ += 1\n        } else {\n            i += 1\n        }\n    }\n    return result",
  "    var count = 0\n    var max_fill = 0\n    for row in grid {\n        for cell\
    \ in row {\n            if cell == 1 {\n                max_fill += 1\n      \
    \      }\n        }\n    }\n    while max_fill > 0 {\n        count += 1\n   \
    \     var fill = 0\n        for row in grid {\n            var filled = 0\n  \
    \          for cell in row {\n                if cell == 1 {\n               \
    \     filled += 1\n                }\n            }\n            if filled > capacity\
    \ {\n                fill += capacity\n            } else {\n                fill\
    \ += filled\n            }\n        }\n        max_fill -= fill\n    }\n    return\
    \ count", "    var result = 0\n    var max_fill = 0\n    for row in grid {\n \
    \       max_fill = 0\n        for col in row {\n            if col == 1 {\n  \
    \              max_fill += 1\n            }\n        }\n        result += max_fill\
    \ / capacity\n        if max_fill % capacity != 0 {\n            result += 1\n\
    \        }\n    }\n    return result", "    var result = 0\n    for i in 0..<grid.count\
    \ {\n        var sum = 0\n        for j in 0..<grid[i].count {\n            sum\
    \ += grid[i][j]\n        }\n        result += sum / capacity\n        if sum %\
    \ capacity != 0 {\n            result += 1\n        }\n    }\n    return result",
  "    var grid = grid\n    var count = 0\n    while true {\n        var filled =\
    \ false\n        for i in 0..<grid.count {\n            for j in 0..<grid[i].count\
    \ {\n                if grid[i][j] == 1 {\n                    filled = true\n\
    \                    grid[i][j] = 0\n                    if i > 0 {\n        \
    \                grid[i-1][j] = min(grid[i-1][j] + 1, capacity)\n            \
    \        }\n                    if i < grid.count - 1 {\n                    \
    \    grid[i+1][j] = min(grid[i+1][j] + 1, capacity)\n                    }\n \
    \                   if j > 0 {\n                        grid[i][j-1] = min(grid[i][j-1]\
    \ + 1, capacity)\n                    }\n                    if j < grid[i].count\
    \ - 1 {\n                        grid[i][j+1] = min(grid[i][j+1] + 1, capacity)\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ !filled {\n            break\n        }\n        count += 1\n    }\n    return\
    \ count", "    var grid = grid\n    var count = 0\n    var row = 0\n    var col\
    \ = 0\n    while row < grid.count {\n        col = 0\n        while col < grid[row].count\
    \ {\n            if grid[row][col] == 1 {\n                count += 1\n      \
    \          fill(grid: &grid, row: row, col: col, capacity: capacity)\n       \
    \     }\n            col += 1\n        }\n        row += 1\n    }\n    return\
    \ count", "    var result = 0\n    for row in grid {\n        var sum = 0\n  \
    \      for col in row {\n            sum += col\n        }\n        result +=\
    \ sum / capacity\n        if sum % capacity != 0 {\n            result += 1\n\
    \        }\n    }\n    return result", "    var result = 0\n    for row in grid\
    \ {\n        var current_fill = 0\n        for cell in row {\n            if cell\
    \ == 1 {\n                current_fill += 1\n            } else {\n          \
    \      if current_fill > 0 {\n                    result += 1\n              \
    \      current_fill = 0\n                }\n            }\n        }\n       \
    \ if current_fill > 0 {\n            result += 1\n        }\n    }\n    return\
    \ result", "    var count = 0\n    var wells = grid\n    var well_length = wells[0].count\n\
    \    var well_count = wells.count\n    var well_index = 0\n    var well_level\
    \ = 0\n    var well_level_max = 0\n    while well_index < well_count {\n     \
    \   well_level = 0\n        well_level_max = 0\n        for i in 0..<well_length\
    \ {\n            if wells[well_index][i] == 1 {\n                well_level +=\
    \ 1\n            } else {\n                well_level_max = max(well_level_max,\
    \ well_level)\n                well_level = 0\n            }\n        }\n    \
    \    well_level_max = max(well_level_max, well_level)\n        count += well_level_max\
    \ / capacity\n        if well_level_max % capacity != 0 {\n            count +=\
    \ 1\n        }\n        well_index += 1\n    }\n    return count", "    var count\
    \ = 0\n    for row in grid {\n        var fill = 0\n        for well in row {\n\
    \            if well == 1 {\n                fill += 1\n            } else {\n\
    \                if fill > 0 {\n                    count += 1\n             \
    \       fill = 0\n                }\n            }\n        }\n        if fill\
    \ > 0 {\n            count += 1\n        }\n    }\n    return count", "    var\
    \ result = 0\n    var max_fill = 0\n    for row in grid {\n        max_fill =\
    \ 0\n        for col in row {\n            if col == 1 {\n                max_fill\
    \ += 1\n            }\n        }\n        result += max_fill / capacity\n    \
    \    if max_fill % capacity != 0 {\n            result += 1\n        }\n    }\n\
    \    return result", "    var count = 0\n    var wells = grid\n    var buckets\
    \ = Array(repeating: capacity, count: grid[0].count)\n    for i in 0..<wells.count\
    \ {\n        for j in 0..<wells[i].count {\n            if wells[i][j] == 1 {\n\
    \                if buckets[j] > 0 {\n                    buckets[j] -= 1\n  \
    \                  wells[i][j] = 0\n                } else {\n               \
    \     count += 1\n                }\n            }\n        }\n    }\n    return\
    \ count", "    var grid = grid\n    var count = 0\n    while true {\n        var\
    \ filled = false\n        for i in 0..<grid.count {\n            for j in 0..<grid[i].count\
    \ {\n                if grid[i][j] == 1 {\n                    filled = true\n\
    \                    grid[i][j] = 0\n                    if i > 0 {\n        \
    \                grid[i-1][j] = min(grid[i-1][j] + 1, capacity)\n            \
    \        }\n                    if i < grid.count - 1 {\n                    \
    \    grid[i+1][j] = min(grid[i+1][j] + 1, capacity)\n                    }\n \
    \                   if j > 0 {\n                        grid[i][j-1] = min(grid[i][j-1]\
    \ + 1, capacity)\n                    }\n                    if j < grid[i].count\
    \ - 1 {\n                        grid[i][j+1] = min(grid[i][j+1] + 1, capacity)\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ !filled {\n            break\n        }\n        count += 1\n    }\n    return\
    \ count", "    var result = 0\n    for row in grid {\n        var water = 0\n\
    \        for col in row {\n            water += col\n            if water == capacity\
    \ {\n                result += 1\n                water = 0\n            }\n \
    \       }\n        if water > 0 {\n            result += 1\n        }\n    }\n\
    \    return result", "    var result = 0\n    for row in grid {\n        var water\
    \ = 0\n        for cell in row {\n            water += cell\n            if water\
    \ == capacity {\n                result += 1\n                water = 0\n    \
    \        }\n        }\n        if water > 0 {\n            result += 1\n     \
    \   }\n    }\n    return result", "    var fill_count = 0\n    var grid = grid\n\
    \    for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n       \
    \     if grid[i][j] == 1 {\n                fill_count += 1\n                let\
    \ bucket_fill = min(capacity, grid[i].reduce(0, +))\n                for k in\
    \ 0..<grid[i].count {\n                    grid[i][k] = max(0, grid[i][k] - bucket_fill)\n\
    \                }\n            }\n        }\n    }\n    return fill_count", " \
    \   var count = 0\n    for row in grid {\n        var sum = 0\n        for col\
    \ in row {\n            sum += col\n            if sum == capacity {\n       \
    \         count += 1\n                sum = 0\n            }\n        }\n    \
    \    if sum > 0 {\n            count += 1\n        }\n    }\n    return count",
  "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count {\n       \
    \ var row = grid[i]\n        var sum = 0\n        for j in 0..<row.count {\n \
    \           sum += row[j]\n        }\n        if sum > capacity {\n          \
    \  count += 1\n            for j in 0..<row.count {\n                if row[j]\
    \ == 1 {\n                    row[j] = 0\n                }\n            }\n \
    \       }\n        grid[i] = row\n    }\n    return count", "    var max_fill\
    \ = 0\n    for row in grid {\n        var fill = 0\n        for well in row {\n\
    \            if well == 1 {\n                fill += 1\n            }\n      \
    \  }\n        max_fill = max(max_fill, fill)\n    }\n    return max_fill / capacity\
    \ + (max_fill % capacity > 0 ? 1 : 0)", "    var count = 0\n    var wells = grid\n\
    \    while !wells.isEmpty {\n        wells = wells.map { $0.map { $0 - capacity\
    \ } }\n        wells = wells.filter { !$0.allSatisfy { $0 <= 0 } }\n        count\
    \ += 1\n    }\n    return count", "    var grid = grid\n    var count = 0\n  \
    \  while true {\n        var filled = false\n        for i in 0..<grid.count {\n\
    \            for j in 0..<grid[i].count {\n                if grid[i][j] == 1\
    \ {\n                    filled = true\n                    grid[i][j] = 0\n \
    \                   if i > 0 {\n                        grid[i-1][j] = min(grid[i-1][j]\
    \ + 1, capacity)\n                    }\n                    if i < grid.count\
    \ - 1 {\n                        grid[i+1][j] = min(grid[i+1][j] + 1, capacity)\n\
    \                    }\n                    if j > 0 {\n                     \
    \   grid[i][j-1] = min(grid[i][j-1] + 1, capacity)\n                    }\n  \
    \                  if j < grid[i].count - 1 {\n                        grid[i][j+1]\
    \ = min(grid[i][j+1] + 1, capacity)\n                    }\n                }\n\
    \            }\n        }\n        if !filled {\n            break\n        }\n\
    \        count += 1\n    }\n    return count", "    var grid = grid\n    var count\
    \ = 0\n    while true {\n        var max_fill = 0\n        var max_fill_row =\
    \ 0\n        var max_fill_col = 0\n        for row in 0..<grid.count {\n     \
    \       for col in 0..<grid[row].count {\n                if grid[row][col] >\
    \ max_fill {\n                    max_fill = grid[row][col]\n                \
    \    max_fill_row = row\n                    max_fill_col = col\n            \
    \    }\n            }\n        }\n        if max_fill == 0 {\n            break\n\
    \        }\n        count += 1\n        for row in 0..<grid.count {\n        \
    \    grid[row][max_fill_col] = max(0, grid[row][max_fill_col] - capacity)\n  \
    \      }\n        for col in 0..<grid[max_fill_row].count {\n            grid[max_fill_row][col]\
    \ = max(0, grid[max_fill_row][col] - capacity)\n        }\n    }\n    return count",
  "    var fill_count = 0\n    var fill_level = 0\n    for row in grid {\n       \
    \ for well in row {\n            if well == 1 {\n                fill_level +=\
    \ 1\n            }\n            if fill_level == capacity {\n                fill_count\
    \ += 1\n                fill_level = 0\n            }\n        }\n    }\n    return\
    \ fill_count", "    var result = 0\n    for row in grid {\n        var sum = 0\n\
    \        for i in 0..<row.count {\n            sum += row[i]\n            if sum\
    \ == capacity {\n                result += 1\n                sum = 0\n      \
    \      }\n        }\n        if sum > 0 {\n            result += 1\n        }\n\
    \    }\n    return result", "    var result = 0\n    for row in grid {\n     \
    \   var sum = 0\n        for col in row {\n            sum += col\n        }\n\
    \        result += sum / capacity\n        if sum % capacity != 0 {\n        \
    \    result += 1\n        }\n    }\n    return result", "    var grid = grid\n\
    \    var count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      fill_bucket(grid: &grid, capacity: capacity, i: i, j: j)\n            }\n\
    \        }\n    }\n    return count", "    var count = 0\n    var grid = grid\n\
    \    var row = 0\n    while row < grid.count {\n        var col = 0\n        while\
    \ col < grid[row].count {\n            if grid[row][col] == 1 {\n            \
    \    grid[row][col] = 0\n                count += 1\n                var water\
    \ = capacity - 1\n                while water > 0 {\n                    if row\
    \ + 1 < grid.count && grid[row + 1][col] == 1 {\n                        grid[row\
    \ + 1][col] = 0\n                        water -= 1\n                    }\n \
    \                   if col + 1 < grid[row].count && grid[row][col + 1] == 1 {\n\
    \                        grid[row][col + 1] = 0\n                        water\
    \ -= 1\n                    }\n                    if row - 1 >= 0 && grid[row\
    \ - 1][col] == 1 {\n                        grid[row - 1][col] = 0\n         \
    \               water -= 1\n                    }\n                    if col\
    \ - 1 >= 0 && grid[row][col - 1] == 1 {\n                        grid[row][col\
    \ - 1] = 0\n                        water -= 1\n                    }\n      \
    \          }\n            }\n            col += 1\n        }\n        row += 1\n\
    \    }\n    return count", "    var result = 0\n    var max_fill = 0\n    for\
    \ row in grid {\n        max_fill = 0\n        for col in row {\n            if\
    \ col == 1 {\n                max_fill += 1\n            }\n        }\n      \
    \  if max_fill > capacity {\n            result += max_fill - capacity\n     \
    \   }\n    }\n    return result", "    var count = 0\n    for i in 0..<grid.count\
    \ {\n        var sum = 0\n        for j in 0..<grid[i].count {\n            sum\
    \ += grid[i][j]\n        }\n        count += sum / capacity\n        if sum %\
    \ capacity != 0 {\n            count += 1\n        }\n    }\n    return count",
  "    var result = 0\n    for row in grid {\n        var sum = 0\n        for well\
    \ in row {\n            sum += well\n        }\n        result += sum / capacity\n\
    \        if sum % capacity != 0 {\n            result += 1\n        }\n    }\n\
    \    return result", "    var grid = grid\n    var count = 0\n    while true {\n\
    \        var filled = false\n        for i in 0..<grid.count {\n            for\
    \ j in 0..<grid[i].count {\n                if grid[i][j] == 1 {\n           \
    \         filled = true\n                    grid[i][j] = 0\n                \
    \    if i > 0 {\n                        grid[i-1][j] = min(grid[i-1][j] + 1,\
    \ capacity)\n                    }\n                    if i < grid.count - 1\
    \ {\n                        grid[i+1][j] = min(grid[i+1][j] + 1, capacity)\n\
    \                    }\n                    if j > 0 {\n                     \
    \   grid[i][j-1] = min(grid[i][j-1] + 1, capacity)\n                    }\n  \
    \                  if j < grid[i].count - 1 {\n                        grid[i][j+1]\
    \ = min(grid[i][j+1] + 1, capacity)\n                    }\n                }\n\
    \            }\n        }\n        if !filled {\n            break\n        }\n\
    \        count += 1\n    }\n    return count", "    var count = 0\n    var grid\
    \ = grid\n    var row = 0\n    var col = 0\n    while row < grid.count {\n   \
    \     col = 0\n        while col < grid[row].count {\n            if grid[row][col]\
    \ == 1 {\n                grid[row][col] = 0\n                count += 1\n   \
    \             var i = row\n                while i < grid.count && capacity >\
    \ 0 {\n                    if grid[i][col] == 1 {\n                        grid[i][col]\
    \ = 0\n                        capacity -= 1\n                    }\n        \
    \            i += 1\n                }\n            }\n            col += 1\n\
    \        }\n        row += 1\n    }\n    return count", "    var count = 0\n \
    \   var grid = grid\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      fill(grid: &grid, i: i, j: j, capacity: capacity)\n            }\n    \
    \    }\n    }\n    return count", "    var grid = grid\n    var count = 0\n  \
    \  while true {\n        var max_fill = 0\n        var max_fill_index = -1\n \
    \       for i in 0..<grid.count {\n            let fill = grid[i].reduce(0, +)\n\
    \            if fill > max_fill {\n                max_fill = fill\n         \
    \       max_fill_index = i\n            }\n        }\n        if max_fill == 0\
    \ {\n            break\n        }\n        count += 1\n        for i in 0..<grid[max_fill_index].count\
    \ {\n            if grid[max_fill_index][i] == 1 {\n                grid[max_fill_index][i]\
    \ = 0\n                if max_fill_index - 1 >= 0 {\n                    grid[max_fill_index\
    \ - 1][i] = 1\n                }\n                if max_fill_index + 1 < grid.count\
    \ {\n                    grid[max_fill_index + 1][i] = 1\n                }\n\
    \            }\n        }\n    }\n    return count", "    var result = 0\n   \
    \ for row in grid {\n        var water = 0\n        for cell in row {\n      \
    \      water += cell\n            if water >= capacity {\n                result\
    \ += 1\n                water = 0\n            }\n        }\n    }\n    return\
    \ result", "    var result = 0\n    var water = 0\n    for row in grid {\n   \
    \     for cell in row {\n            water += cell\n            if water == capacity\
    \ {\n                result += 1\n                water = 0\n            } else\
    \ if water > capacity {\n                result += 1\n                water =\
    \ cell\n            }\n        }\n        if water > 0 {\n            result +=\
    \ 1\n            water = 0\n        }\n    }\n    return result", "    var max_fill\
    \ = 0\n    for row in grid {\n        var fill = 0\n        for well in row {\n\
    \            fill += well\n            if fill == capacity {\n               \
    \ max_fill += 1\n                fill = 0\n            }\n        }\n        if\
    \ fill > 0 {\n            max_fill += 1\n        }\n    }\n    return max_fill",
  "    var grid = grid\n    var count = 0\n    while true {\n        var filled =\
    \ false\n        for i in 0..<grid.count {\n            for j in 0..<grid[i].count\
    \ {\n                if grid[i][j] == 1 {\n                    filled = true\n\
    \                    grid[i][j] = 0\n                    if i > 0 {\n        \
    \                grid[i-1][j] = min(grid[i-1][j] + 1, capacity)\n            \
    \        }\n                    if i < grid.count - 1 {\n                    \
    \    grid[i+1][j] = min(grid[i+1][j] + 1, capacity)\n                    }\n \
    \                   if j > 0 {\n                        grid[i][j-1] = min(grid[i][j-1]\
    \ + 1, capacity)\n                    }\n                    if j < grid[i].count\
    \ - 1 {\n                        grid[i][j+1] = min(grid[i][j+1] + 1, capacity)\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ !filled {\n            break\n        }\n        count += 1\n    }\n    return\
    \ count", "    var count = 0\n    for row in grid {\n        var row_count = 0\n\
    \        for cell in row {\n            if cell == 1 {\n                row_count\
    \ += 1\n            }\n        }\n        count += row_count / capacity\n    \
    \    if row_count % capacity != 0 {\n            count += 1\n        }\n    }\n\
    \    return count", "    var count = 0\n    var grid = grid\n    for i in 0..<grid.count\
    \ {\n        var row = grid[i]\n        var sum = 0\n        for j in 0..<row.count\
    \ {\n            sum += row[j]\n        }\n        if sum > capacity {\n     \
    \       count += 1\n            for j in 0..<row.count {\n                row[j]\
    \ = 0\n            }\n        }\n        grid[i] = row\n    }\n    return count",
  "    var result = 0\n    for row in grid {\n        var water = 0\n        for cell\
    \ in row {\n            water += cell\n            if water == capacity {\n  \
    \              result += 1\n                water = 0\n            }\n       \
    \ }\n        if water > 0 {\n            result += 1\n        }\n    }\n    return\
    \ result", "    var result = 0\n    for row in grid {\n        var fill = 0\n\
    \        for well in row {\n            if well == 1 {\n                fill +=\
    \ 1\n            } else {\n                if fill > 0 {\n                   \
    \ result += 1\n                    fill = 0\n                }\n            }\n\
    \        }\n        if fill > 0 {\n            result += 1\n        }\n    }\n\
    \    return result", "    var grid = grid\n    var count = 0\n    while true {\n\
    \        var filled = false\n        for i in 0..<grid.count {\n            for\
    \ j in 0..<grid[i].count {\n                if grid[i][j] == 1 {\n           \
    \         grid[i][j] = 0\n                    filled = true\n                }\n\
    \            }\n        }\n        if !filled {\n            break\n        }\n\
    \        count += 1\n    }\n    return count", "    var grid = grid\n    var count\
    \ = 0\n    while true {\n        var filled = false\n        for i in 0..<grid.count\
    \ {\n            for j in 0..<grid[i].count {\n                if grid[i][j] ==\
    \ 1 {\n                    filled = true\n                    grid[i][j] = 0\n\
    \                    if i > 0 {\n                        grid[i-1][j] = 1\n  \
    \                  }\n                    if i < grid.count - 1 {\n          \
    \              grid[i+1][j] = 1\n                    }\n                    if\
    \ j > 0 {\n                        grid[i][j-1] = 1\n                    }\n \
    \                   if j < grid[i].count - 1 {\n                        grid[i][j+1]\
    \ = 1\n                    }\n                }\n            }\n        }\n  \
    \      if filled {\n            count += 1\n        } else {\n            break\n\
    \        }\n    }\n    return count", "    var count = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                count += 1\n            }\n        }\n    }\n    return count\
    \ / capacity + (count % capacity > 0 ? 1 : 0)", "    var grid = grid\n    var\
    \ count = 0\n    for i in 0..<grid.count {\n        count += grid[i].reduce(0,\
    \ +) / capacity\n        if grid[i].reduce(0, +) % capacity != 0 {\n         \
    \   count += 1\n        }\n    }\n    return count", "    var grid = grid\n  \
    \  var count = 0\n    while true {\n        let max_row = grid.max { (a, b) ->\
    \ Bool in\n            a.reduce(0, +) < b.reduce(0, +)\n        }!\n        let\
    \ max_row_index = grid.firstIndex(of: max_row)!\n        let max_row_sum = max_row.reduce(0,\
    \ +)\n        if max_row_sum == 0 {\n            break\n        }\n        if\
    \ max_row_sum <= capacity {\n            count += 1\n            grid[max_row_index]\
    \ = [Int](repeating: 0, count: grid[max_row_index].count)\n        } else {\n\
    \            count += max_row_sum / capacity\n            if max_row_sum % capacity\
    \ != 0 {\n                count += 1\n            }\n            grid[max_row_index]\
    \ = [Int](repeating: 0, count: grid[max_row_index].count)\n        }\n    }\n\
    \    return count", "    var fill_count = 0\n    var grid = grid\n    for i in\
    \ 0..<grid.count {\n        for j in 0..<grid[i].count {\n            if grid[i][j]\
    \ == 1 {\n                fill_count += 1\n                fill_bucket(grid: &grid,\
    \ i: i, j: j, capacity: capacity)\n            }\n        }\n    }\n    return\
    \ fill_count", "    var result = 0\n    var row_max = [Int](repeating: 0, count:\
    \ grid.count)\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                row_max[i] = j\n      \
    \      }\n        }\n    }\n    var col_max = [Int](repeating: 0, count: grid[0].count)\n\
    \    for j in 0..<grid[0].count {\n        for i in 0..<grid.count {\n       \
    \     if grid[i][j] == 1 {\n                col_max[j] = i\n            }\n  \
    \      }\n    }\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                let row_fill = row_max[i]\
    \ - j\n                let col_fill = col_max[j] - i\n                let fill\
    \ = min(row_fill, col_fill)\n                if fill > 0 {\n                 \
    \   result += 1\n                    for k in 0..<fill {\n                   \
    \     grid[i+k][j+k] = 0\n                    }\n                }\n         \
    \   }\n        }\n    }\n    return result", "    var count = 0\n    for row in\
    \ grid {\n        var sum = 0\n        for cell in row {\n            sum += cell\n\
    \            if sum == capacity {\n                count += 1\n              \
    \  sum = 0\n            }\n        }\n        if sum > 0 {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    var max_fill\
    \ = 0\n    for row in grid {\n        for col in row {\n            if col ==\
    \ 1 {\n                max_fill += 1\n            }\n        }\n    }\n    while\
    \ max_fill > 0 {\n        for row in grid {\n            for col in row {\n  \
    \              if col == 1 {\n                    count += 1\n               \
    \     max_fill -= 1\n                }\n            }\n        }\n    }\n    return\
    \ count", "    var grid = grid\n    var count = 0\n    while true {\n        var\
    \ row = 0\n        while row < grid.count {\n            var col = 0\n       \
    \     while col < grid[row].count {\n                if grid[row][col] == 1 {\n\
    \                    var fill = capacity\n                    while fill > 0 {\n\
    \                        if row + 1 < grid.count {\n                         \
    \   if grid[row + 1][col] == 0 {\n                                grid[row + 1][col]\
    \ = 1\n                                fill -= 1\n                           \
    \ }\n                        }\n                        if col + 1 < grid[row].count\
    \ {\n                            if grid[row][col + 1] == 0 {\n              \
    \                  grid[row][col + 1] = 1\n                                fill\
    \ -= 1\n                            }\n                        }\n           \
    \             if row - 1 >= 0 {\n                            if grid[row - 1][col]\
    \ == 0 {\n                                grid[row - 1][col] = 1\n           \
    \                     fill -= 1\n                            }\n             \
    \           }\n                        if col - 1 >= 0 {\n                   \
    \         if grid[row][col - 1] == 0 {\n                                grid[row][col\
    \ - 1] = 1\n                                fill -= 1\n                      \
    \      }\n                        }\n                    }\n                }\n\
    \                col += 1\n            }\n            row += 1\n        }\n  \
    \      count += 1\n        if grid.reduce(0, { $0 + $1.reduce(0, +) }) == 0 {\n\
    \            break\n        }\n    }\n    return count", "    var max_fill = 0\n\
    \    for i in 0..<grid.count {\n        var fill = 0\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                fill += 1\n           \
    \ }\n        }\n        max_fill = max(max_fill, fill)\n    }\n    return max_fill",
  "    var result = 0\n    var row = 0\n    while row < grid.count {\n        var\
    \ col = 0\n        while col < grid[row].count {\n            if grid[row][col]\
    \ == 1 {\n                result += 1\n                var bucket = capacity\n\
    \                while bucket > 0 {\n                    if row + 1 < grid.count\
    \ && grid[row + 1][col] == 1 {\n                        row += 1\n           \
    \             bucket -= 1\n                    } else {\n                    \
    \    break\n                    }\n                }\n            }\n        \
    \    col += 1\n        }\n        row += 1\n    }\n    return result", "    var\
    \ water = 0\n    for row in grid {\n        var count = 0\n        for well in\
    \ row {\n            if well == 1 {\n                count += 1\n            }\n\
    \        }\n        water += count / capacity\n        if count % capacity !=\
    \ 0 {\n            water += 1\n        }\n    }\n    return water", "    var count\
    \ = 0\n    var current_capacity = capacity\n    for row in grid {\n        for\
    \ well in row {\n            if well == 1 {\n                if current_capacity\
    \ == 0 {\n                    count += 1\n                    current_capacity\
    \ = capacity\n                }\n                current_capacity -= 1\n     \
    \       }\n        }\n    }\n    return count", "    var count = 0\n    var max_fill\
    \ = 0\n    for row in grid {\n        for col in row {\n            if col ==\
    \ 1 {\n                max_fill += 1\n            }\n        }\n    }\n    var\
    \ fill = 0\n    while fill < max_fill {\n        for row in grid {\n         \
    \   for col in row {\n                if col == 1 {\n                    fill\
    \ += 1\n                    if fill == max_fill {\n                        return\
    \ count\n                    }\n                }\n            }\n           \
    \ count += 1\n        }\n    }\n    return count", "    var grid = grid\n    var\
    \ count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      fill(grid: &grid, i: i, j: j, capacity: capacity)\n            }\n    \
    \    }\n    }\n    return count", "    var count = 0\n    var grid = grid\n  \
    \  for i in 0..<grid.count {\n        var row = grid[i]\n        for j in 0..<row.count\
    \ {\n            if row[j] == 1 {\n                count += 1\n              \
    \  var k = i\n                while k < grid.count && grid[k][j] == 1 {\n    \
    \                grid[k][j] = 0\n                    k += 1\n                }\n\
    \            }\n        }\n    }\n    return count", "    var max_fill = 0\n \
    \   for row in grid {\n        var fill = 0\n        for well in row {\n     \
    \       if well == 1 {\n                fill += 1\n            }\n        }\n\
    \        if fill > max_fill {\n            max_fill = fill\n        }\n    }\n\
    \    return max_fill / capacity + (max_fill % capacity > 0 ? 1 : 0)", "    var\
    \ water = 0\n    for row in grid {\n        var bucket = capacity\n        for\
    \ well in row {\n            bucket -= well\n            if bucket < 0 {\n   \
    \             water += 1\n                bucket = capacity - well\n         \
    \   }\n        }\n    }\n    return water", "    var count = 0\n    for i in 0..<grid.count\
    \ {\n        var row = grid[i]\n        var filled = 0\n        for j in 0..<row.count\
    \ {\n            if row[j] == 1 {\n                filled += 1\n            }\n\
    \        }\n        count += filled / capacity\n        if filled % capacity !=\
    \ 0 {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    var grid = grid\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      fill(grid: &grid, capacity: capacity, i: i, j: j)\n            }\n    \
    \    }\n    }\n    return count", "    var result = 0\n    var wells = grid\n\
    \    let well_count = wells.count\n    let well_length = wells[0].count\n    var\
    \ well_index = 0\n    while well_index < well_count {\n        var bucket_index\
    \ = 0\n        while bucket_index < well_length {\n            if wells[well_index][bucket_index]\
    \ == 1 {\n                wells[well_index][bucket_index] = 0\n              \
    \  var bucket_capacity = capacity\n                while bucket_capacity > 0 {\n\
    \                    if well_index + 1 < well_count {\n                      \
    \  if wells[well_index + 1][bucket_index] == 1 {\n                           \
    \ wells[well_index + 1][bucket_index] = 0\n                            bucket_capacity\
    \ -= 1\n                        }\n                    }\n                   \
    \ if bucket_index + 1 < well_length {\n                        if wells[well_index][bucket_index\
    \ + 1] == 1 {\n                            wells[well_index][bucket_index + 1]\
    \ = 0\n                            bucket_capacity -= 1\n                    \
    \    }\n                    }\n                    if bucket_capacity > 0 {\n\
    \                        if well_index - 1 >= 0 {\n                          \
    \  if wells[well_index - 1][bucket_index] == 1 {\n                           \
    \     wells[well_index - 1][bucket_index] = 0\n                              \
    \  bucket_capacity -= 1\n                            }\n                     \
    \   }\n                        if bucket_index - 1 >= 0 {\n                  \
    \          if wells[well_index][bucket_index - 1] == 1 {\n                   \
    \             wells[well_index][bucket_index - 1] = 0\n                      \
    \          bucket_capacity -= 1\n                            }\n             \
    \           }\n                    }\n                }\n                result\
    \ += 1\n            }\n            bucket_index += 1\n        }\n        well_index\
    \ += 1\n    }\n    return result", "    var count = 0\n    var row_max = 0\n \
    \   for row in grid {\n        row_max = row.max()!\n        count += row_max\
    \ / capacity\n        if row_max % capacity != 0 {\n            count += 1\n \
    \       }\n    }\n    return count", "    var result = 0\n    var row = grid.count\n\
    \    var col = grid[0].count\n    var i = 0\n    var j = 0\n    while i < row\
    \ {\n        while j < col {\n            if grid[i][j] == 1 {\n             \
    \   result += 1\n                j += capacity\n            } else {\n       \
    \         j += 1\n            }\n        }\n        i += 1\n        j = 0\n  \
    \  }\n    return result", "    var result = 0\n    for row in grid {\n       \
    \ var count = 0\n        for cell in row {\n            if cell == 1 {\n     \
    \           count += 1\n            }\n        }\n        result += count / capacity\n\
    \        if count % capacity != 0 {\n            result += 1\n        }\n    }\n\
    \    return result", "    var result = 0\n    var buckets = [Int](repeating: 0,\
    \ count: grid[0].count)\n    for row in grid {\n        for (index, well) in row.enumerated()\
    \ {\n            if well == 1 {\n                buckets[index] += 1\n       \
    \     }\n        }\n        for (index, bucket) in buckets.enumerated() {\n  \
    \          if bucket > capacity {\n                buckets[index] = bucket - capacity\n\
    \                result += 1\n            } else {\n                buckets[index]\
    \ = 0\n            }\n        }\n    }\n    return result", "    var count = 0\n\
    \    for row in grid {\n        var sum = 0\n        for cell in row {\n     \
    \       sum += cell\n            if sum > capacity {\n                count +=\
    \ 1\n                sum = cell\n            }\n        }\n    }\n    return count",
  "    var total_water = 0\n    for row in grid {\n        let row_water = row.reduce(0,\
    \ +)\n        total_water += row_water\n    }\n    return total_water / capacity",
  "    var result = 0\n    for row in grid {\n        var row_sum = 0\n        for\
    \ cell in row {\n            row_sum += cell\n        }\n        result += row_sum\
    \ / capacity\n        if row_sum % capacity != 0 {\n            result += 1\n\
    \        }\n    }\n    return result", "    var grid = grid\n    var count = 0\n\
    \    while true {\n        var filled = false\n        for i in 0..<grid.count\
    \ {\n            for j in 0..<grid[i].count {\n                if grid[i][j] ==\
    \ 1 {\n                    filled = true\n                    grid[i][j] = 0\n\
    \                    if i > 0 {\n                        grid[i-1][j] = min(grid[i-1][j]\
    \ + 1, capacity)\n                    }\n                    if i < grid.count\
    \ - 1 {\n                        grid[i+1][j] = min(grid[i+1][j] + 1, capacity)\n\
    \                    }\n                    if j > 0 {\n                     \
    \   grid[i][j-1] = min(grid[i][j-1] + 1, capacity)\n                    }\n  \
    \                  if j < grid[i].count - 1 {\n                        grid[i][j+1]\
    \ = min(grid[i][j+1] + 1, capacity)\n                    }\n                }\n\
    \            }\n        }\n        if !filled {\n            break\n        }\n\
    \        count += 1\n    }\n    return count", "    var max_fill = 0\n    for\
    \ row in grid {\n        var fill = 0\n        for well in row {\n           \
    \ fill += well\n            if fill == capacity {\n                max_fill +=\
    \ 1\n                fill = 0\n            }\n        }\n        if fill > 0 {\n\
    \            max_fill += 1\n        }\n    }\n    return max_fill", "    var result\
    \ = 0\n    var max_fill = 0\n    for row in grid {\n        for cell in row {\n\
    \            if cell == 1 {\n                max_fill += 1\n            }\n  \
    \      }\n    }\n    var current_fill = 0\n    while current_fill < max_fill {\n\
    \        for row in grid {\n            for cell in row {\n                if\
    \ cell == 1 {\n                    current_fill += 1\n                }\n    \
    \        }\n            if current_fill < max_fill {\n                result +=\
    \ 1\n            }\n        }\n    }\n    return result", "    var result = 0\n\
    \    for row in grid {\n        var sum = 0\n        for cell in row {\n     \
    \       sum += cell\n        }\n        result += sum / capacity\n        if sum\
    \ % capacity > 0 {\n            result += 1\n        }\n    }\n    return result",
  "    var count = 0\n    var max_fill = 0\n    var fill = 0\n    for row in grid\
    \ {\n        for col in row {\n            if col == 1 {\n                fill\
    \ += 1\n            }\n        }\n        if fill > max_fill {\n            max_fill\
    \ = fill\n        }\n        fill = 0\n    }\n    if max_fill > capacity {\n \
    \       count = max_fill / capacity\n        if max_fill % capacity != 0 {\n \
    \           count += 1\n        }\n    }\n    return count", "    var count =\
    \ 0\n    var max_fill = 0\n    var max_fill_index = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                count += 1\n            }\n        }\n        if count > max_fill\
    \ {\n            max_fill = count\n            max_fill_index = i\n        }\n\
    \        count = 0\n    }\n    return max_fill_index", "    var grid = grid\n\
    \    var count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      fill(grid: &grid, i: i, j: j, capacity: capacity)\n            }\n    \
    \    }\n    }\n    return count", "    var grid = grid\n    var count = 0\n  \
    \  while !grid.isEmpty {\n        var i = 0\n        while i < grid.count {\n\
    \            if grid[i].reduce(0, +) == 0 {\n                grid.remove(at: i)\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    if grid.isEmpty {\n            break\n        }\n        for i in 0..<grid.count\
    \ {\n            for j in 0..<grid[i].count {\n                if grid[i][j] ==\
    \ 1 {\n                    grid[i][j] = 0\n                    break\n       \
    \         }\n            }\n        }\n        count += 1\n    }\n    return count",
  "    var result = 0\n    for row in grid {\n        var water = 0\n        for well\
    \ in row {\n            water += well\n            if water == capacity {\n  \
    \              result += 1\n                water = 0\n            }\n       \
    \ }\n        if water > 0 {\n            result += 1\n        }\n    }\n    return\
    \ result", "    var count = 0\n    for row in grid {\n        var sum = 0\n  \
    \      for cell in row {\n            sum += cell\n            if sum == capacity\
    \ {\n                count += 1\n                sum = 0\n            }\n    \
    \    }\n        if sum > 0 {\n            count += 1\n        }\n    }\n    return\
    \ count", "    var count = 0\n    var wells = grid\n    var buckets = [Int](repeating:\
    \ 0, count: wells.count)\n    while true {\n        var filled = false\n     \
    \   for i in 0..<wells.count {\n            if wells[i][0] == 1 {\n          \
    \      filled = true\n                wells[i][0] = 0\n                buckets[i]\
    \ += 1\n            }\n        }\n        if !filled {\n            break\n  \
    \      }\n        count += 1\n        for i in 0..<buckets.count {\n         \
    \   if buckets[i] > capacity {\n                for j in 0..<wells.count {\n \
    \                   if i == j {\n                        continue\n          \
    \          }\n                    if wells[j][0] == 0 {\n                    \
    \    wells[j][0] = 1\n                        buckets[i] -= 1\n              \
    \          break\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return count", "    var count = 0\n    var grid = grid\n\
    \    for i in 0..<grid.count {\n        var row = grid[i]\n        var sum = 0\n\
    \        for j in 0..<row.count {\n            sum += row[j]\n        }\n    \
    \    if sum > capacity {\n            count += 1\n            for j in 0..<row.count\
    \ {\n                if row[j] == 1 {\n                    row[j] = 0\n      \
    \          }\n            }\n        }\n        grid[i] = row\n    }\n    return\
    \ count", "    var count = 0\n    var wells = grid\n    var buckets = Array(repeating:\
    \ capacity, count: wells.count)\n    while !wells.isEmpty {\n        for i in\
    \ 0..<wells.count {\n            if wells[i].isEmpty {\n                wells.remove(at:\
    \ i)\n                buckets.remove(at: i)\n            }\n        }\n      \
    \  for i in 0..<wells.count {\n            if wells[i][0] == 1 {\n           \
    \     buckets[i] -= 1\n            }\n            wells[i].remove(at: 0)\n   \
    \     }\n        count += 1\n    }\n    return count", "    var grid = grid\n\
    \    var count = 0\n    while true {\n        var filled = false\n        for\
    \ i in 0..<grid.count {\n            for j in 0..<grid[i].count {\n          \
    \      if grid[i][j] == 1 {\n                    filled = true\n             \
    \       grid[i][j] = 0\n                    if i > 0 {\n                     \
    \   grid[i-1][j] = min(grid[i-1][j] + 1, capacity)\n                    }\n  \
    \                  if i < grid.count - 1 {\n                        grid[i+1][j]\
    \ = min(grid[i+1][j] + 1, capacity)\n                    }\n                 \
    \   if j > 0 {\n                        grid[i][j-1] = min(grid[i][j-1] + 1, capacity)\n\
    \                    }\n                    if j < grid[i].count - 1 {\n     \
    \                   grid[i][j+1] = min(grid[i][j+1] + 1, capacity)\n         \
    \           }\n                }\n            }\n        }\n        if !filled\
    \ {\n            break\n        }\n        count += 1\n    }\n    return count",
  "    var grid = grid\n    var count = 0\n    while true {\n        var filled =\
    \ false\n        for i in 0..<grid.count {\n            for j in 0..<grid[i].count\
    \ {\n                if grid[i][j] == 1 {\n                    filled = true\n\
    \                    grid[i][j] = 0\n                    if i > 0 {\n        \
    \                grid[i-1][j] = min(grid[i-1][j] + 1, capacity)\n            \
    \        }\n                    if i < grid.count - 1 {\n                    \
    \    grid[i+1][j] = min(grid[i+1][j] + 1, capacity)\n                    }\n \
    \                   if j > 0 {\n                        grid[i][j-1] = min(grid[i][j-1]\
    \ + 1, capacity)\n                    }\n                    if j < grid[i].count\
    \ - 1 {\n                        grid[i][j+1] = min(grid[i][j+1] + 1, capacity)\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ !filled {\n            break\n        }\n        count += 1\n    }\n    return\
    \ count", "    var result = 0\n    var current_fill = 0\n    for row in grid {\n\
    \        for well in row {\n            if well == 1 {\n                current_fill\
    \ += 1\n            }\n        }\n        if current_fill > 0 {\n            result\
    \ += 1\n            current_fill = max(0, current_fill - capacity)\n        }\n\
    \    }\n    return result", "    var grid = grid\n    var count = 0\n    while\
    \ true {\n        var filled = false\n        for i in 0..<grid.count {\n    \
    \        for j in 0..<grid[i].count {\n                if grid[i][j] == 1 {\n\
    \                    filled = true\n                    grid[i][j] = 0\n     \
    \               if i > 0 {\n                        grid[i-1][j] = min(grid[i-1][j]\
    \ + 1, capacity)\n                    }\n                    if i < grid.count\
    \ - 1 {\n                        grid[i+1][j] = min(grid[i+1][j] + 1, capacity)\n\
    \                    }\n                    if j > 0 {\n                     \
    \   grid[i][j-1] = min(grid[i][j-1] + 1, capacity)\n                    }\n  \
    \                  if j < grid[i].count - 1 {\n                        grid[i][j+1]\
    \ = min(grid[i][j+1] + 1, capacity)\n                    }\n                }\n\
    \            }\n        }\n        if !filled {\n            break\n        }\n\
    \        count += 1\n    }\n    return count", "    var fill = 0\n    var wells\
    \ = grid.map { $0.reduce(0, +) }\n    while wells.reduce(0, +) > 0 {\n       \
    \ for i in 0..<wells.count {\n            if wells[i] > 0 {\n                wells[i]\
    \ -= min(wells[i], capacity)\n                fill += 1\n            }\n     \
    \   }\n    }\n    return fill", "    var result = 0\n    for row in grid {\n \
    \       var sum = 0\n        for col in row {\n            sum += col\n      \
    \  }\n        result += sum / capacity\n        if sum % capacity != 0 {\n   \
    \         result += 1\n        }\n    }\n    return result", "    var count =\
    \ 0\n    var max_fill = 0\n    for row in grid {\n        for cell in row {\n\
    \            if cell == 1 {\n                max_fill += 1\n            }\n  \
    \      }\n    }\n    while max_fill > 0 {\n        for row in grid {\n       \
    \     var fill = 0\n            for cell in row {\n                if cell ==\
    \ 1 {\n                    fill += 1\n                }\n            }\n     \
    \       if fill > 0 {\n                count += 1\n                max_fill -=\
    \ fill\n            }\n        }\n    }\n    return count", "    var grid = grid\n\
    \    var count = 0\n    while true {\n        var filled = false\n        for\
    \ i in 0..<grid.count {\n            for j in 0..<grid[i].count {\n          \
    \      if grid[i][j] == 1 {\n                    filled = true\n             \
    \       grid[i][j] = 0\n                    if i + 1 < grid.count {\n        \
    \                grid[i + 1][j] = 1\n                    }\n                }\n\
    \            }\n        }\n        if filled {\n            count += 1\n     \
    \   } else {\n            break\n        }\n    }\n    return count", "    var\
    \ max_fill = 0\n    for row in grid {\n        var fill = 0\n        for col in\
    \ row {\n            if col == 1 {\n                fill += 1\n            }\n\
    \        }\n        max_fill = max(max_fill, fill)\n    }\n    return max_fill\
    \ / capacity + (max_fill % capacity > 0 ? 1 : 0)", "    var result = 0\n    for\
    \ row in grid {\n        var water = 0\n        for well in row {\n          \
    \  water += well\n            if water >= capacity {\n                result +=\
    \ 1\n                water = 0\n            }\n        }\n    }\n    return result",
  "    var grid = grid\n    var count = 0\n    while true {\n        var filled =\
    \ false\n        for i in 0..<grid.count {\n            for j in 0..<grid[i].count\
    \ {\n                if grid[i][j] == 1 {\n                    filled = true\n\
    \                    grid[i][j] = 0\n                    if i > 0 {\n        \
    \                grid[i-1][j] = min(grid[i-1][j] + 1, capacity)\n            \
    \        }\n                    if i < grid.count - 1 {\n                    \
    \    grid[i+1][j] = min(grid[i+1][j] + 1, capacity)\n                    }\n \
    \                   if j > 0 {\n                        grid[i][j-1] = min(grid[i][j-1]\
    \ + 1, capacity)\n                    }\n                    if j < grid[i].count\
    \ - 1 {\n                        grid[i][j+1] = min(grid[i][j+1] + 1, capacity)\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ !filled {\n            break\n        }\n        count += 1\n    }\n    return\
    \ count", "    var result = 0\n    for row in grid {\n        var current_fill\
    \ = 0\n        for cell in row {\n            if cell == 1 {\n               \
    \ current_fill += 1\n            } else {\n                if current_fill > 0\
    \ {\n                    result += 1\n                    current_fill = 0\n \
    \               }\n            }\n        }\n        if current_fill > 0 {\n \
    \           result += 1\n        }\n    }\n    return result", "    var result\
    \ = 0\n    for row in grid {\n        var current_fill = 0\n        for well in\
    \ row {\n            if well == 1 {\n                current_fill += 1\n     \
    \       } else {\n                if current_fill > 0 {\n                    result\
    \ += 1\n                    current_fill = 0\n                }\n            }\n\
    \        }\n        if current_fill > 0 {\n            result += 1\n        }\n\
    \    }\n    return result", "    var result = 0\n    var wells = grid\n    var\
    \ buckets = [Int](repeating: 0, count: wells.count)\n    while true {\n      \
    \  var filled = false\n        for i in 0..<wells.count {\n            if wells[i][0]\
    \ == 1 {\n                wells[i][0] = 0\n                buckets[i] += 1\n \
    \               filled = true\n            }\n        }\n        if !filled {\n\
    \            break\n        }\n        result += 1\n        for i in 0..<buckets.count\
    \ {\n            if buckets[i] > capacity {\n                let overflow = buckets[i]\
    \ - capacity\n                buckets[i] = capacity\n                for j in\
    \ 0..<wells.count {\n                    if i != j {\n                       \
    \ let to_fill = min(overflow, capacity - buckets[j])\n                       \
    \ buckets[j] += to_fill\n                        overflow -= to_fill\n       \
    \             }\n                }\n            }\n        }\n    }\n    return\
    \ result", "    var count = 0\n    for row in grid {\n        var sum = 0\n  \
    \      for i in row {\n            sum += i\n        }\n        count += sum /\
    \ capacity\n        if sum % capacity != 0 {\n            count += 1\n       \
    \ }\n    }\n    return count", "    var max_fill = 0\n    for row in grid {\n\
    \        var fill = 0\n        for well in row {\n            if well == 1 {\n\
    \                fill += 1\n            }\n        }\n        max_fill = max(max_fill,\
    \ fill)\n    }\n    return max_fill / capacity + (max_fill % capacity > 0 ? 1\
    \ : 0)", "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count\
    \ {\n        var row = grid[i]\n        var sum = 0\n        for j in 0..<row.count\
    \ {\n            sum += row[j]\n        }\n        if sum > capacity {\n     \
    \       count += 1\n            for j in 0..<row.count {\n                if row[j]\
    \ == 1 {\n                    row[j] = 0\n                } else {\n         \
    \           row[j] = 1\n                }\n            }\n        }\n        grid[i]\
    \ = row\n    }\n    return count", "    var result = 0\n    var max_fill = 0\n\
    \    for row in grid {\n        for col in row {\n            if col == 1 {\n\
    \                max_fill += 1\n            }\n        }\n    }\n    result =\
    \ max_fill / capacity\n    if max_fill % capacity != 0 {\n        result += 1\n\
    \    }\n    return result", "    var grid = grid\n    var count = 0\n    for i\
    \ in 0..<grid.count {\n        var sum = 0\n        for j in 0..<grid[i].count\
    \ {\n            sum += grid[i][j]\n        }\n        if sum > capacity {\n \
    \           count += 1\n            for j in 0..<grid[i].count {\n           \
    \     grid[i][j] = 0\n            }\n        }\n    }\n    return count", "  \
    \  var grid = grid\n    var count = 0\n    while true {\n        var filled =\
    \ false\n        for i in 0..<grid.count {\n            for j in 0..<grid[i].count\
    \ {\n                if grid[i][j] == 1 {\n                    filled = true\n\
    \                    grid[i][j] = 0\n                    if i > 0 {\n        \
    \                grid[i-1][j] = min(grid[i-1][j] + 1, capacity)\n            \
    \        }\n                    if i < grid.count - 1 {\n                    \
    \    grid[i+1][j] = min(grid[i+1][j] + 1, capacity)\n                    }\n \
    \                   if j > 0 {\n                        grid[i][j-1] = min(grid[i][j-1]\
    \ + 1, capacity)\n                    }\n                    if j < grid[i].count\
    \ - 1 {\n                        grid[i][j+1] = min(grid[i][j+1] + 1, capacity)\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ !filled {\n            break\n        }\n        count += 1\n    }\n    return\
    \ count", "    var result = 0\n    var wells = grid\n    var buckets = Array(repeating:\
    \ capacity, count: wells.count)\n    var i = 0\n    while i < wells.count {\n\
    \        var j = 0\n        while j < wells[i].count {\n            if wells[i][j]\
    \ == 1 {\n                if buckets[i] > 0 {\n                    buckets[i]\
    \ -= 1\n                    wells[i][j] = 0\n                } else {\n      \
    \              break\n                }\n            }\n            j += 1\n \
    \       }\n        i += 1\n    }\n    for i in 0..<wells.count {\n        for\
    \ j in 0..<wells[i].count {\n            if wells[i][j] == 1 {\n             \
    \   result += 1\n            }\n        }\n    }\n    return result", "    var\
    \ result = 0\n    var max_fill = 0\n    for row in grid {\n        max_fill =\
    \ 0\n        for col in row {\n            if col == 1 {\n                max_fill\
    \ += 1\n            }\n        }\n        result += max_fill / capacity\n    \
    \    if max_fill % capacity != 0 {\n            result += 1\n        }\n    }\n\
    \    return result", "    var count = 0\n    var wells = grid\n    var row_max\
    \ = [Int](repeating: 0, count: wells.count)\n    var col_max = [Int](repeating:\
    \ 0, count: wells[0].count)\n    for i in 0..<wells.count {\n        for j in\
    \ 0..<wells[i].count {\n            row_max[i] = max(row_max[i], wells[i][j])\n\
    \            col_max[j] = max(col_max[j], wells[i][j])\n        }\n    }\n   \
    \ for i in 0..<wells.count {\n        for j in 0..<wells[i].count {\n        \
    \    let max_water = min(row_max[i], col_max[j])\n            if wells[i][j] <\
    \ max_water {\n                count += max_water - wells[i][j]\n            }\n\
    \        }\n    }\n    return count", "    var result = 0\n    var max_fill =\
    \ 0\n    for row in grid {\n        for cell in row {\n            if cell ==\
    \ 1 {\n                max_fill += 1\n            }\n        }\n    }\n    var\
    \ fill = 0\n    for row in grid {\n        for cell in row {\n            if cell\
    \ == 1 {\n                fill += 1\n            }\n        }\n        if fill\
    \ == max_fill {\n            break\n        }\n        result += 1\n        fill\
    \ = 0\n    }\n    return result", "    var count = 0\n    for row in grid {\n\
    \        var sum = 0\n        for col in row {\n            sum += col\n     \
    \       if sum == capacity {\n                count += 1\n                sum\
    \ = 0\n            }\n        }\n        if sum > 0 {\n            count += 1\n\
    \        }\n    }\n    return count", "    var result = 0\n    var current_capacity\
    \ = capacity\n    for row in grid {\n        for well in row {\n            if\
    \ well == 1 {\n                if current_capacity == 0 {\n                  \
    \  result += 1\n                    current_capacity = capacity\n            \
    \    }\n                current_capacity -= 1\n            }\n        }\n    }\n\
    \    return result", "    var count = 0\n    for row in grid {\n        var sum\
    \ = 0\n        for col in row {\n            sum += col\n            if sum >\
    \ capacity {\n                count += 1\n                sum = col\n        \
    \    }\n        }\n    }\n    return count", "    var grid = grid\n    var count\
    \ = 0\n    while true {\n        var filled = false\n        for i in 0..<grid.count\
    \ {\n            for j in 0..<grid[i].count {\n                if grid[i][j] ==\
    \ 1 {\n                    grid[i][j] = 0\n                    filled = true\n\
    \                }\n            }\n        }\n        if !filled {\n         \
    \   break\n        }\n        count += 1\n    }\n    return count", "    var result\
    \ = 0\n    for row in grid {\n        var current_capacity = capacity\n      \
    \  for well in row {\n            if well == 1 {\n                current_capacity\
    \ -= 1\n            }\n            if current_capacity == 0 {\n              \
    \  result += 1\n                current_capacity = capacity\n            }\n \
    \       }\n        if current_capacity < capacity {\n            result += 1\n\
    \        }\n    }\n    return result", "    var result = 0\n    for row in grid\
    \ {\n        var row_sum = 0\n        for cell in row {\n            row_sum +=\
    \ cell\n        }\n        result += row_sum / capacity\n        if row_sum %\
    \ capacity != 0 {\n            result += 1\n        }\n    }\n    return result",
  "    var result = 0\n    var max_fill = 0\n    for row in grid {\n        for col\
    \ in row {\n            if col == 1 {\n                max_fill += 1\n       \
    \     }\n        }\n    }\n    result = max_fill / capacity\n    if max_fill %\
    \ capacity > 0 {\n        result += 1\n    }\n    return result", "    var result\
    \ = 0\n    var row_max = 0\n    for row in grid {\n        row_max = 0\n     \
    \   for col in row {\n            if col > row_max {\n                row_max\
    \ = col\n            }\n        }\n        result += row_max\n    }\n    return\
    \ result / capacity", "    var result = 0\n    var row_max = [Int](repeating:\
    \ 0, count: grid.count)\n    var col_max = [Int](repeating: 0, count: grid[0].count)\n\
    \    for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n       \
    \     row_max[i] = max(row_max[i], grid[i][j])\n            col_max[j] = max(col_max[j],\
    \ grid[i][j])\n        }\n    }\n    for i in 0..<grid.count {\n        for j\
    \ in 0..<grid[i].count {\n            result += min(row_max[i], col_max[j]) -\
    \ grid[i][j]\n        }\n    }\n    return result", "    var result = 0\n    for\
    \ row in grid {\n        var sum = 0\n        for cell in row {\n            sum\
    \ += cell\n        }\n        result += (sum / capacity)\n        if sum % capacity\
    \ != 0 {\n            result += 1\n        }\n    }\n    return result", "   \
    \ var count = 0\n    var max_fill = 0\n    for row in grid {\n        for col\
    \ in row {\n            if col == 1 {\n                max_fill += 1\n       \
    \     }\n        }\n    }\n    while max_fill > 0 {\n        for row in grid {\n\
    \            for col in row {\n                if col == 1 {\n               \
    \     count += 1\n                    max_fill -= 1\n                }\n     \
    \       }\n        }\n    }\n    return count", "    var result = 0\n    var max_fill\
    \ = 0\n    for row in grid {\n        max_fill = 0\n        for col in row {\n\
    \            if col == 1 {\n                max_fill += 1\n            }\n   \
    \     }\n        if max_fill > capacity {\n            result += max_fill / capacity\n\
    \            if max_fill % capacity != 0 {\n                result += 1\n    \
    \        }\n        } else {\n            result += 1\n        }\n    }\n    return\
    \ result", "    var result = 0\n    for row in grid {\n        var sum = 0\n \
    \       for cell in row {\n            sum += cell\n        }\n        result\
    \ += sum / capacity\n        if sum % capacity != 0 {\n            result += 1\n\
    \        }\n    }\n    return result", "    var count = 0\n    for row in grid\
    \ {\n        var current_fill = 0\n        for well in row {\n            current_fill\
    \ += well\n            if current_fill >= capacity {\n                count +=\
    \ 1\n                current_fill = 0\n            }\n        }\n    }\n    return\
    \ count", "    var count = 0\n    var max_fill = 0\n    for row in grid {\n  \
    \      for col in row {\n            if col == 1 {\n                count += 1\n\
    \            }\n        }\n        if count > max_fill {\n            max_fill\
    \ = count\n        }\n        count = 0\n    }\n    return max_fill / capacity",
  "    var count = 0\n    for row in grid {\n        var sum = 0\n        for col\
    \ in row {\n            sum += col\n            if sum == capacity {\n       \
    \         count += 1\n                sum = 0\n            }\n        }\n    \
    \    if sum > 0 {\n            count += 1\n        }\n    }\n    return count",
  "    var count = 0\n    var grid = grid\n    for i in 0..<grid.count {\n       \
    \ var row = grid[i]\n        var sum = 0\n        for j in 0..<row.count {\n \
    \           sum += row[j]\n        }\n        if sum > capacity {\n          \
    \  count += 1\n            for j in 0..<row.count {\n                if row[j]\
    \ == 1 {\n                    grid[i][j] = 0\n                }\n            }\n\
    \        }\n    }\n    return count", "    var result = 0\n    for row in grid\
    \ {\n        var sum = 0\n        for col in row {\n            sum += col\n \
    \       }\n        result += sum / capacity\n        if sum % capacity != 0 {\n\
    \            result += 1\n        }\n    }\n    return result", "    var result\
    \ = 0\n    var row_max = 0\n    var row_sum = 0\n    for row in grid {\n     \
    \   row_max = 0\n        row_sum = 0\n        for col in row {\n            row_sum\
    \ += col\n            if col > row_max {\n                row_max = col\n    \
    \        }\n        }\n        result += row_max\n        if row_sum < capacity\
    \ {\n            result += capacity - row_sum\n        }\n    }\n    return result",
  "    var count = 0\n    for row in grid {\n        var current = 0\n        for\
    \ col in row {\n            current += col\n            if current == capacity\
    \ {\n                count += 1\n                current = 0\n            }\n\
    \        }\n        if current > 0 {\n            count += 1\n        }\n    }\n\
    \    return count", "    var count = 0\n    var grid = grid\n    var row = 0\n\
    \    while row < grid.count {\n        var col = 0\n        while col < grid[row].count\
    \ {\n            if grid[row][col] == 1 {\n                var i = row\n     \
    \           while i < grid.count && grid[i][col] == 1 {\n                    grid[i][col]\
    \ = 0\n                    i += 1\n                }\n                count +=\
    \ 1\n            }\n            col += 1\n        }\n        row += 1\n    }\n\
    \    return count", "    var count = 0\n    var max_fill = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                count += 1\n            }\n        }\n        max_fill = max(max_fill,\
    \ count)\n        count = 0\n    }\n    return max_fill / capacity + (max_fill\
    \ % capacity > 0 ? 1 : 0)", "    var result = 0\n    for row in grid {\n     \
    \   var water = 0\n        for well in row {\n            water += well\n    \
    \        if water == capacity {\n                result += 1\n               \
    \ water = 0\n            }\n        }\n        if water > 0 {\n            result\
    \ += 1\n        }\n    }\n    return result", "    var total = 0\n    var max_fill\
    \ = 0\n    for row in grid {\n        for cell in row {\n            if cell ==\
    \ 1 {\n                total += 1\n            }\n        }\n        max_fill\
    \ = max(max_fill, total)\n        total = 0\n    }\n    return max_fill / capacity\
    \ + (max_fill % capacity > 0 ? 1 : 0)", "    var result = 0\n    var max_fill\
    \ = 0\n    for row in grid {\n        max_fill = 0\n        for column in row\
    \ {\n            if column == 1 {\n                max_fill += 1\n           \
    \ }\n        }\n        result += max_fill / capacity\n        if max_fill % capacity\
    \ != 0 {\n            result += 1\n        }\n    }\n    return result", "   \
    \ var result = 0\n    for row in grid {\n        var current_fill = 0\n      \
    \  for well in row {\n            if well == 1 {\n                current_fill\
    \ += 1\n            } else {\n                if current_fill > 0 {\n        \
    \            result += 1\n                    current_fill = 0\n             \
    \   }\n            }\n        }\n        if current_fill > 0 {\n            result\
    \ += 1\n        }\n    }\n    return result", "    var result = 0\n    for row\
    \ in grid {\n        var sum = 0\n        for col in row {\n            sum +=\
    \ col\n        }\n        result += sum / capacity\n        if sum % capacity\
    \ > 0 {\n            result += 1\n        }\n    }\n    return result", "    var\
    \ count = 0\n    var max_fill = 0\n    for row in grid {\n        for cell in\
    \ row {\n            if cell == 1 {\n                max_fill += 1\n         \
    \   }\n        }\n    }\n    while max_fill > 0 {\n        for row in grid {\n\
    \            for cell in row {\n                if cell == 1 {\n             \
    \       max_fill -= 1\n                }\n            }\n            count +=\
    \ 1\n        }\n    }\n    return count", "    var count = 0\n    var wells =\
    \ grid\n    var max_fill = capacity\n    for i in 0..<wells.count {\n        var\
    \ fill = 0\n        for j in 0..<wells[i].count {\n            if wells[i][j]\
    \ == 1 {\n                fill += 1\n            }\n        }\n        if fill\
    \ > max_fill {\n            max_fill = fill\n        }\n    }\n    while max_fill\
    \ > 0 {\n        for i in 0..<wells.count {\n            var fill = 0\n      \
    \      for j in 0..<wells[i].count {\n                if wells[i][j] == 1 {\n\
    \                    fill += 1\n                }\n            }\n           \
    \ if fill > 0 {\n                count += 1\n                for j in 0..<wells[i].count\
    \ {\n                    if wells[i][j] == 1 {\n                        wells[i][j]\
    \ = 0\n                    }\n                }\n            }\n        }\n  \
    \      max_fill -= 1\n    }\n    return count"]
stop_tokens:
- "\n}"
