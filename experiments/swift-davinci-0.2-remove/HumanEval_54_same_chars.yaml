name: HumanEval_54_same_chars
language: swift
prompt: "\n/// Check if two words have the same characters.\nfunc same_chars(s0: String,\
  \ s1: String) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
  ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
  \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"\
  dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") ==\
  \ false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\n\
  assert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
completions: ["    var chars = [Character: Int]()\n    for c in s0 {\n        if let\
    \ n = chars[c] {\n            chars[c] = n + 1\n        } else {\n           \
    \ chars[c] = 1\n        }\n    }\n    for c in s1 {\n        if let n = chars[c]\
    \ {\n            chars[c] = n - 1\n        } else {\n            return false\n\
    \        }\n    }\n    for (_, n) in chars {\n        if n != 0 {\n          \
    \  return false\n        }\n    }\n    return true", "    var chars = [Character:\
    \ Int]()\n    for c in s0 {\n        chars[c] = (chars[c] ?? 0) + 1\n    }\n \
    \   for c in s1 {\n        chars[c] = (chars[c] ?? 0) - 1\n    }\n    for (_,\
    \ v) in chars {\n        if v != 0 {\n            return false\n        }\n  \
    \  }\n    return true", "    var chars = [Character: Int]()\n    for c in s0 {\n\
    \        chars[c] = (chars[c] ?? 0) + 1\n    }\n    for c in s1 {\n        chars[c]\
    \ = (chars[c] ?? 0) - 1\n    }\n    for (_, v) in chars {\n        if v != 0 {\n\
    \            return false\n        }\n    }\n    return true", "    var chars\
    \ = [Character: Int]()\n    for c in s0 {\n        if let n = chars[c] {\n   \
    \         chars[c] = n + 1\n        } else {\n            chars[c] = 1\n     \
    \   }\n    }\n    for c in s1 {\n        if let n = chars[c] {\n            chars[c]\
    \ = n - 1\n        } else {\n            return false\n        }\n    }\n    for\
    \ (_, n) in chars {\n        if n != 0 {\n            return false\n        }\n\
    \    }\n    return true", "    let s0 = s0.lowercaseString\n    let s1 = s1.lowercaseString\n\
    \    var chars = [Character: Int]()\n    for c in s0.characters {\n        if\
    \ let n = chars[c] {\n            chars[c] = n + 1\n        } else {\n       \
    \     chars[c] = 1\n        }\n    }\n    for c in s1.characters {\n        if\
    \ let n = chars[c] {\n            chars[c] = n - 1\n        } else {\n       \
    \     return false\n        }\n    }\n    for (_, n) in chars {\n        if n\
    \ != 0 {\n            return false\n        }\n    }\n    return true", "    let\
    \ s0 = s0.lowercaseString\n    let s1 = s1.lowercaseString\n    var chars = [Character:\
    \ Int]()\n    for c in s0.characters {\n        if let n = chars[c] {\n      \
    \      chars[c] = n + 1\n        } else {\n            chars[c] = 1\n        }\n\
    \    }\n    for c in s1.characters {\n        if let n = chars[c] {\n        \
    \    chars[c] = n - 1\n        } else {\n            return false\n        }\n\
    \    }\n    for (_, v) in chars {\n        if v != 0 {\n            return false\n\
    \        }\n    }\n    return true", "    let s0 = s0.characters.sort()\n    let\
    \ s1 = s1.characters.sort()\n    return s0 == s1", "    var chars = [Character:\
    \ Int]()\n    for c in s0 {\n        if let count = chars[c] {\n            chars[c]\
    \ = count + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let count = chars[c] {\n            chars[c] =\
    \ count - 1\n        } else {\n            return false\n        }\n    }\n  \
    \  for (_, count) in chars {\n        if count != 0 {\n            return false\n\
    \        }\n    }\n    return true", "    let s0 = s0.lowercaseString\n    let\
    \ s1 = s1.lowercaseString\n    var chars = [Character: Int]()\n    for c in s0.characters\
    \ {\n        if let count = chars[c] {\n            chars[c] = count + 1\n   \
    \     } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1.characters\
    \ {\n        if let count = chars[c] {\n            chars[c] = count - 1\n   \
    \     } else {\n            return false\n        }\n    }\n    for (_, count)\
    \ in chars {\n        if count != 0 {\n            return false\n        }\n \
    \   }\n    return true", "    var chars = [Character: Int]()\n    for c in s0\
    \ {\n        if let i = chars[c] {\n            chars[c] = i + 1\n        } else\
    \ {\n            chars[c] = 1\n        }\n    }\n    for c in s1 {\n        if\
    \ let i = chars[c] {\n            chars[c] = i - 1\n        } else {\n       \
    \     return false\n        }\n    }\n    for (_, i) in chars {\n        if i\
    \ != 0 {\n            return false\n        }\n    }\n    return true", "    let\
    \ s0 = s0.characters.sort()\n    let s1 = s1.characters.sort()\n    return s0\
    \ == s1", "    if s0.count != s1.count {\n        return false\n    }\n    var\
    \ chars = [Character: Int]()\n    for c in s0 {\n        if let count = chars[c]\
    \ {\n            chars[c] = count + 1\n        } else {\n            chars[c]\
    \ = 1\n        }\n    }\n    for c in s1 {\n        if let count = chars[c] {\n\
    \            chars[c] = count - 1\n        } else {\n            return false\n\
    \        }\n    }\n    for (_, count) in chars {\n        if count != 0 {\n  \
    \          return false\n        }\n    }\n    return true", "    var chars =\
    \ [Character: Int]()\n    for c in s0 {\n        if let count = chars[c] {\n \
    \           chars[c] = count + 1\n        } else {\n            chars[c] = 1\n\
    \        }\n    }\n    for c in s1 {\n        if let count = chars[c] {\n    \
    \        chars[c] = count - 1\n        } else {\n            return false\n  \
    \      }\n    }\n    for (_, count) in chars {\n        if count != 0 {\n    \
    \        return false\n        }\n    }\n    return true", "    var chars = [Character:\
    \ Int]()\n    for c in s0 {\n        chars[c] = (chars[c] ?? 0) + 1\n    }\n \
    \   for c in s1 {\n        chars[c] = (chars[c] ?? 0) - 1\n    }\n    for (_,\
    \ v) in chars {\n        if v != 0 {\n            return false\n        }\n  \
    \  }\n    return true", "    var chars = [Character: Int]()\n    for c in s0 {\n\
    \        chars[c] = (chars[c] ?? 0) + 1\n    }\n    for c in s1 {\n        if\
    \ chars[c] == nil {\n            return false\n        }\n        chars[c] = chars[c]!\
    \ - 1\n        if chars[c] == 0 {\n            chars.removeValue(forKey: c)\n\
    \        }\n    }\n    return chars.count == 0", "    var s0 = s0\n    var s1\
    \ = s1\n    for c in s0.characters {\n        if let i = s1.characters.indexOf(c)\
    \ {\n            s1.removeAtIndex(i)\n        } else {\n            return false\n\
    \        }\n    }\n    return s1.isEmpty", "    var chars = [Character: Int]()\n\
    \    for c in s0 {\n        if let count = chars[c] {\n            chars[c] =\
    \ count + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n  \
    \  for c in s1 {\n        if let count = chars[c] {\n            chars[c] = count\
    \ - 1\n        } else {\n            return false\n        }\n    }\n    for (_,\
    \ count) in chars {\n        if count != 0 {\n            return false\n     \
    \   }\n    }\n    return true", "    let s0 = Array(s0.characters)\n    let s1\
    \ = Array(s1.characters)\n    return s0.sort() == s1.sort()", "    var chars =\
    \ [Character: Int]()\n    for c in s0 {\n        if let n = chars[c] {\n     \
    \       chars[c] = n + 1\n        } else {\n            chars[c] = 1\n       \
    \ }\n    }\n    for c in s1 {\n        if let n = chars[c] {\n            chars[c]\
    \ = n - 1\n        } else {\n            return false\n        }\n    }\n    for\
    \ (_, n) in chars {\n        if n != 0 {\n            return false\n        }\n\
    \    }\n    return true", "    var chars = [Character: Int]()\n    for c in s0\
    \ {\n        if let n = chars[c] {\n            chars[c] = n + 1\n        } else\
    \ {\n            chars[c] = 1\n        }\n    }\n    for c in s1 {\n        if\
    \ let n = chars[c] {\n            chars[c] = n - 1\n        } else {\n       \
    \     return false\n        }\n    }\n    for (_, n) in chars {\n        if n\
    \ != 0 {\n            return false\n        }\n    }\n    return true", "    var\
    \ chars = [Character: Int]()\n    for c in s0 {\n        chars[c] = (chars[c]\
    \ ?? 0) + 1\n    }\n    for c in s1 {\n        chars[c] = (chars[c] ?? 0) - 1\n\
    \    }\n    for (_, v) in chars {\n        if v != 0 {\n            return false\n\
    \        }\n    }\n    return true", "    var chars = [Character: Int]()\n   \
    \ for c in s0 {\n        if let n = chars[c] {\n            chars[c] = n + 1\n\
    \        } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1\
    \ {\n        if let n = chars[c] {\n            chars[c] = n - 1\n        } else\
    \ {\n            return false\n        }\n    }\n    for (_, n) in chars {\n \
    \       if n != 0 {\n            return false\n        }\n    }\n    return true",
  "    var chars = [Character: Int]()\n    for c in s0 {\n        if let count = chars[c]\
    \ {\n            chars[c] = count + 1\n        } else {\n            chars[c]\
    \ = 1\n        }\n    }\n    for c in s1 {\n        if let count = chars[c] {\n\
    \            chars[c] = count - 1\n        } else {\n            return false\n\
    \        }\n    }\n    for (_, count) in chars {\n        if count != 0 {\n  \
    \          return false\n        }\n    }\n    return true", "    var chars =\
    \ [Character: Int]()\n    for c in s0 {\n        if let count = chars[c] {\n \
    \           chars[c] = count + 1\n        } else {\n            chars[c] = 1\n\
    \        }\n    }\n    for c in s1 {\n        if let count = chars[c] {\n    \
    \        chars[c] = count - 1\n        } else {\n            return false\n  \
    \      }\n    }\n    for (_, count) in chars {\n        if count != 0 {\n    \
    \        return false\n        }\n    }\n    return true", "    var chars = [Character:\
    \ Int]()\n    for c in s0 {\n        chars[c] = (chars[c] ?? 0) + 1\n    }\n \
    \   for c in s1 {\n        chars[c] = (chars[c] ?? 0) - 1\n    }\n    for (_,\
    \ v) in chars {\n        if v != 0 {\n            return false\n        }\n  \
    \  }\n    return true", "    var chars = [Character: Int]()\n    for c in s0 {\n\
    \        if let count = chars[c] {\n            chars[c] = count + 1\n       \
    \ } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1 {\n  \
    \      if let count = chars[c] {\n            chars[c] = count - 1\n        }\
    \ else {\n            return false\n        }\n    }\n    for (_, count) in chars\
    \ {\n        if count != 0 {\n            return false\n        }\n    }\n   \
    \ return true", "    var chars = [Character: Int]()\n    for c in s0 {\n     \
    \   if let count = chars[c] {\n            chars[c] = count + 1\n        } else\
    \ {\n            chars[c] = 1\n        }\n    }\n    for c in s1 {\n        if\
    \ let count = chars[c] {\n            chars[c] = count - 1\n        } else {\n\
    \            return false\n        }\n    }\n    for (_, count) in chars {\n \
    \       if count != 0 {\n            return false\n        }\n    }\n    return\
    \ true", "    var chars = [Character: Int]()\n    for c in s0 {\n        if let\
    \ n = chars[c] {\n            chars[c] = n + 1\n        } else {\n           \
    \ chars[c] = 1\n        }\n    }\n    for c in s1 {\n        if let n = chars[c]\
    \ {\n            chars[c] = n - 1\n        } else {\n            return false\n\
    \        }\n    }\n    for (_, n) in chars {\n        if n != 0 {\n          \
    \  return false\n        }\n    }\n    return true", "    var chars = [Character:\
    \ Int]()\n    for c in s0 {\n        if let n = chars[c] {\n            chars[c]\
    \ = n + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n    for\
    \ c in s1 {\n        if let n = chars[c] {\n            chars[c] = n - 1\n   \
    \     } else {\n            return false\n        }\n    }\n    for (_, n) in\
    \ chars {\n        if n != 0 {\n            return false\n        }\n    }\n \
    \   return true", "    var chars = [Character: Int]()\n    for c in s0 {\n   \
    \     if let n = chars[c] {\n            chars[c] = n + 1\n        } else {\n\
    \            chars[c] = 1\n        }\n    }\n    for c in s1 {\n        if let\
    \ n = chars[c] {\n            chars[c] = n - 1\n        } else {\n           \
    \ return false\n        }\n    }\n    for (_, n) in chars {\n        if n != 0\
    \ {\n            return false\n        }\n    }\n    return true", "    let c0\
    \ = s0.characters.sorted()\n    let c1 = s1.characters.sorted()\n    return c0\
    \ == c1", "    var c0 = s0.characters.sort()\n    var c1 = s1.characters.sort()\n\
    \    return c0 == c1", "    var chars = [Character: Int]()\n    for c in s0 {\n\
    \        if let n = chars[c] {\n            chars[c] = n + 1\n        } else {\n\
    \            chars[c] = 1\n        }\n    }\n    for c in s1 {\n        if let\
    \ n = chars[c] {\n            chars[c] = n - 1\n        } else {\n           \
    \ return false\n        }\n    }\n    for (_, n) in chars {\n        if n != 0\
    \ {\n            return false\n        }\n    }\n    return true", "    let s0\
    \ = s0.lowercaseString\n    let s1 = s1.lowercaseString\n    return s0.characters.sort()\
    \ == s1.characters.sort()", "    var chars = [Character: Int]()\n    for c in\
    \ s0 {\n        chars[c] = (chars[c] ?? 0) + 1\n    }\n    for c in s1 {\n   \
    \     chars[c] = (chars[c] ?? 0) - 1\n    }\n    for (_, v) in chars {\n     \
    \   if v != 0 {\n            return false\n        }\n    }\n    return true",
  "    var chars = [Character: Int]()\n    for c in s0 {\n        if let count = chars[c]\
    \ {\n            chars[c] = count + 1\n        } else {\n            chars[c]\
    \ = 1\n        }\n    }\n    for c in s1 {\n        if let count = chars[c] {\n\
    \            chars[c] = count - 1\n        } else {\n            return false\n\
    \        }\n    }\n    for (_, count) in chars {\n        if count != 0 {\n  \
    \          return false\n        }\n    }\n    return true", "    var chars =\
    \ [Character: Int]()\n    for c in s0 {\n        if let count = chars[c] {\n \
    \           chars[c] = count + 1\n        } else {\n            chars[c] = 1\n\
    \        }\n    }\n    for c in s1 {\n        if let count = chars[c] {\n    \
    \        chars[c] = count - 1\n        } else {\n            return false\n  \
    \      }\n    }\n    for (_, count) in chars {\n        if count != 0 {\n    \
    \        return false\n        }\n    }\n    return true", "    var chars = [Character:\
    \ Int]()\n    for c in s0 {\n        if let count = chars[c] {\n            chars[c]\
    \ = count + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let count = chars[c] {\n            chars[c] =\
    \ count - 1\n        } else {\n            return false\n        }\n    }\n  \
    \  for (_, count) in chars {\n        if count != 0 {\n            return false\n\
    \        }\n    }\n    return true", "    var chars = [Character: Int]()\n   \
    \ for c in s0 {\n        if let count = chars[c] {\n            chars[c] = count\
    \ + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n    for c\
    \ in s1 {\n        if let count = chars[c] {\n            chars[c] = count - 1\n\
    \        } else {\n            return false\n        }\n    }\n    for (_, count)\
    \ in chars {\n        if count != 0 {\n            return false\n        }\n \
    \   }\n    return true", "    let s0 = s0.characters.sort()\n    let s1 = s1.characters.sort()\n\
    \    return s0 == s1", "    var chars = [Character: Int]()\n    for c in s0 {\n\
    \        if let n = chars[c] {\n            chars[c] = n + 1\n        } else {\n\
    \            chars[c] = 1\n        }\n    }\n    for c in s1 {\n        if let\
    \ n = chars[c] {\n            chars[c] = n - 1\n        } else {\n           \
    \ return false\n        }\n    }\n    for (_, n) in chars {\n        if n != 0\
    \ {\n            return false\n        }\n    }\n    return true", "    var s0\
    \ = s0\n    var s1 = s1\n    for c in s0.characters {\n        if let i = s1.characters.indexOf(c)\
    \ {\n            s1.removeAtIndex(i)\n        } else {\n            return false\n\
    \        }\n    }\n    return s1.isEmpty", "    var chars = [Character: Int]()\n\
    \    for c in s0 {\n        if let count = chars[c] {\n            chars[c] =\
    \ count + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n  \
    \  for c in s1 {\n        if let count = chars[c] {\n            chars[c] = count\
    \ - 1\n        } else {\n            return false\n        }\n    }\n    for (_,\
    \ count) in chars {\n        if count != 0 {\n            return false\n     \
    \   }\n    }\n    return true", "    var chars = [Character: Int]()\n    for c\
    \ in s0 {\n        if let count = chars[c] {\n            chars[c] = count + 1\n\
    \        } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1\
    \ {\n        if let count = chars[c] {\n            chars[c] = count - 1\n   \
    \     } else {\n            return false\n        }\n    }\n    for (_, count)\
    \ in chars {\n        if count != 0 {\n            return false\n        }\n \
    \   }\n    return true", "    var chars = [Character: Int]()\n    for c in s0\
    \ {\n        if let count = chars[c] {\n            chars[c] = count + 1\n   \
    \     } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1 {\n\
    \        if let count = chars[c] {\n            chars[c] = count - 1\n       \
    \ } else {\n            return false\n        }\n    }\n    for (_, count) in\
    \ chars {\n        if count != 0 {\n            return false\n        }\n    }\n\
    \    return true", "    var chars = [Character: Int]()\n    for c in s0 {\n  \
    \      if let count = chars[c] {\n            chars[c] = count + 1\n        }\
    \ else {\n            chars[c] = 1\n        }\n    }\n    for c in s1 {\n    \
    \    if let count = chars[c] {\n            chars[c] = count - 1\n        } else\
    \ {\n            return false\n        }\n    }\n    for (_, count) in chars {\n\
    \        if count != 0 {\n            return false\n        }\n    }\n    return\
    \ true", "    if s0.count != s1.count {\n        return false\n    }\n    var\
    \ chars0 = s0.map { $0 }\n    var chars1 = s1.map { $0 }\n    chars0.sort()\n\
    \    chars1.sort()\n    return chars0 == chars1", "    var chars = [Character:\
    \ Int]()\n    for c in s0 {\n        if let count = chars[c] {\n            chars[c]\
    \ = count + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let count = chars[c] {\n            chars[c] =\
    \ count - 1\n        } else {\n            return false\n        }\n    }\n  \
    \  for (_, count) in chars {\n        if count != 0 {\n            return false\n\
    \        }\n    }\n    return true", "    var chars = [Character: Int]()\n   \
    \ for c in s0 {\n        if let count = chars[c] {\n            chars[c] = count\
    \ + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n    for c\
    \ in s1 {\n        if let count = chars[c] {\n            chars[c] = count - 1\n\
    \        } else {\n            return false\n        }\n    }\n    for (_, count)\
    \ in chars {\n        if count != 0 {\n            return false\n        }\n \
    \   }\n    return true", "    var chars = [Character: Int]()\n    for c in s0\
    \ {\n        if let n = chars[c] {\n            chars[c] = n + 1\n        } else\
    \ {\n            chars[c] = 1\n        }\n    }\n    for c in s1 {\n        if\
    \ let n = chars[c] {\n            chars[c] = n - 1\n        } else {\n       \
    \     return false\n        }\n    }\n    for (_, n) in chars {\n        if n\
    \ != 0 {\n            return false\n        }\n    }\n    return true", "    var\
    \ chars = [Character: Int]()\n    for c in s0 {\n        chars[c] = (chars[c]\
    \ ?? 0) + 1\n    }\n    for c in s1 {\n        chars[c] = (chars[c] ?? 0) - 1\n\
    \    }\n    for (_, v) in chars {\n        if v != 0 {\n            return false\n\
    \        }\n    }\n    return true", "    var chars = [Character: Int]()\n   \
    \ for c in s0 {\n        if let count = chars[c] {\n            chars[c] = count\
    \ + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n    for c\
    \ in s1 {\n        if let count = chars[c] {\n            chars[c] = count - 1\n\
    \        } else {\n            return false\n        }\n    }\n    for (_, count)\
    \ in chars {\n        if count != 0 {\n            return false\n        }\n \
    \   }\n    return true", "    let s0 = s0.lowercaseString.characters.sort()\n\
    \    let s1 = s1.lowercaseString.characters.sort()\n    return s0 == s1", "  \
    \  var chars = [Character: Int]()\n    for c in s0 {\n        if let count = chars[c]\
    \ {\n            chars[c] = count + 1\n        } else {\n            chars[c]\
    \ = 1\n        }\n    }\n    for c in s1 {\n        if let count = chars[c] {\n\
    \            chars[c] = count - 1\n        } else {\n            return false\n\
    \        }\n    }\n    for (_, count) in chars {\n        if count != 0 {\n  \
    \          return false\n        }\n    }\n    return true", "    var chars =\
    \ [Character: Int]()\n    for c in s0 {\n        if let n = chars[c] {\n     \
    \       chars[c] = n + 1\n        } else {\n            chars[c] = 1\n       \
    \ }\n    }\n    for c in s1 {\n        if let n = chars[c] {\n            chars[c]\
    \ = n - 1\n        } else {\n            return false\n        }\n    }\n    for\
    \ (_, n) in chars {\n        if n != 0 {\n            return false\n        }\n\
    \    }\n    return true", "    var chars = [Character: Int]()\n    for c in s0\
    \ {\n        if let count = chars[c] {\n            chars[c] = count + 1\n   \
    \     } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1 {\n\
    \        if let count = chars[c] {\n            chars[c] = count - 1\n       \
    \ } else {\n            return false\n        }\n    }\n    for (_, count) in\
    \ chars {\n        if count != 0 {\n            return false\n        }\n    }\n\
    \    return true", "    var chars = [Character: Int]()\n    for c in s0 {\n  \
    \      if let n = chars[c] {\n            chars[c] = n + 1\n        } else {\n\
    \            chars[c] = 1\n        }\n    }\n    for c in s1 {\n        if let\
    \ n = chars[c] {\n            chars[c] = n - 1\n        } else {\n           \
    \ return false\n        }\n    }\n    for (_, n) in chars {\n        if n != 0\
    \ {\n            return false\n        }\n    }\n    return true", "    var s0\
    \ = s0\n    var s1 = s1\n    for c in s0.characters {\n        if let i = s1.characters.indexOf(c)\
    \ {\n            s1.removeAtIndex(i)\n        } else {\n            return false\n\
    \        }\n    }\n    return s1.isEmpty", "    var chars = [Character: Int]()\n\
    \    for c in s0 {\n        if let n = chars[c] {\n            chars[c] = n +\
    \ 1\n        } else {\n            chars[c] = 1\n        }\n    }\n    for c in\
    \ s1 {\n        if let n = chars[c] {\n            chars[c] = n - 1\n        }\
    \ else {\n            return false\n        }\n    }\n    for (_, n) in chars\
    \ {\n        if n != 0 {\n            return false\n        }\n    }\n    return\
    \ true", "    var chars = [Character: Int]()\n    for c in s0 {\n        chars[c]\
    \ = (chars[c] ?? 0) + 1\n    }\n    for c in s1 {\n        chars[c] = (chars[c]\
    \ ?? 0) - 1\n    }\n    for (_, v) in chars {\n        if v != 0 {\n         \
    \   return false\n        }\n    }\n    return true", "    var chars = [Character:\
    \ Int]()\n    for c in s0 {\n        if let n = chars[c] {\n            chars[c]\
    \ = n + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n    for\
    \ c in s1 {\n        if let n = chars[c] {\n            chars[c] = n - 1\n   \
    \     } else {\n            return false\n        }\n    }\n    for (_, n) in\
    \ chars {\n        if n != 0 {\n            return false\n        }\n    }\n \
    \   return true", "    var chars = [Character: Int]()\n    for c in s0 {\n   \
    \     if let v = chars[c] {\n            chars[c] = v + 1\n        } else {\n\
    \            chars[c] = 1\n        }\n    }\n    for c in s1 {\n        if let\
    \ v = chars[c] {\n            chars[c] = v - 1\n        } else {\n           \
    \ return false\n        }\n    }\n    for (_, v) in chars {\n        if v != 0\
    \ {\n            return false\n        }\n    }\n    return true", "    var chars\
    \ = [Character: Int]()\n    for c in s0 {\n        if let count = chars[c] {\n\
    \            chars[c] = count + 1\n        } else {\n            chars[c] = 1\n\
    \        }\n    }\n    for c in s1 {\n        if let count = chars[c] {\n    \
    \        chars[c] = count - 1\n        } else {\n            return false\n  \
    \      }\n    }\n    for (_, count) in chars {\n        if count != 0 {\n    \
    \        return false\n        }\n    }\n    return true", "    var chars = [Character:\
    \ Int]()\n    for c in s0 {\n        if let n = chars[c] {\n            chars[c]\
    \ = n + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n    for\
    \ c in s1 {\n        if let n = chars[c] {\n            chars[c] = n - 1\n   \
    \     } else {\n            return false\n        }\n    }\n    for (_, n) in\
    \ chars {\n        if n != 0 {\n            return false\n        }\n    }\n \
    \   return true", "    var chars = [Character: Int]()\n    for c in s0 {\n   \
    \     if let count = chars[c] {\n            chars[c] = count + 1\n        } else\
    \ {\n            chars[c] = 1\n        }\n    }\n    for c in s1 {\n        if\
    \ let count = chars[c] {\n            chars[c] = count - 1\n        } else {\n\
    \            return false\n        }\n    }\n    for (_, count) in chars {\n \
    \       if count != 0 {\n            return false\n        }\n    }\n    return\
    \ true", "    var chars = [Character: Int]()\n    for c in s0 {\n        if let\
    \ count = chars[c] {\n            chars[c] = count + 1\n        } else {\n   \
    \         chars[c] = 1\n        }\n    }\n    for c in s1 {\n        if let count\
    \ = chars[c] {\n            chars[c] = count - 1\n        } else {\n         \
    \   return false\n        }\n    }\n    for (_, count) in chars {\n        if\
    \ count != 0 {\n            return false\n        }\n    }\n    return true",
  "    var chars = [Character: Int]()\n    for c in s0 {\n        if let count = chars[c]\
    \ {\n            chars[c] = count + 1\n        } else {\n            chars[c]\
    \ = 1\n        }\n    }\n    for c in s1 {\n        if let count = chars[c] {\n\
    \            chars[c] = count - 1\n        } else {\n            return false\n\
    \        }\n    }\n    for (_, count) in chars {\n        if count != 0 {\n  \
    \          return false\n        }\n    }\n    return true", "    var chars =\
    \ [Character: Int]()\n    for c in s0 {\n        if let count = chars[c] {\n \
    \           chars[c] = count + 1\n        } else {\n            chars[c] = 1\n\
    \        }\n    }\n    for c in s1 {\n        if let count = chars[c] {\n    \
    \        chars[c] = count - 1\n        } else {\n            return false\n  \
    \      }\n    }\n    for (_, count) in chars {\n        if count != 0 {\n    \
    \        return false\n        }\n    }\n    return true", "    var chars = [Character:\
    \ Int]()\n    for c in s0 {\n        if let count = chars[c] {\n            chars[c]\
    \ = count + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let count = chars[c] {\n            chars[c] =\
    \ count - 1\n        } else {\n            return false\n        }\n    }\n  \
    \  for (_, count) in chars {\n        if count != 0 {\n            return false\n\
    \        }\n    }\n    return true", "    var chars = [Character: Int]()\n   \
    \ for c in s0 {\n        if let n = chars[c] {\n            chars[c] = n + 1\n\
    \        } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1\
    \ {\n        if let n = chars[c] {\n            chars[c] = n - 1\n        } else\
    \ {\n            return false\n        }\n    }\n    for (_, n) in chars {\n \
    \       if n != 0 {\n            return false\n        }\n    }\n    return true",
  "    var chars = [Character: Int]()\n    for c in s0 {\n        chars[c] = (chars[c]\
    \ ?? 0) + 1\n    }\n    for c in s1 {\n        chars[c] = (chars[c] ?? 0) - 1\n\
    \    }\n    return chars.values.allSatisfy { $0 == 0 }", "    var chars = [Character:\
    \ Int]()\n    for c in s0 {\n        if let count = chars[c] {\n            chars[c]\
    \ = count + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let count = chars[c] {\n            chars[c] =\
    \ count - 1\n        } else {\n            return false\n        }\n    }\n  \
    \  return chars.values.filter { $0 != 0 }.count == 0", "    var chars = [Character:\
    \ Int]()\n    for c in s0 {\n        chars[c] = (chars[c] ?? 0) + 1\n    }\n \
    \   for c in s1 {\n        if chars[c] == nil {\n            return false\n  \
    \      }\n        chars[c] = chars[c]! - 1\n        if chars[c] == 0 {\n     \
    \       chars.removeValue(forKey: c)\n        }\n    }\n    return chars.count\
    \ == 0", "    var chars = [Character: Int]()\n    for c in s0 {\n        if let\
    \ n = chars[c] {\n            chars[c] = n + 1\n        } else {\n           \
    \ chars[c] = 1\n        }\n    }\n    for c in s1 {\n        if let n = chars[c]\
    \ {\n            chars[c] = n - 1\n        } else {\n            return false\n\
    \        }\n    }\n    for (_, n) in chars {\n        if n != 0 {\n          \
    \  return false\n        }\n    }\n    return true", "    var chars = [Character:\
    \ Int]()\n    for c in s0 {\n        if let n = chars[c] {\n            chars[c]\
    \ = n + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n    for\
    \ c in s1 {\n        if let n = chars[c] {\n            chars[c] = n - 1\n   \
    \     } else {\n            return false\n        }\n    }\n    for (_, n) in\
    \ chars {\n        if n != 0 {\n            return false\n        }\n    }\n \
    \   return true", "    var chars = [Character: Int]()\n    for c in s0 {\n   \
    \     chars[c] = (chars[c] ?? 0) + 1\n    }\n    for c in s1 {\n        chars[c]\
    \ = (chars[c] ?? 0) - 1\n    }\n    for (_, v) in chars {\n        if v != 0 {\n\
    \            return false\n        }\n    }\n    return true", "    var chars:\
    \ [Character: Int] = [:]\n    for c in s0 {\n        if let count = chars[c] {\n\
    \            chars[c] = count + 1\n        } else {\n            chars[c] = 1\n\
    \        }\n    }\n    for c in s1 {\n        if let count = chars[c] {\n    \
    \        chars[c] = count - 1\n        } else {\n            return false\n  \
    \      }\n    }\n    for (_, count) in chars {\n        if count != 0 {\n    \
    \        return false\n        }\n    }\n    return true", "    var chars0 = [Character](s0.characters)\n\
    \    var chars1 = [Character](s1.characters)\n    chars0.sortInPlace()\n    chars1.sortInPlace()\n\
    \    return chars0 == chars1", "    var chars = [Character: Int]()\n    for c\
    \ in s0 {\n        if let n = chars[c] {\n            chars[c] = n + 1\n     \
    \   } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1 {\n\
    \        if let n = chars[c] {\n            chars[c] = n - 1\n        } else {\n\
    \            return false\n        }\n    }\n    for (_, n) in chars {\n     \
    \   if n != 0 {\n            return false\n        }\n    }\n    return true",
  "    var chars = [Character: Int]()\n    for c in s0 {\n        chars[c] = (chars[c]\
    \ ?? 0) + 1\n    }\n    for c in s1 {\n        chars[c] = (chars[c] ?? 0) - 1\n\
    \    }\n    for (_, v) in chars {\n        if v != 0 {\n            return false\n\
    \        }\n    }\n    return true", "    var chars = [Character: Int]()\n   \
    \ for c in s0 {\n        if let count = chars[c] {\n            chars[c] = count\
    \ + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n    for c\
    \ in s1 {\n        if let count = chars[c] {\n            chars[c] = count - 1\n\
    \        } else {\n            return false\n        }\n    }\n    for (_, count)\
    \ in chars {\n        if count != 0 {\n            return false\n        }\n \
    \   }\n    return true", "    var chars = [Character: Int]()\n    for c in s0\
    \ {\n        chars[c] = (chars[c] ?? 0) + 1\n    }\n    for c in s1 {\n      \
    \  if chars[c] == nil {\n            return false\n        }\n        chars[c]\
    \ = chars[c]! - 1\n        if chars[c] == 0 {\n            chars.removeValue(forKey:\
    \ c)\n        }\n    }\n    return chars.count == 0", "    var chars0 = [Character](s0.characters)\n\
    \    var chars1 = [Character](s1.characters)\n    chars0.sortInPlace()\n    chars1.sortInPlace()\n\
    \    return chars0 == chars1", "    var chars = [Character: Int]()\n    for c\
    \ in s0 {\n        if let count = chars[c] {\n            chars[c] = count + 1\n\
    \        } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1\
    \ {\n        if let count = chars[c] {\n            chars[c] = count - 1\n   \
    \     } else {\n            return false\n        }\n    }\n    for (_, count)\
    \ in chars {\n        if count != 0 {\n            return false\n        }\n \
    \   }\n    return true", "    var chars = [Character: Int]()\n    for c in s0\
    \ {\n        chars[c] = (chars[c] ?? 0) + 1\n    }\n    for c in s1 {\n      \
    \  chars[c] = (chars[c] ?? 0) - 1\n    }\n    for (_, v) in chars {\n        if\
    \ v != 0 {\n            return false\n        }\n    }\n    return true", "  \
    \  var chars = [Character: Int]()\n    for c in s0 {\n        if let count = chars[c]\
    \ {\n            chars[c] = count + 1\n        } else {\n            chars[c]\
    \ = 1\n        }\n    }\n    for c in s1 {\n        if let count = chars[c] {\n\
    \            chars[c] = count - 1\n        } else {\n            return false\n\
    \        }\n    }\n    for (_, count) in chars {\n        if count != 0 {\n  \
    \          return false\n        }\n    }\n    return true", "    var chars =\
    \ [Character: Int]()\n    for c in s0 {\n        chars[c] = (chars[c] ?? 0) +\
    \ 1\n    }\n    for c in s1 {\n        chars[c] = (chars[c] ?? 0) - 1\n    }\n\
    \    return chars.values.allSatisfy { $0 == 0 }", "    var chars = [Character:\
    \ Int]()\n    for c in s0 {\n        if let count = chars[c] {\n            chars[c]\
    \ = count + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let count = chars[c] {\n            chars[c] =\
    \ count - 1\n        } else {\n            return false\n        }\n    }\n  \
    \  for (_, count) in chars {\n        if count != 0 {\n            return false\n\
    \        }\n    }\n    return true", "    var chars = [Character: Int]()\n   \
    \ for c in s0 {\n        if let n = chars[c] {\n            chars[c] = n + 1\n\
    \        } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1\
    \ {\n        if let n = chars[c] {\n            chars[c] = n - 1\n        } else\
    \ {\n            return false\n        }\n    }\n    for (_, n) in chars {\n \
    \       if n != 0 {\n            return false\n        }\n    }\n    return true",
  "    var chars = [Character: Int]()\n    for c in s0 {\n        chars[c] = (chars[c]\
    \ ?? 0) + 1\n    }\n    for c in s1 {\n        chars[c] = (chars[c] ?? 0) - 1\n\
    \    }\n    for (_, v) in chars {\n        if v != 0 {\n            return false\n\
    \        }\n    }\n    return true", "    var chars = [Character: Int]()\n   \
    \ for c in s0 {\n        if let count = chars[c] {\n            chars[c] = count\
    \ + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n    for c\
    \ in s1 {\n        if let count = chars[c] {\n            chars[c] = count - 1\n\
    \        } else {\n            return false\n        }\n    }\n    for (_, count)\
    \ in chars {\n        if count != 0 {\n            return false\n        }\n \
    \   }\n    return true", "    let s0 = s0.lowercaseString\n    let s1 = s1.lowercaseString\n\
    \    var chars = [Character: Int]()\n    for c in s0.characters {\n        if\
    \ let count = chars[c] {\n            chars[c] = count + 1\n        } else {\n\
    \            chars[c] = 1\n        }\n    }\n    for c in s1.characters {\n  \
    \      if let count = chars[c] {\n            chars[c] = count - 1\n        }\
    \ else {\n            return false\n        }\n    }\n    for (_, count) in chars\
    \ {\n        if count != 0 {\n            return false\n        }\n    }\n   \
    \ return true", "    var chars = [Character: Int]()\n    for c in s0 {\n     \
    \   if let n = chars[c] {\n            chars[c] = n + 1\n        } else {\n  \
    \          chars[c] = 1\n        }\n    }\n    for c in s1 {\n        if let n\
    \ = chars[c] {\n            chars[c] = n - 1\n        } else {\n            return\
    \ false\n        }\n    }\n    for (_, n) in chars {\n        if n != 0 {\n  \
    \          return false\n        }\n    }\n    return true", "    var chars =\
    \ [Character: Int]()\n    for c in s0 {\n        if let count = chars[c] {\n \
    \           chars[c] = count + 1\n        } else {\n            chars[c] = 1\n\
    \        }\n    }\n    for c in s1 {\n        if let count = chars[c] {\n    \
    \        chars[c] = count - 1\n        } else {\n            return false\n  \
    \      }\n    }\n    for (_, count) in chars {\n        if count != 0 {\n    \
    \        return false\n        }\n    }\n    return true", "    var chars = [Character:\
    \ Int]()\n    for c in s0 {\n        if let count = chars[c] {\n            chars[c]\
    \ = count + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let count = chars[c] {\n            chars[c] =\
    \ count - 1\n        } else {\n            return false\n        }\n    }\n  \
    \  for (_, count) in chars {\n        if count != 0 {\n            return false\n\
    \        }\n    }\n    return true", "    var chars = [Character: Int]()\n   \
    \ for c in s0 {\n        if let count = chars[c] {\n            chars[c] = count\
    \ + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n    for c\
    \ in s1 {\n        if let count = chars[c] {\n            chars[c] = count - 1\n\
    \        } else {\n            return false\n        }\n    }\n    for (_, count)\
    \ in chars {\n        if count != 0 {\n            return false\n        }\n \
    \   }\n    return true", "    var chars = [Character: Int]()\n    for c in s0\
    \ {\n        chars[c] = (chars[c] ?? 0) + 1\n    }\n    for c in s1 {\n      \
    \  chars[c] = (chars[c] ?? 0) - 1\n    }\n    for (_, v) in chars {\n        if\
    \ v != 0 {\n            return false\n        }\n    }\n    return true", "  \
    \  var chars = [Character: Int]()\n    for c in s0 {\n        chars[c] = (chars[c]\
    \ ?? 0) + 1\n    }\n    for c in s1 {\n        chars[c] = (chars[c] ?? 0) - 1\n\
    \    }\n    for (_, v) in chars {\n        if v != 0 {\n            return false\n\
    \        }\n    }\n    return true", "    var chars = [Character: Int]()\n   \
    \ for c in s0 {\n        if let count = chars[c] {\n            chars[c] = count\
    \ + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n    for c\
    \ in s1 {\n        if let count = chars[c] {\n            chars[c] = count - 1\n\
    \        } else {\n            return false\n        }\n    }\n    for (_, count)\
    \ in chars {\n        if count != 0 {\n            return false\n        }\n \
    \   }\n    return true", "    var chars = [Character: Int]()\n    for c in s0\
    \ {\n        if let count = chars[c] {\n            chars[c] = count + 1\n   \
    \     } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1 {\n\
    \        if let count = chars[c] {\n            chars[c] = count - 1\n       \
    \ } else {\n            return false\n        }\n    }\n    for (_, count) in\
    \ chars {\n        if count != 0 {\n            return false\n        }\n    }\n\
    \    return true", "    let c0 = Array(s0.characters).sort()\n    let c1 = Array(s1.characters).sort()\n\
    \    return c0 == c1", "    var chars = [Character: Int]()\n    for c in s0 {\n\
    \        if let n = chars[c] {\n            chars[c] = n + 1\n        } else {\n\
    \            chars[c] = 1\n        }\n    }\n    for c in s1 {\n        if let\
    \ n = chars[c] {\n            chars[c] = n - 1\n        } else {\n           \
    \ return false\n        }\n    }\n    for (_, n) in chars {\n        if n != 0\
    \ {\n            return false\n        }\n    }\n    return true", "    var chars\
    \ = [Character: Int]()\n    for c in s0 {\n        if let n = chars[c] {\n   \
    \         chars[c] = n + 1\n        } else {\n            chars[c] = 1\n     \
    \   }\n    }\n    for c in s1 {\n        if let n = chars[c] {\n            chars[c]\
    \ = n - 1\n        } else {\n            return false\n        }\n    }\n    for\
    \ (_, n) in chars {\n        if n != 0 {\n            return false\n        }\n\
    \    }\n    return true", "    var chars = [Character: Int]()\n    for c in s0\
    \ {\n        chars[c] = (chars[c] ?? 0) + 1\n    }\n    for c in s1 {\n      \
    \  chars[c] = (chars[c] ?? 0) - 1\n    }\n    for (_, v) in chars {\n        if\
    \ v != 0 {\n            return false\n        }\n    }\n    return true", "  \
    \  let s0 = s0.characters.sort()\n    let s1 = s1.characters.sort()\n    return\
    \ s0 == s1", "    var chars = [Character: Int]()\n    for c in s0 {\n        if\
    \ let n = chars[c] {\n            chars[c] = n + 1\n        } else {\n       \
    \     chars[c] = 1\n        }\n    }\n    for c in s1 {\n        if let n = chars[c]\
    \ {\n            chars[c] = n - 1\n        } else {\n            return false\n\
    \        }\n    }\n    for (_, n) in chars {\n        if n != 0 {\n          \
    \  return false\n        }\n    }\n    return true", "    var chars = [Character:\
    \ Int]()\n    for c in s0 {\n        chars[c] = (chars[c] ?? 0) + 1\n    }\n \
    \   for c in s1 {\n        chars[c] = (chars[c] ?? 0) - 1\n    }\n    for (_,\
    \ v) in chars {\n        if v != 0 {\n            return false\n        }\n  \
    \  }\n    return true", "    var chars = [Character: Int]()\n    for c in s0 {\n\
    \        if let n = chars[c] {\n            chars[c] = n + 1\n        } else {\n\
    \            chars[c] = 1\n        }\n    }\n    for c in s1 {\n        if let\
    \ n = chars[c] {\n            chars[c] = n - 1\n        } else {\n           \
    \ return false\n        }\n    }\n    return chars.values.reduce(0, +) == 0",
  "    var chars = [Character: Int]()\n    for c in s0 {\n        chars[c] = (chars[c]\
    \ ?? 0) + 1\n    }\n    for c in s1 {\n        if let n = chars[c] {\n       \
    \     if n == 1 {\n                chars.removeValue(forKey: c)\n            }\
    \ else {\n                chars[c] = n - 1\n            }\n        } else {\n\
    \            return false\n        }\n    }\n    return chars.isEmpty", "    var\
    \ chars = [Character: Int]()\n    for c in s0 {\n        chars[c] = (chars[c]\
    \ ?? 0) + 1\n    }\n    for c in s1 {\n        chars[c] = (chars[c] ?? 0) - 1\n\
    \    }\n    return chars.values.allSatisfy { $0 == 0 }", "    var chars = [Character:\
    \ Int]()\n    for c in s0 {\n        if let count = chars[c] {\n            chars[c]\
    \ = count + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let count = chars[c] {\n            chars[c] =\
    \ count - 1\n        } else {\n            return false\n        }\n    }\n  \
    \  for (_, count) in chars {\n        if count != 0 {\n            return false\n\
    \        }\n    }\n    return true", "    var chars = [Character: Int]()\n   \
    \ for c in s0 {\n        chars[c] = (chars[c] ?? 0) + 1\n    }\n    for c in s1\
    \ {\n        chars[c] = (chars[c] ?? 0) - 1\n    }\n    for (_, v) in chars {\n\
    \        if v != 0 {\n            return false\n        }\n    }\n    return true",
  "    var chars = [Character: Int]()\n    for c in s0 {\n        chars[c] = (chars[c]\
    \ ?? 0) + 1\n    }\n    for c in s1 {\n        chars[c] = (chars[c] ?? 0) - 1\n\
    \    }\n    return chars.values.allSatisfy { $0 == 0 }", "    var chars = [Character:\
    \ Int]()\n    for c in s0 {\n        if let count = chars[c] {\n            chars[c]\
    \ = count + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let count = chars[c] {\n            chars[c] =\
    \ count - 1\n        } else {\n            return false\n        }\n    }\n  \
    \  for (_, count) in chars {\n        if count != 0 {\n            return false\n\
    \        }\n    }\n    return true", "    var chars = [Character: Int]()\n   \
    \ for c in s0 {\n        chars[c] = (chars[c] ?? 0) + 1\n    }\n    for c in s1\
    \ {\n        chars[c] = (chars[c] ?? 0) - 1\n    }\n    for (_, v) in chars {\n\
    \        if v != 0 {\n            return false\n        }\n    }\n    return true",
  "    var chars = [Character: Int]()\n    for c in s0 {\n        chars[c] = (chars[c]\
    \ ?? 0) + 1\n    }\n    for c in s1 {\n        chars[c] = (chars[c] ?? 0) - 1\n\
    \    }\n    for (_, v) in chars {\n        if v != 0 {\n            return false\n\
    \        }\n    }\n    return true", "    var chars = [Character: Int]()\n   \
    \ for c in s0 {\n        if let count = chars[c] {\n            chars[c] = count\
    \ + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n    for c\
    \ in s1 {\n        if let count = chars[c] {\n            chars[c] = count - 1\n\
    \        } else {\n            return false\n        }\n    }\n    for (_, count)\
    \ in chars {\n        if count != 0 {\n            return false\n        }\n \
    \   }\n    return true", "    var chars = [Character: Int]()\n    for c in s0\
    \ {\n        if let count = chars[c] {\n            chars[c] = count + 1\n   \
    \     } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1 {\n\
    \        if let count = chars[c] {\n            chars[c] = count - 1\n       \
    \ } else {\n            return false\n        }\n    }\n    for (_, count) in\
    \ chars {\n        if count != 0 {\n            return false\n        }\n    }\n\
    \    return true", "    var chars = [Character: Int]()\n    for c in s0 {\n  \
    \      if let count = chars[c] {\n            chars[c] = count + 1\n        }\
    \ else {\n            chars[c] = 1\n        }\n    }\n    for c in s1 {\n    \
    \    if let count = chars[c] {\n            chars[c] = count - 1\n        } else\
    \ {\n            return false\n        }\n    }\n    return chars.values.filter\
    \ { $0 != 0 }.count == 0", "    var chars = [Character: Int]()\n    for c in s0\
    \ {\n        if let count = chars[c] {\n            chars[c] = count + 1\n   \
    \     } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1 {\n\
    \        if let count = chars[c] {\n            chars[c] = count - 1\n       \
    \ } else {\n            return false\n        }\n    }\n    for (_, count) in\
    \ chars {\n        if count != 0 {\n            return false\n        }\n    }\n\
    \    return true", "    var chars = [Character: Int]()\n    for c in s0 {\n  \
    \      chars[c] = (chars[c] ?? 0) + 1\n    }\n    for c in s1 {\n        chars[c]\
    \ = (chars[c] ?? 0) - 1\n    }\n    return chars.values.allSatisfy { $0 == 0 }",
  "    var chars = [Character: Int]()\n    for c in s0 {\n        if let count = chars[c]\
    \ {\n            chars[c] = count + 1\n        } else {\n            chars[c]\
    \ = 1\n        }\n    }\n    for c in s1 {\n        if let count = chars[c] {\n\
    \            chars[c] = count - 1\n        } else {\n            return false\n\
    \        }\n    }\n    for (_, count) in chars {\n        if count != 0 {\n  \
    \          return false\n        }\n    }\n    return true", "    var chars =\
    \ [Character: Int]()\n    for c in s0 {\n        if let count = chars[c] {\n \
    \           chars[c] = count + 1\n        } else {\n            chars[c] = 1\n\
    \        }\n    }\n    for c in s1 {\n        if let count = chars[c] {\n    \
    \        chars[c] = count - 1\n        } else {\n            return false\n  \
    \      }\n    }\n    for (_, count) in chars {\n        if count != 0 {\n    \
    \        return false\n        }\n    }\n    return true", "    var chars = [Character:\
    \ Int]()\n    for c in s0 {\n        chars[c] = (chars[c] ?? 0) + 1\n    }\n \
    \   for c in s1 {\n        chars[c] = (chars[c] ?? 0) - 1\n    }\n    for (_,\
    \ v) in chars {\n        if v != 0 {\n            return false\n        }\n  \
    \  }\n    return true", "    var chars = [Character: Int]()\n    for c in s0 {\n\
    \        if let count = chars[c] {\n            chars[c] = count + 1\n       \
    \ } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1 {\n  \
    \      if let count = chars[c] {\n            chars[c] = count - 1\n        }\
    \ else {\n            return false\n        }\n    }\n    for (_, count) in chars\
    \ {\n        if count != 0 {\n            return false\n        }\n    }\n   \
    \ return true", "    var chars = [Character: Int]()\n    for c in s0 {\n     \
    \   if let count = chars[c] {\n            chars[c] = count + 1\n        } else\
    \ {\n            chars[c] = 1\n        }\n    }\n    for c in s1 {\n        if\
    \ let count = chars[c] {\n            chars[c] = count - 1\n        } else {\n\
    \            return false\n        }\n    }\n    for (_, count) in chars {\n \
    \       if count != 0 {\n            return false\n        }\n    }\n    return\
    \ true", "    var s0 = s0\n    var s1 = s1\n    for c in s0.characters {\n   \
    \     if let i = s1.characters.indexOf(c) {\n            s1.removeAtIndex(i)\n\
    \        } else {\n            return false\n        }\n    }\n    return s1.isEmpty",
  "    var chars = [Character: Int]()\n    for c in s0 {\n        if let count = chars[c]\
    \ {\n            chars[c] = count + 1\n        } else {\n            chars[c]\
    \ = 1\n        }\n    }\n    for c in s1 {\n        if let count = chars[c] {\n\
    \            chars[c] = count - 1\n        } else {\n            return false\n\
    \        }\n    }\n    return chars.values.filter { $0 != 0 }.count == 0", " \
    \   var chars = [Character: Int]()\n    for c in s0 {\n        chars[c] = (chars[c]\
    \ ?? 0) + 1\n    }\n    for c in s1 {\n        chars[c] = (chars[c] ?? 0) - 1\n\
    \    }\n    return chars.values.allSatisfy { $0 == 0 }", "    var chars0 = s0.characters.sorted()\n\
    \    var chars1 = s1.characters.sorted()\n    return chars0 == chars1", "    var\
    \ chars = [Character: Int]()\n    for c in s0 {\n        if let count = chars[c]\
    \ {\n            chars[c] = count + 1\n        } else {\n            chars[c]\
    \ = 1\n        }\n    }\n    for c in s1 {\n        if let count = chars[c] {\n\
    \            chars[c] = count - 1\n        } else {\n            return false\n\
    \        }\n    }\n    for (_, count) in chars {\n        if count != 0 {\n  \
    \          return false\n        }\n    }\n    return true", "    var chars =\
    \ [Character: Int]()\n    for c in s0 {\n        if let count = chars[c] {\n \
    \           chars[c] = count + 1\n        } else {\n            chars[c] = 1\n\
    \        }\n    }\n    for c in s1 {\n        if let count = chars[c] {\n    \
    \        chars[c] = count - 1\n        } else {\n            return false\n  \
    \      }\n    }\n    for (_, count) in chars {\n        if count != 0 {\n    \
    \        return false\n        }\n    }\n    return true", "    var chars = [Character:\
    \ Int]()\n    for c in s0 {\n        if let n = chars[c] {\n            chars[c]\
    \ = n + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n    for\
    \ c in s1 {\n        if let n = chars[c] {\n            chars[c] = n - 1\n   \
    \     } else {\n            return false\n        }\n    }\n    for (_, n) in\
    \ chars {\n        if n != 0 {\n            return false\n        }\n    }\n \
    \   return true", "    var chars = [Character: Int]()\n    for c in s0 {\n   \
    \     if let count = chars[c] {\n            chars[c] = count + 1\n        } else\
    \ {\n            chars[c] = 1\n        }\n    }\n    for c in s1 {\n        if\
    \ let count = chars[c] {\n            chars[c] = count - 1\n        } else {\n\
    \            return false\n        }\n    }\n    for (_, count) in chars {\n \
    \       if count != 0 {\n            return false\n        }\n    }\n    return\
    \ true", "    let s0 = s0.lowercaseString\n    let s1 = s1.lowercaseString\n \
    \   var chars = [Character: Int]()\n    for c in s0.characters {\n        if let\
    \ n = chars[c] {\n            chars[c] = n + 1\n        } else {\n           \
    \ chars[c] = 1\n        }\n    }\n    for c in s1.characters {\n        if let\
    \ n = chars[c] {\n            chars[c] = n - 1\n        } else {\n           \
    \ return false\n        }\n    }\n    for (_, n) in chars {\n        if n != 0\
    \ {\n            return false\n        }\n    }\n    return true", "    var chars\
    \ = [Character: Int]()\n    for c in s0 {\n        if let n = chars[c] {\n   \
    \         chars[c] = n + 1\n        } else {\n            chars[c] = 1\n     \
    \   }\n    }\n    for c in s1 {\n        if let n = chars[c] {\n            chars[c]\
    \ = n - 1\n        } else {\n            return false\n        }\n    }\n    for\
    \ (_, n) in chars {\n        if n != 0 {\n            return false\n        }\n\
    \    }\n    return true", "    let s0 = s0.lowercaseString\n    let s1 = s1.lowercaseString\n\
    \    return s0.characters.sort() == s1.characters.sort()", "    let s0 = s0.characters.sort()\n\
    \    let s1 = s1.characters.sort()\n    return s0 == s1", "    var chars = [Character:\
    \ Int]()\n    for c in s0 {\n        if let count = chars[c] {\n            chars[c]\
    \ = count + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let count = chars[c] {\n            chars[c] =\
    \ count - 1\n        } else {\n            return false\n        }\n    }\n  \
    \  for (_, count) in chars {\n        if count != 0 {\n            return false\n\
    \        }\n    }\n    return true", "    var chars = [Character: Int]()\n   \
    \ for c in s0 {\n        if let n = chars[c] {\n            chars[c] = n + 1\n\
    \        } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1\
    \ {\n        if let n = chars[c] {\n            chars[c] = n - 1\n        } else\
    \ {\n            return false\n        }\n    }\n    for (_, n) in chars {\n \
    \       if n != 0 {\n            return false\n        }\n    }\n    return true",
  "    let s0 = s0.characters.sort()\n    let s1 = s1.characters.sort()\n    return\
    \ s0 == s1", "    var chars = [Character: Int]()\n    for c in s0 {\n        if\
    \ let count = chars[c] {\n            chars[c] = count + 1\n        } else {\n\
    \            chars[c] = 1\n        }\n    }\n    for c in s1 {\n        if let\
    \ count = chars[c] {\n            chars[c] = count - 1\n        } else {\n   \
    \         return false\n        }\n    }\n    for (_, count) in chars {\n    \
    \    if count != 0 {\n            return false\n        }\n    }\n    return true",
  "    var chars = [Character: Int]()\n    for c in s0 {\n        if let count = chars[c]\
    \ {\n            chars[c] = count + 1\n        } else {\n            chars[c]\
    \ = 1\n        }\n    }\n    for c in s1 {\n        if let count = chars[c] {\n\
    \            chars[c] = count - 1\n        } else {\n            return false\n\
    \        }\n    }\n    for (_, count) in chars {\n        if count != 0 {\n  \
    \          return false\n        }\n    }\n    return true", "    var chars =\
    \ [Character: Int]()\n    for c in s0 {\n        if let count = chars[c] {\n \
    \           chars[c] = count + 1\n        } else {\n            chars[c] = 1\n\
    \        }\n    }\n    for c in s1 {\n        if let count = chars[c] {\n    \
    \        chars[c] = count - 1\n        } else {\n            return false\n  \
    \      }\n    }\n    for (_, count) in chars {\n        if count != 0 {\n    \
    \        return false\n        }\n    }\n    return true", "    var chars = [Character:\
    \ Int]()\n    for c in s0 {\n        if let n = chars[c] {\n            chars[c]\
    \ = n + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n    for\
    \ c in s1 {\n        if let n = chars[c] {\n            chars[c] = n - 1\n   \
    \     } else {\n            return false\n        }\n    }\n    for (_, n) in\
    \ chars {\n        if n != 0 {\n            return false\n        }\n    }\n \
    \   return true", "    var chars = [Character: Int]()\n    for c in s0 {\n   \
    \     chars[c] = (chars[c] ?? 0) + 1\n    }\n    for c in s1 {\n        chars[c]\
    \ = (chars[c] ?? 0) - 1\n    }\n    return chars.values.allSatisfy { $0 == 0 }",
  "    let c0 = Array(s0.characters).sort()\n    let c1 = Array(s1.characters).sort()\n\
    \    return c0 == c1", "    var chars = [Character: Int]()\n    for c in s0 {\n\
    \        if let n = chars[c] {\n            chars[c] = n + 1\n        } else {\n\
    \            chars[c] = 1\n        }\n    }\n    for c in s1 {\n        if let\
    \ n = chars[c] {\n            chars[c] = n - 1\n        } else {\n           \
    \ return false\n        }\n    }\n    for (_, n) in chars {\n        if n != 0\
    \ {\n            return false\n        }\n    }\n    return true", "    var chars0\
    \ = [Character](s0.characters)\n    var chars1 = [Character](s1.characters)\n\
    \    chars0.sortInPlace()\n    chars1.sortInPlace()\n    return chars0 == chars1",
  "    var chars = [Character: Int]()\n    for c in s0 {\n        if let count = chars[c]\
    \ {\n            chars[c] = count + 1\n        } else {\n            chars[c]\
    \ = 1\n        }\n    }\n    for c in s1 {\n        if let count = chars[c] {\n\
    \            chars[c] = count - 1\n        } else {\n            return false\n\
    \        }\n    }\n    for (_, count) in chars {\n        if count != 0 {\n  \
    \          return false\n        }\n    }\n    return true", "    var chars =\
    \ [Character: Int]()\n    for c in s0 {\n        if let n = chars[c] {\n     \
    \       chars[c] = n + 1\n        } else {\n            chars[c] = 1\n       \
    \ }\n    }\n    for c in s1 {\n        if let n = chars[c] {\n            chars[c]\
    \ = n - 1\n        } else {\n            return false\n        }\n    }\n    for\
    \ (_, n) in chars {\n        if n != 0 {\n            return false\n        }\n\
    \    }\n    return true", "    var chars = [Character: Int]()\n    for c in s0\
    \ {\n        if let n = chars[c] {\n            chars[c] = n + 1\n        } else\
    \ {\n            chars[c] = 1\n        }\n    }\n    for c in s1 {\n        if\
    \ let n = chars[c] {\n            chars[c] = n - 1\n        } else {\n       \
    \     return false\n        }\n    }\n    for (_, n) in chars {\n        if n\
    \ != 0 {\n            return false\n        }\n    }\n    return true", "    var\
    \ chars = [Character: Int]()\n    for c in s0 {\n        if let count = chars[c]\
    \ {\n            chars[c] = count + 1\n        } else {\n            chars[c]\
    \ = 1\n        }\n    }\n    for c in s1 {\n        if let count = chars[c] {\n\
    \            chars[c] = count - 1\n        } else {\n            return false\n\
    \        }\n    }\n    for (_, count) in chars {\n        if count != 0 {\n  \
    \          return false\n        }\n    }\n    return true", "    var chars =\
    \ [Character: Int]()\n    for c in s0 {\n        if let n = chars[c] {\n     \
    \       chars[c] = n + 1\n        } else {\n            chars[c] = 1\n       \
    \ }\n    }\n    for c in s1 {\n        if let n = chars[c] {\n            chars[c]\
    \ = n - 1\n        } else {\n            return false\n        }\n    }\n    for\
    \ (_, n) in chars {\n        if n != 0 {\n            return false\n        }\n\
    \    }\n    return true", "    var chars = [Character: Int]()\n    for c in s0\
    \ {\n        if let count = chars[c] {\n            chars[c] = count + 1\n   \
    \     } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1 {\n\
    \        if let count = chars[c] {\n            chars[c] = count - 1\n       \
    \ } else {\n            return false\n        }\n    }\n    for (_, count) in\
    \ chars {\n        if count != 0 {\n            return false\n        }\n    }\n\
    \    return true", "    let s0 = Array(s0.characters)\n    let s1 = Array(s1.characters)\n\
    \    return s0.sort() == s1.sort()", "    var chars = [Character: Int]()\n   \
    \ for c in s0 {\n        if let count = chars[c] {\n            chars[c] = count\
    \ + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n    for c\
    \ in s1 {\n        if let count = chars[c] {\n            chars[c] = count - 1\n\
    \        } else {\n            return false\n        }\n    }\n    for (_, count)\
    \ in chars {\n        if count != 0 {\n            return false\n        }\n \
    \   }\n    return true", "    var chars = [Character: Int]()\n    for c in s0\
    \ {\n        chars[c] = (chars[c] ?? 0) + 1\n    }\n    for c in s1 {\n      \
    \  chars[c] = (chars[c] ?? 0) - 1\n    }\n    return chars.values.filter { $0\
    \ != 0 }.count == 0", "    var chars = [Character: Int]()\n    for c in s0 {\n\
    \        chars[c] = (chars[c] ?? 0) + 1\n    }\n    for c in s1 {\n        chars[c]\
    \ = (chars[c] ?? 0) - 1\n    }\n    return chars.values.filter { $0 != 0 }.isEmpty",
  "    var chars = [Character: Int]()\n    for c in s0 {\n        chars[c] = (chars[c]\
    \ ?? 0) + 1\n    }\n    for c in s1 {\n        chars[c] = (chars[c] ?? 0) - 1\n\
    \    }\n    return chars.values.allSatisfy { $0 == 0 }", "    var chars = [Character:\
    \ Int]()\n    for c in s0 {\n        if let count = chars[c] {\n            chars[c]\
    \ = count + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let count = chars[c] {\n            chars[c] =\
    \ count - 1\n        } else {\n            return false\n        }\n    }\n  \
    \  for (_, count) in chars {\n        if count != 0 {\n            return false\n\
    \        }\n    }\n    return true", "    var chars = [Character: Int]()\n   \
    \ for c in s0 {\n        if let n = chars[c] {\n            chars[c] = n + 1\n\
    \        } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1\
    \ {\n        if let n = chars[c] {\n            chars[c] = n - 1\n        } else\
    \ {\n            return false\n        }\n    }\n    for (_, n) in chars {\n \
    \       if n != 0 {\n            return false\n        }\n    }\n    return true",
  "    var chars = [Character: Int]()\n    for c in s0 {\n        if let count = chars[c]\
    \ {\n            chars[c] = count + 1\n        } else {\n            chars[c]\
    \ = 1\n        }\n    }\n    for c in s1 {\n        if let count = chars[c] {\n\
    \            chars[c] = count - 1\n        } else {\n            return false\n\
    \        }\n    }\n    for (_, count) in chars {\n        if count != 0 {\n  \
    \          return false\n        }\n    }\n    return true", "    var chars =\
    \ [Character: Int]()\n    for c in s0 {\n        if let n = chars[c] {\n     \
    \       chars[c] = n + 1\n        } else {\n            chars[c] = 1\n       \
    \ }\n    }\n    for c in s1 {\n        if let n = chars[c] {\n            chars[c]\
    \ = n - 1\n        } else {\n            return false\n        }\n    }\n    for\
    \ (_, n) in chars {\n        if n != 0 {\n            return false\n        }\n\
    \    }\n    return true", "    var chars = [Character: Int]()\n    for c in s0\
    \ {\n        if let count = chars[c] {\n            chars[c] = count + 1\n   \
    \     } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1 {\n\
    \        if let count = chars[c] {\n            chars[c] = count - 1\n       \
    \ } else {\n            return false\n        }\n    }\n    for (_, count) in\
    \ chars {\n        if count != 0 {\n            return false\n        }\n    }\n\
    \    return true", "    var chars = [Character: Int]()\n    for c in s0 {\n  \
    \      chars[c] = (chars[c] ?? 0) + 1\n    }\n    for c in s1 {\n        chars[c]\
    \ = (chars[c] ?? 0) - 1\n    }\n    for (_, v) in chars {\n        if v != 0 {\n\
    \            return false\n        }\n    }\n    return true", "    var chars\
    \ = [Character: Int]()\n    for c in s0 {\n        if let count = chars[c] {\n\
    \            chars[c] = count + 1\n        } else {\n            chars[c] = 1\n\
    \        }\n    }\n    for c in s1 {\n        if let count = chars[c] {\n    \
    \        chars[c] = count - 1\n        } else {\n            return false\n  \
    \      }\n    }\n    for (_, count) in chars {\n        if count != 0 {\n    \
    \        return false\n        }\n    }\n    return true", "    var chars = [Character:\
    \ Int]()\n    for c in s0 {\n        if let count = chars[c] {\n            chars[c]\
    \ = count + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let count = chars[c] {\n            chars[c] =\
    \ count - 1\n        } else {\n            return false\n        }\n    }\n  \
    \  for (_, count) in chars {\n        if count != 0 {\n            return false\n\
    \        }\n    }\n    return true", "    let s0 = s0.characters.sort()\n    let\
    \ s1 = s1.characters.sort()\n    return s0 == s1", "    var chars0 = Array(s0.characters)\n\
    \    var chars1 = Array(s1.characters)\n    chars0.sortInPlace()\n    chars1.sortInPlace()\n\
    \    return chars0 == chars1", "    let s0 = s0.characters.sort()\n    let s1\
    \ = s1.characters.sort()\n    return s0 == s1", "    var chars = [Character: Int]()\n\
    \    for c in s0 {\n        if let n = chars[c] {\n            chars[c] = n +\
    \ 1\n        } else {\n            chars[c] = 1\n        }\n    }\n    for c in\
    \ s1 {\n        if let n = chars[c] {\n            chars[c] = n - 1\n        }\
    \ else {\n            return false\n        }\n    }\n    for (_, n) in chars\
    \ {\n        if n != 0 {\n            return false\n        }\n    }\n    return\
    \ true", "    var chars = [Character: Int]()\n    for c in s0 {\n        chars[c]\
    \ = (chars[c] ?? 0) + 1\n    }\n    for c in s1 {\n        chars[c] = (chars[c]\
    \ ?? 0) - 1\n    }\n    return chars.values.allSatisfy { $0 == 0 }", "    var\
    \ chars = [Character: Int]()\n    for c in s0 {\n        if let count = chars[c]\
    \ {\n            chars[c] = count + 1\n        } else {\n            chars[c]\
    \ = 1\n        }\n    }\n    for c in s1 {\n        if let count = chars[c] {\n\
    \            chars[c] = count - 1\n        } else {\n            return false\n\
    \        }\n    }\n    for (_, count) in chars {\n        if count != 0 {\n  \
    \          return false\n        }\n    }\n    return true", "    let s0 = s0.characters.sort()\n\
    \    let s1 = s1.characters.sort()\n    return s0 == s1", "    var chars = [Character:\
    \ Int]()\n    for c in s0 {\n        chars[c] = (chars[c] ?? 0) + 1\n    }\n \
    \   for c in s1 {\n        chars[c] = (chars[c] ?? 0) - 1\n    }\n    return chars.values.reduce(0,\
    \ +) == 0", "    var chars = [Character: Int]()\n    for c in s0 {\n        if\
    \ let n = chars[c] {\n            chars[c] = n + 1\n        } else {\n       \
    \     chars[c] = 1\n        }\n    }\n    for c in s1 {\n        if let n = chars[c]\
    \ {\n            chars[c] = n - 1\n        } else {\n            return false\n\
    \        }\n    }\n    for (_, n) in chars {\n        if n != 0 {\n          \
    \  return false\n        }\n    }\n    return true", "    let s0 = s0.lowercaseString\n\
    \    let s1 = s1.lowercaseString\n    var chars = [Character: Int]()\n    for\
    \ c in s0.characters {\n        chars[c] = (chars[c] ?? 0) + 1\n    }\n    for\
    \ c in s1.characters {\n        chars[c] = (chars[c] ?? 0) - 1\n    }\n    for\
    \ (_, v) in chars {\n        if v != 0 {\n            return false\n        }\n\
    \    }\n    return true", "    var chars = [Character: Int]()\n    for c in s0\
    \ {\n        if let n = chars[c] {\n            chars[c] = n + 1\n        } else\
    \ {\n            chars[c] = 1\n        }\n    }\n    for c in s1 {\n        if\
    \ let n = chars[c] {\n            chars[c] = n - 1\n        } else {\n       \
    \     return false\n        }\n    }\n    for (_, n) in chars {\n        if n\
    \ != 0 {\n            return false\n        }\n    }\n    return true", "    var\
    \ chars = [Character: Int]()\n    for c in s0 {\n        chars[c] = (chars[c]\
    \ ?? 0) + 1\n    }\n    for c in s1 {\n        chars[c] = (chars[c] ?? 0) - 1\n\
    \    }\n    for (_, v) in chars {\n        if v != 0 {\n            return false\n\
    \        }\n    }\n    return true", "    var chars = [Character: Int]()\n   \
    \ for c in s0 {\n        if let count = chars[c] {\n            chars[c] = count\
    \ + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n    for c\
    \ in s1 {\n        if let count = chars[c] {\n            chars[c] = count - 1\n\
    \        } else {\n            return false\n        }\n    }\n    for (_, count)\
    \ in chars {\n        if count != 0 {\n            return false\n        }\n \
    \   }\n    return true", "    var chars = [Character: Int]()\n    for c in s0\
    \ {\n        if let n = chars[c] {\n            chars[c] = n + 1\n        } else\
    \ {\n            chars[c] = 1\n        }\n    }\n    for c in s1 {\n        if\
    \ let n = chars[c] {\n            chars[c] = n - 1\n        } else {\n       \
    \     return false\n        }\n    }\n    for (_, n) in chars {\n        if n\
    \ != 0 {\n            return false\n        }\n    }\n    return true", "    var\
    \ chars = [Character: Int]()\n    for c in s0 {\n        if let count = chars[c]\
    \ {\n            chars[c] = count + 1\n        } else {\n            chars[c]\
    \ = 1\n        }\n    }\n    for c in s1 {\n        if let count = chars[c] {\n\
    \            chars[c] = count - 1\n        } else {\n            return false\n\
    \        }\n    }\n    for (_, count) in chars {\n        if count != 0 {\n  \
    \          return false\n        }\n    }\n    return true", "    var chars =\
    \ [Character: Int]()\n    for c in s0 {\n        chars[c] = (chars[c] ?? 0) +\
    \ 1\n    }\n    for c in s1 {\n        chars[c] = (chars[c] ?? 0) - 1\n    }\n\
    \    for (_, v) in chars {\n        if v != 0 {\n            return false\n  \
    \      }\n    }\n    return true", "    let s0 = s0.characters.sort()\n    let\
    \ s1 = s1.characters.sort()\n    return s0 == s1", "    var chars = [Character:\
    \ Int]()\n    for c in s0 {\n        if let n = chars[c] {\n            chars[c]\
    \ = n + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n    for\
    \ c in s1 {\n        if let n = chars[c] {\n            chars[c] = n - 1\n   \
    \     } else {\n            return false\n        }\n    }\n    for (_, n) in\
    \ chars {\n        if n != 0 {\n            return false\n        }\n    }\n \
    \   return true", "    var chars = [Character: Int]()\n    for c in s0 {\n   \
    \     if let n = chars[c] {\n            chars[c] = n + 1\n        } else {\n\
    \            chars[c] = 1\n        }\n    }\n    for c in s1 {\n        if let\
    \ n = chars[c] {\n            chars[c] = n - 1\n        } else {\n           \
    \ return false\n        }\n    }\n    for (_, n) in chars {\n        if n != 0\
    \ {\n            return false\n        }\n    }\n    return true", "    var chars\
    \ = [Character: Int]()\n    for c in s0 {\n        if let count = chars[c] {\n\
    \            chars[c] = count + 1\n        } else {\n            chars[c] = 1\n\
    \        }\n    }\n    for c in s1 {\n        if let count = chars[c] {\n    \
    \        chars[c] = count - 1\n        } else {\n            return false\n  \
    \      }\n    }\n    for (_, count) in chars {\n        if count != 0 {\n    \
    \        return false\n        }\n    }\n    return true", "    var chars = [Character:\
    \ Int]()\n    for c in s0 {\n        chars[c] = (chars[c] ?? 0) + 1\n    }\n \
    \   for c in s1 {\n        chars[c] = (chars[c] ?? 0) - 1\n    }\n    return chars.values.filter({\
    \ $0 != 0 }).count == 0", "    var chars = [Character: Int]()\n    for c in s0\
    \ {\n        if let count = chars[c] {\n            chars[c] = count + 1\n   \
    \     } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1 {\n\
    \        if let count = chars[c] {\n            chars[c] = count - 1\n       \
    \ } else {\n            return false\n        }\n    }\n    for (_, count) in\
    \ chars {\n        if count != 0 {\n            return false\n        }\n    }\n\
    \    return true", "    var chars = [Character: Int]()\n    for c in s0 {\n  \
    \      if let count = chars[c] {\n            chars[c] = count + 1\n        }\
    \ else {\n            chars[c] = 1\n        }\n    }\n    for c in s1 {\n    \
    \    if let count = chars[c] {\n            chars[c] = count - 1\n        } else\
    \ {\n            return false\n        }\n    }\n    for (_, count) in chars {\n\
    \        if count != 0 {\n            return false\n        }\n    }\n    return\
    \ true", "    var chars = [Character: Int]()\n    for c in s0 {\n        if let\
    \ n = chars[c] {\n            chars[c] = n + 1\n        } else {\n           \
    \ chars[c] = 1\n        }\n    }\n    for c in s1 {\n        if let n = chars[c]\
    \ {\n            chars[c] = n - 1\n        } else {\n            return false\n\
    \        }\n    }\n    for (_, n) in chars {\n        if n != 0 {\n          \
    \  return false\n        }\n    }\n    return true", "    var chars = [Character:\
    \ Int]()\n    for c in s0 {\n        chars[c] = (chars[c] ?? 0) + 1\n    }\n \
    \   for c in s1 {\n        chars[c] = (chars[c] ?? 0) - 1\n    }\n    return chars.values.allSatisfy\
    \ { $0 == 0 }", "    var chars = [Character: Int]()\n    for c in s0 {\n     \
    \   if let count = chars[c] {\n            chars[c] = count + 1\n        } else\
    \ {\n            chars[c] = 1\n        }\n    }\n    for c in s1 {\n        if\
    \ let count = chars[c] {\n            chars[c] = count - 1\n        } else {\n\
    \            return false\n        }\n    }\n    for (_, count) in chars {\n \
    \       if count != 0 {\n            return false\n        }\n    }\n    return\
    \ true", "    let s0 = s0.lowercaseString\n    let s1 = s1.lowercaseString\n \
    \   var chars = [Character: Int]()\n    for c in s0.characters {\n        if let\
    \ n = chars[c] {\n            chars[c] = n + 1\n        } else {\n           \
    \ chars[c] = 1\n        }\n    }\n    for c in s1.characters {\n        if let\
    \ n = chars[c] {\n            chars[c] = n - 1\n        } else {\n           \
    \ return false\n        }\n    }\n    for (_, n) in chars {\n        if n != 0\
    \ {\n            return false\n        }\n    }\n    return true", "    let s0\
    \ = s0.lowercaseString\n    let s1 = s1.lowercaseString\n    return s0.characters.sort()\
    \ == s1.characters.sort()", "    var chars = [Character: Int]()\n    for c in\
    \ s0 {\n        if let count = chars[c] {\n            chars[c] = count + 1\n\
    \        } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1\
    \ {\n        if let count = chars[c] {\n            chars[c] = count - 1\n   \
    \     } else {\n            return false\n        }\n    }\n    return chars.values.filter\
    \ { $0 != 0 }.count == 0", "    let c0 = Array(s0.characters)\n    let c1 = Array(s1.characters)\n\
    \    return c0.sort() == c1.sort()", "    var chars = [Character: Int]()\n   \
    \ for c in s0 {\n        if let n = chars[c] {\n            chars[c] = n + 1\n\
    \        } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1\
    \ {\n        if let n = chars[c] {\n            chars[c] = n - 1\n        } else\
    \ {\n            return false\n        }\n    }\n    for (_, n) in chars {\n \
    \       if n != 0 {\n            return false\n        }\n    }\n    return true",
  "    let s0 = s0.characters.sort()\n    let s1 = s1.characters.sort()\n    return\
    \ s0 == s1"]
stop_tokens:
- "\n}"
