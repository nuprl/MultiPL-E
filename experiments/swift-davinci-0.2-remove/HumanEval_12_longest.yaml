name: HumanEval_12_longest
language: swift
prompt: "\n/// Out of list of strings, return the longest one. Return the first one\
  \ in case of multiple\n/// strings of the same length. Return None in case the input\
  \ list is empty.\nfunc longest(strings: [String]) -> String? {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(longest(strings: [] as [String]) == nil)\n\
  assert(longest(strings: [\"x\", \"y\", \"z\"]) == \"x\")\nassert(longest(strings:\
  \ [\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")"
completions: ["    guard let maxLength = strings.map({ $0.count }).max() else {\n\
    \        return nil\n    }\n    return strings.first(where: { $0.count == maxLength\
    \ })", "    guard !strings.isEmpty else { return nil }\n    return strings.maxElement\
    \ { $0.characters.count < $1.characters.count }", "    var longestString: String?\n\
    \    for string in strings {\n        if longestString == nil || string.count\
    \ > longestString!.count {\n            longestString = string\n        }\n  \
    \  }\n    return longestString", "    guard let first = strings.first else {\n\
    \        return nil\n    }\n    return strings.reduce(first) { (longest, string)\
    \ -> String in\n        return string.count > longest.count ? string : longest\n\
    \    }", "    if strings.isEmpty {\n        return nil\n    }\n    var longest\
    \ = strings[0]\n    for string in strings {\n        if string.characters.count\
    \ > longest.characters.count {\n            longest = string\n        }\n    }\n\
    \    return longest", "    guard let first = strings.first else {\n        return\
    \ nil\n    }\n    return strings.reduce(first) {\n        $1.characters.count\
    \ > $0.characters.count ? $1 : $0\n    }", "    guard !strings.isEmpty else {\
    \ return nil }\n    return strings.reduce(strings[0]) { $1.count > $0.count ?\
    \ $1 : $0 }", "    guard !strings.isEmpty else { return nil }\n    return strings.reduce(strings[0])\
    \ { $1.count > $0.count ? $1 : $0 }", "    guard !strings.isEmpty else { return\
    \ nil }\n    return strings.reduce(strings[0]) { $1.count > $0.count ? $1 : $0\
    \ }", "    if strings.isEmpty {\n        return nil\n    }\n    var longest =\
    \ strings[0]\n    for string in strings {\n        if string.characters.count\
    \ > longest.characters.count {\n            longest = string\n        }\n    }\n\
    \    return longest", "    guard strings.count > 0 else {\n        return nil\n\
    \    }\n    var longest = strings[0]\n    for string in strings {\n        if\
    \ string.count > longest.count {\n            longest = string\n        }\n  \
    \  }\n    return longest", "    if strings.isEmpty {\n        return nil\n   \
    \ }\n    var longest = strings[0]\n    for string in strings {\n        if string.count\
    \ > longest.count {\n            longest = string\n        }\n    }\n    return\
    \ longest", "    guard !strings.isEmpty else { return nil }\n    return strings.reduce(strings[0])\
    \ { (longest, string) in\n        return string.count > longest.count ? string\
    \ : longest\n    }", "    guard strings.count > 0 else {\n        return nil\n\
    \    }\n    var longest = strings[0]\n    for string in strings {\n        if\
    \ string.count > longest.count {\n            longest = string\n        }\n  \
    \  }\n    return longest", "    guard !strings.isEmpty else { return nil }\n \
    \   return strings.reduce(strings[0]) { $1.count > $0.count ? $1 : $0 }", "  \
    \  if strings.isEmpty {\n        return nil\n    }\n    var longestString = strings[0]\n\
    \    for string in strings {\n        if string.count > longestString.count {\n\
    \            longestString = string\n        }\n    }\n    return longestString",
  "    if strings.isEmpty {\n        return nil\n    }\n    var longest = strings[0]\n\
    \    for string in strings {\n        if string.characters.count > longest.characters.count\
    \ {\n            longest = string\n        }\n    }\n    return longest", "  \
    \  guard let first = strings.first else {\n        return nil\n    }\n    return\
    \ strings.reduce(first) {\n        $1.count > $0.count ? $1 : $0\n    }", "  \
    \  if strings.isEmpty {\n        return nil\n    }\n    var longest = strings[0]\n\
    \    for string in strings {\n        if string.characters.count > longest.characters.count\
    \ {\n            longest = string\n        }\n    }\n    return longest", "  \
    \  guard !strings.isEmpty else { return nil }\n    return strings.reduce(strings[0])\
    \ { $1.count > $0.count ? $1 : $0 }", "    guard !strings.isEmpty else { return\
    \ nil }\n    return strings.reduce(strings[0]) { $1.count > $0.count ? $1 : $0\
    \ }", "    guard let first = strings.first else {\n        return nil\n    }\n\
    \    return strings.reduce(first) {\n        $1.count > $0.count ? $1 : $0\n \
    \   }", "    if strings.isEmpty {\n        return nil\n    }\n    var longest\
    \ = strings[0]\n    for string in strings {\n        if string.characters.count\
    \ > longest.characters.count {\n            longest = string\n        }\n    }\n\
    \    return longest", "    guard !strings.isEmpty else { return nil }\n    return\
    \ strings.maxElement { $0.characters.count < $1.characters.count }", "    guard\
    \ !strings.isEmpty else { return nil }\n    return strings.reduce(strings[0])\
    \ { $1.count > $0.count ? $1 : $0 }", "    if strings.isEmpty {\n        return\
    \ nil\n    }\n    return strings.sorted { $0.count > $1.count }.first", "    guard\
    \ let first = strings.first else {\n        return nil\n    }\n    return strings.reduce(first)\
    \ { longest, string in\n        return string.count > longest.count ? string :\
    \ longest\n    }", "    if strings.isEmpty {\n        return nil\n    }\n    var\
    \ longest = strings[0]\n    for string in strings {\n        if string.count >\
    \ longest.count {\n            longest = string\n        }\n    }\n    return\
    \ longest", "    if strings.isEmpty {\n        return nil\n    }\n    var longest\
    \ = strings[0]\n    for string in strings {\n        if string.count > longest.count\
    \ {\n            longest = string\n        }\n    }\n    return longest", "  \
    \  guard !strings.isEmpty else { return nil }\n    return strings.maxElement {\
    \ $0.characters.count < $1.characters.count }", "    guard !strings.isEmpty else\
    \ { return nil }\n    return strings.reduce(strings[0]) { $1.count > $0.count\
    \ ? $1 : $0 }", "    guard !strings.isEmpty else { return nil }\n    return strings.max\
    \ { $0.count < $1.count }", "    guard let first = strings.first else {\n    \
    \    return nil\n    }\n    return strings.reduce(first) { (longest, string) ->\
    \ String in\n        return string.count > longest.count ? string : longest\n\
    \    }", "    guard !strings.isEmpty else { return nil }\n    return strings.reduce(strings[0])\
    \ { $1.count > $0.count ? $1 : $0 }", "    guard let first = strings.first else\
    \ {\n        return nil\n    }\n    return strings.reduce(first) { $1.count >\
    \ $0.count ? $1 : $0 }", "    if strings.isEmpty {\n        return nil\n    }\n\
    \    var longest = strings[0]\n    for string in strings {\n        if string.count\
    \ > longest.count {\n            longest = string\n        }\n    }\n    return\
    \ longest", "    guard !strings.isEmpty else { return nil }\n    return strings.reduce(strings[0])\
    \ { (longest, string) in\n        return string.count > longest.count ? string\
    \ : longest\n    }", "    guard !strings.isEmpty else { return nil }\n    return\
    \ strings.reduce(strings[0]) { $1.count > $0.count ? $1 : $0 }", "    guard !strings.isEmpty\
    \ else { return nil }\n    return strings.reduce(strings[0]) { $1.count > $0.count\
    \ ? $1 : $0 }", "    guard !strings.isEmpty else { return nil }\n    return strings.reduce(strings[0])\
    \ { $1.count > $0.count ? $1 : $0 }", "    guard strings.count > 0 else {\n  \
    \      return nil\n    }\n    var longest = strings[0]\n    for string in strings\
    \ {\n        if string.count > longest.count {\n            longest = string\n\
    \        }\n    }\n    return longest", "    var longest: String?\n    for string\
    \ in strings {\n        if longest == nil || string.count > longest!.count {\n\
    \            longest = string\n        }\n    }\n    return longest", "    guard\
    \ !strings.isEmpty else { return nil }\n    return strings.reduce(strings[0])\
    \ { $1.count > $0.count ? $1 : $0 }", "    guard !strings.isEmpty else { return\
    \ nil }\n    return strings.reduce(strings[0]) { $1.count > $0.count ? $1 : $0\
    \ }", "    guard strings.count > 0 else {\n        return nil\n    }\n    var\
    \ longest = strings[0]\n    for string in strings {\n        if string.count >\
    \ longest.count {\n            longest = string\n        }\n    }\n    return\
    \ longest", "    guard !strings.isEmpty else { return nil }\n    return strings.reduce(strings[0])\
    \ { $1.count > $0.count ? $1 : $0 }", "    if strings.isEmpty {\n        return\
    \ nil\n    }\n    var longest = strings[0]\n    for string in strings {\n    \
    \    if string.characters.count > longest.characters.count {\n            longest\
    \ = string\n        }\n    }\n    return longest", "    guard strings.count >\
    \ 0 else {\n        return nil\n    }\n    var longest = strings[0]\n    for string\
    \ in strings {\n        if string.count > longest.count {\n            longest\
    \ = string\n        }\n    }\n    return longest", "    guard !strings.isEmpty\
    \ else { return nil }\n    return strings.reduce(strings[0]) { $1.count > $0.count\
    \ ? $1 : $0 }", "    guard !strings.isEmpty else { return nil }\n    return strings.reduce(strings[0])\
    \ { $1.count > $0.count ? $1 : $0 }", "    guard !strings.isEmpty else { return\
    \ nil }\n    var longest = strings[0]\n    for string in strings {\n        if\
    \ string.count > longest.count {\n            longest = string\n        }\n  \
    \  }\n    return longest", "    if strings.isEmpty {\n        return nil\n   \
    \ }\n    var longestString = strings[0]\n    for string in strings {\n       \
    \ if string.count > longestString.count {\n            longestString = string\n\
    \        }\n    }\n    return longestString", "    guard !strings.isEmpty else\
    \ { return nil }\n    return strings.reduce(strings[0]) { $1.count > $0.count\
    \ ? $1 : $0 }", "    guard !strings.isEmpty else { return nil }\n    return strings.maxElement\
    \ { $0.characters.count < $1.characters.count }", "    if strings.isEmpty {\n\
    \        return nil\n    }\n    var longest = strings[0]\n    for string in strings\
    \ {\n        if string.characters.count > longest.characters.count {\n       \
    \     longest = string\n        }\n    }\n    return longest", "    guard let\
    \ first = strings.first else {\n        return nil\n    }\n    return strings.reduce(first)\
    \ {\n        return $1.count > $0.count ? $1 : $0\n    }", "    guard !strings.isEmpty\
    \ else { return nil }\n    return strings.reduce(strings[0]) { $1.count > $0.count\
    \ ? $1 : $0 }", "    guard strings.count > 0 else {\n        return nil\n    }\n\
    \    return strings.max(by: { $0.count < $1.count })!", "    guard strings.count\
    \ > 0 else {\n        return nil\n    }\n    var longest = strings[0]\n    for\
    \ string in strings {\n        if string.count > longest.count {\n           \
    \ longest = string\n        }\n    }\n    return longest", "    guard !strings.isEmpty\
    \ else { return nil }\n    return strings.reduce(strings[0]) { $1.characters.count\
    \ > $0.characters.count ? $1 : $0 }", "    guard !strings.isEmpty else { return\
    \ nil }\n    var longest = strings[0]\n    for string in strings {\n        if\
    \ string.count > longest.count {\n            longest = string\n        }\n  \
    \  }\n    return longest", "    if strings.isEmpty {\n        return nil\n   \
    \ }\n    var longest = strings[0]\n    for string in strings {\n        if string.count\
    \ > longest.count {\n            longest = string\n        }\n    }\n    return\
    \ longest", "    var longest: String? = nil\n    for string in strings {\n   \
    \     if longest == nil || string.characters.count > longest!.characters.count\
    \ {\n            longest = string\n        }\n    }\n    return longest", "  \
    \  guard let longest = strings.maxElement({$1.characters.count > $0.characters.count})\
    \ else {\n        return nil\n    }\n    return longest", "    var longest: String?\n\
    \    for string in strings {\n        if longest == nil || string.characters.count\
    \ > longest!.characters.count {\n            longest = string\n        }\n   \
    \ }\n    return longest", "    guard !strings.isEmpty else { return nil }\n  \
    \  var longest = strings[0]\n    for string in strings {\n        if string.count\
    \ > longest.count {\n            longest = string\n        }\n    }\n    return\
    \ longest", "    guard let longest = strings.maxElement({ $0.characters.count\
    \ < $1.characters.count }) else {\n        return nil\n    }\n    return longest",
  "    guard !strings.isEmpty else { return nil }\n    return strings.maxElement {\
    \ $0.characters.count < $1.characters.count }", "    if strings.isEmpty {\n  \
    \      return nil\n    }\n    var longest = strings[0]\n    for string in strings\
    \ {\n        if string.characters.count > longest.characters.count {\n       \
    \     longest = string\n        }\n    }\n    return longest", "    if strings.isEmpty\
    \ {\n        return nil\n    }\n    var longest = strings[0]\n    for string in\
    \ strings {\n        if string.count > longest.count {\n            longest =\
    \ string\n        }\n    }\n    return longest", "    var longest: String? = nil\n\
    \    for string in strings {\n        if longest == nil || string.count > longest!.count\
    \ {\n            longest = string\n        }\n    }\n    return longest", "  \
    \  if strings.isEmpty {\n        return nil\n    }\n    return strings.reduce(strings[0])\
    \ { (longest, string) -> String in\n        if string.count > longest.count {\n\
    \            return string\n        }\n        return longest\n    }", "    guard\
    \ let first = strings.first else {\n        return nil\n    }\n    return strings.reduce(first)\
    \ {\n        $1.count > $0.count ? $1 : $0\n    }", "    guard !strings.isEmpty\
    \ else { return nil }\n    return strings.reduce(strings[0]) { $1.count > $0.count\
    \ ? $1 : $0 }", "    guard !strings.isEmpty else { return nil }\n    return strings.maxElement\
    \ { $0.characters.count < $1.characters.count }", "    if strings.isEmpty {\n\
    \        return nil\n    }\n    var longest = strings[0]\n    for string in strings\
    \ {\n        if string.characters.count > longest.characters.count {\n       \
    \     longest = string\n        }\n    }\n    return longest", "    if strings.isEmpty\
    \ {\n        return nil\n    }\n    var longest = strings[0]\n    for string in\
    \ strings {\n        if string.count > longest.count {\n            longest =\
    \ string\n        }\n    }\n    return longest", "    if strings.isEmpty {\n \
    \       return nil\n    }\n    var longest = strings[0]\n    for string in strings\
    \ {\n        if string.count > longest.count {\n            longest = string\n\
    \        }\n    }\n    return longest", "    var longest = strings.first\n   \
    \ for string in strings {\n        if string.characters.count > longest?.characters.count\
    \ {\n            longest = string\n        }\n    }\n    return longest", "  \
    \  guard !strings.isEmpty else { return nil }\n    return strings.reduce(strings[0])\
    \ { $1.count > $0.count ? $1 : $0 }", "    if strings.isEmpty {\n        return\
    \ nil\n    }\n    var longest = strings[0]\n    for string in strings {\n    \
    \    if string.characters.count > longest.characters.count {\n            longest\
    \ = string\n        }\n    }\n    return longest", "    if strings.isEmpty {\n\
    \        return nil\n    }\n    var longest = strings[0]\n    for string in strings\
    \ {\n        if string.count > longest.count {\n            longest = string\n\
    \        }\n    }\n    return longest", "    if strings.isEmpty {\n        return\
    \ nil\n    }\n    var longest = strings[0]\n    for string in strings {\n    \
    \    if string.count > longest.count {\n            longest = string\n       \
    \ }\n    }\n    return longest", "    if strings.isEmpty {\n        return nil\n\
    \    }\n    var longest = strings[0]\n    for string in strings {\n        if\
    \ string.count > longest.count {\n            longest = string\n        }\n  \
    \  }\n    return longest", "    guard !strings.isEmpty else { return nil }\n \
    \   return strings.maxElement { $0.characters.count < $1.characters.count }",
  "    guard let first = strings.first else {\n        return nil\n    }\n    return\
    \ strings.reduce(first) { $1.count > $0.count ? $1 : $0 }", "    guard !strings.isEmpty\
    \ else { return nil }\n    return strings.reduce(strings[0]) { $1.count > $0.count\
    \ ? $1 : $0 }", "    var longestString: String? = nil\n    for string in strings\
    \ {\n        if longestString == nil || string.count > longestString!.count {\n\
    \            longestString = string\n        }\n    }\n    return longestString",
  "    guard !strings.isEmpty else { return nil }\n    return strings.reduce(strings[0])\
    \ { $1.count > $0.count ? $1 : $0 }", "    if strings.isEmpty {\n        return\
    \ nil\n    }\n    var longest = strings[0]\n    for string in strings {\n    \
    \    if string.characters.count > longest.characters.count {\n            longest\
    \ = string\n        }\n    }\n    return longest", "    var longestString: String?\n\
    \    for string in strings {\n        if longestString == nil || string.characters.count\
    \ > longestString!.characters.count {\n            longestString = string\n  \
    \      }\n    }\n    return longestString", "    var longestString: String? =\
    \ nil\n    var longestLength = 0\n    for string in strings {\n        if string.characters.count\
    \ > longestLength {\n            longestString = string\n            longestLength\
    \ = string.characters.count\n        }\n    }\n    return longestString", "  \
    \  guard !strings.isEmpty else { return nil }\n    return strings.reduce(strings[0])\
    \ { $1.count > $0.count ? $1 : $0 }", "    guard !strings.isEmpty else { return\
    \ nil }\n    return strings.reduce(strings[0]) { $1.count > $0.count ? $1 : $0\
    \ }", "    guard !strings.isEmpty else { return nil }\n    return strings.reduce(strings[0])\
    \ { $1.count > $0.count ? $1 : $0 }", "    var longest: String?\n    for string\
    \ in strings {\n        if longest == nil || string.characters.count > longest!.characters.count\
    \ {\n            longest = string\n        }\n    }\n    return longest", "  \
    \  guard !strings.isEmpty else { return nil }\n    return strings.reduce(strings[0])\
    \ { $1.count > $0.count ? $1 : $0 }", "    if strings.isEmpty {\n        return\
    \ nil\n    }\n    var longest = strings[0]\n    for string in strings {\n    \
    \    if string.count > longest.count {\n            longest = string\n       \
    \ }\n    }\n    return longest", "    guard strings.count > 0 else {\n       \
    \ return nil\n    }\n    var longest = strings[0]\n    for string in strings {\n\
    \        if string.count > longest.count {\n            longest = string\n   \
    \     }\n    }\n    return longest", "    guard let first = strings.first else\
    \ {\n        return nil\n    }\n    return strings.reduce(first) { longest, string\
    \ in\n        return string.count > longest.count ? string : longest\n    }",
  "    if strings.isEmpty {\n        return nil\n    }\n    var longest = strings[0]\n\
    \    for string in strings {\n        if string.count > longest.count {\n    \
    \        longest = string\n        }\n    }\n    return longest", "    guard let\
    \ first = strings.first else {\n        return nil\n    }\n    return strings.reduce(first)\
    \ { (longest, string) -> String in\n        return string.count > longest.count\
    \ ? string : longest\n    }", "    guard let first = strings.first else {\n  \
    \      return nil\n    }\n    return strings.reduce(first) { $1.count > $0.count\
    \ ? $1 : $0 }", "    if strings.isEmpty {\n        return nil\n    }\n    var\
    \ longest = strings[0]\n    for string in strings {\n        if string.count >\
    \ longest.count {\n            longest = string\n        }\n    }\n    return\
    \ longest", "    guard !strings.isEmpty else { return nil }\n    return strings.reduce(strings[0])\
    \ { $1.count > $0.count ? $1 : $0 }", "    guard !strings.isEmpty else { return\
    \ nil }\n    var longest = strings[0]\n    for string in strings {\n        if\
    \ string.count > longest.count {\n            longest = string\n        }\n  \
    \  }\n    return longest", "    if strings.isEmpty {\n        return nil\n   \
    \ }\n    var longest = strings[0]\n    for string in strings {\n        if string.characters.count\
    \ > longest.characters.count {\n            longest = string\n        }\n    }\n\
    \    return longest", "    if strings.isEmpty {\n        return nil\n    }\n \
    \   var longest = strings[0]\n    for string in strings {\n        if string.count\
    \ > longest.count {\n            longest = string\n        }\n    }\n    return\
    \ longest", "    guard let first = strings.first else {\n        return nil\n\
    \    }\n    return strings.reduce(first) { (longest, string) -> String in\n  \
    \      return string.count > longest.count ? string : longest\n    }", "    if\
    \ strings.isEmpty {\n        return nil\n    }\n    var longest = strings[0]\n\
    \    for string in strings {\n        if string.count > longest.count {\n    \
    \        longest = string\n        }\n    }\n    return longest", "    guard let\
    \ longest = strings.maxElement({ $0.characters.count < $1.characters.count })\
    \ else {\n        return nil\n    }\n    return longest", "    guard !strings.isEmpty\
    \ else { return nil }\n    return strings.reduce(strings[0]) { $1.count > $0.count\
    \ ? $1 : $0 }", "    var longest: String?\n    for string in strings {\n     \
    \   if longest == nil || string.characters.count > longest!.characters.count {\n\
    \            longest = string\n        }\n    }\n    return longest", "    guard\
    \ !strings.isEmpty else { return nil }\n    return strings.reduce(strings[0])\
    \ { $1.count > $0.count ? $1 : $0 }", "    if strings.isEmpty {\n        return\
    \ nil\n    }\n    var longest = strings[0]\n    for string in strings {\n    \
    \    if string.count > longest.count {\n            longest = string\n       \
    \ }\n    }\n    return longest", "    guard !strings.isEmpty else { return nil\
    \ }\n    return strings.reduce(strings[0]) { $1.count > $0.count ? $1 : $0 }",
  "    var longest: String? = nil\n    for string in strings {\n        if longest\
    \ == nil || string.count > longest!.count {\n            longest = string\n  \
    \      }\n    }\n    return longest", "    guard !strings.isEmpty else { return\
    \ nil }\n    return strings.reduce(strings[0]) { $1.count > $0.count ? $1 : $0\
    \ }", "    var longest: String? = nil\n    var longestLength = 0\n    for string\
    \ in strings {\n        if string.count > longestLength {\n            longest\
    \ = string\n            longestLength = string.count\n        }\n    }\n    return\
    \ longest", "    guard !strings.isEmpty else { return nil }\n    return strings.reduce(strings[0])\
    \ { $1.count > $0.count ? $1 : $0 }", "    guard !strings.isEmpty else { return\
    \ nil }\n    return strings.reduce(strings[0]) { $1.count > $0.count ? $1 : $0\
    \ }", "    guard !strings.isEmpty else { return nil }\n    var longest = strings[0]\n\
    \    for string in strings {\n        if string.characters.count > longest.characters.count\
    \ {\n            longest = string\n        }\n    }\n    return longest", "  \
    \  guard !strings.isEmpty else { return nil }\n    return strings.reduce(strings[0])\
    \ { $1.count > $0.count ? $1 : $0 }", "    guard !strings.isEmpty else { return\
    \ nil }\n    var longest = strings[0]\n    for string in strings {\n        if\
    \ string.count > longest.count {\n            longest = string\n        }\n  \
    \  }\n    return longest", "    if strings.isEmpty {\n        return nil\n   \
    \ }\n    var longest = strings[0]\n    for string in strings {\n        if string.characters.count\
    \ > longest.characters.count {\n            longest = string\n        }\n    }\n\
    \    return longest", "    guard !strings.isEmpty else { return nil }\n    return\
    \ strings.maxElement { $0.characters.count < $1.characters.count }", "    if strings.isEmpty\
    \ {\n        return nil\n    }\n    var longest = strings[0]\n    for string in\
    \ strings {\n        if string.characters.count > longest.characters.count {\n\
    \            longest = string\n        }\n    }\n    return longest", "    guard\
    \ strings.count > 0 else {\n        return nil\n    }\n    var longest = strings[0]\n\
    \    for string in strings {\n        if string.count > longest.count {\n    \
    \        longest = string\n        }\n    }\n    return longest", "    if strings.isEmpty\
    \ {\n        return nil\n    }\n    var longest = strings[0]\n    for string in\
    \ strings {\n        if string.characters.count > longest.characters.count {\n\
    \            longest = string\n        }\n    }\n    return longest", "    if\
    \ strings.isEmpty {\n        return nil\n    }\n    var longest = strings[0]\n\
    \    for string in strings {\n        if string.characters.count > longest.characters.count\
    \ {\n            longest = string\n        }\n    }\n    return longest", "  \
    \  if strings.isEmpty {\n        return nil\n    }\n    var longest = strings[0]\n\
    \    for string in strings {\n        if string.characters.count > longest.characters.count\
    \ {\n            longest = string\n        }\n    }\n    return longest", "  \
    \  guard !strings.isEmpty else { return nil }\n    return strings.reduce(strings[0])\
    \ { $1.count > $0.count ? $1 : $0 }", "    if strings.isEmpty {\n        return\
    \ nil\n    }\n    var longest = strings[0]\n    for string in strings {\n    \
    \    if string.characters.count > longest.characters.count {\n            longest\
    \ = string\n        }\n    }\n    return longest", "    guard let first = strings.first\
    \ else {\n        return nil\n    }\n    return strings.reduce(first) { $1.count\
    \ > $0.count ? $1 : $0 }", "    guard !strings.isEmpty else { return nil }\n \
    \   return strings.max { $0.characters.count < $1.characters.count }", "    guard\
    \ !strings.isEmpty else { return nil }\n    return strings.reduce(strings[0])\
    \ { $1.count > $0.count ? $1 : $0 }", "    var longest: String? = nil\n    for\
    \ string in strings {\n        if longest == nil || string.characters.count >\
    \ longest!.characters.count {\n            longest = string\n        }\n    }\n\
    \    return longest", "    if strings.isEmpty {\n        return nil\n    }\n \
    \   var longest = strings[0]\n    for string in strings {\n        if string.characters.count\
    \ > longest.characters.count {\n            longest = string\n        }\n    }\n\
    \    return longest", "    guard !strings.isEmpty else { return nil }\n    return\
    \ strings.reduce(strings[0]) { $1.count > $0.count ? $1 : $0 }", "    guard !strings.isEmpty\
    \ else { return nil }\n    return strings.reduce(strings[0]) { $1.count > $0.count\
    \ ? $1 : $0 }", "    guard let first = strings.first else {\n        return nil\n\
    \    }\n    return strings.reduce(first) { (longest, string) -> String in\n  \
    \      return string.count > longest.count ? string : longest\n    }", "    guard\
    \ !strings.isEmpty else { return nil }\n    return strings.maxElement { $0.characters.count\
    \ < $1.characters.count }", "    if strings.isEmpty {\n        return nil\n  \
    \  }\n    var longest = strings[0]\n    for string in strings {\n        if string.characters.count\
    \ > longest.characters.count {\n            longest = string\n        }\n    }\n\
    \    return longest", "    guard let first = strings.first else {\n        return\
    \ nil\n    }\n    return strings.reduce(first) { (longest, string) -> String in\n\
    \        if string.count > longest.count {\n            return string\n      \
    \  }\n        return longest\n    }", "    if strings.isEmpty {\n        return\
    \ nil\n    }\n    var longest = strings[0]\n    for string in strings {\n    \
    \    if string.characters.count > longest.characters.count {\n            longest\
    \ = string\n        }\n    }\n    return longest", "    guard let longest = strings.maxElement({\
    \ $0.characters.count < $1.characters.count }) else {\n        return nil\n  \
    \  }\n    return longest", "    if strings.isEmpty {\n        return nil\n   \
    \ }\n    var longest = strings[0]\n    for string in strings {\n        if string.characters.count\
    \ > longest.characters.count {\n            longest = string\n        }\n    }\n\
    \    return longest", "    if strings.isEmpty {\n        return nil\n    }\n \
    \   var longest = strings[0]\n    for string in strings {\n        if string.characters.count\
    \ > longest.characters.count {\n            longest = string\n        }\n    }\n\
    \    return longest", "    guard !strings.isEmpty else { return nil }\n    var\
    \ longestString = strings[0]\n    for string in strings {\n        if string.characters.count\
    \ > longestString.characters.count {\n            longestString = string\n   \
    \     }\n    }\n    return longestString", "    guard let first = strings.first\
    \ else {\n        return nil\n    }\n    return strings.reduce(first) {\n    \
    \    $1.count > $0.count ? $1 : $0\n    }", "    guard !strings.isEmpty else {\
    \ return nil }\n    return strings.reduce(strings[0]) { $1.count > $0.count ?\
    \ $1 : $0 }", "    guard !strings.isEmpty else { return nil }\n    return strings.reduce(strings[0])\
    \ { $1.count > $0.count ? $1 : $0 }", "    if strings.isEmpty {\n        return\
    \ nil\n    }\n    var longest = strings[0]\n    for string in strings {\n    \
    \    if string.count > longest.count {\n            longest = string\n       \
    \ }\n    }\n    return longest", "    if strings.isEmpty {\n        return nil\n\
    \    }\n    var longest = strings[0]\n    for string in strings {\n        if\
    \ string.count > longest.count {\n            longest = string\n        }\n  \
    \  }\n    return longest", "    guard !strings.isEmpty else { return nil }\n \
    \   return strings.sorted(by: { $0.count > $1.count }).first", "    guard let\
    \ longest = strings.maxElement({ $0.characters.count < $1.characters.count })\
    \ else {\n        return nil\n    }\n    return longest", "    guard !strings.isEmpty\
    \ else { return nil }\n    return strings.reduce(strings[0]) { $1.count > $0.count\
    \ ? $1 : $0 }", "    return strings.reduce(nil) { (longest, string) in\n     \
    \   if let longest = longest {\n            return longest.count > string.count\
    \ ? longest : string\n        } else {\n            return string\n        }\n\
    \    }", "    guard let first = strings.first else {\n        return nil\n   \
    \ }\n    return strings.reduce(first) { (longest, string) -> String in\n     \
    \   return string.count > longest.count ? string : longest\n    }", "    guard\
    \ !strings.isEmpty else { return nil }\n    return strings.reduce(strings[0])\
    \ { $1.count > $0.count ? $1 : $0 }", "    if strings.isEmpty {\n        return\
    \ nil\n    }\n    var longest = strings[0]\n    for string in strings {\n    \
    \    if string.characters.count > longest.characters.count {\n            longest\
    \ = string\n        }\n    }\n    return longest", "    if strings.isEmpty {\n\
    \        return nil\n    }\n    var longest = strings[0]\n    for string in strings\
    \ {\n        if string.characters.count > longest.characters.count {\n       \
    \     longest = string\n        }\n    }\n    return longest", "    guard !strings.isEmpty\
    \ else { return nil }\n    return strings.maxElement { $0.characters.count < $1.characters.count\
    \ }", "    if strings.isEmpty {\n        return nil\n    }\n    var longest =\
    \ strings[0]\n    for string in strings {\n        if string.characters.count\
    \ > longest.characters.count {\n            longest = string\n        }\n    }\n\
    \    return longest", "    if strings.isEmpty {\n        return nil\n    }\n \
    \   var longest = strings[0]\n    for string in strings {\n        if string.count\
    \ > longest.count {\n            longest = string\n        }\n    }\n    return\
    \ longest", "    var longest = strings.first\n    for string in strings {\n  \
    \      if string.count > longest?.count ?? 0 {\n            longest = string\n\
    \        }\n    }\n    return longest", "    guard let longest = strings.maxElement({\
    \ $0.characters.count < $1.characters.count }) else {\n        return nil\n  \
    \  }\n    return longest", "    if strings.isEmpty {\n        return nil\n   \
    \ }\n    var longest = strings[0]\n    for string in strings {\n        if string.characters.count\
    \ > longest.characters.count {\n            longest = string\n        }\n    }\n\
    \    return longest", "    if strings.isEmpty {\n        return nil\n    }\n \
    \   var longest = strings[0]\n    for string in strings {\n        if string.characters.count\
    \ > longest.characters.count {\n            longest = string\n        }\n    }\n\
    \    return longest", "    guard !strings.isEmpty else { return nil }\n    return\
    \ strings.reduce(strings[0]) { $1.count > $0.count ? $1 : $0 }", "    if strings.isEmpty\
    \ {\n        return nil\n    }\n    var longest = strings[0]\n    for string in\
    \ strings {\n        if string.characters.count > longest.characters.count {\n\
    \            longest = string\n        }\n    }\n    return longest", "    var\
    \ longestString: String?\n    for string in strings {\n        if longestString\
    \ == nil || string.characters.count > longestString!.characters.count {\n    \
    \        longestString = string\n        }\n    }\n    return longestString",
  "    guard !strings.isEmpty else { return nil }\n    var longestString = strings[0]\n\
    \    for string in strings {\n        if string.count > longestString.count {\n\
    \            longestString = string\n        }\n    }\n    return longestString",
  "    if strings.isEmpty {\n        return nil\n    }\n    var longestString = strings[0]\n\
    \    for string in strings {\n        if string.characters.count > longestString.characters.count\
    \ {\n            longestString = string\n        }\n    }\n    return longestString",
  "    var longest: String? = nil\n    for string in strings {\n        if longest\
    \ == nil || string.count > longest!.count {\n            longest = string\n  \
    \      }\n    }\n    return longest", "    guard let maxLength = strings.map({\
    \ $0.count }).max() else {\n        return nil\n    }\n    return strings.first(where:\
    \ { $0.count == maxLength })", "    guard let first = strings.first else {\n \
    \       return nil\n    }\n    return strings.reduce(first) {\n        $1.count\
    \ > $0.count ? $1 : $0\n    }", "    if strings.isEmpty {\n        return nil\n\
    \    }\n    var longest = strings[0]\n    for string in strings {\n        if\
    \ string.count > longest.count {\n            longest = string\n        }\n  \
    \  }\n    return longest", "    guard !strings.isEmpty else { return nil }\n \
    \   return strings.reduce(strings[0]) { $1.count > $0.count ? $1 : $0 }", "  \
    \  if strings.isEmpty {\n        return nil\n    }\n    var longest = strings[0]\n\
    \    for string in strings {\n        if string.characters.count > longest.characters.count\
    \ {\n            longest = string\n        }\n    }\n    return longest", "  \
    \  guard !strings.isEmpty else { return nil }\n    return strings.reduce(strings[0])\
    \ { $1.count > $0.count ? $1 : $0 }", "    guard !strings.isEmpty else { return\
    \ nil }\n    return strings.reduce(strings[0]) { $1.count > $0.count ? $1 : $0\
    \ }", "    guard !strings.isEmpty else { return nil }\n    var longest = strings[0]\n\
    \    for string in strings {\n        if string.count > longest.count {\n    \
    \        longest = string\n        }\n    }\n    return longest", "    if strings.isEmpty\
    \ {\n        return nil\n    }\n    var longest = strings[0]\n    for string in\
    \ strings {\n        if string.characters.count > longest.characters.count {\n\
    \            longest = string\n        }\n    }\n    return longest", "    guard\
    \ !strings.isEmpty else { return nil }\n    var longest = strings[0]\n    for\
    \ string in strings {\n        if string.characters.count > longest.characters.count\
    \ {\n            longest = string\n        }\n    }\n    return longest", "  \
    \  if strings.isEmpty {\n        return nil\n    }\n    var longestString = strings[0]\n\
    \    for string in strings {\n        if string.characters.count > longestString.characters.count\
    \ {\n            longestString = string\n        }\n    }\n    return longestString",
  "    guard !strings.isEmpty else { return nil }\n    return strings.reduce(strings[0])\
    \ { $1.count > $0.count ? $1 : $0 }", "    if strings.isEmpty {\n        return\
    \ nil\n    }\n    var longest = strings[0]\n    for string in strings {\n    \
    \    if string.count > longest.count {\n            longest = string\n       \
    \ }\n    }\n    return longest", "    guard !strings.isEmpty else { return nil\
    \ }\n    return strings.reduce(strings[0]) { $1.count > $0.count ? $1 : $0 }",
  "    guard !strings.isEmpty else { return nil }\n    return strings.reduce(strings[0])\
    \ { $1.count > $0.count ? $1 : $0 }", "    var longestString: String? = nil\n\
    \    for string in strings {\n        if longestString == nil || string.count\
    \ > longestString!.count {\n            longestString = string\n        }\n  \
    \  }\n    return longestString", "    var longest = \"\"\n    for string in strings\
    \ {\n        if string.count > longest.count {\n            longest = string\n\
    \        }\n    }\n    return longest.isEmpty ? nil : longest", "    guard !strings.isEmpty\
    \ else { return nil }\n    return strings.reduce(strings[0]) { (longest, string)\
    \ in\n        return string.count > longest.count ? string : longest\n    }",
  "    guard !strings.isEmpty else { return nil }\n    return strings.maxElement {\
    \ $0.characters.count < $1.characters.count }", "    if strings.isEmpty {\n  \
    \      return nil\n    }\n    var longest = strings[0]\n    for string in strings\
    \ {\n        if string.characters.count > longest.characters.count {\n       \
    \     longest = string\n        }\n    }\n    return longest", "    if strings.isEmpty\
    \ {\n        return nil\n    }\n    var longest = strings[0]\n    for string in\
    \ strings {\n        if string.count > longest.count {\n            longest =\
    \ string\n        }\n    }\n    return longest", "    if strings.isEmpty {\n \
    \       return nil\n    }\n    var longestString = strings[0]\n    for string\
    \ in strings {\n        if string.characters.count > longestString.characters.count\
    \ {\n            longestString = string\n        }\n    }\n    return longestString",
  "    guard !strings.isEmpty else { return nil }\n    return strings.reduce(strings[0])\
    \ { $1.count > $0.count ? $1 : $0 }", "    guard strings.count > 0 else {\n  \
    \      return nil\n    }\n    var longest = strings[0]\n    for string in strings\
    \ {\n        if string.count > longest.count {\n            longest = string\n\
    \        }\n    }\n    return longest", "    if strings.isEmpty {\n        return\
    \ nil\n    }\n    var longest = strings[0]\n    for string in strings {\n    \
    \    if string.count > longest.count {\n            longest = string\n       \
    \ }\n    }\n    return longest"]
stop_tokens:
- "\n}"
