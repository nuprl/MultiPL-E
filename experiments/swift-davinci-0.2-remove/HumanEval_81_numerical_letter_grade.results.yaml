language: swift
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n        }\
    \ else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n        } else\
    \ if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n        } else if\
    \ grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        } else if grade\
    \ >= 2.7 {\n            letterGrades.append(\"B\")\n        } else if grade >=\
    \ 2.3 {\n            letterGrades.append(\"B-\")\n        } else if grade >= 2.0\
    \ {\n            letterGrades.append(\"C+\")\n        } else if grade >= 1.7 {\n\
    \            letterGrades.append(\"C\")\n        } else if grade >= 1.3 {\n  \
    \          letterGrades.append(\"C-\")\n        } else if grade >= 1.0 {\n   \
    \         letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n    \
    \        letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n      \
    \      letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp9fnylbp6/tmp9fnylbp6.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9dd2cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9dcfc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9dcfc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9dcfc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9fnylbp6                        0x000055cb4412c7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ab9dd4b7460 __libc_start_main +
    245

    6    tmp9fnylbp6                        0x000055cb4412c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp28f0_rpw/tmp28f0_rpw.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb25b63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb2585ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb2585a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb258597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28f0_rpw                        0x00005557c35f57a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abb25d4f460 __libc_start_main +
    245

    6    tmp28f0_rpw                        0x00005557c35f52c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmphciud8zo/tmphciud8zo.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b605c391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b605c088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b605c088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b605c0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphciud8zo                        0x000055cb5cd3e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b605c57d460 __libc_start_main +
    245

    6    tmphciud8zo                        0x000055cb5cd3e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp28f0_rpw/tmp28f0_rpw.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb25b63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb2585ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb2585a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb258597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28f0_rpw                        0x00005557c35f57a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abb25d4f460 __libc_start_main +
    245

    6    tmp28f0_rpw                        0x00005557c35f52c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmphciud8zo/tmphciud8zo.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b605c391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b605c088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b605c088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b605c0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphciud8zo                        0x000055cb5cd3e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b605c57d460 __libc_start_main +
    245

    6    tmphciud8zo                        0x000055cb5cd3e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result: [String] = []\n    for grade in grades {\n  \
    \      if grade >= 4.0 {\n            result.append(\"A+\")\n        } else if\
    \ grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade >=\
    \ 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0 {\n\
    \            result.append(\"B+\")\n        } else if grade >= 2.7 {\n       \
    \     result.append(\"B\")\n        } else if grade >= 2.3 {\n            result.append(\"\
    B-\")\n        } else if grade >= 2.0 {\n            result.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            result.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            result.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            result.append(\"D+\")\n        } else if grade >=\
    \ 0.7 {\n            result.append(\"D\")\n        } else if grade >= 0.0 {\n\
    \            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmptfaqtvox/tmptfaqtvox.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af923441c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af923138b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af923138988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9231377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptfaqtvox                        0x0000564f4bd5c7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002af92362d460 __libc_start_main +
    245

    6    tmptfaqtvox                        0x0000564f4bd5c2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade > 3.7 {\n            letter_grades.append(\"A\")\n     \
    \   } else if grade > 3.3 {\n            letter_grades.append(\"A-\")\n      \
    \  } else if grade > 3.0 {\n            letter_grades.append(\"B+\")\n       \
    \ } else if grade > 2.7 {\n            letter_grades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letter_grades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letter_grades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letter_grades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letter_grades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letter_grades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letter_grades.append(\"D-\")\n        } else {\n            letter_grades.append(\"\
    E\")\n        }\n    }\n    return letter_grades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmphciud8zo/tmphciud8zo.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b605c391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b605c088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b605c088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b605c0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphciud8zo                        0x000055cb5cd3e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b605c57d460 __libc_start_main +
    245

    6    tmphciud8zo                        0x000055cb5cd3e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp28f0_rpw/tmp28f0_rpw.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb25b63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb2585ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb2585a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb258597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28f0_rpw                        0x00005557c35f57a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abb25d4f460 __libc_start_main +
    245

    6    tmp28f0_rpw                        0x00005557c35f52c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid grade\")\n        }\n    }\n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpuj81pb_a/tmpuj81pb_a.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23af351c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23af048b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23af048988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23af0477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuj81pb_a                        0x000055a1b3fb4926 <unavailable> + 6438

    5    libc.so.6                          0x00002b23af53d460 __libc_start_main +
    245

    6    tmpuj81pb_a                        0x000055a1b3fb4449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmppmyk14ly/tmppmyk14ly.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59035ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59032d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59032d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59032d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppmyk14ly                        0x000056536aa178d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b59037c9460 __libc_start_main +
    245

    6    tmppmyk14ly                        0x000056536aa173f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade > 3.7 {\n            letterGrades.append(\"A\")\n       \
    \ } else if grade > 3.3 {\n            letterGrades.append(\"A-\")\n        }\
    \ else if grade > 3.0 {\n            letterGrades.append(\"B+\")\n        } else\
    \ if grade > 2.7 {\n            letterGrades.append(\"B\")\n        } else if\
    \ grade > 2.3 {\n            letterGrades.append(\"B-\")\n        } else if grade\
    \ > 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade >\
    \ 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade > 1.3\
    \ {\n            letterGrades.append(\"C-\")\n        } else if grade > 1.0 {\n\
    \            letterGrades.append(\"D+\")\n        } else if grade > 0.7 {\n  \
    \          letterGrades.append(\"D\")\n        } else if grade > 0.0 {\n     \
    \       letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmphciud8zo/tmphciud8zo.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b605c391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b605c088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b605c088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b605c0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphciud8zo                        0x000055cb5cd3e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b605c57d460 __libc_start_main +
    245

    6    tmphciud8zo                        0x000055cb5cd3e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp28f0_rpw/tmp28f0_rpw.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb25b63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb2585ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb2585a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb258597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28f0_rpw                        0x00005557c35f57a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abb25d4f460 __libc_start_main +
    245

    6    tmp28f0_rpw                        0x00005557c35f52c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp28f0_rpw/tmp28f0_rpw.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb25b63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb2585ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb2585a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb258597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28f0_rpw                        0x00005557c35f57a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abb25d4f460 __libc_start_main +
    245

    6    tmp28f0_rpw                        0x00005557c35f52c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmphciud8zo/tmphciud8zo.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b605c391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b605c088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b605c088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b605c0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphciud8zo                        0x000055cb5cd3e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b605c57d460 __libc_start_main +
    245

    6    tmphciud8zo                        0x000055cb5cd3e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp28f0_rpw/tmp28f0_rpw.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb25b63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb2585ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb2585a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb258597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28f0_rpw                        0x00005557c35f57a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abb25d4f460 __libc_start_main +
    245

    6    tmp28f0_rpw                        0x00005557c35f52c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp28f0_rpw/tmp28f0_rpw.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb25b63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb2585ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb2585a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb258597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28f0_rpw                        0x00005557c35f57a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abb25d4f460 __libc_start_main +
    245

    6    tmp28f0_rpw                        0x00005557c35f52c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade > 3.7 {\n            letter_grades.append(\"A\")\n     \
    \   } else if grade > 3.3 {\n            letter_grades.append(\"A-\")\n      \
    \  } else if grade > 3.0 {\n            letter_grades.append(\"B+\")\n       \
    \ } else if grade > 2.7 {\n            letter_grades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letter_grades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letter_grades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letter_grades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letter_grades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letter_grades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letter_grades.append(\"D-\")\n        } else {\n            letter_grades.append(\"\
    E\")\n        }\n    }\n    return letter_grades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp28f0_rpw/tmp28f0_rpw.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb25b63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb2585ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb2585a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb258597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28f0_rpw                        0x00005557c35f57a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abb25d4f460 __libc_start_main +
    245

    6    tmp28f0_rpw                        0x00005557c35f52c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpu3rymp6g/tmpu3rymp6g.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b444330cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4443003b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4443003988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44430027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu3rymp6g                        0x00005650bc91d926 <unavailable> + 6438

    5    libc.so.6                          0x00002b44434f8460 __libc_start_main +
    245

    6    tmpu3rymp6g                        0x00005650bc91d449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade > 3.7 {\n            letter_grades.append(\"A\")\n     \
    \   } else if grade > 3.3 {\n            letter_grades.append(\"A-\")\n      \
    \  } else if grade > 3.0 {\n            letter_grades.append(\"B+\")\n       \
    \ } else if grade > 2.7 {\n            letter_grades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letter_grades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letter_grades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letter_grades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letter_grades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letter_grades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letter_grades.append(\"D-\")\n        } else {\n            letter_grades.append(\"\
    E\")\n        }\n    }\n    return letter_grades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014163
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade > 3.7 {\n            letter_grades.append(\"A\")\n     \
    \   } else if grade > 3.3 {\n            letter_grades.append(\"A-\")\n      \
    \  } else if grade > 3.0 {\n            letter_grades.append(\"B+\")\n       \
    \ } else if grade > 2.7 {\n            letter_grades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letter_grades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letter_grades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letter_grades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letter_grades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letter_grades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letter_grades.append(\"D-\")\n        } else {\n            letter_grades.append(\"\
    E\")\n        }\n    }\n    return letter_grades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp28f0_rpw/tmp28f0_rpw.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb25b63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb2585ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb2585a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb258597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28f0_rpw                        0x00005557c35f57a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abb25d4f460 __libc_start_main +
    245

    6    tmp28f0_rpw                        0x00005557c35f52c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    default:\n            letter_grades.append(\"E\")\n        }\n    }\n   \
    \ return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpbit5rwsd/tmpbit5rwsd.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66125adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66122a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66122a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66122a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbit5rwsd                        0x000055bfb8b168d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b6612799460 __libc_start_main +
    245

    6    tmpbit5rwsd                        0x000055bfb8b163f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmphciud8zo/tmphciud8zo.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b605c391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b605c088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b605c088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b605c0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphciud8zo                        0x000055cb5cd3e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b605c57d460 __libc_start_main +
    245

    6    tmphciud8zo                        0x000055cb5cd3e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade > 3.7 {\n            letter_grades.append(\"A\")\n     \
    \   } else if grade > 3.3 {\n            letter_grades.append(\"A-\")\n      \
    \  } else if grade > 3.0 {\n            letter_grades.append(\"B+\")\n       \
    \ } else if grade > 2.7 {\n            letter_grades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letter_grades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letter_grades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letter_grades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letter_grades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letter_grades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letter_grades.append(\"D-\")\n        } else {\n            letter_grades.append(\"\
    E\")\n        }\n    }\n    return letter_grades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    default:\n            letter_grades.append(\"E\")\n        }\n    }\n   \
    \ return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpbit5rwsd/tmpbit5rwsd.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66125adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66122a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66122a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66122a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbit5rwsd                        0x000055bfb8b168d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b6612799460 __libc_start_main +
    245

    6    tmpbit5rwsd                        0x000055bfb8b163f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result: [String] = []\n    for grade in grades {\n  \
    \      if grade >= 4.0 {\n            result.append(\"A+\")\n        } else if\
    \ grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade >=\
    \ 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0 {\n\
    \            result.append(\"B+\")\n        } else if grade >= 2.7 {\n       \
    \     result.append(\"B\")\n        } else if grade >= 2.3 {\n            result.append(\"\
    B-\")\n        } else if grade >= 2.0 {\n            result.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            result.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            result.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            result.append(\"D+\")\n        } else if grade >=\
    \ 0.7 {\n            result.append(\"D\")\n        } else if grade >= 0.0 {\n\
    \            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmptfaqtvox/tmptfaqtvox.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af923441c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af923138b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af923138988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9231377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptfaqtvox                        0x0000564f4bd5c7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002af92362d460 __libc_start_main +
    245

    6    tmptfaqtvox                        0x0000564f4bd5c2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmppmyk14ly/tmppmyk14ly.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59035ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59032d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59032d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59032d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppmyk14ly                        0x000056536aa178d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b59037c9460 __libc_start_main +
    245

    6    tmppmyk14ly                        0x000056536aa173f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmppmyk14ly/tmppmyk14ly.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59035ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59032d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59032d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59032d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppmyk14ly                        0x000056536aa178d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b59037c9460 __libc_start_main +
    245

    6    tmppmyk14ly                        0x000056536aa173f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmphciud8zo/tmphciud8zo.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b605c391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b605c088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b605c088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b605c0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphciud8zo                        0x000055cb5cd3e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b605c57d460 __libc_start_main +
    245

    6    tmphciud8zo                        0x000055cb5cd3e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp28f0_rpw/tmp28f0_rpw.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb25b63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb2585ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb2585a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb258597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28f0_rpw                        0x00005557c35f57a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abb25d4f460 __libc_start_main +
    245

    6    tmp28f0_rpw                        0x00005557c35f52c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmphciud8zo/tmphciud8zo.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b605c391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b605c088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b605c088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b605c0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphciud8zo                        0x000055cb5cd3e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b605c57d460 __libc_start_main +
    245

    6    tmphciud8zo                        0x000055cb5cd3e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmphciud8zo/tmphciud8zo.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b605c391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b605c088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b605c088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b605c0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphciud8zo                        0x000055cb5cd3e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b605c57d460 __libc_start_main +
    245

    6    tmphciud8zo                        0x000055cb5cd3e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    default:\n            letter_grades.append(\"E\")\n        }\n    }\n   \
    \ return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpbit5rwsd/tmpbit5rwsd.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66125adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66122a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66122a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66122a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbit5rwsd                        0x000055bfb8b168d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b6612799460 __libc_start_main +
    245

    6    tmpbit5rwsd                        0x000055bfb8b163f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpu3rymp6g/tmpu3rymp6g.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b444330cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4443003b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4443003988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44430027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu3rymp6g                        0x00005650bc91d926 <unavailable> + 6438

    5    libc.so.6                          0x00002b44434f8460 __libc_start_main +
    245

    6    tmpu3rymp6g                        0x00005650bc91d449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    default:\n            letter_grades.append(\"E\")\n        }\n    }\n   \
    \ return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpbit5rwsd/tmpbit5rwsd.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66125adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66122a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66122a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66122a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbit5rwsd                        0x000055bfb8b168d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b6612799460 __libc_start_main +
    245

    6    tmpbit5rwsd                        0x000055bfb8b163f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n        }\
    \ else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n        } else\
    \ if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n        } else if\
    \ grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        } else if grade\
    \ >= 2.7 {\n            letterGrades.append(\"B\")\n        } else if grade >=\
    \ 2.3 {\n            letterGrades.append(\"B-\")\n        } else if grade >= 2.0\
    \ {\n            letterGrades.append(\"C+\")\n        } else if grade >= 1.7 {\n\
    \            letterGrades.append(\"C\")\n        } else if grade >= 1.3 {\n  \
    \          letterGrades.append(\"C-\")\n        } else if grade >= 1.0 {\n   \
    \         letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n    \
    \        letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n      \
    \      letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp9fnylbp6/tmp9fnylbp6.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9dd2cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9dcfc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9dcfc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9dcfc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9fnylbp6                        0x000055cb4412c7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ab9dd4b7460 __libc_start_main +
    245

    6    tmp9fnylbp6                        0x000055cb4412c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmphciud8zo/tmphciud8zo.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b605c391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b605c088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b605c088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b605c0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphciud8zo                        0x000055cb5cd3e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b605c57d460 __libc_start_main +
    245

    6    tmphciud8zo                        0x000055cb5cd3e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp28f0_rpw/tmp28f0_rpw.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb25b63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb2585ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb2585a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb258597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28f0_rpw                        0x00005557c35f57a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abb25d4f460 __libc_start_main +
    245

    6    tmp28f0_rpw                        0x00005557c35f52c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    default:\n            letter_grades.append(\"E\")\n        }\n    }\n   \
    \ return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpbit5rwsd/tmpbit5rwsd.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66125adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66122a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66122a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66122a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbit5rwsd                        0x000055bfb8b168d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b6612799460 __libc_start_main +
    245

    6    tmpbit5rwsd                        0x000055bfb8b163f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmphciud8zo/tmphciud8zo.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b605c391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b605c088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b605c088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b605c0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphciud8zo                        0x000055cb5cd3e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b605c57d460 __libc_start_main +
    245

    6    tmphciud8zo                        0x000055cb5cd3e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmphciud8zo/tmphciud8zo.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b605c391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b605c088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b605c088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b605c0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphciud8zo                        0x000055cb5cd3e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b605c57d460 __libc_start_main +
    245

    6    tmphciud8zo                        0x000055cb5cd3e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    default:\n            letter_grades.append(\"E\")\n        }\n    }\n   \
    \ return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpbit5rwsd/tmpbit5rwsd.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66125adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66122a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66122a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66122a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbit5rwsd                        0x000055bfb8b168d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b6612799460 __libc_start_main +
    245

    6    tmpbit5rwsd                        0x000055bfb8b163f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp28f0_rpw/tmp28f0_rpw.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb25b63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb2585ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb2585a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb258597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28f0_rpw                        0x00005557c35f57a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abb25d4f460 __libc_start_main +
    245

    6    tmp28f0_rpw                        0x00005557c35f52c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmphciud8zo/tmphciud8zo.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b605c391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b605c088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b605c088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b605c0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphciud8zo                        0x000055cb5cd3e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b605c57d460 __libc_start_main +
    245

    6    tmphciud8zo                        0x000055cb5cd3e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp28f0_rpw/tmp28f0_rpw.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb25b63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb2585ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb2585a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb258597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28f0_rpw                        0x00005557c35f57a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abb25d4f460 __libc_start_main +
    245

    6    tmp28f0_rpw                        0x00005557c35f52c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid Grade\")\n        }\n    }\n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp6z02agpm/tmp6z02agpm.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a99838c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a9952fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a9952f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a9952e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6z02agpm                        0x000055f55eb8d8d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b1a99a24460 __libc_start_main +
    245

    6    tmp6z02agpm                        0x000055f55eb8d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    default:\n            letter_grades.append(\"E\")\n        }\n    }\n   \
    \ return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpbit5rwsd/tmpbit5rwsd.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66125adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66122a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66122a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66122a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbit5rwsd                        0x000055bfb8b168d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b6612799460 __libc_start_main +
    245

    6    tmpbit5rwsd                        0x000055bfb8b163f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmphciud8zo/tmphciud8zo.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b605c391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b605c088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b605c088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b605c0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphciud8zo                        0x000055cb5cd3e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b605c57d460 __libc_start_main +
    245

    6    tmphciud8zo                        0x000055cb5cd3e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp28f0_rpw/tmp28f0_rpw.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb25b63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb2585ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb2585a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb258597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28f0_rpw                        0x00005557c35f57a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abb25d4f460 __libc_start_main +
    245

    6    tmp28f0_rpw                        0x00005557c35f52c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmphciud8zo/tmphciud8zo.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b605c391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b605c088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b605c088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b605c0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphciud8zo                        0x000055cb5cd3e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b605c57d460 __libc_start_main +
    245

    6    tmphciud8zo                        0x000055cb5cd3e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n        }\
    \ else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n        } else\
    \ if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n        } else if\
    \ grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        } else if grade\
    \ >= 2.7 {\n            letterGrades.append(\"B\")\n        } else if grade >=\
    \ 2.3 {\n            letterGrades.append(\"B-\")\n        } else if grade >= 2.0\
    \ {\n            letterGrades.append(\"C+\")\n        } else if grade >= 1.7 {\n\
    \            letterGrades.append(\"C\")\n        } else if grade >= 1.3 {\n  \
    \          letterGrades.append(\"C-\")\n        } else if grade >= 1.0 {\n   \
    \         letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n    \
    \        letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n      \
    \      letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp9fnylbp6/tmp9fnylbp6.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9dd2cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9dcfc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9dcfc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9dcfc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9fnylbp6                        0x000055cb4412c7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ab9dd4b7460 __libc_start_main +
    245

    6    tmp9fnylbp6                        0x000055cb4412c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    default:\n            letter_grades.append(\"E\")\n        }\n    }\n   \
    \ return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpbit5rwsd/tmpbit5rwsd.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66125adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66122a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66122a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66122a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbit5rwsd                        0x000055bfb8b168d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b6612799460 __libc_start_main +
    245

    6    tmpbit5rwsd                        0x000055bfb8b163f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp28f0_rpw/tmp28f0_rpw.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb25b63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb2585ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb2585a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb258597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28f0_rpw                        0x00005557c35f57a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abb25d4f460 __libc_start_main +
    245

    6    tmp28f0_rpw                        0x00005557c35f52c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmphciud8zo/tmphciud8zo.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b605c391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b605c088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b605c088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b605c0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphciud8zo                        0x000055cb5cd3e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b605c57d460 __libc_start_main +
    245

    6    tmphciud8zo                        0x000055cb5cd3e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp28f0_rpw/tmp28f0_rpw.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb25b63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb2585ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb2585a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb258597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28f0_rpw                        0x00005557c35f57a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abb25d4f460 __libc_start_main +
    245

    6    tmp28f0_rpw                        0x00005557c35f52c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgs7l0238/tmpgs7l0238.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbaacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbaa9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbaa9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbaa9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs7l0238                        0x000055fc12b407a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abbaaee8460 __libc_start_main +
    245

    6    tmpgs7l0238                        0x000055fc12b402c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade > 3.7 {\n            letterGrades.append(\"A\")\n       \
    \ } else if grade > 3.3 {\n            letterGrades.append(\"A-\")\n        }\
    \ else if grade > 3.0 {\n            letterGrades.append(\"B+\")\n        } else\
    \ if grade > 2.7 {\n            letterGrades.append(\"B\")\n        } else if\
    \ grade > 2.3 {\n            letterGrades.append(\"B-\")\n        } else if grade\
    \ > 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade >\
    \ 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade > 1.3\
    \ {\n            letterGrades.append(\"C-\")\n        } else if grade > 1.0 {\n\
    \            letterGrades.append(\"D+\")\n        } else if grade > 0.7 {\n  \
    \          letterGrades.append(\"D\")\n        } else if grade > 0.0 {\n     \
    \       letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014163
