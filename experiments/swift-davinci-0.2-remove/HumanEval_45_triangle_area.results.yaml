language: swift
name: HumanEval_45_triangle_area
results:
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (Double(a) * Double(h))\
    \ / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return 0.5 * Double(a) * Double(h)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a) * Double(h)\
    \ / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a) * Double(h)\
    \ / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a) * Double(h)\
    \ / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return 0.5 * Double(a) * Double(h)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a) * Double(h)\
    \ / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a) * Double(h)\
    \ / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a) * Double(h)\
    \ / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a) * Double(h)\
    \ / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a) * Double(h)\
    \ / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a) * Double(h)\
    \ / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (Double(a) * Double(h))\
    \ / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a) * Double(h)\
    \ / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a) * Double(h)\
    \ / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a) * Double(h)\
    \ / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    let area = (Double(a) * Double(h))\
    \ / 2\n    return area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    let area = Double(a * h) / 2\n\
    \    return area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a) * Double(h)\
    \ / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2.0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979383
