language: swift
name: HumanEval_147_get_max_triples
results:
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var count = 0\n    for i\
    \ in 1..<n {\n        for j in i+1..<n {\n            for k in j+1..<n {\n   \
    \             if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmphl4vbvr4/tmphl4vbvr4.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66eb438c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66eb12fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66eb12f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66eb12e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphl4vbvr4                        0x00005652d73e83b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b66eb624460 __libc_start_main +
    245

    6    tmphl4vbvr4                        0x00005652d73e7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    var\
    \ count = 0\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k in\
    \ j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n          \
    \          count += 1\n                }\n            }\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    var\
    \ count = 0\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  for i in 0..<n {\n        for j in i+1..<n {\n            for k in j+1..<n\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k\
    \ in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n       \
    \             result += 1\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for\
    \ k in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n \
    \                   result += 1\n                }\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k\
    \ in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n       \
    \             result += 1\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k\
    \ in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n       \
    \             result += 1\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var count = 0\n    for i\
    \ in 1..<n {\n        for j in (i + 1)..<n {\n            for k in (j + 1)..<n\
    \ {\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 ==\
    \ 0 {\n                    count += 1\n                }\n            }\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp_atjxiq4/tmp_atjxiq4.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b556c7c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b556c4beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b556c4be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b556c4bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_atjxiq4                        0x00005596f9afd3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b556c9b3460 __libc_start_main +
    245

    6    tmp_atjxiq4                        0x00005596f9afcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for\
    \ k in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n \
    \                   result += 1\n                }\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var count = 0\n    var a\
    \ = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if a[i] + a[j] + a[k] % 3 == 0 {\n     \
    \               count += 1\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpnxggsedi/tmpnxggsedi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19302cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b192ffc5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b192ffc5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b192ffc47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxggsedi                        0x000056268cfd05d5 <unavailable> + 5589

    5    libc.so.6                          0x00002b19304ba460 __libc_start_main +
    245

    6    tmpnxggsedi                        0x000056268cfd0289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in (i + 1)..<a.count {\n            for\
    \ k in (j + 1)..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in (i + 1)..<a.count {\n            for\
    \ k in (j + 1)..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var count = 0\n    for i\
    \ in 1..<n {\n        for j in i+1..<n {\n            for k in j+1..<n {\n   \
    \             if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmphl4vbvr4/tmphl4vbvr4.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66eb438c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66eb12fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66eb12f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66eb12e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphl4vbvr4                        0x00005652d73e83b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b66eb624460 __libc_start_main +
    245

    6    tmphl4vbvr4                        0x00005652d73e7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in (i + 1)..<a.count {\n            for\
    \ k in (j + 1)..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k\
    \ in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n       \
    \             result += 1\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<a.count {\n        for j in (i + 1)..<a.count {\n          \
    \  for k in (j + 1)..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    result += 1\n                }\n            }\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for\
    \ k in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n \
    \                   result += 1\n                }\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in (i + 1)..<a.count {\n            for\
    \ k in (j + 1)..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k\
    \ in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n       \
    \             result += 1\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k\
    \ in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n       \
    \             result += 1\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    var\
    \ count = 0\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k in\
    \ j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n          \
    \          count += 1\n                }\n            }\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var count = 0\n    var a\
    \ = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k in\
    \ j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n          \
    \          count += 1\n                }\n            }\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for\
    \ k in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n \
    \                   result += 1\n                }\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    var\
    \ count = 0\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k in\
    \ j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n          \
    \          count += 1\n                }\n            }\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n {\n        for j in i + 1..<n {\n            for k in j +\
    \ 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n              \
    \      result += 1\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5)\
    \ == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) ==\
    \ 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n {\n        for j in i+1..<n {\n            for k in j+1..<n\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    result\
    \ += 1\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    var\
    \ count = 0\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k in\
    \ j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n          \
    \          count += 1\n                }\n            }\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var count = 0\n    var a\
    \ = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k in\
    \ j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n          \
    \          count += 1\n                }\n            }\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    var\
    \ count = 0\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  for i in 0..<a.count {\n        for j in (i + 1)..<a.count {\n            for\
    \ k in (j + 1)..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var count = 0\n    var a\
    \ = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k in\
    \ j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n          \
    \          count += 1\n                }\n            }\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i + 1..<a.count {\n            for\
    \ k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i + 1..<a.count {\n            for\
    \ k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k in\
    \ j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n          \
    \          count += 1\n                }\n            }\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    for\
    \ i in 1..<n {\n        for j in (i + 1)..<n {\n            for k in (j + 1)..<n\
    \ {\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 ==\
    \ 0 {\n                    result += 1\n                }\n            }\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpmq2xp6a4/tmpmq2xp6a4.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31c24cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31c21c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31c21c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31c21c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmq2xp6a4                        0x000055feddf9d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b31c26b9460 __libc_start_main +
    245

    6    tmpmq2xp6a4                        0x000055feddf9cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n {\n        for j in i+1..<n {\n            for k in j+1..<n\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    result\
    \ += 1\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a: [Int] = []\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k in\
    \ j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n          \
    \          count += 1\n                }\n            }\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k\
    \ in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n       \
    \             result += 1\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in (i + 1)..<a.count {\n            for\
    \ k in (j + 1)..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var result = 0\n \
    \   for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for\
    \ k in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n \
    \                   result += 1\n                }\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    var\
    \ count = 0\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  for i in 0..<n {\n        for j in i+1..<n {\n            for k in j+1..<n\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var count = 0\n    var a\
    \ = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  for i in 0..<n {\n        for j in i+1..<n {\n            for k in j+1..<n\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var count = 0\n    for i\
    \ in 1..<n {\n        for j in i+1..<n {\n            for k in j+1..<n {\n   \
    \             if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0 {\n      \
    \              count += 1\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp8v3idnfr/tmp8v3idnfr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66b8171c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66b7e68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66b7e68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66b7e677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8v3idnfr                        0x000056092e6b33b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b66b835d460 __libc_start_main +
    245

    6    tmp8v3idnfr                        0x000056092e6b2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    var\
    \ count = 0\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k in\
    \ j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n          \
    \          count += 1\n                }\n            }\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k\
    \ in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n       \
    \             result += 1\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    var\
    \ count = 0\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k in\
    \ j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n          \
    \          count += 1\n                }\n            }\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var count = 0\n    var a\
    \ = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n    \
    \        for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) %\
    \ 3 == 0 {\n                    result += 1\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n {\n        for j in i+1..<n {\n            for k in j+1..<n\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    result\
    \ += 1\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n {\n        for j in i+1..<n {\n            for k in j+1..<n\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    result\
    \ += 1\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var count = 0\n    var a\
    \ = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  for i in 0..<n {\n        for j in i + 1..<n {\n            for k in j + 1..<n\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var count = 0\n    var a\
    \ = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  for i in 0..<n {\n        for j in i + 1..<n {\n            for k in j + 1..<n\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n {\n        for j in i+1..<n {\n            for k in j+1..<n\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    result\
    \ += 1\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var res = 0\n    var a =\
    \ [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    for\
    \ i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k in j +\
    \ 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n              \
    \      res += 1\n                }\n            }\n        }\n    }\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k\
    \ in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n       \
    \             result += 1\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    var\
    \ count = 0\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  for i in 0..<a.count {\n        for j in (i + 1)..<a.count {\n            for\
    \ k in (j + 1)..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    for\
    \ i in 1..<n {\n        for j in i+1..<n {\n            for k in j+1..<n {\n \
    \               if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0 {\n    \
    \                result += 1\n                }\n            }\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp7q5efhs1/tmp7q5efhs1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aefd44f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefd41efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aefd41ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aefd41ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7q5efhs1                        0x00005622cb9e03b0 <unavailable> + 5040

    5    libc.so.6                          0x00002aefd46e4460 __libc_start_main +
    245

    6    tmp7q5efhs1                        0x00005622cb9dffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k\
    \ in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n       \
    \             result += 1\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpruatxctk/tmpruatxctk.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ef316ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ef2e61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ef2e61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ef2e607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpruatxctk                        0x000055be68db11b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b4ef3356460 __libc_start_main +
    245

    6    tmpruatxctk                        0x000055be68db0e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var count = 0\n    var a\
    \ = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k in\
    \ j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n          \
    \          count += 1\n                }\n            }\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a: [Int] = []\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for\
    \ k in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n \
    \                   result += 1\n                }\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in (i + 1)..<a.count {\n            for\
    \ k in (j + 1)..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k\
    \ in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n       \
    \             result += 1\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    var\
    \ count = 0\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  for i in 0..<n {\n        for j in i+1..<n {\n            for k in j+1..<n\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k\
    \ in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n       \
    \             result += 1\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    var\
    \ count = 0\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n {\n        for j in i+1..<n {\n            for k in j+1..<n\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    result\
    \ += 1\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var count = 0\n    for i\
    \ in 1..<n {\n        for j in i+1..<n {\n            for k in j+1..<n {\n   \
    \             if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0 {\n      \
    \              count += 1\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp8v3idnfr/tmp8v3idnfr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66b8171c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66b7e68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66b7e68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66b7e677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8v3idnfr                        0x000056092e6b33b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b66b835d460 __libc_start_main +
    245

    6    tmp8v3idnfr                        0x000056092e6b2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i + 1..<a.count {\n            for\
    \ k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k\
    \ in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n       \
    \             result += 1\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array(repeating:\
    \ 0, count: n)\n    for i in 1...n {\n        a[i - 1] = i * i - i + 1\n    }\n\
    \    var count = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n\
    \            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k\
    \ in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n       \
    \             result += 1\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n {\n        for j in i+1..<n {\n            for k in j+1..<n\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    result\
    \ += 1\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var count = 0\n    var a\
    \ = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k in\
    \ j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n          \
    \          count += 1\n                }\n            }\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array(repeating:\
    \ 0, count: n)\n    var count = 0\n    for i in 1...n {\n        a[i - 1] = i\
    \ * i - i + 1\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1\
    \ {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k\
    \ in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n       \
    \             result += 1\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for\
    \ k in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n \
    \                   result += 1\n                }\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for\
    \ k in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n \
    \                   result += 1\n                }\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var triples = 0\n    for\
    \ i in 1..<n {\n        for j in i+1..<n {\n            for k in j+1..<n {\n \
    \               if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0 {\n    \
    \                triples += 1\n                }\n            }\n        }\n \
    \   }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpraf_xgk0/tmpraf_xgk0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac660744c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac66043bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac66043b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac66043a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpraf_xgk0                        0x000055a9e340a3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac660930460 __libc_start_main +
    245

    6    tmpraf_xgk0                        0x000055a9e3409fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for\
    \ k in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n \
    \                   result += 1\n                }\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k in\
    \ j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n          \
    \          count += 1\n                }\n            }\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<n {\n        for j in (i + 1)..<n {\n            for k in (j +\
    \ 1)..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n             \
    \       count += 1\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in (i + 1)..<a.count {\n            for\
    \ k in (j + 1)..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k\
    \ in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n       \
    \             result += 1\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var res = 0\n    var a =\
    \ [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    for\
    \ i in 0..<a.count {\n        for j in i + 1..<a.count {\n            for k in\
    \ j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n    \
    \                res += 1\n                }\n            }\n        }\n    }\n\
    \    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for\
    \ k in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n \
    \                   result += 1\n                }\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for\
    \ k in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n \
    \                   result += 1\n                }\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k\
    \ in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n       \
    \             result += 1\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    var\
    \ count = 0\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  for i in 0..<n {\n        for j in (i + 1)..<n {\n            for k in (j +\
    \ 1)..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n             \
    \       count += 1\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in (i + 1)..<a.count {\n            for\
    \ k in (j + 1)..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k in\
    \ j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n          \
    \          count += 1\n                }\n            }\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var count = 0\n    for i\
    \ in 1..<n {\n        for j in i+1..<n {\n            for k in j+1..<n {\n   \
    \             if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0 {\n      \
    \              count += 1\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp8v3idnfr/tmp8v3idnfr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66b8171c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66b7e68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66b7e68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66b7e677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8v3idnfr                        0x000056092e6b33b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b66b835d460 __libc_start_main +
    245

    6    tmp8v3idnfr                        0x000056092e6b2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009215
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var count = 0\n    for i\
    \ in 1..<n {\n        for j in i+1..<n {\n            for k in j+1..<n {\n   \
    \             if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0 {\n      \
    \              count += 1\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp8v3idnfr/tmp8v3idnfr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66b8171c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66b7e68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66b7e68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66b7e677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8v3idnfr                        0x000056092e6b33b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b66b835d460 __libc_start_main +
    245

    6    tmp8v3idnfr                        0x000056092e6b2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<n {\n        for j in i+1..<n {\n            for k in j+1..<n\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var count = 0\n    var a\
    \ = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  for i in 0..<n {\n        for j in i+1..<n {\n            for k in j+1..<n\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var count = 0\n    for i\
    \ in 1..<n {\n        for j in i+1..<n {\n            for k in j+1..<n {\n   \
    \             if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmphl4vbvr4/tmphl4vbvr4.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66eb438c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66eb12fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66eb12f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66eb12e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphl4vbvr4                        0x00005652d73e83b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b66eb624460 __libc_start_main +
    245

    6    tmphl4vbvr4                        0x00005652d73e7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k\
    \ in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n       \
    \             result += 1\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    var\
    \ count = 0\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k in\
    \ j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n          \
    \          count += 1\n                }\n            }\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var count = 0\n    var a\
    \ = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k in\
    \ j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n          \
    \          count += 1\n                }\n            }\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n {\n        for j in i + 1..<n {\n            for k in j +\
    \ 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n              \
    \      result += 1\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5)\
    \ == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) ==\
    \ 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    var\
    \ count = 0\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    var\
    \ count = 0\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  for i in 0..<n {\n        for j in i+1..<n {\n            for k in j+1..<n\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k\
    \ in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n       \
    \             result += 1\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    var\
    \ result = 0\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n \
    \   for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for\
    \ k in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n \
    \                   result += 1\n                }\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for\
    \ k in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n \
    \                   result += 1\n                }\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for\
    \ k in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n \
    \                   result += 1\n                }\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    var\
    \ count = 0\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k in\
    \ j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n          \
    \          count += 1\n                }\n            }\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in (i + 1)..<a.count {\n            for\
    \ k in (j + 1)..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n      \
    \      for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k in\
    \ j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n          \
    \          count += 1\n                }\n            }\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    var\
    \ count = 0\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k\
    \ in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var result = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<a.count {\n        for j in i+1..<a.count {\n            for\
    \ k in j+1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n \
    \                   result += 1\n                }\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009215
