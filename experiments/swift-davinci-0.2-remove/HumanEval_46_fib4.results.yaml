language: swift
name: HumanEval_46_fib4
results:
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if n == 0\
    \ {\n        return a\n    } else if n == 1 {\n        return b\n    } else if\
    \ n == 2 {\n        return c\n    } else if n == 3 {\n        return d\n    }\n\
    \    for _ in 4...n {\n        a = b\n        b = c\n        c = d\n        d\
    \ = a + b + c + d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpuaqp8yfc/tmpuaqp8yfc.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b912ff5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b912fc52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b912fc52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b912fc517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuaqp8yfc                        0x000055e95e316335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9130147460 __libc_start_main +
    245

    6    tmpuaqp8yfc                        0x000055e95e315fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in\
    \ 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n\
    \    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpbrm0e7kv/tmpbrm0e7kv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cf8b9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cf8894b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cf8894988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cf88937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrm0e7kv                        0x000055e8ad58f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9cf8d89460 __libc_start_main +
    245

    6    tmpbrm0e7kv                        0x000055e8ad58efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n\
    \    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp29jwahg0/tmp29jwahg0.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca9d84ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca9d541b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca9d541988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca9d5407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp29jwahg0                        0x0000558145d631b5 <unavailable> + 4533

    5    libc.so.6                          0x00002aca9da36460 __libc_start_main +
    245

    6    tmp29jwahg0                        0x0000558145d62e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n\
    \    if n <= 3 {\n        return n\n    }\n    for _ in 4...n {\n        e = a\
    \ + b + c + d\n        a = b\n        b = c\n        c = d\n        d = e\n  \
    \  }\n    return e\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n\
    \    for _ in 4...n {\n        let temp = a + b + c + d\n        a = b\n     \
    \   b = c\n        c = d\n        d = temp\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in\
    \ 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n\
    \    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpbrm0e7kv/tmpbrm0e7kv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cf8b9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cf8894b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cf8894988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cf88937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrm0e7kv                        0x000055e8ad58f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9cf8d89460 __libc_start_main +
    245

    6    tmpbrm0e7kv                        0x000055e8ad58efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n\
    \    for _ in 3...n {\n        e = a + b + c + d\n        a = b\n        b = c\n\
    \        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpr1scklrg/tmpr1scklrg.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b723605cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7235d53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7235d53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7235d527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr1scklrg                        0x0000560314a93335 <unavailable> + 4917

    5    libc.so.6                          0x00002b7236248460 __libc_start_main +
    245

    6    tmpr1scklrg                        0x0000560314a92fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if n == 0\
    \ {\n        return a\n    } else if n == 1 {\n        return b\n    } else if\
    \ n == 2 {\n        return c\n    } else if n == 3 {\n        return d\n    }\n\
    \    for _ in 4...n {\n        a = b\n        b = c\n        c = d\n        d\
    \ = a + b + c + d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpuaqp8yfc/tmpuaqp8yfc.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b912ff5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b912fc52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b912fc52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b912fc517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuaqp8yfc                        0x000055e95e316335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9130147460 __libc_start_main +
    245

    6    tmpuaqp8yfc                        0x000055e95e315fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n\
    \    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if n == 0\
    \ {\n        return a\n    } else if n == 1 {\n        return b\n    } else if\
    \ n == 2 {\n        return c\n    } else if n == 3 {\n        return d\n    }\n\
    \    for _ in 4...n {\n        a = b\n        b = c\n        c = d\n        d\
    \ = a + b + c + d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpuaqp8yfc/tmpuaqp8yfc.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b912ff5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b912fc52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b912fc52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b912fc517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuaqp8yfc                        0x000055e95e316335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9130147460 __libc_start_main +
    245

    6    tmpuaqp8yfc                        0x000055e95e315fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n < 2 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 2\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpv61oj94e/tmpv61oj94e.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c73de6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c73addb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c73add988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c73adc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv61oj94e                        0x000055aa31f46335 <unavailable> + 4917

    5    libc.so.6                          0x00002b7c73fd2460 __libc_start_main +
    245

    6    tmpv61oj94e                        0x000055aa31f45fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n\
    \    for _ in 3...n {\n        e = a + b + c + d\n        a = b\n        b = c\n\
    \        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpr1scklrg/tmpr1scklrg.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b723605cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7235d53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7235d53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7235d527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr1scklrg                        0x0000560314a93335 <unavailable> + 4917

    5    libc.so.6                          0x00002b7236248460 __libc_start_main +
    245

    6    tmpr1scklrg                        0x0000560314a92fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in\
    \ 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n\
    \    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpbrm0e7kv/tmpbrm0e7kv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cf8b9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cf8894b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cf8894988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cf88937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrm0e7kv                        0x000055e8ad58f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9cf8d89460 __libc_start_main +
    245

    6    tmpbrm0e7kv                        0x000055e8ad58efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in\
    \ 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n\
    \    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpbrm0e7kv/tmpbrm0e7kv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cf8b9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cf8894b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cf8894988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cf88937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrm0e7kv                        0x000055e8ad58f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9cf8d89460 __libc_start_main +
    245

    6    tmpbrm0e7kv                        0x000055e8ad58efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n\
    \    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n \
    \       c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp8le04ky7/tmp8le04ky7.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6003123c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6002e1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6002e1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6002e197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8le04ky7                        0x000055a9501a23b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b600330f460 __libc_start_main +
    245

    6    tmp8le04ky7                        0x000055a9501a1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in\
    \ 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n\
    \    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpbrm0e7kv/tmpbrm0e7kv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cf8b9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cf8894b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cf8894988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cf88937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrm0e7kv                        0x000055e8ad58f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9cf8d89460 __libc_start_main +
    245

    6    tmpbrm0e7kv                        0x000055e8ad58efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp29jwahg0/tmp29jwahg0.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca9d84ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca9d541b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca9d541988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca9d5407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp29jwahg0                        0x0000558145d631b5 <unavailable> + 4533

    5    libc.so.6                          0x00002aca9da36460 __libc_start_main +
    245

    6    tmp29jwahg0                        0x0000558145d62e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n\
    \    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n \
    \   var k = 0\n    var l = 0\n    var m = 0\n    var o = 0\n    var p = 0\n  \
    \  var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n   \
    \ var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var\
    \ aa = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n    var ae = 0\n   \
    \ var af = 0\n    var ag = 0\n    var ah = 0\n    var ai = 0\n    var aj = 0\n\
    \    var ak = 0\n    var al = 0\n    var am = 0\n    var an = 0\n    var ao =\
    \ 0\n    var ap = 0\n    var aq = 0\n    var ar = 0\n    var as = 0\n    var at\
    \ = 0\n    var au = 0\n    var av = 0\n    var aw = 0\n    var ax = 0\n    var\
    \ ay = 0\n    var az = 0\n    var ba = 0\n    var bb = 0\n    var bc = 0\n   \
    \ var bd = 0\n    var be = 0\n    var bf = 0\n    var bg = 0\n    var bh = 0\n\
    \    var bi = 0\n    var bj = 0\n    var bk = 0\n    var bl = 0\n    var bm =\
    \ 0\n    var bn = 0\n    var bo = 0\n    var bp = 0\n    var bq = 0\n    var br\
    \ = 0\n    var bs = 0\n    var bt = 0\n    var bu = 0\n    var bv = 0\n    var\
    \ bw = 0\n    var bx = 0\n    var by = 0\n    var bz = 0\n    var ca = 0\n   \
    \ var cb = 0\n    var cc = 0\n    var cd = 0\n   \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpws5b5iyx.swift:53:9: error: keyword 'as' cannot be used as an identifier\
    \ here\n    var as = 0\n        ^\n/tmp/tmpws5b5iyx.swift:53:9: note: if this\
    \ name is unavoidable, use backticks to escape it\n    var as = 0\n        ^~\n\
    \        `as`\n/tmp/tmpws5b5iyx.swift:10:9: warning: initialization of variable\
    \ 'a' was never used; consider replacing with assignment to '_' or removing it\n\
    \    var a = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:11:9: warning: initialization\
    \ of variable 'b' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var b = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:12:9: warning:\
    \ initialization of variable 'c' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var c = 2\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:13:9:\
    \ warning: initialization of variable 'd' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var d = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:14:9:\
    \ warning: initialization of variable 'e' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var e = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:15:9:\
    \ warning: initialization of variable 'f' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var f = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:16:9:\
    \ warning: initialization of variable 'g' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var g = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:17:9:\
    \ warning: initialization of variable 'h' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var h = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:18:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:19:9:\
    \ warning: initialization of variable 'j' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var j = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:20:9:\
    \ warning: initialization of variable 'k' was never used; co"
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        a\
    \ = b\n        b = c\n        c = d\n        d = a + b + c\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpq66uhag7/tmpq66uhag7.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55c518cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55c4e83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55c4e83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55c4e827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq66uhag7                        0x000056064b4943b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b55c5378460 __libc_start_main +
    245

    6    tmpq66uhag7                        0x000056064b493fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 4 {\n        return n == 2 ? 2 : 0\n    }\n    var a = 0\n   \
    \ var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a\
    \ + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpv_uxlbit/tmpv_uxlbit.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b762d0f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b762cde8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b762cde8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b762cde77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv_uxlbit                        0x00005622cc7243b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b762d2dd460 __libc_start_main +
    245

    6    tmpv_uxlbit                        0x00005622cc723fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in\
    \ 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n\
    \    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpbrm0e7kv/tmpbrm0e7kv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cf8b9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cf8894b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cf8894988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cf88937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrm0e7kv                        0x000055e8ad58f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9cf8d89460 __libc_start_main +
    245

    6    tmpbrm0e7kv                        0x000055e8ad58efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    guard n > 0 else { return 0 }\n    var a = 0\n    var b = 0\n    var\
    \ c = 2\n    var d = 0\n    for _ in 3...n {\n        d = a + b + c\n        a\
    \ = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp62u33m7l/tmp62u33m7l.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d69cf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d699eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d699ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d699ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp62u33m7l                        0x0000561578f2f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9d69ee3460 __libc_start_main +
    245

    6    tmp62u33m7l                        0x0000561578f2efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in\
    \ 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n\
    \    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpbrm0e7kv/tmpbrm0e7kv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cf8b9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cf8894b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cf8894988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cf88937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrm0e7kv                        0x000055e8ad58f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9cf8d89460 __libc_start_main +
    245

    6    tmpbrm0e7kv                        0x000055e8ad58efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in\
    \ 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n\
    \    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpbrm0e7kv/tmpbrm0e7kv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cf8b9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cf8894b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cf8894988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cf88937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrm0e7kv                        0x000055e8ad58f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9cf8d89460 __libc_start_main +
    245

    6    tmpbrm0e7kv                        0x000055e8ad58efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n\
    \    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in\
    \ 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n\
    \    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpbrm0e7kv/tmpbrm0e7kv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cf8b9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cf8894b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cf8894988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cf88937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrm0e7kv                        0x000055e8ad58f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9cf8d89460 __libc_start_main +
    245

    6    tmpbrm0e7kv                        0x000055e8ad58efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n\
    \    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp29jwahg0/tmp29jwahg0.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca9d84ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca9d541b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca9d541988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca9d5407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp29jwahg0                        0x0000558145d631b5 <unavailable> + 4533

    5    libc.so.6                          0x00002aca9da36460 __libc_start_main +
    245

    6    tmp29jwahg0                        0x0000558145d62e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 0\n    }\n    var nMinus1 = 0\n    var nMinus2 = 0\n    var nMinus3\
    \ = 2\n    var nMinus4 = 0\n    var result = 0\n    for _ in 4...n {\n       \
    \ result = nMinus1 + nMinus2 + nMinus3 + nMinus4\n        nMinus1 = nMinus2\n\
    \        nMinus2 = nMinus3\n        nMinus3 = nMinus4\n        nMinus4 = result\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n\
    \    for _ in 4...n {\n        a = b\n        b = c\n        c = d\n        d\
    \ = a + b + c\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp7hj46zt8/tmp7hj46zt8.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fdc421c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fdc118b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fdc118988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fdc1177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7hj46zt8                        0x0000555a1be2e3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b8fdc60d460 __libc_start_main +
    245

    6    tmp7hj46zt8                        0x0000555a1be2dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp29jwahg0/tmp29jwahg0.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca9d84ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca9d541b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca9d541988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca9d5407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp29jwahg0                        0x0000558145d631b5 <unavailable> + 4533

    5    libc.so.6                          0x00002aca9da36460 __libc_start_main +
    245

    6    tmp29jwahg0                        0x0000558145d62e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    guard n > 0 else { return 0 }\n    guard n > 1 else { return 0 }\n  \
    \  guard n > 2 else { return 2 }\n    guard n > 3 else { return 0 }\n    \n  \
    \  var nMinus1 = 0\n    var nMinus2 = 0\n    var nMinus3 = 2\n    var nMinus4\
    \ = 0\n    var result = 0\n    \n    for _ in 4...n {\n        result = nMinus1\
    \ + nMinus2 + nMinus3 + nMinus4\n        nMinus1 = nMinus2\n        nMinus2 =\
    \ nMinus3\n        nMinus3 = nMinus4\n        nMinus4 = result\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 2 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmp8ya59cr3/tmp8ya59cr3.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc3301dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc32d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc32d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc32d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ya59cr3                        0x000055c982048335 <unavailable> + 4917

    5    libc.so.6                          0x00002acc33209460 __libc_start_main +
    245

    6    tmp8ya59cr3                        0x000055c982047fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    guard n > 3 else { return n - 1 }\n    var a = 0\n    var b = 0\n   \
    \ var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b + c\n    \
    \    a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpo9rvwqlk/tmpo9rvwqlk.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b4984bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b49542b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b49542988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b495417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9rvwqlk                        0x0000565344fcb3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b2b49a37460 __libc_start_main +
    245

    6    tmpo9rvwqlk                        0x0000565344fcafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n\
    \    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in\
    \ 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n\
    \    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpbrm0e7kv/tmpbrm0e7kv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cf8b9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cf8894b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cf8894988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cf88937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrm0e7kv                        0x000055e8ad58f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9cf8d89460 __libc_start_main +
    245

    6    tmpbrm0e7kv                        0x000055e8ad58efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var n1 = 0\n\
    \    var n2 = 0\n    var n3 = 2\n    var n4 = 0\n    var result = 0\n    for _\
    \ in 4...n {\n        result = n1 + n2 + n3 + n4\n        n1 = n2\n        n2\
    \ = n3\n        n3 = n4\n        n4 = result\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 4 {\n        return fib4(n: n - 1)\n    }\n    var a = 0\n   \
    \ var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a\
    \ + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpp1wy18vv/tmpp1wy18vv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1f452dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1f4224b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1f4224988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1f42237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1wy18vv                        0x00005572fa68b3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac1f4719460 __libc_start_main +
    245

    6    tmpp1wy18vv                        0x00005572fa68afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 4 {\n        return n * 2\n    }\n    var a = 0\n    var b = 0\n\
    \    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpnvs4iu3x/tmpnvs4iu3x.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8438a35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b843872cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b843872c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b843872b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnvs4iu3x                        0x0000560b96a1a3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b8438c21460 __libc_start_main +
    245

    6    tmpnvs4iu3x                        0x0000560b96a19fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp29jwahg0/tmp29jwahg0.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca9d84ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca9d541b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca9d541988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca9d5407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp29jwahg0                        0x0000558145d631b5 <unavailable> + 4533

    5    libc.so.6                          0x00002aca9da36460 __libc_start_main +
    245

    6    tmp29jwahg0                        0x0000558145d62e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n\
    \    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n \
    \   var k = 0\n    var l = 0\n    var m = 0\n    var o = 0\n    var p = 0\n  \
    \  var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n   \
    \ var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var\
    \ aa = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n    var ae = 0\n   \
    \ var af = 0\n    var ag = 0\n    var ah = 0\n    var ai = 0\n    var aj = 0\n\
    \    var ak = 0\n    var al = 0\n    var am = 0\n    var an = 0\n    var ao =\
    \ 0\n    var ap = 0\n    var aq = 0\n    var ar = 0\n    var as = 0\n    var at\
    \ = 0\n    var au = 0\n    var av = 0\n    var aw = 0\n    var ax = 0\n    var\
    \ ay = 0\n    var az = 0\n    var ba = 0\n    var bb = 0\n    var bc = 0\n   \
    \ var bd = 0\n    var be = 0\n    var bf = 0\n    var bg = 0\n    var bh = 0\n\
    \    var bi = 0\n    var bj = 0\n    var bk = 0\n    var bl = 0\n    var bm =\
    \ 0\n    var bn = 0\n    var bo = 0\n    var bp = 0\n    var bq = 0\n    var br\
    \ = 0\n    var bs = 0\n    var bt = 0\n    var bu = 0\n    var bv = 0\n    var\
    \ bw = 0\n    var bx = 0\n    var by = 0\n    var bz = 0\n    var ca = 0\n   \
    \ var cb = 0\n    var cc = 0\n    var cd = 0\n   \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpws5b5iyx.swift:53:9: error: keyword 'as' cannot be used as an identifier\
    \ here\n    var as = 0\n        ^\n/tmp/tmpws5b5iyx.swift:53:9: note: if this\
    \ name is unavoidable, use backticks to escape it\n    var as = 0\n        ^~\n\
    \        `as`\n/tmp/tmpws5b5iyx.swift:10:9: warning: initialization of variable\
    \ 'a' was never used; consider replacing with assignment to '_' or removing it\n\
    \    var a = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:11:9: warning: initialization\
    \ of variable 'b' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var b = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:12:9: warning:\
    \ initialization of variable 'c' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var c = 2\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:13:9:\
    \ warning: initialization of variable 'd' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var d = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:14:9:\
    \ warning: initialization of variable 'e' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var e = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:15:9:\
    \ warning: initialization of variable 'f' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var f = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:16:9:\
    \ warning: initialization of variable 'g' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var g = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:17:9:\
    \ warning: initialization of variable 'h' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var h = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:18:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:19:9:\
    \ warning: initialization of variable 'j' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var j = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:20:9:\
    \ warning: initialization of variable 'k' was never used; co"
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in\
    \ 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n\
    \    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpbrm0e7kv/tmpbrm0e7kv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cf8b9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cf8894b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cf8894988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cf88937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrm0e7kv                        0x000055e8ad58f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9cf8d89460 __libc_start_main +
    245

    6    tmpbrm0e7kv                        0x000055e8ad58efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in\
    \ 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n\
    \    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpbrm0e7kv/tmpbrm0e7kv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cf8b9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cf8894b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cf8894988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cf88937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrm0e7kv                        0x000055e8ad58f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9cf8d89460 __libc_start_main +
    245

    6    tmpbrm0e7kv                        0x000055e8ad58efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n\
    \    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if n == 0\
    \ {\n        return a\n    } else if n == 1 {\n        return b\n    } else if\
    \ n == 2 {\n        return c\n    } else if n == 3 {\n        return d\n    }\n\
    \    for _ in 4...n {\n        a = b\n        b = c\n        c = d\n        d\
    \ = a + b + c + d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpuaqp8yfc/tmpuaqp8yfc.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b912ff5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b912fc52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b912fc52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b912fc517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuaqp8yfc                        0x000055e95e316335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9130147460 __libc_start_main +
    245

    6    tmpuaqp8yfc                        0x000055e95e315fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n\
    \    for _ in 4...n {\n        e = a + b + c + d\n        a = b\n        b = c\n\
    \        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var nMinus1\
    \ = 0\n    var nMinus2 = 0\n    var nMinus3 = 2\n    var nMinus4 = 0\n    var\
    \ result = 0\n    for i in 4...n {\n        result = nMinus1 + nMinus2 + nMinus3\
    \ + nMinus4\n        nMinus4 = nMinus3\n        nMinus3 = nMinus2\n        nMinus2\
    \ = nMinus1\n        nMinus1 = result\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpfs1bdko6/tmpfs1bdko6.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14cfd38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14cfa2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14cfa2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14cfa2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfs1bdko6                        0x000055ad7fa683b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b14cff24460 __libc_start_main +
    245

    6    tmpfs1bdko6                        0x000055ad7fa67fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n\
    \    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n \
    \       c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp8le04ky7/tmp8le04ky7.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6003123c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6002e1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6002e1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6002e197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8le04ky7                        0x000055a9501a23b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b600330f460 __libc_start_main +
    245

    6    tmp8le04ky7                        0x000055a9501a1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var n1 = 0\n\
    \    var n2 = 0\n    var n3 = 2\n    var n4 = 0\n    var result = 0\n    for _\
    \ in 4...n {\n        result = n1 + n2 + n3 + n4\n        n1 = n2\n        n2\
    \ = n3\n        n3 = n4\n        n4 = result\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var n1 = 0\n    var n2 = 0\n    var n3 = 2\n    var n4 = 0\n    var n5\
    \ = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            n5 = n1 + n2\
    \ + n3 + n4\n            n1 = n2\n            n2 = n3\n            n3 = n4\n \
    \           n4 = n5\n        }\n        return n5\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 4 {\n        return 2 * n\n    }\n    var n1 = 0\n    var n2 =\
    \ 0\n    var n3 = 2\n    var n4 = 2\n    var n5 = 0\n    for _ in 4...n {\n  \
    \      n5 = n1 + n2 + n3 + n4\n        n1 = n2\n        n2 = n3\n        n3 =\
    \ n4\n        n4 = n5\n    }\n    return n5\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi4c3563f/tmpi4c3563f.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad673df7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad673aeeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad673aee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad673aed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi4c3563f                        0x00005617a7fa4335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad673fe3460 __libc_start_main +
    245

    6    tmpi4c3563f                        0x00005617a7fa3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp29jwahg0/tmp29jwahg0.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca9d84ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca9d541b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca9d541988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca9d5407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp29jwahg0                        0x0000558145d631b5 <unavailable> + 4533

    5    libc.so.6                          0x00002aca9da36460 __libc_start_main +
    245

    6    tmp29jwahg0                        0x0000558145d62e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var n1 = 0\n\
    \    var n2 = 0\n    var n3 = 2\n    var n4 = 0\n    var n5 = 0\n    for _ in\
    \ 4...n {\n        n5 = n1 + n2 + n3 + n4\n        n1 = n2\n        n2 = n3\n\
    \        n3 = n4\n        n4 = n5\n    }\n    return n5\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in\
    \ 4...n {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n\
    \    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpaiwsz4ek/tmpaiwsz4ek.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad06835cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad068053b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad068053988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0680527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaiwsz4ek                        0x00005558ad92d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad068548460 __libc_start_main +
    245

    6    tmpaiwsz4ek                        0x00005558ad92cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n\
    \    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n \
    \   var k = 0\n    var l = 0\n    var m = 0\n    var o = 0\n    var p = 0\n  \
    \  var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n   \
    \ var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var\
    \ aa = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n    var ae = 0\n   \
    \ var af = 0\n    var ag = 0\n    var ah = 0\n    var ai = 0\n    var aj = 0\n\
    \    var ak = 0\n    var al = 0\n    var am = 0\n    var an = 0\n    var ao =\
    \ 0\n    var ap = 0\n    var aq = 0\n    var ar = 0\n    var as = 0\n    var at\
    \ = 0\n    var au = 0\n    var av = 0\n    var aw = 0\n    var ax = 0\n    var\
    \ ay = 0\n    var az = 0\n    var ba = 0\n    var bb = 0\n    var bc = 0\n   \
    \ var bd = 0\n    var be = 0\n    var bf = 0\n    var bg = 0\n    var bh = 0\n\
    \    var bi = 0\n    var bj = 0\n    var bk = 0\n    var bl = 0\n    var bm =\
    \ 0\n    var bn = 0\n    var bo = 0\n    var bp = 0\n    var bq = 0\n    var br\
    \ = 0\n    var bs = 0\n    var bt = 0\n    var bu = 0\n    var bv = 0\n    var\
    \ bw = 0\n    var bx = 0\n    var by = 0\n    var bz = 0\n    var ca = 0\n   \
    \ var cb = 0\n    var cc = 0\n    var cd = 0\n   \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpws5b5iyx.swift:53:9: error: keyword 'as' cannot be used as an identifier\
    \ here\n    var as = 0\n        ^\n/tmp/tmpws5b5iyx.swift:53:9: note: if this\
    \ name is unavoidable, use backticks to escape it\n    var as = 0\n        ^~\n\
    \        `as`\n/tmp/tmpws5b5iyx.swift:10:9: warning: initialization of variable\
    \ 'a' was never used; consider replacing with assignment to '_' or removing it\n\
    \    var a = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:11:9: warning: initialization\
    \ of variable 'b' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var b = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:12:9: warning:\
    \ initialization of variable 'c' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var c = 2\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:13:9:\
    \ warning: initialization of variable 'd' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var d = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:14:9:\
    \ warning: initialization of variable 'e' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var e = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:15:9:\
    \ warning: initialization of variable 'f' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var f = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:16:9:\
    \ warning: initialization of variable 'g' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var g = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:17:9:\
    \ warning: initialization of variable 'h' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var h = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:18:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:19:9:\
    \ warning: initialization of variable 'j' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var j = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:20:9:\
    \ warning: initialization of variable 'k' was never used; co"
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n\
    \    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var temp\
    \ = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            temp = a + b\
    \ + c + d\n            a = b\n            b = c\n            c = d\n         \
    \   d = temp\n        }\n        return temp\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in\
    \ 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n\
    \    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpbrm0e7kv/tmpbrm0e7kv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cf8b9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cf8894b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cf8894988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cf88937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrm0e7kv                        0x000055e8ad58f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9cf8d89460 __libc_start_main +
    245

    6    tmpbrm0e7kv                        0x000055e8ad58efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n\
    \    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n \
    \       c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp8le04ky7/tmp8le04ky7.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6003123c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6002e1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6002e1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6002e197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8le04ky7                        0x000055a9501a23b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b600330f460 __libc_start_main +
    245

    6    tmp8le04ky7                        0x000055a9501a1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n\
    \    for _ in 4...n {\n        e = a + b + c + d\n        a = b\n        b = c\n\
    \        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n < 2 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n\
    \    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n \
    \       c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpszqa8zh1/tmpszqa8zh1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4328abfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43287b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43287b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43287b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpszqa8zh1                        0x000055a7847743b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b4328cab460 __libc_start_main +
    245

    6    tmpszqa8zh1                        0x000055a784773fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n\
    \    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp29jwahg0/tmp29jwahg0.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca9d84ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca9d541b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca9d541988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca9d5407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp29jwahg0                        0x0000558145d631b5 <unavailable> + 4533

    5    libc.so.6                          0x00002aca9da36460 __libc_start_main +
    245

    6    tmp29jwahg0                        0x0000558145d62e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp29jwahg0/tmp29jwahg0.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca9d84ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca9d541b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca9d541988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca9d5407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp29jwahg0                        0x0000558145d631b5 <unavailable> + 4533

    5    libc.so.6                          0x00002aca9da36460 __libc_start_main +
    245

    6    tmp29jwahg0                        0x0000558145d62e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in\
    \ 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n\
    \    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpbrm0e7kv/tmpbrm0e7kv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cf8b9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cf8894b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cf8894988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cf88937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrm0e7kv                        0x000055e8ad58f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9cf8d89460 __libc_start_main +
    245

    6    tmpbrm0e7kv                        0x000055e8ad58efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 0\n    }\n    var n1 = 0\n    var n2 = 0\n    var n3 = 2\n    var n4\
    \ = 0\n    var result = 0\n    for _ in 4...n {\n        result = n1 + n2 + n3\
    \ + n4\n        n1 = n2\n        n2 = n3\n        n3 = n4\n        n4 = result\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var n1 = 0\n\
    \    var n2 = 0\n    var n3 = 2\n    var n4 = 0\n    var n5 = 0\n    for _ in\
    \ 4...n {\n        n5 = n1 + n2 + n3 + n4\n        n1 = n2\n        n2 = n3\n\
    \        n3 = n4\n        n4 = n5\n    }\n    return n5\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp29jwahg0/tmp29jwahg0.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca9d84ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca9d541b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca9d541988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca9d5407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp29jwahg0                        0x0000558145d631b5 <unavailable> + 4533

    5    libc.so.6                          0x00002aca9da36460 __libc_start_main +
    245

    6    tmp29jwahg0                        0x0000558145d62e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in\
    \ 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n\
    \    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpbrm0e7kv/tmpbrm0e7kv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cf8b9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cf8894b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cf8894988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cf88937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrm0e7kv                        0x000055e8ad58f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9cf8d89460 __libc_start_main +
    245

    6    tmpbrm0e7kv                        0x000055e8ad58efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n\
    \    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    guard n > 2 else { return n == 2 ? 2 : 0 }\n    var a = 0, b = 0, c =\
    \ 2, d = 0\n    for _ in 3...n {\n        d = a + b + c\n        a = b\n     \
    \   b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpwiy7ueya/tmpwiy7ueya.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b808062bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8080322b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8080322988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80803217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwiy7ueya                        0x000055e5ae7cc335 <unavailable> + 4917

    5    libc.so.6                          0x00002b8080817460 __libc_start_main +
    245

    6    tmpwiy7ueya                        0x000055e5ae7cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n\
    \    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n\
    \    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in\
    \ 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n\
    \    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpbrm0e7kv/tmpbrm0e7kv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cf8b9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cf8894b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cf8894988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cf88937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrm0e7kv                        0x000055e8ad58f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9cf8d89460 __libc_start_main +
    245

    6    tmpbrm0e7kv                        0x000055e8ad58efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n\
    \    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp29jwahg0/tmp29jwahg0.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca9d84ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca9d541b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca9d541988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca9d5407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp29jwahg0                        0x0000558145d631b5 <unavailable> + 4533

    5    libc.so.6                          0x00002aca9da36460 __libc_start_main +
    245

    6    tmp29jwahg0                        0x0000558145d62e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n\
    \    for _ in 3...n {\n        e = a + b + c + d\n        a = b\n        b = c\n\
    \        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpr1scklrg/tmpr1scklrg.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b723605cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7235d53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7235d53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7235d527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr1scklrg                        0x0000560314a93335 <unavailable> + 4917

    5    libc.so.6                          0x00002b7236248460 __libc_start_main +
    245

    6    tmpr1scklrg                        0x0000560314a92fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 0\n    }\n    var nMinus4 = 0\n    var nMinus3 = 0\n    var nMinus2\
    \ = 2\n    var nMinus1 = 0\n    var nth = 0\n    for _ in 4...n {\n        nth\
    \ = nMinus4 + nMinus3 + nMinus2 + nMinus1\n        nMinus4 = nMinus3\n       \
    \ nMinus3 = nMinus2\n        nMinus2 = nMinus1\n        nMinus1 = nth\n    }\n\
    \    return nth\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp29jwahg0/tmp29jwahg0.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca9d84ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca9d541b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca9d541988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca9d5407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp29jwahg0                        0x0000558145d631b5 <unavailable> + 4533

    5    libc.so.6                          0x00002aca9da36460 __libc_start_main +
    245

    6    tmp29jwahg0                        0x0000558145d62e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var n1 = 0\n    var n2 = 0\n    var n3 = 2\n    var n4 = 0\n    var n5\
    \ = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            n5 = n1 + n2\
    \ + n3 + n4\n            n1 = n2\n            n2 = n3\n            n3 = n4\n \
    \           n4 = n5\n        }\n        return n5\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n < 2 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n\
    \    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n \
    \       c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpszqa8zh1/tmpszqa8zh1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4328abfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43287b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43287b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43287b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpszqa8zh1                        0x000055a7847743b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b4328cab460 __libc_start_main +
    245

    6    tmpszqa8zh1                        0x000055a784773fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp29jwahg0/tmp29jwahg0.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca9d84ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca9d541b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca9d541988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca9d5407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp29jwahg0                        0x0000558145d631b5 <unavailable> + 4533

    5    libc.so.6                          0x00002aca9da36460 __libc_start_main +
    245

    6    tmp29jwahg0                        0x0000558145d62e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    // TODO: Implement this function\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpate7r1iu/tmpate7r1iu.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f5516ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f54e65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f54e65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f54e647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpate7r1iu                        0x000055f1ba13c1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b9f5535a460 __libc_start_main +
    245

    6    tmpate7r1iu                        0x000055f1ba13be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var n1 = 0\n\
    \    var n2 = 0\n    var n3 = 2\n    var n4 = 0\n    var result = 0\n    for _\
    \ in 4...n {\n        result = n1 + n2 + n3 + n4\n        n1 = n2\n        n2\
    \ = n3\n        n3 = n4\n        n4 = result\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp29jwahg0/tmp29jwahg0.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca9d84ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca9d541b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca9d541988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca9d5407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp29jwahg0                        0x0000558145d631b5 <unavailable> + 4533

    5    libc.so.6                          0x00002aca9da36460 __libc_start_main +
    245

    6    tmp29jwahg0                        0x0000558145d62e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp29jwahg0/tmp29jwahg0.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca9d84ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca9d541b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca9d541988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca9d5407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp29jwahg0                        0x0000558145d631b5 <unavailable> + 4533

    5    libc.so.6                          0x00002aca9da36460 __libc_start_main +
    245

    6    tmp29jwahg0                        0x0000558145d62e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n\
    \    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n \
    \       c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp8le04ky7/tmp8le04ky7.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6003123c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6002e1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6002e1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6002e197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8le04ky7                        0x000055a9501a23b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b600330f460 __libc_start_main +
    245

    6    tmp8le04ky7                        0x000055a9501a1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in\
    \ 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n\
    \    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpbrm0e7kv/tmpbrm0e7kv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cf8b9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cf8894b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cf8894988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cf88937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrm0e7kv                        0x000055e8ad58f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9cf8d89460 __libc_start_main +
    245

    6    tmpbrm0e7kv                        0x000055e8ad58efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in\
    \ 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n\
    \    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpbrm0e7kv/tmpbrm0e7kv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cf8b9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cf8894b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cf8894988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cf88937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrm0e7kv                        0x000055e8ad58f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9cf8d89460 __libc_start_main +
    245

    6    tmpbrm0e7kv                        0x000055e8ad58efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var n1 = 0\n\
    \    var n2 = 0\n    var n3 = 2\n    var n4 = 0\n    var result = 0\n    for _\
    \ in 4...n {\n        result = n1 + n2 + n3 + n4\n        n1 = n2\n        n2\
    \ = n3\n        n3 = n4\n        n4 = result\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        let\
    \ temp = a + b + c + d\n        a = b\n        b = c\n        c = d\n        d\
    \ = temp\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp29jwahg0/tmp29jwahg0.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca9d84ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca9d541b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca9d541988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca9d5407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp29jwahg0                        0x0000558145d631b5 <unavailable> + 4533

    5    libc.so.6                          0x00002aca9da36460 __libc_start_main +
    245

    6    tmp29jwahg0                        0x0000558145d62e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n\
    \    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n \
    \   var k = 0\n    var l = 0\n    var m = 0\n    var o = 0\n    var p = 0\n  \
    \  var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n   \
    \ var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var\
    \ aa = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n    var ae = 0\n   \
    \ var af = 0\n    var ag = 0\n    var ah = 0\n    var ai = 0\n    var aj = 0\n\
    \    var ak = 0\n    var al = 0\n    var am = 0\n    var an = 0\n    var ao =\
    \ 0\n    var ap = 0\n    var aq = 0\n    var ar = 0\n    var as = 0\n    var at\
    \ = 0\n    var au = 0\n    var av = 0\n    var aw = 0\n    var ax = 0\n    var\
    \ ay = 0\n    var az = 0\n    var ba = 0\n    var bb = 0\n    var bc = 0\n   \
    \ var bd = 0\n    var be = 0\n    var bf = 0\n    var bg = 0\n    var bh = 0\n\
    \    var bi = 0\n    var bj = 0\n    var bk = 0\n    var bl = 0\n    var bm =\
    \ 0\n    var bn = 0\n    var bo = 0\n    var bp = 0\n    var bq = 0\n    var br\
    \ = 0\n    var bs = 0\n    var bt = 0\n    var bu = 0\n    var bv = 0\n    var\
    \ bw = 0\n    var bx = 0\n    var by = 0\n    var bz = 0\n    var ca = 0\n   \
    \ var cb = 0\n    var cc = 0\n    var cd = 0\n   \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpws5b5iyx.swift:53:9: error: keyword 'as' cannot be used as an identifier\
    \ here\n    var as = 0\n        ^\n/tmp/tmpws5b5iyx.swift:53:9: note: if this\
    \ name is unavoidable, use backticks to escape it\n    var as = 0\n        ^~\n\
    \        `as`\n/tmp/tmpws5b5iyx.swift:10:9: warning: initialization of variable\
    \ 'a' was never used; consider replacing with assignment to '_' or removing it\n\
    \    var a = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:11:9: warning: initialization\
    \ of variable 'b' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var b = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:12:9: warning:\
    \ initialization of variable 'c' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var c = 2\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:13:9:\
    \ warning: initialization of variable 'd' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var d = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:14:9:\
    \ warning: initialization of variable 'e' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var e = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:15:9:\
    \ warning: initialization of variable 'f' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var f = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:16:9:\
    \ warning: initialization of variable 'g' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var g = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:17:9:\
    \ warning: initialization of variable 'h' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var h = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:18:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:19:9:\
    \ warning: initialization of variable 'j' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var j = 0\n    ~~~~^\n    _\n/tmp/tmpws5b5iyx.swift:20:9:\
    \ warning: initialization of variable 'k' was never used; co"
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp29jwahg0/tmp29jwahg0.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca9d84ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca9d541b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca9d541988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca9d5407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp29jwahg0                        0x0000558145d631b5 <unavailable> + 4533

    5    libc.so.6                          0x00002aca9da36460 __libc_start_main +
    245

    6    tmp29jwahg0                        0x0000558145d62e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in\
    \ 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n\
    \    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpbrm0e7kv/tmpbrm0e7kv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cf8b9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cf8894b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cf8894988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cf88937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrm0e7kv                        0x000055e8ad58f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9cf8d89460 __libc_start_main +
    245

    6    tmpbrm0e7kv                        0x000055e8ad58efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n\
    \    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n \
    \       c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp8le04ky7/tmp8le04ky7.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6003123c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6002e1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6002e1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6002e197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8le04ky7                        0x000055a9501a23b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b600330f460 __libc_start_main +
    245

    6    tmp8le04ky7                        0x000055a9501a1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n\
    \    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n\
    \    for _ in 3...n {\n        e = d\n        d = c\n        c = b + c + d + e\n\
    \        b = a\n        a = e\n    }\n    return c\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpgyxm4n7f/tmpgyxm4n7f.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3daa218c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3da9f0fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3da9f0f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3da9f0e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgyxm4n7f                        0x000055e11f753335 <unavailable> + 4917

    5    libc.so.6                          0x00002b3daa404460 __libc_start_main +
    245

    6    tmpgyxm4n7f                        0x000055e11f752fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n\
    \    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n \
    \       c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp8le04ky7/tmp8le04ky7.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6003123c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6002e1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6002e1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6002e197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8le04ky7                        0x000055a9501a23b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b600330f460 __libc_start_main +
    245

    6    tmp8le04ky7                        0x000055a9501a1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n\
    \    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n \
    \       c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp8le04ky7/tmp8le04ky7.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6003123c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6002e1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6002e1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6002e197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8le04ky7                        0x000055a9501a23b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b600330f460 __libc_start_main +
    245

    6    tmp8le04ky7                        0x000055a9501a1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp29jwahg0/tmp29jwahg0.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca9d84ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca9d541b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca9d541988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca9d5407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp29jwahg0                        0x0000558145d631b5 <unavailable> + 4533

    5    libc.so.6                          0x00002aca9da36460 __libc_start_main +
    245

    6    tmp29jwahg0                        0x0000558145d62e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in\
    \ 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n\
    \    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpbrm0e7kv/tmpbrm0e7kv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cf8b9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cf8894b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cf8894988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cf88937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrm0e7kv                        0x000055e8ad58f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9cf8d89460 __libc_start_main +
    245

    6    tmpbrm0e7kv                        0x000055e8ad58efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var n1 = 0\n\
    \    var n2 = 0\n    var n3 = 2\n    var n4 = 0\n    var n5 = 0\n    for _ in\
    \ 4...n {\n        n5 = n1 + n2 + n3 + n4\n        n1 = n2\n        n2 = n3\n\
    \        n3 = n4\n        n4 = n5\n    }\n    return n5\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in\
    \ 4...n {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n\
    \    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpaiwsz4ek/tmpaiwsz4ek.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad06835cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad068053b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad068053988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0680527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaiwsz4ek                        0x00005558ad92d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad068548460 __libc_start_main +
    245

    6    tmpaiwsz4ek                        0x00005558ad92cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var n1 = 0\n\
    \    var n2 = 0\n    var n3 = 2\n    var n4 = 0\n    var i = 4\n    while i <=\
    \ n {\n        n1 = n2\n        n2 = n3\n        n3 = n4\n        n4 = n1 + n2\
    \ + n3 + n4\n        i += 1\n    }\n    return n4\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp63jvg1ll/tmp63jvg1ll.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac82429fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac823f96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac823f96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac823f957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp63jvg1ll                        0x000055b5160371b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac82448b460 __libc_start_main +
    245

    6    tmp63jvg1ll                        0x000055b516036e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n\
    \    for _ in 4...n {\n        e = a + b + c + d\n        a = b\n        b = c\n\
    \        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in\
    \ 0..<n {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n\
    \    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmp8dts0l17/tmp8dts0l17.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5deadfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5de7d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5de7d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5de7d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8dts0l17                        0x00005651580a3335 <unavailable> + 4917

    5    libc.so.6                          0x00002af5deccb460 __libc_start_main +
    245

    6    tmp8dts0l17                        0x00005651580a2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 0\n    }\n    var n1 = 0\n    var n2 = 0\n    var n3 = 2\n    var n4\
    \ = 0\n    var result = 0\n    for _ in 4...n {\n        result = n1 + n2 + n3\
    \ + n4\n        n1 = n2\n        n2 = n3\n        n3 = n4\n        n4 = result\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp29jwahg0/tmp29jwahg0.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca9d84ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca9d541b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca9d541988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca9d5407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp29jwahg0                        0x0000558145d631b5 <unavailable> + 4533

    5    libc.so.6                          0x00002aca9da36460 __libc_start_main +
    245

    6    tmp29jwahg0                        0x0000558145d62e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbtqm_oyq/tmpbtqm_oyq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ceaccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqm_oyq                        0x000055ebe8ff41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af0cecb8460 __libc_start_main +
    245

    6    tmpbtqm_oyq                        0x000055ebe8ff3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n\
    \    for _ in 3...n {\n        e = d\n        d = c\n        c = b + c + d + e\n\
    \        b = a\n        a = c\n    }\n    return c\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpwu6toqxr/tmpwu6toqxr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b396a766c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b396a45db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b396a45d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b396a45c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwu6toqxr                        0x00005601fd5b8335 <unavailable> + 4917

    5    libc.so.6                          0x00002b396a952460 __libc_start_main +
    245

    6    tmpwu6toqxr                        0x00005601fd5b7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if n == 0\
    \ {\n        return a\n    } else if n == 1 {\n        return b\n    } else if\
    \ n == 2 {\n        return c\n    } else if n == 3 {\n        return d\n    }\n\
    \    for _ in 4...n {\n        let temp = a + b + c + d\n        a = b\n     \
    \   b = c\n        c = d\n        d = temp\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n\
    \    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n \
    \       c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp8le04ky7/tmp8le04ky7.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6003123c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6002e1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6002e1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6002e197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8le04ky7                        0x000055a9501a23b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b600330f460 __libc_start_main +
    245

    6    tmp8le04ky7                        0x000055a9501a1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in\
    \ 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n\
    \    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpbrm0e7kv/tmpbrm0e7kv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cf8b9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cf8894b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cf8894988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cf88937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrm0e7kv                        0x000055e8ad58f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9cf8d89460 __libc_start_main +
    245

    6    tmpbrm0e7kv                        0x000055e8ad58efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n\
    \    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n \
    \       c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp8le04ky7/tmp8le04ky7.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6003123c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6002e1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6002e1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6002e197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8le04ky7                        0x000055a9501a23b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b600330f460 __libc_start_main +
    245

    6    tmp8le04ky7                        0x000055a9501a1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpblvu3055/tmpblvu3055.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5872a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587274db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587274d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587274c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblvu3055                        0x000055963251d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5872c42460 __libc_start_main +
    245

    6    tmpblvu3055                        0x000055963251cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        let\
    \ temp = a + b + c + d\n        a = b\n        b = c\n        c = d\n        d\
    \ = temp\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 2 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmp8ya59cr3/tmp8ya59cr3.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc3301dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc32d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc32d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc32d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ya59cr3                        0x000055c982048335 <unavailable> + 4917

    5    libc.so.6                          0x00002acc33209460 __libc_start_main +
    245

    6    tmp8ya59cr3                        0x000055c982047fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in\
    \ 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n\
    \    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpbrm0e7kv/tmpbrm0e7kv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cf8b9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cf8894b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cf8894988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cf88937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrm0e7kv                        0x000055e8ad58f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9cf8d89460 __libc_start_main +
    245

    6    tmpbrm0e7kv                        0x000055e8ad58efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\nfunc fib4(n: Int) -> Int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        a\
    \ = b\n        b = c\n        c = d\n        d = a + b + c\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpq66uhag7/tmpq66uhag7.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55c518cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55c4e83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55c4e83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55c4e827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq66uhag7                        0x000056064b4943b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b55c5378460 __libc_start_main +
    245

    6    tmpq66uhag7                        0x000056064b493fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028208
