language: swift
name: HumanEval_18_how_many_times
results:
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var search_range = string.startIndex..<string.endIndex\n\
    \    while let range = string.rangeOfString(substring, options: [], range: search_range)\
    \ {\n        count += 1\n        search_range = range.endIndex..<search_range.endIndex\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpe0onathr.swift:6:30: error: value of type 'String' has no member\
    \ 'rangeOfString'\n    while let range = string.rangeOfString(substring, options:\
    \ [], range: search_range) {\n                      ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpe0onathr.swift:8:41:\
    \ error: property 'endIndex' requires that 'String.Index' conform to 'Strideable'\n\
    \        search_range = range.endIndex..<search_range.endIndex\n             \
    \                           ^\nSwift.Range:1:11: note: where 'Bound' = 'String.Index'\n\
    extension Range : Collection, BidirectionalCollection, RandomAccessCollection\
    \ where Bound : Strideable, Bound.Stride : SignedInteger {\n          ^\n/tmp/tmpe0onathr.swift:8:41:\
    \ error: property 'endIndex' requires that 'String.Index.Stride' conform to 'SignedInteger'\n\
    \        search_range = range.endIndex..<search_range.endIndex\n             \
    \                           ^\nSwift.Range:1:11: note: where 'Bound.Stride' =\
    \ 'String.Index.Stride'\nextension Range : Collection, BidirectionalCollection,\
    \ RandomAccessCollection where Bound : Strideable, Bound.Stride : SignedInteger\
    \ {\n          ^\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while true {\n \
    \       let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n        if let range = range {\n           \
    \ count++\n            start = range.startIndex.distanceTo(range.endIndex)\n \
    \       } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5vwpib0e.swift:7:62: error: cannot find 'NSStringCompareOptions'\
    \ in scope\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n                                           \
    \                  ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5vwpib0e.swift:7:28: error:\
    \ value of type 'String' has no member 'rangeOfString'\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                   ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmp5vwpib0e.swift:7:107: error:\
    \ referencing initializer 'init(_:)' on 'Range' requires that 'String.Index' conform\
    \ to 'Strideable'\n        let range = string.rangeOfString(substring, options:\
    \ NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start: string.startIndex.advancedBy(start),\
    \ end: string.endIndex), locale: nil)\n                                      \
    \                                                                    ^\nSwift.Range:1:11:\
    \ note: where 'Bound' = 'String.Index'\nextension Range where Bound : Strideable,\
    \ Bound.Stride : SignedInteger {\n          ^\n/tmp/tmp5vwpib0e.swift:7:183: error:\
    \ extra argument 'end' in call\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                                                                            \
    \                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n\
    /tmp/tmp5vwpib0e.swift:7:152: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), "
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    let length = string.characters.count\n    let subLength\
    \ = substring.characters.count\n    var count = 0\n    var index = 0\n    while\
    \ index < length {\n        let start = string.index(string.startIndex, offsetBy:\
    \ index)\n        let end = string.index(string.startIndex, offsetBy: index +\
    \ subLength)\n        let range = start..<end\n        if string.substring(with:\
    \ range) == substring {\n            count += 1\n            index += subLength\n\
    \        } else {\n            index += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpvtv8q6qw.swift:4:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    let length = string.characters.count\n            \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpvtv8q6qw.swift:5:31: error: 'characters' is unavailable: Please use String\
    \ directly\n    let subLength = substring.characters.count\n                 \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpvtv8q6qw.swift:12:19: error: value of type 'String' has no member\
    \ 'substring'\n        if string.substring(with: range) == substring {\n     \
    \      ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n        count += 1\n        range = r.upperBound..<string.endIndex\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpywpy2f5d.swift:6:26: error: value of type 'String' has no member\
    \ 'range'\n    while let r = string.range(of: substring, options: .caseInsensitive,\
    \ range: range) {\n                  ~~~~~~ ^~~~~\n/tmp/tmpywpy2f5d.swift:6:57:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n                                                       ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n        }\n        index = index.advancedBy(1)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7vmvbcfu.swift:7:19: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp7vmvbcfu.swift:8:18: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            count++\n\
    \                 ^~\n/tmp/tmp7vmvbcfu.swift:9:27: error: value of type 'String.Index'\
    \ has no member 'advancedBy'\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n                    ~~~~~ ^~~~~~~~~~\n/tmp/tmp7vmvbcfu.swift:11:23: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        index = index.advancedBy(1)\n\
    \                ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        let range = string.rangeOfString(substring,\
    \ range: index..<string.endIndex)\n        if let range = range {\n          \
    \  count++\n            index = range.endIndex\n        } else {\n           \
    \ break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpn57vls0x.swift:7:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, range:\
    \ index..<string.endIndex)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpn57vls0x.swift:9:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  count++\n                 ^~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n        count += 1\n        range = r.upperBound..<string.endIndex\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpywpy2f5d.swift:6:26: error: value of type 'String' has no member\
    \ 'range'\n    while let r = string.range(of: substring, options: .caseInsensitive,\
    \ range: range) {\n                  ~~~~~~ ^~~~~\n/tmp/tmpywpy2f5d.swift:6:57:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n                                                       ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count)\n\
    \        } else {\n            index = index.advancedBy(1)\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjgewudje.swift:7:19: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpjgewudje.swift:8:18: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            count++\n\
    \                 ^~\n/tmp/tmpjgewudje.swift:9:27: error: value of type 'String.Index'\
    \ has no member 'advancedBy'\n            index = index.advancedBy(substring.characters.count)\n\
    \                    ~~~~~ ^~~~~~~~~~\n/tmp/tmpjgewudje.swift:11:27: error: value\
    \ of type 'String.Index' has no member 'advancedBy'\n            index = index.advancedBy(1)\n\
    \                    ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var searchRange = string.startIndex..<string.endIndex\n\
    \    while let foundRange = string.range(of: substring, options: [], range: searchRange)\
    \ {\n        searchRange = Range(uncheckedBounds: (lower: foundRange.upperBound,\
    \ upper: string.endIndex))\n        count += 1\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpxbz7xev8.swift:6:35: error: value of type 'String' has no member\
    \ 'range'\n    while let foundRange = string.range(of: substring, options: [],\
    \ range: searchRange) {\n                           ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5ts7spdu.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: Range(uncheckedBounds: (lower: string.index(string.startIndex, offsetBy:\
    \ start), upper: string.endIndex)), locale: nil) {\n                      ~~~~~~\
    \ ^~~~~\n/tmp/tmp5ts7spdu.swift:6:61: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n    while let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: Range(uncheckedBounds: (lower: string.index(string.startIndex,\
    \ offsetBy: start), upper: string.endIndex)), locale: nil) {\n               \
    \                                            ~^~~~~~~~~~~~~~~\n/tmp/tmp5ts7spdu.swift:6:200:\
    \ error: 'nil' requires a contextual type\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: Range(uncheckedBounds: (lower:\
    \ string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n                                                           \
    \                                                                            \
    \                                                                ^\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while true {\n \
    \       let range = string.rangeOfString(substring, options: [], range: Range(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \       if let range = range {\n            count += 1\n            start = range.startIndex.distanceTo(range.endIndex)\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp430dhrtx.swift:7:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, options:\
    \ [], range: Range(start: string.startIndex.advancedBy(start), end: string.endIndex),\
    \ locale: nil)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmp430dhrtx.swift:7:73:\
    \ error: generic parameter 'Bound' could not be inferred\n        let range =\
    \ string.rangeOfString(substring, options: [], range: Range(start: string.startIndex.advancedBy(start),\
    \ end: string.endIndex), locale: nil)\n                                      \
    \                                  ^\n/tmp/tmp430dhrtx.swift:7:73: note: explicitly\
    \ specify the generic arguments to fix this issue\n        let range = string.rangeOfString(substring,\
    \ options: [], range: Range(start: string.startIndex.advancedBy(start), end: string.endIndex),\
    \ locale: nil)\n                                                             \
    \           ^\n                                                              \
    \               <<#Bound: Comparable#>>\n/tmp/tmp430dhrtx.swift:7:135: error:\
    \ extra argument 'end' in call\n        let range = string.rangeOfString(substring,\
    \ options: [], range: Range(start: string.startIndex.advancedBy(start), end: string.endIndex),\
    \ locale: nil)\n                                                             \
    \                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n\
    /tmp/tmp430dhrtx.swift:7:104: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n        let range = string.rangeOfString(substring, options: [],\
    \ range: Range(start: string.startIndex.advancedBy(start), end: string.endIndex),\
    \ locale: nil)\n                                                             \
    \                        ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp430dhrtx.swift:7:154:\
    \ error: 'nil' requires a contextual type\n        let range = string.rangeOfString(substring,\
    \ options: [], range: Range(start: string.startIndex.advancedBy(start), end: string.endIndex),\
    \ locale: nil)\n                                                        "
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = 0\n    while index < string.count\
    \ {\n        let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: index..<string.endIndex, locale: nil)\n        if let range = range {\n\
    \            index = range.upperBound\n            count += 1\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp9v4sqjef.swift:7:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: index..<string.endIndex, locale: nil)\n                    ~~~~~~ ^~~~~\n\
    /tmp/tmp9v4sqjef.swift:7:59: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n        let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: index..<string.endIndex, locale: nil)\n  \
    \                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmp9v4sqjef.swift:7:116:\
    \ error: 'nil' requires a contextual type\n        let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: index..<string.endIndex, locale:\
    \ nil)\n                                                                     \
    \                                              ^\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.hasPrefix(substring, startingAt:\
    \ index) {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphceq1f6e.swift:7:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.hasPrefix(substring, startingAt:\
    \ index) {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphceq1f6e.swift:7:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while start < string.characters.count\
    \ {\n        if let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex, locale: nil) {\n            count += 1\n   \
    \         start = range.upperBound\n        } else {\n            break\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp6sv089_i.swift:6:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    while start < string.characters.count {\n         \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp6sv089_i.swift:7:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex, locale: nil) {\n                       ~~~~~~\
    \ ^~~~~\n/tmp/tmp6sv089_i.swift:7:62: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n        if let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: start..<string.endIndex, locale: nil) {\n\
    \                                                            ~^~~~~~~~~~~~~~~\n\
    /tmp/tmp6sv089_i.swift:7:119: error: 'nil' requires a contextual type\n      \
    \  if let range = string.range(of: substring, options: .caseInsensitive, range:\
    \ start..<string.endIndex, locale: nil) {\n                                  \
    \                                                                            \
    \        ^\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while true {\n \
    \       let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n        if let range = range {\n           \
    \ count++\n            start = start + range.startIndex.distanceTo(range.endIndex)\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4iu51qmt.swift:7:62: error: cannot find 'NSStringCompareOptions'\
    \ in scope\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n                                           \
    \                  ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4iu51qmt.swift:7:28: error:\
    \ value of type 'String' has no member 'rangeOfString'\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                   ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmp4iu51qmt.swift:7:107: error:\
    \ referencing initializer 'init(_:)' on 'Range' requires that 'String.Index' conform\
    \ to 'Strideable'\n        let range = string.rangeOfString(substring, options:\
    \ NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start: string.startIndex.advancedBy(start),\
    \ end: string.endIndex), locale: nil)\n                                      \
    \                                                                    ^\nSwift.Range:1:11:\
    \ note: where 'Bound' = 'String.Index'\nextension Range where Bound : Strideable,\
    \ Bound.Stride : SignedInteger {\n          ^\n/tmp/tmp4iu51qmt.swift:7:183: error:\
    \ extra argument 'end' in call\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                                                                            \
    \                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n\
    /tmp/tmp4iu51qmt.swift:7:152: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), "
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.hasPrefix(substring, startingAt:\
    \ index) {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphceq1f6e.swift:7:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: start..<string.endIndex)\
    \ {\n        count += 1\n        start = range.upperBound\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjfmi0cof.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex) {\n                      ~~~~~~ ^~~~~\n/tmp/tmpjfmi0cof.swift:6:61:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex) {\n                                        \
    \                   ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    var end = substring.count\n\
    \    while end <= string.count {\n        if string[start..<end] == substring\
    \ {\n            count += 1\n        }\n        start += 1\n        end += 1\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgmo357uh.swift:8:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        if string[start..<end] == substring {\n           ^~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.distance(from: index, to:\
    \ string.endIndex) >= substring.count {\n            let endIndex = string.index(index,\
    \ offsetBy: substring.count)\n            if string[index..<endIndex] == substring\
    \ {\n                count += 1\n                index = endIndex\n          \
    \  } else {\n                index = string.index(after: index)\n            }\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmp26nqlqil/tmp26nqlqil.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae020972c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae020669b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae020669988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0206687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp26nqlqil                        0x000055e093001944 <unavailable> + 6468

    5    libc.so.6                          0x00002ae020b5e460 __libc_start_main +
    245

    6    tmp26nqlqil                        0x000055e0930013b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var startIndex = string.startIndex\n\
    \    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n        count += 1\n        startIndex = range.upperBound\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpexz6qz_d.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    var end = 0\n  \
    \  while start < string.count {\n        end = string.index(string.startIndex,\
    \ offsetBy: start)\n        if let range = string.range(of: substring, options:\
    \ .caseInsensitive, range: end..<string.endIndex, locale: nil) {\n           \
    \ count += 1\n            start = string.distance(from: string.startIndex, to:\
    \ range.upperBound)\n        } else {\n            break\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpuxqcqr19.swift:8:22: error: cannot assign value of type 'String.Index'\
    \ to type 'Int'\n        end = string.index(string.startIndex, offsetBy: start)\n\
    \              ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpuxqcqr19.swift:9:31:\
    \ error: value of type 'String' has no member 'range'\n        if let range =\
    \ string.range(of: substring, options: .caseInsensitive, range: end..<string.endIndex,\
    \ locale: nil) {\n                       ~~~~~~ ^~~~~\n/tmp/tmpuxqcqr19.swift:9:62:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \        if let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: end..<string.endIndex, locale: nil) {\n                             \
    \                               ~^~~~~~~~~~~~~~~\n/tmp/tmpuxqcqr19.swift:9:117:\
    \ error: 'nil' requires a contextual type\n        if let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: end..<string.endIndex, locale:\
    \ nil) {\n                                                                   \
    \                                                 ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n        count += 1\n        range = r.upperBound..<string.endIndex\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpywpy2f5d.swift:6:26: error: value of type 'String' has no member\
    \ 'range'\n    while let r = string.range(of: substring, options: .caseInsensitive,\
    \ range: range) {\n                  ~~~~~~ ^~~~~\n/tmp/tmpywpy2f5d.swift:6:57:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n                                                       ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.rangeOfString(substring,\
    \ range: Range<String.Index>(start: index, end: string.endIndex)) != nil {\n \
    \           count++\n            index = index.advancedBy(1)\n        } else {\n\
    \            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpho3ip4tb.swift:7:19: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        if string.rangeOfString(substring, range: Range<String.Index>(start:\
    \ index, end: string.endIndex)) != nil {\n           ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpho3ip4tb.swift:7:51:\
    \ error: referencing initializer 'init(_:)' on 'Range' requires that 'String.Index'\
    \ conform to 'Strideable'\n        if string.rangeOfString(substring, range: Range<String.Index>(start:\
    \ index, end: string.endIndex)) != nil {\n                                   \
    \               ^\nSwift.Range:1:11: note: where 'Bound' = 'String.Index'\nextension\
    \ Range where Bound : Strideable, Bound.Stride : SignedInteger {\n          ^\n\
    /tmp/tmpho3ip4tb.swift:7:97: error: extra argument 'end' in call\n        if string.rangeOfString(substring,\
    \ range: Range<String.Index>(start: index, end: string.endIndex)) != nil {\n \
    \                                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n\
    /tmp/tmpho3ip4tb.swift:7:78: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'ClosedRange<String.Index>'\n        if string.rangeOfString(substring,\
    \ range: Range<String.Index>(start: index, end: string.endIndex)) != nil {\n \
    \                                                                            ^\n\
    /tmp/tmpho3ip4tb.swift:8:18: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n            count++\n                 ^~\n/tmp/tmpho3ip4tb.swift:9:27:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ index = index.advancedBy(1)\n                    ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count)\n\
    \        } else {\n            index = index.advancedBy(1)\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjgewudje.swift:7:19: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpjgewudje.swift:8:18: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            count++\n\
    \                 ^~\n/tmp/tmpjgewudje.swift:9:27: error: value of type 'String.Index'\
    \ has no member 'advancedBy'\n            index = index.advancedBy(substring.characters.count)\n\
    \                    ~~~~~ ^~~~~~~~~~\n/tmp/tmpjgewudje.swift:11:27: error: value\
    \ of type 'String.Index' has no member 'advancedBy'\n            index = index.advancedBy(1)\n\
    \                    ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: [], range: range) {\n\
    \        count += 1\n        range = r.upperBound..<string.endIndex\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8mrqnizh.swift:6:26: error: value of type 'String' has no member\
    \ 'range'\n    while let r = string.range(of: substring, options: [], range: range)\
    \ {\n                  ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.hasPrefix(substring, startingAt:\
    \ index) {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphceq1f6e.swift:7:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index != string.endIndex {\n        if string.hasPrefix(substring, startingAt:\
    \ index) {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqa_fdrbt.swift:7:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n        }\n        index = index.advancedBy(1)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7vmvbcfu.swift:7:19: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp7vmvbcfu.swift:8:18: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            count++\n\
    \                 ^~\n/tmp/tmp7vmvbcfu.swift:9:27: error: value of type 'String.Index'\
    \ has no member 'advancedBy'\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n                    ~~~~~ ^~~~~~~~~~\n/tmp/tmp7vmvbcfu.swift:11:23: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        index = index.advancedBy(1)\n\
    \                ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.hasPrefix(substring, startingAt:\
    \ index) {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphceq1f6e.swift:7:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.distance(from: index, to:\
    \ string.endIndex) >= substring.count {\n            let start = string.index(index,\
    \ offsetBy: 0)\n            let end = string.index(index, offsetBy: substring.count)\n\
    \            let range = start..<end\n            if string[range] == substring\
    \ {\n                count += 1\n                index = string.index(index, offsetBy:\
    \ substring.count)\n            } else {\n                index = string.index(after:\
    \ index)\n            }\n        } else {\n            break\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmp3fm0q7qq/tmp3fm0q7qq.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b985313bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9852e32b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9852e32988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9852e317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3fm0q7qq                        0x000055672adba944 <unavailable> + 6468

    5    libc.so.6                          0x00002b9853327460 __libc_start_main +
    245

    6    tmp3fm0q7qq                        0x000055672adba3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var search_range = string.startIndex..<string.endIndex\n\
    \    while let range = string.rangeOfString(substring, options: nil, range: search_range,\
    \ locale: nil) {\n        count += 1\n        search_range = range.endIndex..<search_range.endIndex\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3qqvy5bn.swift:6:30: error: value of type 'String' has no member\
    \ 'rangeOfString'\n    while let range = string.rangeOfString(substring, options:\
    \ nil, range: search_range, locale: nil) {\n                      ~~~~~~ ^~~~~~~~~~~~~\n\
    /tmp/tmp3qqvy5bn.swift:6:64: error: 'nil' requires a contextual type\n    while\
    \ let range = string.rangeOfString(substring, options: nil, range: search_range,\
    \ locale: nil) {\n                                                           \
    \    ^\n/tmp/tmp3qqvy5bn.swift:6:98: error: 'nil' requires a contextual type\n\
    \    while let range = string.rangeOfString(substring, options: nil, range: search_range,\
    \ locale: nil) {\n                                                           \
    \                                      ^\n/tmp/tmp3qqvy5bn.swift:8:41: error:\
    \ property 'endIndex' requires that 'String.Index' conform to 'Strideable'\n \
    \       search_range = range.endIndex..<search_range.endIndex\n              \
    \                          ^\nSwift.Range:1:11: note: where 'Bound' = 'String.Index'\n\
    extension Range : Collection, BidirectionalCollection, RandomAccessCollection\
    \ where Bound : Strideable, Bound.Stride : SignedInteger {\n          ^\n/tmp/tmp3qqvy5bn.swift:8:41:\
    \ error: property 'endIndex' requires that 'String.Index.Stride' conform to 'SignedInteger'\n\
    \        search_range = range.endIndex..<search_range.endIndex\n             \
    \                           ^\nSwift.Range:1:11: note: where 'Bound.Stride' =\
    \ 'String.Index.Stride'\nextension Range : Collection, BidirectionalCollection,\
    \ RandomAccessCollection where Bound : Strideable, Bound.Stride : SignedInteger\
    \ {\n          ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: start..<string.endIndex)\
    \ {\n        count += 1\n        start = range.upperBound\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjfmi0cof.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex) {\n                      ~~~~~~ ^~~~~\n/tmp/tmpjfmi0cof.swift:6:61:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex) {\n                                        \
    \                   ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n        count += 1\n        range = r.upperBound..<string.endIndex\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpywpy2f5d.swift:6:26: error: value of type 'String' has no member\
    \ 'range'\n    while let r = string.range(of: substring, options: .caseInsensitive,\
    \ range: range) {\n                  ~~~~~~ ^~~~~\n/tmp/tmpywpy2f5d.swift:6:57:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n                                                       ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5ts7spdu.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: Range(uncheckedBounds: (lower: string.index(string.startIndex, offsetBy:\
    \ start), upper: string.endIndex)), locale: nil) {\n                      ~~~~~~\
    \ ^~~~~\n/tmp/tmp5ts7spdu.swift:6:61: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n    while let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: Range(uncheckedBounds: (lower: string.index(string.startIndex,\
    \ offsetBy: start), upper: string.endIndex)), locale: nil) {\n               \
    \                                            ~^~~~~~~~~~~~~~~\n/tmp/tmp5ts7spdu.swift:6:200:\
    \ error: 'nil' requires a contextual type\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: Range(uncheckedBounds: (lower:\
    \ string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n                                                           \
    \                                                                            \
    \                                                                ^\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: start..<string.endIndex)\
    \ {\n        count += 1\n        start = range.upperBound\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjfmi0cof.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex) {\n                      ~~~~~~ ^~~~~\n/tmp/tmpjfmi0cof.swift:6:61:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex) {\n                                        \
    \                   ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5ts7spdu.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: Range(uncheckedBounds: (lower: string.index(string.startIndex, offsetBy:\
    \ start), upper: string.endIndex)), locale: nil) {\n                      ~~~~~~\
    \ ^~~~~\n/tmp/tmp5ts7spdu.swift:6:61: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n    while let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: Range(uncheckedBounds: (lower: string.index(string.startIndex,\
    \ offsetBy: start), upper: string.endIndex)), locale: nil) {\n               \
    \                                            ~^~~~~~~~~~~~~~~\n/tmp/tmp5ts7spdu.swift:6:200:\
    \ error: 'nil' requires a contextual type\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: Range(uncheckedBounds: (lower:\
    \ string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n                                                           \
    \                                                                            \
    \                                                                ^\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5ts7spdu.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: Range(uncheckedBounds: (lower: string.index(string.startIndex, offsetBy:\
    \ start), upper: string.endIndex)), locale: nil) {\n                      ~~~~~~\
    \ ^~~~~\n/tmp/tmp5ts7spdu.swift:6:61: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n    while let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: Range(uncheckedBounds: (lower: string.index(string.startIndex,\
    \ offsetBy: start), upper: string.endIndex)), locale: nil) {\n               \
    \                                            ~^~~~~~~~~~~~~~~\n/tmp/tmp5ts7spdu.swift:6:200:\
    \ error: 'nil' requires a contextual type\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: Range(uncheckedBounds: (lower:\
    \ string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n                                                           \
    \                                                                            \
    \                                                                ^\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while start < string.count\
    \ {\n        let range = string.range(of: substring, options: .literal, range:\
    \ start..<string.endIndex, locale: nil)\n        if let range = range {\n    \
    \        count += 1\n            start = range.upperBound\n        } else {\n\
    \            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpfegunn7h.swift:7:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, options: .literal,\
    \ range: start..<string.endIndex, locale: nil)\n                    ~~~~~~ ^~~~~\n\
    /tmp/tmpfegunn7h.swift:7:59: error: cannot infer contextual base in reference\
    \ to member 'literal'\n        let range = string.range(of: substring, options:\
    \ .literal, range: start..<string.endIndex, locale: nil)\n                   \
    \                                      ~^~~~~~~\n/tmp/tmpfegunn7h.swift:7:108:\
    \ error: 'nil' requires a contextual type\n        let range = string.range(of:\
    \ substring, options: .literal, range: start..<string.endIndex, locale: nil)\n\
    \                                                                            \
    \                               ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: [], range: Range(uncheckedBounds: (lower:\
    \ string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3ivvzyz_.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: [], range:\
    \ Range(uncheckedBounds: (lower: string.index(string.startIndex, offsetBy: start),\
    \ upper: string.endIndex)), locale: nil) {\n                      ~~~~~~ ^~~~~\n\
    /tmp/tmp3ivvzyz_.swift:6:186: error: 'nil' requires a contextual type\n    while\
    \ let range = string.range(of: substring, options: [], range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n                                                           \
    \                                                                            \
    \                                                  ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: start..<string.endIndex)\
    \ {\n        count += 1\n        start = range.upperBound\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjfmi0cof.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex) {\n                      ~~~~~~ ^~~~~\n/tmp/tmpjfmi0cof.swift:6:61:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex) {\n                                        \
    \                   ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while start < string.count\
    \ {\n        if let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex) {\n            count += 1\n            start\
    \ = range.upperBound\n        } else {\n            break\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2kgv6acq.swift:7:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex) {\n                       ~~~~~~ ^~~~~\n/tmp/tmp2kgv6acq.swift:7:62:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \        if let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex) {\n                                        \
    \                    ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    let length = string.count\n\
    \    let sublength = substring.count\n    while start < length {\n        let\
    \ range = string.range(of: substring, options: .caseInsensitive, range: start..<length,\
    \ locale: nil)\n        if range != nil {\n            count += 1\n          \
    \  start = range!.upperBound\n        } else {\n            break\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmph1d2slxy.swift:9:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<length, locale: nil)\n                    ~~~~~~ ^~~~~\n/tmp/tmph1d2slxy.swift:9:59:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \        let range = string.range(of: substring, options: .caseInsensitive, range:\
    \ start..<length, locale: nil)\n                                             \
    \            ~^~~~~~~~~~~~~~~\n/tmp/tmph1d2slxy.swift:9:107: error: 'nil' requires\
    \ a contextual type\n        let range = string.range(of: substring, options:\
    \ .caseInsensitive, range: start..<length, locale: nil)\n                    \
    \                                                                            \
    \          ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while start < string.count\
    \ {\n        if let range = string.range(of: substring, options: .literal, range:\
    \ start..<string.endIndex, locale: nil) {\n            count += 1\n          \
    \  start = range.upperBound\n        } else {\n            break\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpnzk1o52d.swift:7:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, options: .literal,\
    \ range: start..<string.endIndex, locale: nil) {\n                       ~~~~~~\
    \ ^~~~~\n/tmp/tmpnzk1o52d.swift:7:62: error: cannot infer contextual base in reference\
    \ to member 'literal'\n        if let range = string.range(of: substring, options:\
    \ .literal, range: start..<string.endIndex, locale: nil) {\n                 \
    \                                           ~^~~~~~~\n/tmp/tmpnzk1o52d.swift:7:111:\
    \ error: 'nil' requires a contextual type\n        if let range = string.range(of:\
    \ substring, options: .literal, range: start..<string.endIndex, locale: nil) {\n\
    \                                                                            \
    \                                  ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.distance(from: index, to:\
    \ string.endIndex) >= substring.count {\n            let endIndex = string.index(index,\
    \ offsetBy: substring.count)\n            if string[index..<endIndex] == substring\
    \ {\n                count += 1\n                index = endIndex\n          \
    \  } else {\n                index = string.index(after: index)\n            }\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmpew5za82i/tmpew5za82i.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac414b61c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac414858b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac414858988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4148577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpew5za82i                        0x000055f128575944 <unavailable> + 6468

    5    libc.so.6                          0x00002ac414d4d460 __libc_start_main +
    245

    6    tmpew5za82i                        0x000055f1285753b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while true {\n \
    \       let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n        if let range = range {\n           \
    \ count += 1\n            start = range.startIndex.distanceTo(range.endIndex)\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpc6ut62yt.swift:7:62: error: cannot find 'NSStringCompareOptions'\
    \ in scope\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n                                           \
    \                  ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpc6ut62yt.swift:7:28: error:\
    \ value of type 'String' has no member 'rangeOfString'\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                   ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpc6ut62yt.swift:7:107: error:\
    \ referencing initializer 'init(_:)' on 'Range' requires that 'String.Index' conform\
    \ to 'Strideable'\n        let range = string.rangeOfString(substring, options:\
    \ NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start: string.startIndex.advancedBy(start),\
    \ end: string.endIndex), locale: nil)\n                                      \
    \                                                                    ^\nSwift.Range:1:11:\
    \ note: where 'Bound' = 'String.Index'\nextension Range where Bound : Strideable,\
    \ Bound.Stride : SignedInteger {\n          ^\n/tmp/tmpc6ut62yt.swift:7:183: error:\
    \ extra argument 'end' in call\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                                                                            \
    \                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n\
    /tmp/tmpc6ut62yt.swift:7:152: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), "
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count)\n\
    \        } else {\n            index = index.advancedBy(1)\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjgewudje.swift:7:19: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpjgewudje.swift:8:18: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            count++\n\
    \                 ^~\n/tmp/tmpjgewudje.swift:9:27: error: value of type 'String.Index'\
    \ has no member 'advancedBy'\n            index = index.advancedBy(substring.characters.count)\n\
    \                    ~~~~~ ^~~~~~~~~~\n/tmp/tmpjgewudje.swift:11:27: error: value\
    \ of type 'String.Index' has no member 'advancedBy'\n            index = index.advancedBy(1)\n\
    \                    ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count)\n\
    \        } else {\n            index = index.advancedBy(1)\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjgewudje.swift:7:19: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpjgewudje.swift:8:18: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            count++\n\
    \                 ^~\n/tmp/tmpjgewudje.swift:9:27: error: value of type 'String.Index'\
    \ has no member 'advancedBy'\n            index = index.advancedBy(substring.characters.count)\n\
    \                    ~~~~~ ^~~~~~~~~~\n/tmp/tmpjgewudje.swift:11:27: error: value\
    \ of type 'String.Index' has no member 'advancedBy'\n            index = index.advancedBy(1)\n\
    \                    ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n        }\n        index = index.advancedBy(1)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7vmvbcfu.swift:7:19: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp7vmvbcfu.swift:8:18: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            count++\n\
    \                 ^~\n/tmp/tmp7vmvbcfu.swift:9:27: error: value of type 'String.Index'\
    \ has no member 'advancedBy'\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n                    ~~~~~ ^~~~~~~~~~\n/tmp/tmp7vmvbcfu.swift:11:23: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        index = index.advancedBy(1)\n\
    \                ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while true {\n \
    \       let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n        if let range = range {\n           \
    \ count += 1\n            start = range.startIndex.distanceTo(range.endIndex)\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpc6ut62yt.swift:7:62: error: cannot find 'NSStringCompareOptions'\
    \ in scope\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n                                           \
    \                  ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpc6ut62yt.swift:7:28: error:\
    \ value of type 'String' has no member 'rangeOfString'\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                   ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpc6ut62yt.swift:7:107: error:\
    \ referencing initializer 'init(_:)' on 'Range' requires that 'String.Index' conform\
    \ to 'Strideable'\n        let range = string.rangeOfString(substring, options:\
    \ NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start: string.startIndex.advancedBy(start),\
    \ end: string.endIndex), locale: nil)\n                                      \
    \                                                                    ^\nSwift.Range:1:11:\
    \ note: where 'Bound' = 'String.Index'\nextension Range where Bound : Strideable,\
    \ Bound.Stride : SignedInteger {\n          ^\n/tmp/tmpc6ut62yt.swift:7:183: error:\
    \ extra argument 'end' in call\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                                                                            \
    \                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n\
    /tmp/tmpc6ut62yt.swift:7:152: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), "
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: start..<string.endIndex)\
    \ {\n        count += 1\n        start = range.upperBound\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjfmi0cof.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex) {\n                      ~~~~~~ ^~~~~\n/tmp/tmpjfmi0cof.swift:6:61:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex) {\n                                        \
    \                   ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5ts7spdu.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: Range(uncheckedBounds: (lower: string.index(string.startIndex, offsetBy:\
    \ start), upper: string.endIndex)), locale: nil) {\n                      ~~~~~~\
    \ ^~~~~\n/tmp/tmp5ts7spdu.swift:6:61: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n    while let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: Range(uncheckedBounds: (lower: string.index(string.startIndex,\
    \ offsetBy: start), upper: string.endIndex)), locale: nil) {\n               \
    \                                            ~^~~~~~~~~~~~~~~\n/tmp/tmp5ts7spdu.swift:6:200:\
    \ error: 'nil' requires a contextual type\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: Range(uncheckedBounds: (lower:\
    \ string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n                                                           \
    \                                                                            \
    \                                                                ^\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        start = string.distance(from: string.startIndex, to:\
    \ range.upperBound)\n        count += 1\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2nyx3sm5.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: Range(uncheckedBounds: (lower: string.index(string.startIndex, offsetBy:\
    \ start), upper: string.endIndex)), locale: nil) {\n                      ~~~~~~\
    \ ^~~~~\n/tmp/tmp2nyx3sm5.swift:6:61: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n    while let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: Range(uncheckedBounds: (lower: string.index(string.startIndex,\
    \ offsetBy: start), upper: string.endIndex)), locale: nil) {\n               \
    \                                            ~^~~~~~~~~~~~~~~\n/tmp/tmp2nyx3sm5.swift:6:200:\
    \ error: 'nil' requires a contextual type\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: Range(uncheckedBounds: (lower:\
    \ string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n                                                           \
    \                                                                            \
    \                                                                ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n        count += 1\n        range = r.upperBound..<string.endIndex\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpywpy2f5d.swift:6:26: error: value of type 'String' has no member\
    \ 'range'\n    while let r = string.range(of: substring, options: .caseInsensitive,\
    \ range: range) {\n                  ~~~~~~ ^~~~~\n/tmp/tmpywpy2f5d.swift:6:57:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n                                                       ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while start < string.count\
    \ {\n        if let range = string.range(of: substring, options: .literal, range:\
    \ start..<string.endIndex, locale: nil) {\n            count += 1\n          \
    \  start = range.upperBound\n        } else {\n            break\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpnzk1o52d.swift:7:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, options: .literal,\
    \ range: start..<string.endIndex, locale: nil) {\n                       ~~~~~~\
    \ ^~~~~\n/tmp/tmpnzk1o52d.swift:7:62: error: cannot infer contextual base in reference\
    \ to member 'literal'\n        if let range = string.range(of: substring, options:\
    \ .literal, range: start..<string.endIndex, locale: nil) {\n                 \
    \                                           ~^~~~~~~\n/tmp/tmpnzk1o52d.swift:7:111:\
    \ error: 'nil' requires a contextual type\n        if let range = string.range(of:\
    \ substring, options: .literal, range: start..<string.endIndex, locale: nil) {\n\
    \                                                                            \
    \                                  ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var searchRange = string.startIndex..<string.endIndex\n\
    \    while let foundRange = string.range(of: substring, options: [], range: searchRange)\
    \ {\n        count += 1\n        searchRange = Range(uncheckedBounds: (lower:\
    \ foundRange.upperBound, upper: searchRange.upperBound))\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpsn8dn7up.swift:6:35: error: value of type 'String' has no member\
    \ 'range'\n    while let foundRange = string.range(of: substring, options: [],\
    \ range: searchRange) {\n                           ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.distance(from: index, to:\
    \ string.endIndex) >= substring.count {\n            let endIndex = string.index(index,\
    \ offsetBy: substring.count)\n            if string[index..<endIndex] == substring\
    \ {\n                count += 1\n                index = endIndex\n          \
    \  } else {\n                index = string.index(after: index)\n            }\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmp26nqlqil/tmp26nqlqil.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae020972c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae020669b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae020669988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0206687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp26nqlqil                        0x000055e093001944 <unavailable> + 6468

    5    libc.so.6                          0x00002ae020b5e460 __libc_start_main +
    245

    6    tmp26nqlqil                        0x000055e0930013b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while start < string.count\
    \ {\n        if let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex, locale: nil) {\n            count += 1\n   \
    \         start = range.upperBound\n        } else {\n            break\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpka80mbda.swift:7:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex, locale: nil) {\n                       ~~~~~~\
    \ ^~~~~\n/tmp/tmpka80mbda.swift:7:62: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n        if let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: start..<string.endIndex, locale: nil) {\n\
    \                                                            ~^~~~~~~~~~~~~~~\n\
    /tmp/tmpka80mbda.swift:7:119: error: 'nil' requires a contextual type\n      \
    \  if let range = string.range(of: substring, options: .caseInsensitive, range:\
    \ start..<string.endIndex, locale: nil) {\n                                  \
    \                                                                            \
    \        ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if let range = string.range(of: substring,\
    \ range: index..<string.endIndex) {\n            count += 1\n            index\
    \ = range.upperBound\n        } else {\n            break\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpfvk9yoai.swift:7:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n                       ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var startIndex = string.startIndex\n\
    \    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n        count += 1\n        startIndex = range.upperBound\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpexz6qz_d.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    let length = string.characters.count\n    let sublength\
    \ = substring.characters.count\n    var count = 0\n    for i in 0..<length {\n\
    \        if i + sublength <= length {\n            let start = string.index(string.startIndex,\
    \ offsetBy: i)\n            let end = string.index(string.startIndex, offsetBy:\
    \ i + sublength)\n            let range = start..<end\n            if string.substring(with:\
    \ range) == substring {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpy4izfkhe.swift:4:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    let length = string.characters.count\n            \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpy4izfkhe.swift:5:31: error: 'characters' is unavailable: Please use String\
    \ directly\n    let sublength = substring.characters.count\n                 \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpy4izfkhe.swift:12:23: error: value of type 'String' has no member\
    \ 'substring'\n            if string.substring(with: range) == substring {\n \
    \              ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: string.index(string.startIndex,\
    \ offsetBy: start)..<string.endIndex, locale: nil) {\n        count += 1\n   \
    \     start = string.distance(from: string.startIndex, to: range.upperBound)\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp9624cdjs.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: string.index(string.startIndex, offsetBy: start)..<string.endIndex, locale:\
    \ nil) {\n                      ~~~~~~ ^~~~~\n/tmp/tmp9624cdjs.swift:6:61: error:\
    \ cannot infer contextual base in reference to member 'caseInsensitive'\n    while\
    \ let range = string.range(of: substring, options: .caseInsensitive, range: string.index(string.startIndex,\
    \ offsetBy: start)..<string.endIndex, locale: nil) {\n                       \
    \                                    ~^~~~~~~~~~~~~~~\n/tmp/tmp9624cdjs.swift:6:161:\
    \ error: 'nil' requires a contextual type\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: string.index(string.startIndex,\
    \ offsetBy: start)..<string.endIndex, locale: nil) {\n                       \
    \                                                                            \
    \                                                             ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while true {\n \
    \       let range = string.rangeOfString(substring, options: nil, range: Range(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \       if let range = range {\n            count += 1\n            start = range.startIndex.distanceTo(range.endIndex)\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpaf5b5_md.swift:7:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, options:\
    \ nil, range: Range(start: string.startIndex.advancedBy(start), end: string.endIndex),\
    \ locale: nil)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpaf5b5_md.swift:7:62:\
    \ error: 'nil' requires a contextual type\n        let range = string.rangeOfString(substring,\
    \ options: nil, range: Range(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n                                           \
    \                  ^\n/tmp/tmpaf5b5_md.swift:7:136: error: extra argument 'end'\
    \ in call\n        let range = string.rangeOfString(substring, options: nil, range:\
    \ Range(start: string.startIndex.advancedBy(start), end: string.endIndex), locale:\
    \ nil)\n                                                                     \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n\
    /tmp/tmpaf5b5_md.swift:7:74: error: generic parameter 'Bound' could not be inferred\n\
    \        let range = string.rangeOfString(substring, options: nil, range: Range(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                                                                        ^\n/tmp/tmpaf5b5_md.swift:7:74:\
    \ note: explicitly specify the generic arguments to fix this issue\n        let\
    \ range = string.rangeOfString(substring, options: nil, range: Range(start: string.startIndex.advancedBy(start),\
    \ end: string.endIndex), locale: nil)\n                                      \
    \                                   ^\n                                      \
    \                                        <<#Bound: Comparable#>>\n/tmp/tmpaf5b5_md.swift:7:105:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        let\
    \ range = string.rangeOfString(substring, options: nil, range: Range(start: string.startIndex.advancedBy(start),\
    \ end: string.endIndex), locale: nil)\n                                      \
    \                                                ~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: start..<string.endIndex)\
    \ {\n        count += 1\n        start = range.upperBound\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjfmi0cof.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex) {\n                      ~~~~~~ ^~~~~\n/tmp/tmpjfmi0cof.swift:6:61:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex) {\n                                        \
    \                   ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n        }\n        index = index.advancedBy(1)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7vmvbcfu.swift:7:19: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp7vmvbcfu.swift:8:18: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            count++\n\
    \                 ^~\n/tmp/tmp7vmvbcfu.swift:9:27: error: value of type 'String.Index'\
    \ has no member 'advancedBy'\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n                    ~~~~~ ^~~~~~~~~~\n/tmp/tmp7vmvbcfu.swift:11:23: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        index = index.advancedBy(1)\n\
    \                ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5ts7spdu.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: Range(uncheckedBounds: (lower: string.index(string.startIndex, offsetBy:\
    \ start), upper: string.endIndex)), locale: nil) {\n                      ~~~~~~\
    \ ^~~~~\n/tmp/tmp5ts7spdu.swift:6:61: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n    while let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: Range(uncheckedBounds: (lower: string.index(string.startIndex,\
    \ offsetBy: start), upper: string.endIndex)), locale: nil) {\n               \
    \                                            ~^~~~~~~~~~~~~~~\n/tmp/tmp5ts7spdu.swift:6:200:\
    \ error: 'nil' requires a contextual type\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: Range(uncheckedBounds: (lower:\
    \ string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n                                                           \
    \                                                                            \
    \                                                                ^\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while start < string.count\
    \ {\n        let range = string.range(of: substring, options: [], range: start..<string.endIndex,\
    \ locale: nil)\n        if let range = range {\n            count += 1\n     \
    \       start = range.upperBound\n        } else {\n            break\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7_uyx2ci.swift:7:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, options: [], range:\
    \ start..<string.endIndex, locale: nil)\n                    ~~~~~~ ^~~~~\n/tmp/tmp7_uyx2ci.swift:7:102:\
    \ error: 'nil' requires a contextual type\n        let range = string.range(of:\
    \ substring, options: [], range: start..<string.endIndex, locale: nil)\n     \
    \                                                                            \
    \                    ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while true {\n \
    \       let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n        if let range = range {\n           \
    \ count += 1\n            start = range.startIndex.distanceTo(range.endIndex)\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpc6ut62yt.swift:7:62: error: cannot find 'NSStringCompareOptions'\
    \ in scope\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n                                           \
    \                  ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpc6ut62yt.swift:7:28: error:\
    \ value of type 'String' has no member 'rangeOfString'\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                   ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpc6ut62yt.swift:7:107: error:\
    \ referencing initializer 'init(_:)' on 'Range' requires that 'String.Index' conform\
    \ to 'Strideable'\n        let range = string.rangeOfString(substring, options:\
    \ NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start: string.startIndex.advancedBy(start),\
    \ end: string.endIndex), locale: nil)\n                                      \
    \                                                                    ^\nSwift.Range:1:11:\
    \ note: where 'Bound' = 'String.Index'\nextension Range where Bound : Strideable,\
    \ Bound.Stride : SignedInteger {\n          ^\n/tmp/tmpc6ut62yt.swift:7:183: error:\
    \ extra argument 'end' in call\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                                                                            \
    \                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n\
    /tmp/tmpc6ut62yt.swift:7:152: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), "
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.hasPrefix(substring, startingAt:\
    \ index) {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphceq1f6e.swift:7:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = 0\n    while index < string.count\
    \ {\n        let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: string.index(index, offsetBy: 0)..<string.endIndex, locale: nil)\n  \
    \      if range != nil {\n            count += 1\n            index = string.distance(from:\
    \ string.startIndex, to: range!.upperBound)\n        } else {\n            break\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpd0kjl4t_.swift:7:96: error: cannot convert value of type 'Int'\
    \ to expected argument type 'String.Index'\n        let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: string.index(index, offsetBy: 0)..<string.endIndex,\
    \ locale: nil)\n                                                             \
    \                                  ^\n/tmp/tmpd0kjl4t_.swift:7:28: error: value\
    \ of type 'String' has no member 'range'\n        let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: string.index(index, offsetBy: 0)..<string.endIndex,\
    \ locale: nil)\n                    ~~~~~~ ^~~~~\n/tmp/tmpd0kjl4t_.swift:7:59:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \        let range = string.range(of: substring, options: .caseInsensitive, range:\
    \ string.index(index, offsetBy: 0)..<string.endIndex, locale: nil)\n         \
    \                                                ~^~~~~~~~~~~~~~~\n/tmp/tmpd0kjl4t_.swift:7:143:\
    \ error: 'nil' requires a contextual type\n        let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: string.index(index, offsetBy: 0)..<string.endIndex,\
    \ locale: nil)\n                                                             \
    \                                                                            \
    \     ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n        }\n        index = index.advancedBy(1)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7vmvbcfu.swift:7:19: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp7vmvbcfu.swift:8:18: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            count++\n\
    \                 ^~\n/tmp/tmp7vmvbcfu.swift:9:27: error: value of type 'String.Index'\
    \ has no member 'advancedBy'\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n                    ~~~~~ ^~~~~~~~~~\n/tmp/tmp7vmvbcfu.swift:11:23: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        index = index.advancedBy(1)\n\
    \                ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = 0\n    while index < string.count\
    \ {\n        if let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: string.index(index, offsetBy: 0)..<string.endIndex, locale: nil) {\n\
    \            count += 1\n            index = range.upperBound\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpb0ql4hg1.swift:7:99: error: cannot convert value of type 'Int'\
    \ to expected argument type 'String.Index'\n        if let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: string.index(index, offsetBy: 0)..<string.endIndex,\
    \ locale: nil) {\n                                                           \
    \                                       ^\n/tmp/tmpb0ql4hg1.swift:7:31: error:\
    \ value of type 'String' has no member 'range'\n        if let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: string.index(index, offsetBy: 0)..<string.endIndex,\
    \ locale: nil) {\n                       ~~~~~~ ^~~~~\n/tmp/tmpb0ql4hg1.swift:7:62:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \        if let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: string.index(index, offsetBy: 0)..<string.endIndex, locale: nil) {\n\
    \                                                            ~^~~~~~~~~~~~~~~\n\
    /tmp/tmpb0ql4hg1.swift:7:146: error: 'nil' requires a contextual type\n      \
    \  if let range = string.range(of: substring, options: .caseInsensitive, range:\
    \ string.index(index, offsetBy: 0)..<string.endIndex, locale: nil) {\n       \
    \                                                                            \
    \                                                              ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var search_range = string.startIndex..<string.endIndex\n\
    \    while let found_range = string.range(of: substring, options: [], range: search_range)\
    \ {\n        count += 1\n        search_range = Range(uncheckedBounds: (lower:\
    \ found_range.upperBound, upper: string.endIndex))\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmppgx27wiy.swift:6:36: error: value of type 'String' has no member\
    \ 'range'\n    while let found_range = string.range(of: substring, options: [],\
    \ range: search_range) {\n                            ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if let range = string.range(of: substring,\
    \ range: index..<string.endIndex) {\n            count += 1\n            index\
    \ = range.upperBound\n        } else {\n            break\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpfvk9yoai.swift:7:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n                       ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start_index = string.startIndex\n\
    \    while let range = string.range(of: substring, range: start_index..<string.endIndex)\
    \ {\n        count += 1\n        start_index = range.upperBound\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzlw4hcwt.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start_index..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while true {\n \
    \       let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n        if let range = range {\n           \
    \ count++\n            start = range.startIndex.distanceTo(range.endIndex)\n \
    \       } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5vwpib0e.swift:7:62: error: cannot find 'NSStringCompareOptions'\
    \ in scope\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n                                           \
    \                  ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5vwpib0e.swift:7:28: error:\
    \ value of type 'String' has no member 'rangeOfString'\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                   ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmp5vwpib0e.swift:7:107: error:\
    \ referencing initializer 'init(_:)' on 'Range' requires that 'String.Index' conform\
    \ to 'Strideable'\n        let range = string.rangeOfString(substring, options:\
    \ NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start: string.startIndex.advancedBy(start),\
    \ end: string.endIndex), locale: nil)\n                                      \
    \                                                                    ^\nSwift.Range:1:11:\
    \ note: where 'Bound' = 'String.Index'\nextension Range where Bound : Strideable,\
    \ Bound.Stride : SignedInteger {\n          ^\n/tmp/tmp5vwpib0e.swift:7:183: error:\
    \ extra argument 'end' in call\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                                                                            \
    \                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n\
    /tmp/tmp5vwpib0e.swift:7:152: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), "
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var startIndex = string.startIndex\n\
    \    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n        count += 1\n        startIndex = range.upperBound\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpexz6qz_d.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count)\n\
    \        } else {\n            index = index.advancedBy(1)\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjgewudje.swift:7:19: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpjgewudje.swift:8:18: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            count++\n\
    \                 ^~\n/tmp/tmpjgewudje.swift:9:27: error: value of type 'String.Index'\
    \ has no member 'advancedBy'\n            index = index.advancedBy(substring.characters.count)\n\
    \                    ~~~~~ ^~~~~~~~~~\n/tmp/tmpjgewudje.swift:11:27: error: value\
    \ of type 'String.Index' has no member 'advancedBy'\n            index = index.advancedBy(1)\n\
    \                    ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.hasPrefix(substring, startingAt:\
    \ index) {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphceq1f6e.swift:7:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n        count += 1\n        range = r.upperBound..<string.endIndex\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpywpy2f5d.swift:6:26: error: value of type 'String' has no member\
    \ 'range'\n    while let r = string.range(of: substring, options: .caseInsensitive,\
    \ range: range) {\n                  ~~~~~~ ^~~~~\n/tmp/tmpywpy2f5d.swift:6:57:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n                                                       ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while start < string.count\
    \ {\n        if let range = string.range(of: substring, options: .literal, range:\
    \ start..<string.endIndex, locale: nil) {\n            count += 1\n          \
    \  start = range.upperBound\n        } else {\n            break\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpnzk1o52d.swift:7:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, options: .literal,\
    \ range: start..<string.endIndex, locale: nil) {\n                       ~~~~~~\
    \ ^~~~~\n/tmp/tmpnzk1o52d.swift:7:62: error: cannot infer contextual base in reference\
    \ to member 'literal'\n        if let range = string.range(of: substring, options:\
    \ .literal, range: start..<string.endIndex, locale: nil) {\n                 \
    \                                           ~^~~~~~~\n/tmp/tmpnzk1o52d.swift:7:111:\
    \ error: 'nil' requires a contextual type\n        if let range = string.range(of:\
    \ substring, options: .literal, range: start..<string.endIndex, locale: nil) {\n\
    \                                                                            \
    \                                  ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count)\n\
    \        } else {\n            index = index.advancedBy(1)\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjgewudje.swift:7:19: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpjgewudje.swift:8:18: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            count++\n\
    \                 ^~\n/tmp/tmpjgewudje.swift:9:27: error: value of type 'String.Index'\
    \ has no member 'advancedBy'\n            index = index.advancedBy(substring.characters.count)\n\
    \                    ~~~~~ ^~~~~~~~~~\n/tmp/tmpjgewudje.swift:11:27: error: value\
    \ of type 'String.Index' has no member 'advancedBy'\n            index = index.advancedBy(1)\n\
    \                    ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 0
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    let len = string.count - substring.count + 1\n    var\
    \ count = 0\n    for i in 0..<len {\n        let start = string.index(string.startIndex,\
    \ offsetBy: i)\n        let end = string.index(string.startIndex, offsetBy: i\
    \ + substring.count)\n        if string[start..<end] == substring {\n        \
    \    count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: string.index(start,\
    \ offsetBy: 0)..<string.endIndex, locale: nil) {\n        count += 1\n       \
    \ start = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3fzzxorr.swift:6:98: error: cannot convert value of type 'Int'\
    \ to expected argument type 'String.Index'\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: string.index(start, offsetBy: 0)..<string.endIndex,\
    \ locale: nil) {\n                                                           \
    \                                      ^\n/tmp/tmp3fzzxorr.swift:6:30: error:\
    \ value of type 'String' has no member 'range'\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: string.index(start, offsetBy: 0)..<string.endIndex,\
    \ locale: nil) {\n                      ~~~~~~ ^~~~~\n/tmp/tmp3fzzxorr.swift:6:61:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: string.index(start, offsetBy: 0)..<string.endIndex, locale: nil) {\n\
    \                                                           ~^~~~~~~~~~~~~~~\n\
    /tmp/tmp3fzzxorr.swift:6:145: error: 'nil' requires a contextual type\n    while\
    \ let range = string.range(of: substring, options: .caseInsensitive, range: string.index(start,\
    \ offsetBy: 0)..<string.endIndex, locale: nil) {\n                           \
    \                                                                            \
    \                                         ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.hasPrefix(substring, startingAt:\
    \ index) {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphceq1f6e.swift:7:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n        count += 1\n        range = r.upperBound..<string.endIndex\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpywpy2f5d.swift:6:26: error: value of type 'String' has no member\
    \ 'range'\n    while let r = string.range(of: substring, options: .caseInsensitive,\
    \ range: range) {\n                  ~~~~~~ ^~~~~\n/tmp/tmpywpy2f5d.swift:6:57:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n                                                       ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5ts7spdu.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: Range(uncheckedBounds: (lower: string.index(string.startIndex, offsetBy:\
    \ start), upper: string.endIndex)), locale: nil) {\n                      ~~~~~~\
    \ ^~~~~\n/tmp/tmp5ts7spdu.swift:6:61: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n    while let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: Range(uncheckedBounds: (lower: string.index(string.startIndex,\
    \ offsetBy: start), upper: string.endIndex)), locale: nil) {\n               \
    \                                            ~^~~~~~~~~~~~~~~\n/tmp/tmp5ts7spdu.swift:6:200:\
    \ error: 'nil' requires a contextual type\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: Range(uncheckedBounds: (lower:\
    \ string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n                                                           \
    \                                                                            \
    \                                                                ^\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while true {\n \
    \       let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n        if let range = range {\n           \
    \ count++\n            start = range.startIndex.distanceTo(range.endIndex)\n \
    \       } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5vwpib0e.swift:7:62: error: cannot find 'NSStringCompareOptions'\
    \ in scope\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n                                           \
    \                  ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5vwpib0e.swift:7:28: error:\
    \ value of type 'String' has no member 'rangeOfString'\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                   ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmp5vwpib0e.swift:7:107: error:\
    \ referencing initializer 'init(_:)' on 'Range' requires that 'String.Index' conform\
    \ to 'Strideable'\n        let range = string.rangeOfString(substring, options:\
    \ NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start: string.startIndex.advancedBy(start),\
    \ end: string.endIndex), locale: nil)\n                                      \
    \                                                                    ^\nSwift.Range:1:11:\
    \ note: where 'Bound' = 'String.Index'\nextension Range where Bound : Strideable,\
    \ Bound.Stride : SignedInteger {\n          ^\n/tmp/tmp5vwpib0e.swift:7:183: error:\
    \ extra argument 'end' in call\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                                                                            \
    \                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n\
    /tmp/tmp5vwpib0e.swift:7:152: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), "
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = 0\n    while index < string.characters.count\
    \ {\n        let range = string.rangeOfString(substring, options: [], range: Range(start:\
    \ string.startIndex.advancedBy(index), end: string.endIndex), locale: nil)\n \
    \       if range != nil {\n            count += 1\n            index = range!.startIndex.distanceTo(range!.endIndex)\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpe7gntt6_.swift:6:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    while index < string.characters.count {\n         \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpe7gntt6_.swift:7:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, options:\
    \ [], range: Range(start: string.startIndex.advancedBy(index), end: string.endIndex),\
    \ locale: nil)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpe7gntt6_.swift:7:73:\
    \ error: generic parameter 'Bound' could not be inferred\n        let range =\
    \ string.rangeOfString(substring, options: [], range: Range(start: string.startIndex.advancedBy(index),\
    \ end: string.endIndex), locale: nil)\n                                      \
    \                                  ^\n/tmp/tmpe7gntt6_.swift:7:73: note: explicitly\
    \ specify the generic arguments to fix this issue\n        let range = string.rangeOfString(substring,\
    \ options: [], range: Range(start: string.startIndex.advancedBy(index), end: string.endIndex),\
    \ locale: nil)\n                                                             \
    \           ^\n                                                              \
    \               <<#Bound: Comparable#>>\n/tmp/tmpe7gntt6_.swift:7:135: error:\
    \ extra argument 'end' in call\n        let range = string.rangeOfString(substring,\
    \ options: [], range: Range(start: string.startIndex.advancedBy(index), end: string.endIndex),\
    \ locale: nil)\n                                                             \
    \                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n\
    /tmp/tmpe7gntt6_.swift:7:104: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n        let range = string.rangeOfString(substring, options: [],\
    \ range: Range(start: string.startIndex.advancedBy(index), end: string.endIndex),\
    \ locale: nil)\n                                                             \
    \                        ~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5ts7spdu.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: Range(uncheckedBounds: (lower: string.index(string.startIndex, offsetBy:\
    \ start), upper: string.endIndex)), locale: nil) {\n                      ~~~~~~\
    \ ^~~~~\n/tmp/tmp5ts7spdu.swift:6:61: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n    while let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: Range(uncheckedBounds: (lower: string.index(string.startIndex,\
    \ offsetBy: start), upper: string.endIndex)), locale: nil) {\n               \
    \                                            ~^~~~~~~~~~~~~~~\n/tmp/tmp5ts7spdu.swift:6:200:\
    \ error: 'nil' requires a contextual type\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: Range(uncheckedBounds: (lower:\
    \ string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n                                                           \
    \                                                                            \
    \                                                                ^\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.hasPrefix(substring, startingAt:\
    \ index) {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphceq1f6e.swift:7:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var search_range = string.startIndex..<string.endIndex\n\
    \    while let found_range = string.range(of: substring, options: [], range: search_range)\
    \ {\n        count += 1\n        search_range = Range(uncheckedBounds: (lower:\
    \ found_range.upperBound, upper: string.endIndex))\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmppgx27wiy.swift:6:36: error: value of type 'String' has no member\
    \ 'range'\n    while let found_range = string.range(of: substring, options: [],\
    \ range: search_range) {\n                            ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var startIndex = string.startIndex\n\
    \    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n        count += 1\n        startIndex = range.upperBound\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpexz6qz_d.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.hasPrefix(substring, startingAt:\
    \ index) {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphceq1f6e.swift:7:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while start < string.count\
    \ {\n        let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex, locale: nil)\n        if let range = range {\n\
    \            count += 1\n            start = range.upperBound\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgp246y0w.swift:7:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex, locale: nil)\n                    ~~~~~~ ^~~~~\n\
    /tmp/tmpgp246y0w.swift:7:59: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n        let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: start..<string.endIndex, locale: nil)\n  \
    \                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpgp246y0w.swift:7:116:\
    \ error: 'nil' requires a contextual type\n        let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: start..<string.endIndex, locale:\
    \ nil)\n                                                                     \
    \                                              ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: [], range: range) {\n\
    \        count += 1\n        range = r.upperBound..<string.endIndex\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8mrqnizh.swift:6:26: error: value of type 'String' has no member\
    \ 'range'\n    while let r = string.range(of: substring, options: [], range: range)\
    \ {\n                  ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    return string.components(separatedBy: substring).count\
    \ - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpahx53we4.swift:4:19: error: value of type 'String' has no member\
    \ 'components'\n    return string.components(separatedBy: substring).count - 1\n\
    \           ~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while start < string.count\
    \ {\n        if let range = string.range(of: substring, options: .literal, range:\
    \ start..<string.endIndex, locale: nil) {\n            count += 1\n          \
    \  start = range.upperBound\n        } else {\n            break\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpnzk1o52d.swift:7:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, options: .literal,\
    \ range: start..<string.endIndex, locale: nil) {\n                       ~~~~~~\
    \ ^~~~~\n/tmp/tmpnzk1o52d.swift:7:62: error: cannot infer contextual base in reference\
    \ to member 'literal'\n        if let range = string.range(of: substring, options:\
    \ .literal, range: start..<string.endIndex, locale: nil) {\n                 \
    \                                           ~^~~~~~~\n/tmp/tmpnzk1o52d.swift:7:111:\
    \ error: 'nil' requires a contextual type\n        if let range = string.range(of:\
    \ substring, options: .literal, range: start..<string.endIndex, locale: nil) {\n\
    \                                                                            \
    \                                  ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: start..<string.endIndex)\
    \ {\n        count += 1\n        start = range.upperBound\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjfmi0cof.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex) {\n                      ~~~~~~ ^~~~~\n/tmp/tmpjfmi0cof.swift:6:61:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex) {\n                                        \
    \                   ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count)\n\
    \        } else {\n            index = index.advancedBy(1)\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjgewudje.swift:7:19: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpjgewudje.swift:8:18: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            count++\n\
    \                 ^~\n/tmp/tmpjgewudje.swift:9:27: error: value of type 'String.Index'\
    \ has no member 'advancedBy'\n            index = index.advancedBy(substring.characters.count)\n\
    \                    ~~~~~ ^~~~~~~~~~\n/tmp/tmpjgewudje.swift:11:27: error: value\
    \ of type 'String.Index' has no member 'advancedBy'\n            index = index.advancedBy(1)\n\
    \                    ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var startIndex = string.startIndex\n\
    \    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n        count += 1\n        startIndex = range.upperBound\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpexz6qz_d.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: string.index(string.startIndex,\
    \ offsetBy: start)..<string.endIndex, locale: nil) {\n        count += 1\n   \
    \     start = string.distance(from: string.startIndex, to: range.upperBound)\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp9624cdjs.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: string.index(string.startIndex, offsetBy: start)..<string.endIndex, locale:\
    \ nil) {\n                      ~~~~~~ ^~~~~\n/tmp/tmp9624cdjs.swift:6:61: error:\
    \ cannot infer contextual base in reference to member 'caseInsensitive'\n    while\
    \ let range = string.range(of: substring, options: .caseInsensitive, range: string.index(string.startIndex,\
    \ offsetBy: start)..<string.endIndex, locale: nil) {\n                       \
    \                                    ~^~~~~~~~~~~~~~~\n/tmp/tmp9624cdjs.swift:6:161:\
    \ error: 'nil' requires a contextual type\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: string.index(string.startIndex,\
    \ offsetBy: start)..<string.endIndex, locale: nil) {\n                       \
    \                                                                            \
    \                                                             ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.distance(from: index, to:\
    \ string.endIndex) >= substring.count {\n            let endIndex = string.index(index,\
    \ offsetBy: substring.count)\n            if string[index..<endIndex] == substring\
    \ {\n                count += 1\n                index = endIndex\n          \
    \  } else {\n                index = string.index(after: index)\n            }\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmp26nqlqil/tmp26nqlqil.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae020972c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae020669b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae020669988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0206687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp26nqlqil                        0x000055e093001944 <unavailable> + 6468

    5    libc.so.6                          0x00002ae020b5e460 __libc_start_main +
    245

    6    tmp26nqlqil                        0x000055e0930013b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n        count += 1\n        range = r.upperBound..<string.endIndex\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpywpy2f5d.swift:6:26: error: value of type 'String' has no member\
    \ 'range'\n    while let r = string.range(of: substring, options: .caseInsensitive,\
    \ range: range) {\n                  ~~~~~~ ^~~~~\n/tmp/tmpywpy2f5d.swift:6:57:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n                                                       ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    let length = string.count\n\
    \    let subLength = substring.count\n    while start <= length - subLength {\n\
    \        let end = start + subLength\n        let range = string.index(string.startIndex,\
    \ offsetBy: start)..<string.index(string.startIndex, offsetBy: end)\n        if\
    \ string[range] == substring {\n            count += 1\n            start = end\n\
    \        } else {\n            start += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmphhe_2i3i/tmphhe_2i3i.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae43c432c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae43c129b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae43c129988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae43c1287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphhe_2i3i                        0x00005638e615c7c4 <unavailable> + 6084

    5    libc.so.6                          0x00002ae43c61e460 __libc_start_main +
    245

    6    tmphhe_2i3i                        0x00005638e615c239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009146
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5ts7spdu.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: Range(uncheckedBounds: (lower: string.index(string.startIndex, offsetBy:\
    \ start), upper: string.endIndex)), locale: nil) {\n                      ~~~~~~\
    \ ^~~~~\n/tmp/tmp5ts7spdu.swift:6:61: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n    while let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: Range(uncheckedBounds: (lower: string.index(string.startIndex,\
    \ offsetBy: start), upper: string.endIndex)), locale: nil) {\n               \
    \                                            ~^~~~~~~~~~~~~~~\n/tmp/tmp5ts7spdu.swift:6:200:\
    \ error: 'nil' requires a contextual type\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: Range(uncheckedBounds: (lower:\
    \ string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n                                                           \
    \                                                                            \
    \                                                                ^\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index != string.endIndex {\n        if string.distance(from: index, to:\
    \ string.endIndex) >= substring.count {\n            if string[index..<string.index(index,\
    \ offsetBy: substring.count)] == substring {\n                count += 1\n   \
    \             index = string.index(index, offsetBy: substring.count)\n       \
    \     } else {\n                index = string.index(after: index)\n         \
    \   }\n        } else {\n            break\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmp9c214kh4/tmp9c214kh4.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b40363c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b4005ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b4005a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b400597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9c214kh4                        0x0000561508c768e4 <unavailable> + 6372

    5    libc.so.6                          0x00002b6b4054f460 __libc_start_main +
    245

    6    tmp9c214kh4                        0x0000561508c76359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660009146
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n        }\n        index = index.advancedBy(1)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7vmvbcfu.swift:7:19: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp7vmvbcfu.swift:8:18: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            count++\n\
    \                 ^~\n/tmp/tmp7vmvbcfu.swift:9:27: error: value of type 'String.Index'\
    \ has no member 'advancedBy'\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n                    ~~~~~ ^~~~~~~~~~\n/tmp/tmp7vmvbcfu.swift:11:23: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        index = index.advancedBy(1)\n\
    \                ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.hasPrefix(substring, startingAt:\
    \ index) {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphceq1f6e.swift:7:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.hasPrefix(substring, startingAt:\
    \ index) {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphceq1f6e.swift:7:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var startIndex = string.startIndex\n\
    \    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n        count += 1\n        startIndex = range.upperBound\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpexz6qz_d.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    let length = string.characters.count\n    let sublength\
    \ = substring.characters.count\n    var count = 0\n    for i in 0..<length {\n\
    \        if i + sublength > length {\n            break\n        }\n        if\
    \ string[i..<i+sublength] == substring {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpuv90dsic.swift:4:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    let length = string.characters.count\n            \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpuv90dsic.swift:5:31: error: 'characters' is unavailable: Please use String\
    \ directly\n    let sublength = substring.characters.count\n                 \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpuv90dsic.swift:11:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        if string[i..<i+sublength] == substring {\n           ^~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: [], range: range) {\n\
    \        count += 1\n        range = r.upperBound..<string.endIndex\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8mrqnizh.swift:6:26: error: value of type 'String' has no member\
    \ 'range'\n    while let r = string.range(of: substring, options: [], range: range)\
    \ {\n                  ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while start < string.count\
    \ {\n        let range = string.range(of: substring, options: .literal, range:\
    \ start..<string.endIndex, locale: nil)\n        if let range = range {\n    \
    \        count += 1\n            start = range.upperBound\n        } else {\n\
    \            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpfegunn7h.swift:7:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, options: .literal,\
    \ range: start..<string.endIndex, locale: nil)\n                    ~~~~~~ ^~~~~\n\
    /tmp/tmpfegunn7h.swift:7:59: error: cannot infer contextual base in reference\
    \ to member 'literal'\n        let range = string.range(of: substring, options:\
    \ .literal, range: start..<string.endIndex, locale: nil)\n                   \
    \                                      ~^~~~~~~\n/tmp/tmpfegunn7h.swift:7:108:\
    \ error: 'nil' requires a contextual type\n        let range = string.range(of:\
    \ substring, options: .literal, range: start..<string.endIndex, locale: nil)\n\
    \                                                                            \
    \                               ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: [], range: Range(uncheckedBounds: (lower:\
    \ string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3ivvzyz_.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: [], range:\
    \ Range(uncheckedBounds: (lower: string.index(string.startIndex, offsetBy: start),\
    \ upper: string.endIndex)), locale: nil) {\n                      ~~~~~~ ^~~~~\n\
    /tmp/tmp3ivvzyz_.swift:6:186: error: 'nil' requires a contextual type\n    while\
    \ let range = string.range(of: substring, options: [], range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n                                                           \
    \                                                                            \
    \                                                  ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n        count += 1\n        range = r.upperBound..<string.endIndex\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpywpy2f5d.swift:6:26: error: value of type 'String' has no member\
    \ 'range'\n    while let r = string.range(of: substring, options: .caseInsensitive,\
    \ range: range) {\n                  ~~~~~~ ^~~~~\n/tmp/tmpywpy2f5d.swift:6:57:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n                                                       ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start_index = string.startIndex\n\
    \    while let range = string.range(of: substring, range: start_index..<string.endIndex)\
    \ {\n        count += 1\n        start_index = range.upperBound\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzlw4hcwt.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start_index..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n        count += 1\n        range = r.upperBound..<string.endIndex\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpywpy2f5d.swift:6:26: error: value of type 'String' has no member\
    \ 'range'\n    while let r = string.range(of: substring, options: .caseInsensitive,\
    \ range: range) {\n                  ~~~~~~ ^~~~~\n/tmp/tmpywpy2f5d.swift:6:57:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n                                                       ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var position = string.startIndex\n\
    \    while let range = string.range(of: substring, range: position..<string.endIndex)\
    \ {\n        count += 1\n        position = range.upperBound\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzzmbvc4g.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: position..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n        count += 1\n        range = r.upperBound..<string.endIndex\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpywpy2f5d.swift:6:26: error: value of type 'String' has no member\
    \ 'range'\n    while let r = string.range(of: substring, options: .caseInsensitive,\
    \ range: range) {\n                  ~~~~~~ ^~~~~\n/tmp/tmpywpy2f5d.swift:6:57:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n                                                       ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while start < string.count\
    \ {\n        let range = string.range(of: substring, options: .literal, range:\
    \ start..<string.endIndex, locale: nil)\n        if let range = range {\n    \
    \        count += 1\n            start = range.upperBound\n        } else {\n\
    \            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpfegunn7h.swift:7:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, options: .literal,\
    \ range: start..<string.endIndex, locale: nil)\n                    ~~~~~~ ^~~~~\n\
    /tmp/tmpfegunn7h.swift:7:59: error: cannot infer contextual base in reference\
    \ to member 'literal'\n        let range = string.range(of: substring, options:\
    \ .literal, range: start..<string.endIndex, locale: nil)\n                   \
    \                                      ~^~~~~~~\n/tmp/tmpfegunn7h.swift:7:108:\
    \ error: 'nil' requires a contextual type\n        let range = string.range(of:\
    \ substring, options: .literal, range: start..<string.endIndex, locale: nil)\n\
    \                                                                            \
    \                               ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count)\n\
    \        } else {\n            index = index.advancedBy(1)\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjgewudje.swift:7:19: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpjgewudje.swift:8:18: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            count++\n\
    \                 ^~\n/tmp/tmpjgewudje.swift:9:27: error: value of type 'String.Index'\
    \ has no member 'advancedBy'\n            index = index.advancedBy(substring.characters.count)\n\
    \                    ~~~~~ ^~~~~~~~~~\n/tmp/tmpjgewudje.swift:11:27: error: value\
    \ of type 'String.Index' has no member 'advancedBy'\n            index = index.advancedBy(1)\n\
    \                    ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.hasPrefix(substring, startingAt:\
    \ index) {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphceq1f6e.swift:7:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        let range = string.rangeOfString(substring,\
    \ range: index..<string.endIndex)\n        if let range = range {\n          \
    \  count++\n            index = range.endIndex\n        } else {\n           \
    \ break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpn57vls0x.swift:7:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, range:\
    \ index..<string.endIndex)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpn57vls0x.swift:9:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  count++\n                 ^~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    let length = string.characters.count\n    let sublength\
    \ = substring.characters.count\n    var count = 0\n    for i in 0...length-sublength\
    \ {\n        let start = string.index(string.startIndex, offsetBy: i)\n      \
    \  let end = string.index(string.startIndex, offsetBy: i+sublength)\n        let\
    \ range = start..<end\n        if string.substring(with: range) == substring {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpkhia40k_.swift:4:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    let length = string.characters.count\n            \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpkhia40k_.swift:5:31: error: 'characters' is unavailable: Please use String\
    \ directly\n    let sublength = substring.characters.count\n                 \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkhia40k_.swift:11:19: error: value of type 'String' has no member\
    \ 'substring'\n        if string.substring(with: range) == substring {\n     \
    \      ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009146
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while true {\n \
    \       let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n        if let range = range {\n           \
    \ count++\n            start = range.startIndex.distanceTo(range.endIndex)\n \
    \       } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5vwpib0e.swift:7:62: error: cannot find 'NSStringCompareOptions'\
    \ in scope\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n                                           \
    \                  ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5vwpib0e.swift:7:28: error:\
    \ value of type 'String' has no member 'rangeOfString'\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                   ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmp5vwpib0e.swift:7:107: error:\
    \ referencing initializer 'init(_:)' on 'Range' requires that 'String.Index' conform\
    \ to 'Strideable'\n        let range = string.rangeOfString(substring, options:\
    \ NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start: string.startIndex.advancedBy(start),\
    \ end: string.endIndex), locale: nil)\n                                      \
    \                                                                    ^\nSwift.Range:1:11:\
    \ note: where 'Bound' = 'String.Index'\nextension Range where Bound : Strideable,\
    \ Bound.Stride : SignedInteger {\n          ^\n/tmp/tmp5vwpib0e.swift:7:183: error:\
    \ extra argument 'end' in call\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                                                                            \
    \                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n\
    /tmp/tmp5vwpib0e.swift:7:152: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), "
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.rangeOfString(substring,\
    \ range: Range<String.Index>(start: index, end: string.endIndex)) != nil {\n \
    \           count++\n            index = advance(index, 1)\n        } else {\n\
    \            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphuewhu0c.swift:7:19: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        if string.rangeOfString(substring, range: Range<String.Index>(start:\
    \ index, end: string.endIndex)) != nil {\n           ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmphuewhu0c.swift:7:51:\
    \ error: referencing initializer 'init(_:)' on 'Range' requires that 'String.Index'\
    \ conform to 'Strideable'\n        if string.rangeOfString(substring, range: Range<String.Index>(start:\
    \ index, end: string.endIndex)) != nil {\n                                   \
    \               ^\nSwift.Range:1:11: note: where 'Bound' = 'String.Index'\nextension\
    \ Range where Bound : Strideable, Bound.Stride : SignedInteger {\n          ^\n\
    /tmp/tmphuewhu0c.swift:7:97: error: extra argument 'end' in call\n        if string.rangeOfString(substring,\
    \ range: Range<String.Index>(start: index, end: string.endIndex)) != nil {\n \
    \                                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n\
    /tmp/tmphuewhu0c.swift:7:78: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'ClosedRange<String.Index>'\n        if string.rangeOfString(substring,\
    \ range: Range<String.Index>(start: index, end: string.endIndex)) != nil {\n \
    \                                                                            ^\n\
    /tmp/tmphuewhu0c.swift:8:18: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n            count++\n                 ^~\n/tmp/tmphuewhu0c.swift:9:21:\
    \ error: cannot find 'advance' in scope\n            index = advance(index, 1)\n\
    \                    ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while true {\n \
    \       let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n        if let range = range {\n           \
    \ count += 1\n            start = range.startIndex.distanceTo(range.endIndex)\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpc6ut62yt.swift:7:62: error: cannot find 'NSStringCompareOptions'\
    \ in scope\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n                                           \
    \                  ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpc6ut62yt.swift:7:28: error:\
    \ value of type 'String' has no member 'rangeOfString'\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                   ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpc6ut62yt.swift:7:107: error:\
    \ referencing initializer 'init(_:)' on 'Range' requires that 'String.Index' conform\
    \ to 'Strideable'\n        let range = string.rangeOfString(substring, options:\
    \ NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start: string.startIndex.advancedBy(start),\
    \ end: string.endIndex), locale: nil)\n                                      \
    \                                                                    ^\nSwift.Range:1:11:\
    \ note: where 'Bound' = 'String.Index'\nextension Range where Bound : Strideable,\
    \ Bound.Stride : SignedInteger {\n          ^\n/tmp/tmpc6ut62yt.swift:7:183: error:\
    \ extra argument 'end' in call\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                                                                            \
    \                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n\
    /tmp/tmpc6ut62yt.swift:7:152: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), "
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n        count += 1\n        range = r.upperBound..<string.endIndex\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpywpy2f5d.swift:6:26: error: value of type 'String' has no member\
    \ 'range'\n    while let r = string.range(of: substring, options: .caseInsensitive,\
    \ range: range) {\n                  ~~~~~~ ^~~~~\n/tmp/tmpywpy2f5d.swift:6:57:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n                                                       ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while true {\n \
    \       let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n        if let range = range {\n           \
    \ count++\n            start = range.startIndex.distanceTo(range.endIndex)\n \
    \       } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5vwpib0e.swift:7:62: error: cannot find 'NSStringCompareOptions'\
    \ in scope\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n                                           \
    \                  ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5vwpib0e.swift:7:28: error:\
    \ value of type 'String' has no member 'rangeOfString'\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                   ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmp5vwpib0e.swift:7:107: error:\
    \ referencing initializer 'init(_:)' on 'Range' requires that 'String.Index' conform\
    \ to 'Strideable'\n        let range = string.rangeOfString(substring, options:\
    \ NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start: string.startIndex.advancedBy(start),\
    \ end: string.endIndex), locale: nil)\n                                      \
    \                                                                    ^\nSwift.Range:1:11:\
    \ note: where 'Bound' = 'String.Index'\nextension Range where Bound : Strideable,\
    \ Bound.Stride : SignedInteger {\n          ^\n/tmp/tmp5vwpib0e.swift:7:183: error:\
    \ extra argument 'end' in call\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                                                                            \
    \                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n\
    /tmp/tmp5vwpib0e.swift:7:152: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), "
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n        }\n        index = index.advancedBy(1)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7vmvbcfu.swift:7:19: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp7vmvbcfu.swift:8:18: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            count++\n\
    \                 ^~\n/tmp/tmp7vmvbcfu.swift:9:27: error: value of type 'String.Index'\
    \ has no member 'advancedBy'\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n                    ~~~~~ ^~~~~~~~~~\n/tmp/tmp7vmvbcfu.swift:11:23: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        index = index.advancedBy(1)\n\
    \                ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.hasPrefix(substring, startingAt:\
    \ index) {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphceq1f6e.swift:7:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5ts7spdu.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: Range(uncheckedBounds: (lower: string.index(string.startIndex, offsetBy:\
    \ start), upper: string.endIndex)), locale: nil) {\n                      ~~~~~~\
    \ ^~~~~\n/tmp/tmp5ts7spdu.swift:6:61: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n    while let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: Range(uncheckedBounds: (lower: string.index(string.startIndex,\
    \ offsetBy: start), upper: string.endIndex)), locale: nil) {\n               \
    \                                            ~^~~~~~~~~~~~~~~\n/tmp/tmp5ts7spdu.swift:6:200:\
    \ error: 'nil' requires a contextual type\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: Range(uncheckedBounds: (lower:\
    \ string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n                                                           \
    \                                                                            \
    \                                                                ^\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var startIndex = string.startIndex\n\
    \    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n        count += 1\n        startIndex = range.upperBound\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpexz6qz_d.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while start < string.count\
    \ {\n        if let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex, locale: nil) {\n            count += 1\n   \
    \         start = range.upperBound\n        } else {\n            break\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpka80mbda.swift:7:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex, locale: nil) {\n                       ~~~~~~\
    \ ^~~~~\n/tmp/tmpka80mbda.swift:7:62: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n        if let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: start..<string.endIndex, locale: nil) {\n\
    \                                                            ~^~~~~~~~~~~~~~~\n\
    /tmp/tmpka80mbda.swift:7:119: error: 'nil' requires a contextual type\n      \
    \  if let range = string.range(of: substring, options: .caseInsensitive, range:\
    \ start..<string.endIndex, locale: nil) {\n                                  \
    \                                                                            \
    \        ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while start < string.characters.count\
    \ {\n        let range = string.rangeOfString(substring, options: .LiteralSearch,\
    \ range: Range(start: string.startIndex.advancedBy(start), end: string.endIndex),\
    \ locale: nil)\n        if let range = range {\n            count += 1\n     \
    \       start = range.startIndex.distanceTo(range.endIndex)\n        } else {\n\
    \            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp6j7yei_c.swift:6:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    while start < string.characters.count {\n         \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp6j7yei_c.swift:7:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, options:\
    \ .LiteralSearch, range: Range(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmp6j7yei_c.swift:7:63:\
    \ error: cannot infer contextual base in reference to member 'LiteralSearch'\n\
    \        let range = string.rangeOfString(substring, options: .LiteralSearch,\
    \ range: Range(start: string.startIndex.advancedBy(start), end: string.endIndex),\
    \ locale: nil)\n                                                             ~^~~~~~~~~~~~~\n\
    /tmp/tmp6j7yei_c.swift:7:147: error: extra argument 'end' in call\n        let\
    \ range = string.rangeOfString(substring, options: .LiteralSearch, range: Range(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                                                                            \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n\
    /tmp/tmp6j7yei_c.swift:7:85: error: generic parameter 'Bound' could not be inferred\n\
    \        let range = string.rangeOfString(substring, options: .LiteralSearch,\
    \ range: Range(start: string.startIndex.advancedBy(start), end: string.endIndex),\
    \ locale: nil)\n                                                             \
    \                       ^\n/tmp/tmp6j7yei_c.swift:7:85: note: explicitly specify\
    \ the generic arguments to fix this issue\n        let range = string.rangeOfString(substring,\
    \ options: .LiteralSearch, range: Range(start: string.startIndex.advancedBy(start),\
    \ end: string.endIndex), locale: nil)\n                                      \
    \                                              ^\n                "
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.rangeOfString(substring,\
    \ options: nil, range: Range<String.Index>(start: index, end: string.endIndex),\
    \ locale: nil) != nil {\n            count++\n            index = advance(index,\
    \ 1)\n        } else {\n            break\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpktps0ywx.swift:7:19: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        if string.rangeOfString(substring, options: nil, range:\
    \ Range<String.Index>(start: index, end: string.endIndex), locale: nil) != nil\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktps0ywx.swift:7:53: error: 'nil'\
    \ requires a contextual type\n        if string.rangeOfString(substring, options:\
    \ nil, range: Range<String.Index>(start: index, end: string.endIndex), locale:\
    \ nil) != nil {\n                                                    ^\n/tmp/tmpktps0ywx.swift:7:65:\
    \ error: referencing initializer 'init(_:)' on 'Range' requires that 'String.Index'\
    \ conform to 'Strideable'\n        if string.rangeOfString(substring, options:\
    \ nil, range: Range<String.Index>(start: index, end: string.endIndex), locale:\
    \ nil) != nil {\n                                                            \
    \    ^\nSwift.Range:1:11: note: where 'Bound' = 'String.Index'\nextension Range\
    \ where Bound : Strideable, Bound.Stride : SignedInteger {\n          ^\n/tmp/tmpktps0ywx.swift:7:111:\
    \ error: extra argument 'end' in call\n        if string.rangeOfString(substring,\
    \ options: nil, range: Range<String.Index>(start: index, end: string.endIndex),\
    \ locale: nil) != nil {\n                                                    \
    \                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n/tmp/tmpktps0ywx.swift:7:92:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'ClosedRange<String.Index>'\n        if string.rangeOfString(substring, options:\
    \ nil, range: Range<String.Index>(start: index, end: string.endIndex), locale:\
    \ nil) != nil {\n                                                            \
    \                               ^\n/tmp/tmpktps0ywx.swift:7:130: error: 'nil'\
    \ requires a contextual type\n        if string.rangeOfString(substring, options:\
    \ nil, range: Range<String.Index>(start: index, end: string.endIndex), locale:\
    \ nil) != nil {\n                                                            \
    \                                                              "
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: [], range: range) {\n\
    \        count += 1\n        range = r.upperBound..<string.endIndex\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8mrqnizh.swift:6:26: error: value of type 'String' has no member\
    \ 'range'\n    while let r = string.range(of: substring, options: [], range: range)\
    \ {\n                  ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: [], range: range) {\n\
    \        count += 1\n        range = r.upperBound..<string.endIndex\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8mrqnizh.swift:6:26: error: value of type 'String' has no member\
    \ 'range'\n    while let r = string.range(of: substring, options: [], range: range)\
    \ {\n                  ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5ts7spdu.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: Range(uncheckedBounds: (lower: string.index(string.startIndex, offsetBy:\
    \ start), upper: string.endIndex)), locale: nil) {\n                      ~~~~~~\
    \ ^~~~~\n/tmp/tmp5ts7spdu.swift:6:61: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n    while let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: Range(uncheckedBounds: (lower: string.index(string.startIndex,\
    \ offsetBy: start), upper: string.endIndex)), locale: nil) {\n               \
    \                                            ~^~~~~~~~~~~~~~~\n/tmp/tmp5ts7spdu.swift:6:200:\
    \ error: 'nil' requires a contextual type\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: Range(uncheckedBounds: (lower:\
    \ string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n                                                           \
    \                                                                            \
    \                                                                ^\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.hasPrefix(substring, startingAt:\
    \ index) {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphceq1f6e.swift:7:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while true {\n \
    \       let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n        if let range = range {\n           \
    \ count++\n            start = start + range.startIndex.distanceTo(range.endIndex)\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4iu51qmt.swift:7:62: error: cannot find 'NSStringCompareOptions'\
    \ in scope\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n                                           \
    \                  ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4iu51qmt.swift:7:28: error:\
    \ value of type 'String' has no member 'rangeOfString'\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                   ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmp4iu51qmt.swift:7:107: error:\
    \ referencing initializer 'init(_:)' on 'Range' requires that 'String.Index' conform\
    \ to 'Strideable'\n        let range = string.rangeOfString(substring, options:\
    \ NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start: string.startIndex.advancedBy(start),\
    \ end: string.endIndex), locale: nil)\n                                      \
    \                                                                    ^\nSwift.Range:1:11:\
    \ note: where 'Bound' = 'String.Index'\nextension Range where Bound : Strideable,\
    \ Bound.Stride : SignedInteger {\n          ^\n/tmp/tmp4iu51qmt.swift:7:183: error:\
    \ extra argument 'end' in call\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                                                                            \
    \                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n\
    /tmp/tmp4iu51qmt.swift:7:152: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), "
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n        }\n        index = index.advancedBy(1)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7vmvbcfu.swift:7:19: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp7vmvbcfu.swift:8:18: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            count++\n\
    \                 ^~\n/tmp/tmp7vmvbcfu.swift:9:27: error: value of type 'String.Index'\
    \ has no member 'advancedBy'\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n                    ~~~~~ ^~~~~~~~~~\n/tmp/tmp7vmvbcfu.swift:11:23: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        index = index.advancedBy(1)\n\
    \                ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var startIndex = string.startIndex\n\
    \    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n        count += 1\n        startIndex = range.upperBound\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpexz6qz_d.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.distance(from: index, to:\
    \ string.endIndex) >= substring.count {\n            let endIndex = string.index(index,\
    \ offsetBy: substring.count)\n            if string[index..<endIndex] == substring\
    \ {\n                count += 1\n                index = endIndex\n          \
    \  } else {\n                index = string.index(after: index)\n            }\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmp26nqlqil/tmp26nqlqil.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae020972c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae020669b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae020669988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0206687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp26nqlqil                        0x000055e093001944 <unavailable> + 6468

    5    libc.so.6                          0x00002ae020b5e460 __libc_start_main +
    245

    6    tmp26nqlqil                        0x000055e0930013b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n        count += 1\n        range = r.upperBound..<string.endIndex\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpywpy2f5d.swift:6:26: error: value of type 'String' has no member\
    \ 'range'\n    while let r = string.range(of: substring, options: .caseInsensitive,\
    \ range: range) {\n                  ~~~~~~ ^~~~~\n/tmp/tmpywpy2f5d.swift:6:57:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n                                                       ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.hasPrefix(substring, startingAt:\
    \ index) {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphceq1f6e.swift:7:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.hasPrefix(substring, startingAt:\
    \ index) {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphceq1f6e.swift:7:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index != string.endIndex {\n        if string.hasPrefix(substring, startingAt:\
    \ index) {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqa_fdrbt.swift:7:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n        count += 1\n        range = r.upperBound..<string.endIndex\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpywpy2f5d.swift:6:26: error: value of type 'String' has no member\
    \ 'range'\n    while let r = string.range(of: substring, options: .caseInsensitive,\
    \ range: range) {\n                  ~~~~~~ ^~~~~\n/tmp/tmpywpy2f5d.swift:6:57:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n                                                       ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n        }\n        index = index.advancedBy(1)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7vmvbcfu.swift:7:19: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp7vmvbcfu.swift:8:18: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            count++\n\
    \                 ^~\n/tmp/tmp7vmvbcfu.swift:9:27: error: value of type 'String.Index'\
    \ has no member 'advancedBy'\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n                    ~~~~~ ^~~~~~~~~~\n/tmp/tmp7vmvbcfu.swift:11:23: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        index = index.advancedBy(1)\n\
    \                ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: [], range: Range(uncheckedBounds: (lower:\
    \ string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3ivvzyz_.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: [], range:\
    \ Range(uncheckedBounds: (lower: string.index(string.startIndex, offsetBy: start),\
    \ upper: string.endIndex)), locale: nil) {\n                      ~~~~~~ ^~~~~\n\
    /tmp/tmp3ivvzyz_.swift:6:186: error: 'nil' requires a contextual type\n    while\
    \ let range = string.range(of: substring, options: [], range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n                                                           \
    \                                                                            \
    \                                                  ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n        }\n        index = index.advancedBy(1)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7vmvbcfu.swift:7:19: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp7vmvbcfu.swift:8:18: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            count++\n\
    \                 ^~\n/tmp/tmp7vmvbcfu.swift:9:27: error: value of type 'String.Index'\
    \ has no member 'advancedBy'\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n                    ~~~~~ ^~~~~~~~~~\n/tmp/tmp7vmvbcfu.swift:11:23: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        index = index.advancedBy(1)\n\
    \                ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = 0\n    while index < string.count\
    \ {\n        if let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: string.index(index, offsetBy: 0)..<string.endIndex, locale: nil) {\n\
    \            count += 1\n            index = range.upperBound\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpb0ql4hg1.swift:7:99: error: cannot convert value of type 'Int'\
    \ to expected argument type 'String.Index'\n        if let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: string.index(index, offsetBy: 0)..<string.endIndex,\
    \ locale: nil) {\n                                                           \
    \                                       ^\n/tmp/tmpb0ql4hg1.swift:7:31: error:\
    \ value of type 'String' has no member 'range'\n        if let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: string.index(index, offsetBy: 0)..<string.endIndex,\
    \ locale: nil) {\n                       ~~~~~~ ^~~~~\n/tmp/tmpb0ql4hg1.swift:7:62:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \        if let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: string.index(index, offsetBy: 0)..<string.endIndex, locale: nil) {\n\
    \                                                            ~^~~~~~~~~~~~~~~\n\
    /tmp/tmpb0ql4hg1.swift:7:146: error: 'nil' requires a contextual type\n      \
    \  if let range = string.range(of: substring, options: .caseInsensitive, range:\
    \ string.index(index, offsetBy: 0)..<string.endIndex, locale: nil) {\n       \
    \                                                                            \
    \                                                              ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.hasPrefix(substring, startingAt:\
    \ index) {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphceq1f6e.swift:7:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n        count += 1\n        range = r.upperBound..<string.endIndex\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpywpy2f5d.swift:6:26: error: value of type 'String' has no member\
    \ 'range'\n    while let r = string.range(of: substring, options: .caseInsensitive,\
    \ range: range) {\n                  ~~~~~~ ^~~~~\n/tmp/tmpywpy2f5d.swift:6:57:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n                                                       ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5ts7spdu.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: Range(uncheckedBounds: (lower: string.index(string.startIndex, offsetBy:\
    \ start), upper: string.endIndex)), locale: nil) {\n                      ~~~~~~\
    \ ^~~~~\n/tmp/tmp5ts7spdu.swift:6:61: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n    while let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: Range(uncheckedBounds: (lower: string.index(string.startIndex,\
    \ offsetBy: start), upper: string.endIndex)), locale: nil) {\n               \
    \                                            ~^~~~~~~~~~~~~~~\n/tmp/tmp5ts7spdu.swift:6:200:\
    \ error: 'nil' requires a contextual type\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: Range(uncheckedBounds: (lower:\
    \ string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n                                                           \
    \                                                                            \
    \                                                                ^\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n        }\n        index = index.advancedBy(1)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7vmvbcfu.swift:7:19: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp7vmvbcfu.swift:8:18: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            count++\n\
    \                 ^~\n/tmp/tmp7vmvbcfu.swift:9:27: error: value of type 'String.Index'\
    \ has no member 'advancedBy'\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n                    ~~~~~ ^~~~~~~~~~\n/tmp/tmp7vmvbcfu.swift:11:23: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        index = index.advancedBy(1)\n\
    \                ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while start < string.count\
    \ {\n        let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex, locale: nil)\n        if let range = range {\n\
    \            count += 1\n            start = range.upperBound\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgp246y0w.swift:7:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex, locale: nil)\n                    ~~~~~~ ^~~~~\n\
    /tmp/tmpgp246y0w.swift:7:59: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n        let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: start..<string.endIndex, locale: nil)\n  \
    \                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpgp246y0w.swift:7:116:\
    \ error: 'nil' requires a contextual type\n        let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: start..<string.endIndex, locale:\
    \ nil)\n                                                                     \
    \                                              ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while true {\n \
    \       let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n        if let range = range {\n           \
    \ count++\n            start = range.startIndex.distanceTo(range.endIndex)\n \
    \       } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5vwpib0e.swift:7:62: error: cannot find 'NSStringCompareOptions'\
    \ in scope\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n                                           \
    \                  ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5vwpib0e.swift:7:28: error:\
    \ value of type 'String' has no member 'rangeOfString'\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                   ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmp5vwpib0e.swift:7:107: error:\
    \ referencing initializer 'init(_:)' on 'Range' requires that 'String.Index' conform\
    \ to 'Strideable'\n        let range = string.rangeOfString(substring, options:\
    \ NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start: string.startIndex.advancedBy(start),\
    \ end: string.endIndex), locale: nil)\n                                      \
    \                                                                    ^\nSwift.Range:1:11:\
    \ note: where 'Bound' = 'String.Index'\nextension Range where Bound : Strideable,\
    \ Bound.Stride : SignedInteger {\n          ^\n/tmp/tmp5vwpib0e.swift:7:183: error:\
    \ extra argument 'end' in call\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                                                                            \
    \                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n\
    /tmp/tmp5vwpib0e.swift:7:152: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), "
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.hasPrefix(substring, startingAt:\
    \ index) {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphceq1f6e.swift:7:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5ts7spdu.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: Range(uncheckedBounds: (lower: string.index(string.startIndex, offsetBy:\
    \ start), upper: string.endIndex)), locale: nil) {\n                      ~~~~~~\
    \ ^~~~~\n/tmp/tmp5ts7spdu.swift:6:61: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n    while let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: Range(uncheckedBounds: (lower: string.index(string.startIndex,\
    \ offsetBy: start), upper: string.endIndex)), locale: nil) {\n               \
    \                                            ~^~~~~~~~~~~~~~~\n/tmp/tmp5ts7spdu.swift:6:200:\
    \ error: 'nil' requires a contextual type\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: Range(uncheckedBounds: (lower:\
    \ string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n                                                           \
    \                                                                            \
    \                                                                ^\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: string.index(string.startIndex,\
    \ offsetBy: start)..<string.endIndex, locale: nil) {\n        count += 1\n   \
    \     start = string.distance(from: string.startIndex, to: range.upperBound)\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp9624cdjs.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: string.index(string.startIndex, offsetBy: start)..<string.endIndex, locale:\
    \ nil) {\n                      ~~~~~~ ^~~~~\n/tmp/tmp9624cdjs.swift:6:61: error:\
    \ cannot infer contextual base in reference to member 'caseInsensitive'\n    while\
    \ let range = string.range(of: substring, options: .caseInsensitive, range: string.index(string.startIndex,\
    \ offsetBy: start)..<string.endIndex, locale: nil) {\n                       \
    \                                    ~^~~~~~~~~~~~~~~\n/tmp/tmp9624cdjs.swift:6:161:\
    \ error: 'nil' requires a contextual type\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: string.index(string.startIndex,\
    \ offsetBy: start)..<string.endIndex, locale: nil) {\n                       \
    \                                                                            \
    \                                                             ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var startIndex = string.startIndex\n\
    \    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n        count += 1\n        startIndex = range.upperBound\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpexz6qz_d.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while true {\n \
    \       let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n        if let range = range {\n           \
    \ count++\n            start = range.startIndex.distanceTo(range.endIndex)\n \
    \       } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5vwpib0e.swift:7:62: error: cannot find 'NSStringCompareOptions'\
    \ in scope\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n                                           \
    \                  ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5vwpib0e.swift:7:28: error:\
    \ value of type 'String' has no member 'rangeOfString'\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                   ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmp5vwpib0e.swift:7:107: error:\
    \ referencing initializer 'init(_:)' on 'Range' requires that 'String.Index' conform\
    \ to 'Strideable'\n        let range = string.rangeOfString(substring, options:\
    \ NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start: string.startIndex.advancedBy(start),\
    \ end: string.endIndex), locale: nil)\n                                      \
    \                                                                    ^\nSwift.Range:1:11:\
    \ note: where 'Bound' = 'String.Index'\nextension Range where Bound : Strideable,\
    \ Bound.Stride : SignedInteger {\n          ^\n/tmp/tmp5vwpib0e.swift:7:183: error:\
    \ extra argument 'end' in call\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                                                                            \
    \                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n\
    /tmp/tmp5vwpib0e.swift:7:152: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), "
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while true {\n \
    \       let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n        if let range = range {\n           \
    \ count++\n            start = range.startIndex.distanceTo(range.endIndex)\n \
    \       } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5vwpib0e.swift:7:62: error: cannot find 'NSStringCompareOptions'\
    \ in scope\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n                                           \
    \                  ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5vwpib0e.swift:7:28: error:\
    \ value of type 'String' has no member 'rangeOfString'\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                   ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmp5vwpib0e.swift:7:107: error:\
    \ referencing initializer 'init(_:)' on 'Range' requires that 'String.Index' conform\
    \ to 'Strideable'\n        let range = string.rangeOfString(substring, options:\
    \ NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start: string.startIndex.advancedBy(start),\
    \ end: string.endIndex), locale: nil)\n                                      \
    \                                                                    ^\nSwift.Range:1:11:\
    \ note: where 'Bound' = 'String.Index'\nextension Range where Bound : Strideable,\
    \ Bound.Stride : SignedInteger {\n          ^\n/tmp/tmp5vwpib0e.swift:7:183: error:\
    \ extra argument 'end' in call\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                                                                            \
    \                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n\
    /tmp/tmp5vwpib0e.swift:7:152: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), "
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while start < string.characters.count\
    \ {\n        let range = string.rangeOfString(substring, options: [], range: Range(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \       if let range = range {\n            count += 1\n            start = range.startIndex.distanceTo(range.endIndex)\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpbmj3paus.swift:6:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    while start < string.characters.count {\n         \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpbmj3paus.swift:7:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, options:\
    \ [], range: Range(start: string.startIndex.advancedBy(start), end: string.endIndex),\
    \ locale: nil)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpbmj3paus.swift:7:73:\
    \ error: generic parameter 'Bound' could not be inferred\n        let range =\
    \ string.rangeOfString(substring, options: [], range: Range(start: string.startIndex.advancedBy(start),\
    \ end: string.endIndex), locale: nil)\n                                      \
    \                                  ^\n/tmp/tmpbmj3paus.swift:7:73: note: explicitly\
    \ specify the generic arguments to fix this issue\n        let range = string.rangeOfString(substring,\
    \ options: [], range: Range(start: string.startIndex.advancedBy(start), end: string.endIndex),\
    \ locale: nil)\n                                                             \
    \           ^\n                                                              \
    \               <<#Bound: Comparable#>>\n/tmp/tmpbmj3paus.swift:7:135: error:\
    \ extra argument 'end' in call\n        let range = string.rangeOfString(substring,\
    \ options: [], range: Range(start: string.startIndex.advancedBy(start), end: string.endIndex),\
    \ locale: nil)\n                                                             \
    \                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n\
    /tmp/tmpbmj3paus.swift:7:104: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n        let range = string.rangeOfString(substring, options: [],\
    \ range: Range(start: string.startIndex.advancedBy(start), end: string.endIndex),\
    \ locale: nil)\n                                                             \
    \                        ~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: [], range: Range(uncheckedBounds: (lower:\
    \ string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3ivvzyz_.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: [], range:\
    \ Range(uncheckedBounds: (lower: string.index(string.startIndex, offsetBy: start),\
    \ upper: string.endIndex)), locale: nil) {\n                      ~~~~~~ ^~~~~\n\
    /tmp/tmp3ivvzyz_.swift:6:186: error: 'nil' requires a contextual type\n    while\
    \ let range = string.range(of: substring, options: [], range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n                                                           \
    \                                                                            \
    \                                                  ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var last_found = -1\n    while true\
    \ {\n        let range = string.range(of: substring, options: .literal, range:\
    \ (last_found < 0 ? string.startIndex : string.index(string.startIndex, offsetBy:\
    \ last_found))..<string.endIndex, locale: nil)\n        if let range = range {\n\
    \            count += 1\n            last_found = string.distance(from: string.startIndex,\
    \ to: range.lowerBound) + 1\n        } else {\n            break\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpg58xgrqx.swift:7:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, options: .literal,\
    \ range: (last_found < 0 ? string.startIndex : string.index(string.startIndex,\
    \ offsetBy: last_found))..<string.endIndex, locale: nil)\n                   \
    \ ~~~~~~ ^~~~~\n/tmp/tmpg58xgrqx.swift:7:59: error: cannot infer contextual base\
    \ in reference to member 'literal'\n        let range = string.range(of: substring,\
    \ options: .literal, range: (last_found < 0 ? string.startIndex : string.index(string.startIndex,\
    \ offsetBy: last_found))..<string.endIndex, locale: nil)\n                   \
    \                                      ~^~~~~~~\n/tmp/tmpg58xgrqx.swift:7:195:\
    \ error: 'nil' requires a contextual type\n        let range = string.range(of:\
    \ substring, options: .literal, range: (last_found < 0 ? string.startIndex : string.index(string.startIndex,\
    \ offsetBy: last_found))..<string.endIndex, locale: nil)\n                   \
    \                                                                            \
    \                                                                            \
    \                       ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while start < string.count\
    \ {\n        let range = string.range(of: substring, options: [], range: start..<string.endIndex,\
    \ locale: nil)\n        if let range = range {\n            count += 1\n     \
    \       start = range.upperBound\n        } else {\n            break\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7_uyx2ci.swift:7:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, options: [], range:\
    \ start..<string.endIndex, locale: nil)\n                    ~~~~~~ ^~~~~\n/tmp/tmp7_uyx2ci.swift:7:102:\
    \ error: 'nil' requires a contextual type\n        let range = string.range(of:\
    \ substring, options: [], range: start..<string.endIndex, locale: nil)\n     \
    \                                                                            \
    \                    ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while start < string.count\
    \ {\n        let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex, locale: nil)\n        if let range = range {\n\
    \            count += 1\n            start = range.upperBound\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgp246y0w.swift:7:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex, locale: nil)\n                    ~~~~~~ ^~~~~\n\
    /tmp/tmpgp246y0w.swift:7:59: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n        let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: start..<string.endIndex, locale: nil)\n  \
    \                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpgp246y0w.swift:7:116:\
    \ error: 'nil' requires a contextual type\n        let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: start..<string.endIndex, locale:\
    \ nil)\n                                                                     \
    \                                              ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: string.startIndex..<string.endIndex,\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n        string = string.substring(from: range.upperBound)\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpvmn5504m.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: string.startIndex..<string.endIndex, locale: nil) {\n               \
    \       ~~~~~~ ^~~~~\n/tmp/tmpvmn5504m.swift:6:61: error: cannot infer contextual\
    \ base in reference to member 'caseInsensitive'\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: string.startIndex..<string.endIndex,\
    \ locale: nil) {\n                                                           ~^~~~~~~~~~~~~~~\n\
    /tmp/tmpvmn5504m.swift:6:130: error: 'nil' requires a contextual type\n    while\
    \ let range = string.range(of: substring, options: .caseInsensitive, range: string.startIndex..<string.endIndex,\
    \ locale: nil) {\n                                                           \
    \                                                                      ^\n/tmp/tmpvmn5504m.swift:9:9:\
    \ error: cannot assign to value: 'string' is a 'let' constant\n        string\
    \ = string.substring(from: range.upperBound)\n        ^~~~~~\n/tmp/tmpvmn5504m.swift:9:25:\
    \ error: value of type 'String' has no member 'substring'\n        string = string.substring(from:\
    \ range.upperBound)\n                 ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5ts7spdu.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: Range(uncheckedBounds: (lower: string.index(string.startIndex, offsetBy:\
    \ start), upper: string.endIndex)), locale: nil) {\n                      ~~~~~~\
    \ ^~~~~\n/tmp/tmp5ts7spdu.swift:6:61: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n    while let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: Range(uncheckedBounds: (lower: string.index(string.startIndex,\
    \ offsetBy: start), upper: string.endIndex)), locale: nil) {\n               \
    \                                            ~^~~~~~~~~~~~~~~\n/tmp/tmp5ts7spdu.swift:6:200:\
    \ error: 'nil' requires a contextual type\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: Range(uncheckedBounds: (lower:\
    \ string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n                                                           \
    \                                                                            \
    \                                                                ^\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .literal, range: start..<string.endIndex,\
    \ locale: nil) {\n        count += 1\n        start = range.upperBound\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgg98pwda.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .literal,\
    \ range: start..<string.endIndex, locale: nil) {\n                      ~~~~~~\
    \ ^~~~~\n/tmp/tmpgg98pwda.swift:6:61: error: cannot infer contextual base in reference\
    \ to member 'literal'\n    while let range = string.range(of: substring, options:\
    \ .literal, range: start..<string.endIndex, locale: nil) {\n                 \
    \                                          ~^~~~~~~\n/tmp/tmpgg98pwda.swift:6:110:\
    \ error: 'nil' requires a contextual type\n    while let range = string.range(of:\
    \ substring, options: .literal, range: start..<string.endIndex, locale: nil) {\n\
    \                                                                            \
    \                                 ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: [], range: range) {\n\
    \        count += 1\n        range = r.upperBound..<string.endIndex\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8mrqnizh.swift:6:26: error: value of type 'String' has no member\
    \ 'range'\n    while let r = string.range(of: substring, options: [], range: range)\
    \ {\n                  ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: string.index(start,\
    \ offsetBy: 0)..<string.endIndex, locale: nil) {\n        count += 1\n       \
    \ start = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3fzzxorr.swift:6:98: error: cannot convert value of type 'Int'\
    \ to expected argument type 'String.Index'\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: string.index(start, offsetBy: 0)..<string.endIndex,\
    \ locale: nil) {\n                                                           \
    \                                      ^\n/tmp/tmp3fzzxorr.swift:6:30: error:\
    \ value of type 'String' has no member 'range'\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: string.index(start, offsetBy: 0)..<string.endIndex,\
    \ locale: nil) {\n                      ~~~~~~ ^~~~~\n/tmp/tmp3fzzxorr.swift:6:61:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: string.index(start, offsetBy: 0)..<string.endIndex, locale: nil) {\n\
    \                                                           ~^~~~~~~~~~~~~~~\n\
    /tmp/tmp3fzzxorr.swift:6:145: error: 'nil' requires a contextual type\n    while\
    \ let range = string.range(of: substring, options: .caseInsensitive, range: string.index(start,\
    \ offsetBy: 0)..<string.endIndex, locale: nil) {\n                           \
    \                                                                            \
    \                                         ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5ts7spdu.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: Range(uncheckedBounds: (lower: string.index(string.startIndex, offsetBy:\
    \ start), upper: string.endIndex)), locale: nil) {\n                      ~~~~~~\
    \ ^~~~~\n/tmp/tmp5ts7spdu.swift:6:61: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n    while let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: Range(uncheckedBounds: (lower: string.index(string.startIndex,\
    \ offsetBy: start), upper: string.endIndex)), locale: nil) {\n               \
    \                                            ~^~~~~~~~~~~~~~~\n/tmp/tmp5ts7spdu.swift:6:200:\
    \ error: 'nil' requires a contextual type\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: Range(uncheckedBounds: (lower:\
    \ string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n                                                           \
    \                                                                            \
    \                                                                ^\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while true {\n \
    \       let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n        if let range = range {\n           \
    \ count += 1\n            start = range.startIndex.distanceTo(range.endIndex)\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpc6ut62yt.swift:7:62: error: cannot find 'NSStringCompareOptions'\
    \ in scope\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n                                           \
    \                  ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpc6ut62yt.swift:7:28: error:\
    \ value of type 'String' has no member 'rangeOfString'\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                   ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpc6ut62yt.swift:7:107: error:\
    \ referencing initializer 'init(_:)' on 'Range' requires that 'String.Index' conform\
    \ to 'Strideable'\n        let range = string.rangeOfString(substring, options:\
    \ NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start: string.startIndex.advancedBy(start),\
    \ end: string.endIndex), locale: nil)\n                                      \
    \                                                                    ^\nSwift.Range:1:11:\
    \ note: where 'Bound' = 'String.Index'\nextension Range where Bound : Strideable,\
    \ Bound.Stride : SignedInteger {\n          ^\n/tmp/tmpc6ut62yt.swift:7:183: error:\
    \ extra argument 'end' in call\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                                                                            \
    \                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n\
    /tmp/tmpc6ut62yt.swift:7:152: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), "
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = 0\n    while index < string.characters.count\
    \ {\n        if let range = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n            count += 1\n            index = range.upperBound\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpb7fw46yp.swift:6:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    while index < string.characters.count {\n         \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpb7fw46yp.swift:7:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n                       ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009146
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var startIndex = string.startIndex\n\
    \    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n        count += 1\n        startIndex = range.upperBound\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpexz6qz_d.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5ts7spdu.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: Range(uncheckedBounds: (lower: string.index(string.startIndex, offsetBy:\
    \ start), upper: string.endIndex)), locale: nil) {\n                      ~~~~~~\
    \ ^~~~~\n/tmp/tmp5ts7spdu.swift:6:61: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n    while let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: Range(uncheckedBounds: (lower: string.index(string.startIndex,\
    \ offsetBy: start), upper: string.endIndex)), locale: nil) {\n               \
    \                                            ~^~~~~~~~~~~~~~~\n/tmp/tmp5ts7spdu.swift:6:200:\
    \ error: 'nil' requires a contextual type\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: Range(uncheckedBounds: (lower:\
    \ string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n                                                           \
    \                                                                            \
    \                                                                ^\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n        }\n        index = index.advancedBy(1)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7vmvbcfu.swift:7:19: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp7vmvbcfu.swift:8:18: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            count++\n\
    \                 ^~\n/tmp/tmp7vmvbcfu.swift:9:27: error: value of type 'String.Index'\
    \ has no member 'advancedBy'\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n                    ~~~~~ ^~~~~~~~~~\n/tmp/tmp7vmvbcfu.swift:11:23: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        index = index.advancedBy(1)\n\
    \                ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: [], range: start..<string.endIndex) {\n\
    \        count += 1\n        start = range.upperBound\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmppoy6u6yf.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: [], range:\
    \ start..<string.endIndex) {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while true {\n \
    \       let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n        if let range = range {\n           \
    \ count++\n            start = range.startIndex.distanceTo(range.endIndex)\n \
    \       } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5vwpib0e.swift:7:62: error: cannot find 'NSStringCompareOptions'\
    \ in scope\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n                                           \
    \                  ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5vwpib0e.swift:7:28: error:\
    \ value of type 'String' has no member 'rangeOfString'\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                   ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmp5vwpib0e.swift:7:107: error:\
    \ referencing initializer 'init(_:)' on 'Range' requires that 'String.Index' conform\
    \ to 'Strideable'\n        let range = string.rangeOfString(substring, options:\
    \ NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start: string.startIndex.advancedBy(start),\
    \ end: string.endIndex), locale: nil)\n                                      \
    \                                                                    ^\nSwift.Range:1:11:\
    \ note: where 'Bound' = 'String.Index'\nextension Range where Bound : Strideable,\
    \ Bound.Stride : SignedInteger {\n          ^\n/tmp/tmp5vwpib0e.swift:7:183: error:\
    \ extra argument 'end' in call\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                                                                            \
    \                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n\
    /tmp/tmp5vwpib0e.swift:7:152: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), "
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while start < string.count\
    \ {\n        if let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex) {\n            count += 1\n            start\
    \ = range.upperBound\n        } else {\n            break\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2kgv6acq.swift:7:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex) {\n                       ~~~~~~ ^~~~~\n/tmp/tmp2kgv6acq.swift:7:62:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \        if let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex) {\n                                        \
    \                    ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n        }\n        index = index.advancedBy(1)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7vmvbcfu.swift:7:19: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp7vmvbcfu.swift:8:18: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            count++\n\
    \                 ^~\n/tmp/tmp7vmvbcfu.swift:9:27: error: value of type 'String.Index'\
    \ has no member 'advancedBy'\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n                    ~~~~~ ^~~~~~~~~~\n/tmp/tmp7vmvbcfu.swift:11:23: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        index = index.advancedBy(1)\n\
    \                ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while true {\n \
    \       let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n        if let range = range {\n           \
    \ count += 1\n            start = range.startIndex.distanceTo(range.endIndex)\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpc6ut62yt.swift:7:62: error: cannot find 'NSStringCompareOptions'\
    \ in scope\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n                                           \
    \                  ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpc6ut62yt.swift:7:28: error:\
    \ value of type 'String' has no member 'rangeOfString'\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                   ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpc6ut62yt.swift:7:107: error:\
    \ referencing initializer 'init(_:)' on 'Range' requires that 'String.Index' conform\
    \ to 'Strideable'\n        let range = string.rangeOfString(substring, options:\
    \ NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start: string.startIndex.advancedBy(start),\
    \ end: string.endIndex), locale: nil)\n                                      \
    \                                                                    ^\nSwift.Range:1:11:\
    \ note: where 'Bound' = 'String.Index'\nextension Range where Bound : Strideable,\
    \ Bound.Stride : SignedInteger {\n          ^\n/tmp/tmpc6ut62yt.swift:7:183: error:\
    \ extra argument 'end' in call\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \                                                                            \
    \                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n\
    /tmp/tmpc6ut62yt.swift:7:152: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), "
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count)\n\
    \        } else {\n            index = index.advancedBy(1)\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjgewudje.swift:7:19: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpjgewudje.swift:8:18: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            count++\n\
    \                 ^~\n/tmp/tmpjgewudje.swift:9:27: error: value of type 'String.Index'\
    \ has no member 'advancedBy'\n            index = index.advancedBy(substring.characters.count)\n\
    \                    ~~~~~ ^~~~~~~~~~\n/tmp/tmpjgewudje.swift:11:27: error: value\
    \ of type 'String.Index' has no member 'advancedBy'\n            index = index.advancedBy(1)\n\
    \                    ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count)\n\
    \        } else {\n            index = index.advancedBy(1)\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjgewudje.swift:7:19: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpjgewudje.swift:8:18: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            count++\n\
    \                 ^~\n/tmp/tmpjgewudje.swift:9:27: error: value of type 'String.Index'\
    \ has no member 'advancedBy'\n            index = index.advancedBy(substring.characters.count)\n\
    \                    ~~~~~ ^~~~~~~~~~\n/tmp/tmpjgewudje.swift:11:27: error: value\
    \ of type 'String.Index' has no member 'advancedBy'\n            index = index.advancedBy(1)\n\
    \                    ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: [], range: range) {\n\
    \        count += 1\n        range = r.upperBound..<string.endIndex\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8mrqnizh.swift:6:26: error: value of type 'String' has no member\
    \ 'range'\n    while let r = string.range(of: substring, options: [], range: range)\
    \ {\n                  ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5ts7spdu.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: Range(uncheckedBounds: (lower: string.index(string.startIndex, offsetBy:\
    \ start), upper: string.endIndex)), locale: nil) {\n                      ~~~~~~\
    \ ^~~~~\n/tmp/tmp5ts7spdu.swift:6:61: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n    while let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: Range(uncheckedBounds: (lower: string.index(string.startIndex,\
    \ offsetBy: start), upper: string.endIndex)), locale: nil) {\n               \
    \                                            ~^~~~~~~~~~~~~~~\n/tmp/tmp5ts7spdu.swift:6:200:\
    \ error: 'nil' requires a contextual type\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: Range(uncheckedBounds: (lower:\
    \ string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n                                                           \
    \                                                                            \
    \                                                                ^\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: [], range: Range(uncheckedBounds: (start,\
    \ string.endIndex)), locale: nil) {\n        count += 1\n        start = range.upperBound\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpsk14rrmk.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: [], range:\
    \ Range(uncheckedBounds: (start, string.endIndex)), locale: nil) {\n         \
    \             ~~~~~~ ^~~~~\n/tmp/tmpsk14rrmk.swift:6:129: error: 'nil' requires\
    \ a contextual type\n    while let range = string.range(of: substring, options:\
    \ [], range: Range(uncheckedBounds: (start, string.endIndex)), locale: nil) {\n\
    \                                                                            \
    \                                                    ^\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.rangeOfString(substring,\
    \ range: index..<string.endIndex) != nil {\n            count++\n            index\
    \ = advance(index, 1)\n        } else {\n            break\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphmxtzw28.swift:7:19: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        if string.rangeOfString(substring, range: index..<string.endIndex)\
    \ != nil {\n           ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmphmxtzw28.swift:8:18: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            count++\n\
    \                 ^~\n/tmp/tmphmxtzw28.swift:9:21: error: cannot find 'advance'\
    \ in scope\n            index = advance(index, 1)\n                    ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009146
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var searchRange = string.startIndex..<string.endIndex\n\
    \    while let foundRange = string.range(of: substring, options: [], range: searchRange)\
    \ {\n        count += 1\n        searchRange = Range(uncheckedBounds: (lower:\
    \ foundRange.upperBound, upper: searchRange.upperBound))\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpsn8dn7up.swift:6:35: error: value of type 'String' has no member\
    \ 'range'\n    while let foundRange = string.range(of: substring, options: [],\
    \ range: searchRange) {\n                           ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009145
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        let range = string.rangeOfString(substring,\
    \ range: index..<string.endIndex)\n        if let range = range {\n          \
    \  count++\n            index = range.endIndex\n        } else {\n           \
    \ break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpn57vls0x.swift:7:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, range:\
    \ index..<string.endIndex)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpn57vls0x.swift:9:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  count++\n                 ^~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: [], range: range) {\n\
    \        count += 1\n        range = r.upperBound..<string.endIndex\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8mrqnizh.swift:6:26: error: value of type 'String' has no member\
    \ 'range'\n    while let r = string.range(of: substring, options: [], range: range)\
    \ {\n                  ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count)\n\
    \        } else {\n            index = index.advancedBy(1)\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjgewudje.swift:7:19: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpjgewudje.swift:8:18: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            count++\n\
    \                 ^~\n/tmp/tmpjgewudje.swift:9:27: error: value of type 'String.Index'\
    \ has no member 'advancedBy'\n            index = index.advancedBy(substring.characters.count)\n\
    \                    ~~~~~ ^~~~~~~~~~\n/tmp/tmpjgewudje.swift:11:27: error: value\
    \ of type 'String.Index' has no member 'advancedBy'\n            index = index.advancedBy(1)\n\
    \                    ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count)\n\
    \        } else {\n            index = index.advancedBy(1)\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjgewudje.swift:7:19: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpjgewudje.swift:8:18: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            count++\n\
    \                 ^~\n/tmp/tmpjgewudje.swift:9:27: error: value of type 'String.Index'\
    \ has no member 'advancedBy'\n            index = index.advancedBy(substring.characters.count)\n\
    \                    ~~~~~ ^~~~~~~~~~\n/tmp/tmpjgewudje.swift:11:27: error: value\
    \ of type 'String.Index' has no member 'advancedBy'\n            index = index.advancedBy(1)\n\
    \                    ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var startIndex = string.startIndex\n\
    \    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n        count += 1\n        startIndex = range.upperBound\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpexz6qz_d.swift:6:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009144
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
    \ String) -> Int {\n    var count = 0\n    var index = string.startIndex\n   \
    \ while index < string.endIndex {\n        if string.hasPrefix(substring, startingAt:\
    \ index) {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphceq1f6e.swift:7:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660009144
