language: swift
name: HumanEval_103_rounded_avg
results:
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let sum = (n + m) * (m - n + 1) / 2\n \
    \   let avg = sum / (m - n + 1)\n    return .success(String(avg, radix: 2))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpoov2bgpv/tmpoov2bgpv.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6330187c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b632fe7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b632fe7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b632fe7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoov2bgpv                        0x000056379bf17775 <unavailable> + 6005

    5    libc.so.6                          0x00002b6330373460 __libc_start_main +
    245

    6    tmpoov2bgpv                        0x000056379bf17379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let sum = (n + m) * (m - n + 1) / 2\n \
    \   let avg = sum / (m - n + 1)\n    return .success(String(avg, radix: 2))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpoov2bgpv/tmpoov2bgpv.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6330187c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b632fe7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b632fe7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b632fe7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoov2bgpv                        0x000056379bf17775 <unavailable> + 6005

    5    libc.so.6                          0x00002b6330373460 __libc_start_main +
    245

    6    tmpoov2bgpv                        0x000056379bf17379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    let rounded = Int(round(Double(avg)))\n\
    \    let binary = String(rounded, radix: 2)\n    return .success(binary)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmptxzph_v5.swift:12:23: error: cannot find 'round' in scope\n   \
    \ let rounded = Int(round(Double(avg)))\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    let binary = String(avg,\
    \ radix: 2)\n    return .success(binary)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmplclx71x8/tmplclx71x8.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affec484c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affec17bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affec17b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affec17a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplclx71x8                        0x000055b765283775 <unavailable> + 6005

    5    libc.so.6                          0x00002affec670460 __libc_start_main +
    245

    6    tmplclx71x8                        0x000055b765283379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let sum = (n + m) * (m - n + 1) / 2\n \
    \   let avg = sum / (m - n + 1)\n    return .success(String(avg, radix: 2))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpoov2bgpv/tmpoov2bgpv.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6330187c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b632fe7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b632fe7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b632fe7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoov2bgpv                        0x000056379bf17775 <unavailable> + 6005

    5    libc.so.6                          0x00002b6330373460 __libc_start_main +
    245

    6    tmpoov2bgpv                        0x000056379bf17379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let sum = (n + m) * (m - n + 1) / 2\n    let avg\
    \ = sum / (m - n + 1)\n    return .success(String(avg, radix: 2))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmph7l6vdec/tmph7l6vdec.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4eaf715c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4eaf40cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4eaf40c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4eaf40b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7l6vdec                        0x000055f2ec37d775 <unavailable> + 6005

    5    libc.so.6                          0x00002b4eaf901460 __libc_start_main +
    245

    6    tmph7l6vdec                        0x000055f2ec37d379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    let bin = String(avg,\
    \ radix: 2)\n    return .success(bin)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpr9vqbxoi/tmpr9vqbxoi.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff72aa4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff7279bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff7279b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff7279a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr9vqbxoi                        0x0000556a2a195775 <unavailable> + 6005

    5    libc.so.6                          0x00002aff72c90460 __libc_start_main +
    245

    6    tmpr9vqbxoi                        0x0000556a2a195379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let average = (n + m) / 2\n    return .success(String(average,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpdfkmmlk5/tmpdfkmmlk5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac43f7d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac43f4cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac43f4cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac43f4cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdfkmmlk5                        0x0000561b95f71775 <unavailable> + 6005

    5    libc.so.6                          0x00002ac43f9c2460 __libc_start_main +
    245

    6    tmpdfkmmlk5                        0x0000561b95f71379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    let bin = String(avg,\
    \ radix: 2)\n    return .success(bin)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpr9vqbxoi/tmpr9vqbxoi.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff72aa4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff7279bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff7279b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff7279a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr9vqbxoi                        0x0000556a2a195775 <unavailable> + 6005

    5    libc.so.6                          0x00002aff72c90460 __libc_start_main +
    245

    6    tmpr9vqbxoi                        0x0000556a2a195379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let average = (n + m) / 2\n    return .success(String(average,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpqy6_zyo9/tmpqy6_zyo9.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b804e287c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b804df7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b804df7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b804df7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqy6_zyo9                        0x000055f6211d4775 <unavailable> + 6005

    5    libc.so.6                          0x00002b804e473460 __libc_start_main +
    245

    6    tmpqy6_zyo9                        0x000055f6211d4379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    let bin = String(avg,\
    \ radix: 2)\n    return .success(bin)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpr9vqbxoi/tmpr9vqbxoi.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff72aa4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff7279bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff7279b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff7279a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr9vqbxoi                        0x0000556a2a195775 <unavailable> + 6005

    5    libc.so.6                          0x00002aff72c90460 __libc_start_main +
    245

    6    tmpr9vqbxoi                        0x0000556a2a195379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    let rounded = Int(round(Double(avg)))\n\
    \    return .success(String(rounded, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmp3o_th0p2.swift:12:23: error: cannot find 'round' in scope\n   \
    \ let rounded = Int(round(Double(avg)))\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    let rounded = Int(round(Double(avg)))\n\
    \    return .success(String(rounded, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmp3o_th0p2.swift:12:23: error: cannot find 'round' in scope\n   \
    \ let rounded = Int(round(Double(avg)))\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n  \
    \      return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp391ut2_5/tmp391ut2_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80cdf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80cae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80cae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80cae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391ut2_5                        0x00005644b0ac7775 <unavailable> + 6005

    5    libc.so.6                          0x00002ba80cfdc460 __libc_start_main +
    245

    6    tmp391ut2_5                        0x00005644b0ac7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    func rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp84xh1vha/tmp84xh1vha.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf3365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf305cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf305c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf305b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84xh1vha                        0x0000555590e3c775 <unavailable> + 6005

    5    libc.so.6                          0x00002adbf3551460 __libc_start_main +
    245

    6    tmp84xh1vha                        0x0000555590e3c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009102
