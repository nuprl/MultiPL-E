name: HumanEval_68_pluck
language: swift
prompt: "\n/// \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
  \ The plucked node should be the node with the smallest even value.\n/// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n/// The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n/// If there are no even values or the given array is empty, return\
  \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
  \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
  \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
  \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
  \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
  \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
  \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
  \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
  assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) ==\
  \ [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
completions: ["    guard arr.count > 0 else { return [] }\n    var minEven = Int.max\n\
    \    var minEvenIndex = -1\n    for (index, value) in arr.enumerated() {\n   \
    \     if value % 2 == 0 && value < minEven {\n            minEven = value\n  \
    \          minEvenIndex = index\n        }\n    }\n    return minEvenIndex ==\
    \ -1 ? [] : [minEven, minEvenIndex]", "    var minEven = Int.max\n    var minEvenIndex\
    \ = -1\n    for (index, value) in arr.enumerated() {\n        if value % 2 ==\
    \ 0 && value < minEven {\n            minEven = value\n            minEvenIndex\
    \ = index\n        }\n    }\n    return minEvenIndex == -1 ? [] : [minEven, minEvenIndex]",
  "    var minEven = Int.max\n    var minEvenIndex = -1\n    for (i, n) in arr.enumerated()\
    \ {\n        if n % 2 == 0 && n < minEven {\n            minEven = n\n       \
    \     minEvenIndex = i\n        }\n    }\n    return minEvenIndex == -1 ? [] :\
    \ [minEven, minEvenIndex]", "    guard !arr.isEmpty else { return [] }\n    var\
    \ minEven = Int.max\n    var minEvenIndex = Int.max\n    for (index, element)\
    \ in arr.enumerated() {\n        if element % 2 == 0 {\n            if element\
    \ < minEven {\n                minEven = element\n                minEvenIndex\
    \ = index\n            } else if element == minEven {\n                minEvenIndex\
    \ = min(minEvenIndex, index)\n            }\n        }\n    }\n    return minEven\
    \ == Int.max ? [] : [minEven, minEvenIndex]", "    guard !arr.isEmpty else { return\
    \ [] }\n    var minEven = Int.max\n    var minEvenIndex = -1\n    for (index,\
    \ value) in arr.enumerated() {\n        if value % 2 == 0 {\n            if value\
    \ < minEven {\n                minEven = value\n                minEvenIndex =\
    \ index\n            }\n        }\n    }\n    if minEvenIndex == -1 {\n      \
    \  return []\n    }\n    return [minEven, minEvenIndex]", "    var minEven = Int.max\n\
    \    var minEvenIndex = -1\n    for (index, value) in arr.enumerated() {\n   \
    \     if value % 2 == 0 && value < minEven {\n            minEven = value\n  \
    \          minEvenIndex = index\n        }\n    }\n    return minEvenIndex ==\
    \ -1 ? [] : [minEven, minEvenIndex]", "    guard !arr.isEmpty else { return []\
    \ }\n    var minEven = Int.max\n    var minEvenIndex = -1\n    for (index, value)\
    \ in arr.enumerated() {\n        if value % 2 == 0 {\n            if value < minEven\
    \ {\n                minEven = value\n                minEvenIndex = index\n \
    \           }\n        }\n    }\n    return minEvenIndex == -1 ? [] : [minEven,\
    \ minEvenIndex]", "    var evens = [Int]()\n    var evenIndexes = [Int]()\n  \
    \  for (index, value) in arr.enumerated() {\n        if value % 2 == 0 {\n   \
    \         evens.append(value)\n            evenIndexes.append(index)\n       \
    \ }\n    }\n    if evens.count == 0 {\n        return []\n    }\n    let minEven\
    \ = evens.min()!\n    let minEvenIndex = evenIndexes[evens.firstIndex(of: minEven)!]\n\
    \    return [minEven, minEvenIndex]", "    var minEven = Int.max\n    var minEvenIndex\
    \ = -1\n    for (index, value) in arr.enumerated() {\n        if value % 2 ==\
    \ 0 && value < minEven {\n            minEven = value\n            minEvenIndex\
    \ = index\n        }\n    }\n    if minEvenIndex == -1 {\n        return []\n\
    \    }\n    return [minEven, minEvenIndex]", "    guard !arr.isEmpty else { return\
    \ [] }\n    var minEven = Int.max\n    var minEvenIndex = -1\n    for (index,\
    \ value) in arr.enumerated() {\n        if value % 2 == 0 && value < minEven {\n\
    \            minEven = value\n            minEvenIndex = index\n        }\n  \
    \  }\n    return minEvenIndex == -1 ? [] : [minEven, minEvenIndex]", "    var\
    \ evens = [Int]()\n    var evensIndex = [Int]()\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 {\n            evens.append(value)\n          \
    \  evensIndex.append(index)\n        }\n    }\n    if evens.count == 0 {\n   \
    \     return []\n    }\n    let minEven = evens.min()!\n    let minEvenIndex =\
    \ evensIndex[evens.firstIndex(of: minEven)!]\n    return [minEven, minEvenIndex]",
  "    guard arr.count > 0 else { return [] }\n    var minEven = Int.max\n    var\
    \ minEvenIndex = Int.max\n    for (index, value) in arr.enumerated() {\n     \
    \   if value % 2 == 0 {\n            if value < minEven {\n                minEven\
    \ = value\n                minEvenIndex = index\n            } else if value ==\
    \ minEven {\n                minEvenIndex = min(minEvenIndex, index)\n       \
    \     }\n        }\n    }\n    return minEven == Int.max ? [] : [minEven, minEvenIndex]",
  "    guard arr.count > 0 else { return [] }\n    var minEven = Int.max\n    var\
    \ minEvenIndex = Int.max\n    for (index, value) in arr.enumerated() {\n     \
    \   if value % 2 == 0 && value < minEven {\n            minEven = value\n    \
    \        minEvenIndex = index\n        }\n    }\n    return minEven == Int.max\
    \ ? [] : [minEven, minEvenIndex]", "    var minEven = Int.max\n    var minEvenIndex\
    \ = Int.max\n    for (index, value) in arr.enumerated() {\n        if value %\
    \ 2 == 0 && value < minEven {\n            minEven = value\n            minEvenIndex\
    \ = index\n        }\n    }\n    if minEven == Int.max {\n        return []\n\
    \    }\n    return [minEven, minEvenIndex]", "    var even = [Int]()\n    for\
    \ (index, value) in arr.enumerated() {\n        if value % 2 == 0 {\n        \
    \    even.append(value)\n        }\n    }\n    if even.count == 0 {\n        return\
    \ []\n    }\n    let min = even.min()!\n    for (index, value) in arr.enumerated()\
    \ {\n        if value == min {\n            return [value, index]\n        }\n\
    \    }\n    return []", "    guard arr.count > 0 else { return [] }\n    var minEven\
    \ = Int.max\n    var minEvenIndex = -1\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 && value < minEven {\n            minEven = value\n\
    \            minEvenIndex = index\n        }\n    }\n    return minEvenIndex ==\
    \ -1 ? [] : [minEven, minEvenIndex]", "    guard arr.count > 0 else { return []\
    \ }\n    var min = Int.max\n    var minIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] % 2 == 0 && arr[i] < min {\n            min = arr[i]\n\
    \            minIndex = i\n        }\n    }\n    return minIndex == -1 ? [] :\
    \ [min, minIndex]", "    guard !arr.isEmpty else { return [] }\n    var minEven\
    \ = Int.max\n    var minEvenIndex = -1\n    for (i, n) in arr.enumerated() {\n\
    \        if n % 2 == 0 {\n            if n < minEven {\n                minEven\
    \ = n\n                minEvenIndex = i\n            }\n        }\n    }\n   \
    \ return minEvenIndex == -1 ? [] : [minEven, minEvenIndex]", "    let evens =\
    \ arr.filter { $0 % 2 == 0 }\n    guard let min = evens.min() else { return []\
    \ }\n    let index = arr.firstIndex(of: min) ?? 0\n    return [min, index]", " \
    \   var result = [Int]()\n    var minEven = Int.max\n    var minEvenIndex = Int.max\n\
    \    for (index, value) in arr.enumerated() {\n        if value % 2 == 0 && value\
    \ < minEven {\n            minEven = value\n            minEvenIndex = index\n\
    \        }\n    }\n    if minEven != Int.max {\n        result.append(minEven)\n\
    \        result.append(minEvenIndex)\n    }\n    return result", '    return []',
  "    guard arr.count > 0 else { return [] }\n    var minEven = Int.max\n    var\
    \ minEvenIndex = -1\n    for (index, value) in arr.enumerated() {\n        if\
    \ value % 2 == 0 {\n            if value < minEven {\n                minEven\
    \ = value\n                minEvenIndex = index\n            }\n        }\n  \
    \  }\n    if minEvenIndex == -1 {\n        return []\n    }\n    return [minEven,\
    \ minEvenIndex]", "    guard arr.count > 0 else { return [] }\n    var minEven\
    \ = Int.max\n    var minEvenIndex = Int.max\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 && value < minEven {\n            minEven = value\n\
    \            minEvenIndex = index\n        }\n    }\n    return minEven == Int.max\
    \ ? [] : [minEven, minEvenIndex]", "    guard !arr.isEmpty else { return [] }\n\
    \    let evens = arr.filter { $0 % 2 == 0 }\n    guard !evens.isEmpty else { return\
    \ [] }\n    let min = evens.min()!\n    let index = arr.firstIndex(of: min)!\n\
    \    return [min, index]", "    guard arr.count > 0 else { return [] }\n    var\
    \ evens = [Int]()\n    for i in 0..<arr.count {\n        if arr[i] % 2 == 0 {\n\
    \            evens.append(arr[i])\n        }\n    }\n    guard evens.count > 0\
    \ else { return [] }\n    var min = evens[0]\n    var index = 0\n    for i in\
    \ 0..<evens.count {\n        if evens[i] < min {\n            min = evens[i]\n\
    \            index = i\n        }\n    }\n    return [min, index]", "    guard\
    \ arr.count > 0 else { return [] }\n    var minEven = Int.max\n    var minEvenIndex\
    \ = -1\n    for i in 0..<arr.count {\n        if arr[i] % 2 == 0 && arr[i] < minEven\
    \ {\n            minEven = arr[i]\n            minEvenIndex = i\n        }\n \
    \   }\n    return minEvenIndex == -1 ? [] : [minEven, minEvenIndex]", "    guard\
    \ arr.count > 0 else { return [] }\n    var minEven = Int.max\n    var minEvenIndex\
    \ = -1\n    for i in 0..<arr.count {\n        if arr[i] % 2 == 0 {\n         \
    \   if arr[i] < minEven {\n                minEven = arr[i]\n                minEvenIndex\
    \ = i\n            }\n        }\n    }\n    return minEvenIndex == -1 ? [] : [minEven,\
    \ minEvenIndex]", "    guard arr.count > 0 else { return [] }\n    var evens =\
    \ [Int]()\n    var evensIndex = [Int]()\n    for (index, element) in arr.enumerated()\
    \ {\n        if element % 2 == 0 {\n            evens.append(element)\n      \
    \      evensIndex.append(index)\n        }\n    }\n    guard evens.count > 0 else\
    \ { return [] }\n    let minEven = evens.min()!\n    let minEvenIndex = evensIndex[evens.firstIndex(of:\
    \ minEven)!]\n    return [minEven, minEvenIndex]", "    guard arr.count > 0 else\
    \ { return [] }\n    var minEven = Int.max\n    var minEvenIndex = -1\n    for\
    \ (index, value) in arr.enumerated() {\n        if value % 2 == 0 && value < minEven\
    \ {\n            minEven = value\n            minEvenIndex = index\n        }\n\
    \    }\n    return minEvenIndex == -1 ? [] : [minEven, minEvenIndex]", "    guard\
    \ !arr.isEmpty else { return [] }\n    var minEven = Int.max\n    var minEvenIndex\
    \ = -1\n    for (index, value) in arr.enumerated() {\n        if value % 2 ==\
    \ 0 && value < minEven {\n            minEven = value\n            minEvenIndex\
    \ = index\n        }\n    }\n    return minEvenIndex == -1 ? [] : [minEven, minEvenIndex]",
  "    var result = [Int]()\n    var minEven = Int.max\n    var minEvenIndex = Int.max\n\
    \    for (index, value) in arr.enumerated() {\n        if value % 2 == 0 {\n \
    \           if value < minEven {\n                minEven = value\n          \
    \      minEvenIndex = index\n            } else if value == minEven && index <\
    \ minEvenIndex {\n                minEvenIndex = index\n            }\n      \
    \  }\n    }\n    if minEven != Int.max {\n        result.append(minEven)\n   \
    \     result.append(minEvenIndex)\n    }\n    return result", "    var result\
    \ = [Int]()\n    var minEven = Int.max\n    var minEvenIndex = Int.max\n    for\
    \ (index, value) in arr.enumerated() {\n        if value % 2 == 0 {\n        \
    \    if value < minEven {\n                minEven = value\n                minEvenIndex\
    \ = index\n            } else if value == minEven && index < minEvenIndex {\n\
    \                minEvenIndex = index\n            }\n        }\n    }\n    if\
    \ minEven != Int.max {\n        result.append(minEven)\n        result.append(minEvenIndex)\n\
    \    }\n    return result", "    let evens = arr.filter { $0 % 2 == 0 }\n    guard\
    \ let minEven = evens.min() else { return [] }\n    let minEvenIndex = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, minEvenIndex]", "    guard arr.count > 0 else\
    \ { return [] }\n    var result = [Int]()\n    var min = Int.max\n    for i in\
    \ 0..<arr.count {\n        if arr[i] % 2 == 0 && arr[i] < min {\n            min\
    \ = arr[i]\n            result = [min, i]\n        }\n    }\n    return result.count\
    \ > 0 ? result : []", "    guard arr.count > 0 else { return [] }\n    var minEven\
    \ = Int.max\n    var minEvenIndex = Int.max\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 && value < minEven {\n            minEven = value\n\
    \            minEvenIndex = index\n        }\n    }\n    return minEven == Int.max\
    \ ? [] : [minEven, minEvenIndex]", "    guard arr.count > 0 else { return [] }\n\
    \    let evens = arr.filter { $0 % 2 == 0 }\n    guard evens.count > 0 else {\
    \ return [] }\n    let minEven = evens.min()!\n    let minEvenIndex = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, minEvenIndex]", "    let evens = arr.filter\
    \ { $0 % 2 == 0 }\n    guard let min = evens.min() else { return [] }\n    guard\
    \ let index = arr.firstIndex(of: min) else { return [] }\n    return [min, index]",
  "    let even = arr.filter { $0 % 2 == 0 }\n    guard !even.isEmpty else { return\
    \ [] }\n    let min = even.min()!\n    let index = arr.firstIndex(of: min)!\n\
    \    return [min, index]", "    var min = Int.max\n    var minIndex = Int.max\n\
    \    for (index, value) in arr.enumerated() {\n        if value % 2 == 0 && value\
    \ < min {\n            min = value\n            minIndex = index\n        }\n\
    \    }\n    if min == Int.max {\n        return []\n    }\n    return [min, minIndex]",
  "    var minEven = Int.max\n    var minEvenIndex = Int.max\n    for (index, value)\
    \ in arr.enumerated() {\n        if value % 2 == 0 {\n            if value < minEven\
    \ {\n                minEven = value\n                minEvenIndex = index\n \
    \           } else if value == minEven {\n                minEvenIndex = min(minEvenIndex,\
    \ index)\n            }\n        }\n    }\n    if minEven == Int.max {\n     \
    \   return []\n    }\n    return [minEven, minEvenIndex]", "    var minEven =\
    \ Int.max\n    var minEvenIndex = Int.max\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 {\n            if value < minEven {\n         \
    \       minEven = value\n                minEvenIndex = index\n            } else\
    \ if value == minEven {\n                minEvenIndex = min(minEvenIndex, index)\n\
    \            }\n        }\n    }\n    if minEven == Int.max {\n        return\
    \ []\n    }\n    return [minEven, minEvenIndex]", "    var minEven = Int.max\n\
    \    var minEvenIndex = -1\n    for (index, value) in arr.enumerated() {\n   \
    \     if value % 2 == 0 && value < minEven {\n            minEven = value\n  \
    \          minEvenIndex = index\n        }\n    }\n    if minEvenIndex == -1 {\n\
    \        return []\n    }\n    return [minEven, minEvenIndex]", "    guard !arr.isEmpty\
    \ else { return [] }\n    var minEven = Int.max\n    var minEvenIndex = -1\n \
    \   for (index, value) in arr.enumerated() {\n        if value % 2 == 0 {\n  \
    \          if value < minEven {\n                minEven = value\n           \
    \     minEvenIndex = index\n            }\n        }\n    }\n    return minEvenIndex\
    \ == -1 ? [] : [minEven, minEvenIndex]", "    guard arr.count > 0 else { return\
    \ [] }\n    var minEven = Int.max\n    var minEvenIndex = Int.max\n    for (index,\
    \ value) in arr.enumerated() {\n        if value % 2 == 0 {\n            if value\
    \ < minEven {\n                minEven = value\n                minEvenIndex =\
    \ index\n            } else if value == minEven && index < minEvenIndex {\n  \
    \              minEvenIndex = index\n            }\n        }\n    }\n    if minEven\
    \ == Int.max {\n        return []\n    }\n    return [minEven, minEvenIndex]",
  "    var minEven = Int.max\n    var minEvenIndex = Int.max\n    for (index, value)\
    \ in arr.enumerated() {\n        if value % 2 == 0 {\n            if value < minEven\
    \ {\n                minEven = value\n                minEvenIndex = index\n \
    \           } else if value == minEven {\n                minEvenIndex = min(minEvenIndex,\
    \ index)\n            }\n        }\n    }\n    if minEven == Int.max {\n     \
    \   return []\n    }\n    return [minEven, minEvenIndex]", "    guard arr.count\
    \ > 0 else { return [] }\n    var minEven = Int.max\n    var minEvenIndex = -1\n\
    \    for (index, value) in arr.enumerated() {\n        if value % 2 == 0 && value\
    \ < minEven {\n            minEven = value\n            minEvenIndex = index\n\
    \        }\n    }\n    return minEvenIndex == -1 ? [] : [minEven, minEvenIndex]",
  "    var minEven = Int.max\n    var minEvenIndex = Int.max\n    for (index, value)\
    \ in arr.enumerated() {\n        if value % 2 == 0 {\n            if value < minEven\
    \ {\n                minEven = value\n                minEvenIndex = index\n \
    \           } else if value == minEven {\n                minEvenIndex = min(minEvenIndex,\
    \ index)\n            }\n        }\n    }\n    if minEven == Int.max {\n     \
    \   return []\n    }\n    return [minEven, minEvenIndex]", "    var minEven =\
    \ Int.max\n    var minEvenIndex = -1\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 {\n            if value < minEven {\n         \
    \       minEven = value\n                minEvenIndex = index\n            }\n\
    \        }\n    }\n    if minEvenIndex == -1 {\n        return []\n    }\n   \
    \ return [minEven, minEvenIndex]", "    guard arr.count > 0 else { return [] }\n\
    \    var minEven = Int.max\n    var minEvenIndex = -1\n    for (index, value)\
    \ in arr.enumerated() {\n        if value % 2 == 0 && value < minEven {\n    \
    \        minEven = value\n            minEvenIndex = index\n        }\n    }\n\
    \    return minEvenIndex == -1 ? [] : [minEven, minEvenIndex]", "    guard arr.count\
    \ > 0 else { return [] }\n    var min = Int.max\n    var index = -1\n    for i\
    \ in 0..<arr.count {\n        if arr[i] % 2 == 0 && arr[i] < min {\n         \
    \   min = arr[i]\n            index = i\n        }\n    }\n    if index == -1\
    \ { return [] }\n    return [min, index]", "    var minEven = Int.max\n    var\
    \ minEvenIndex = -1\n    for (index, value) in arr.enumerated() {\n        if\
    \ value % 2 == 0 {\n            if value < minEven {\n                minEven\
    \ = value\n                minEvenIndex = index\n            }\n        }\n  \
    \  }\n    if minEvenIndex >= 0 {\n        return [minEven, minEvenIndex]\n   \
    \ }\n    return []", "    var result = [Int]()\n    var minEven = Int.max\n  \
    \  var minEvenIndex = Int.max\n    for (index, value) in arr.enumerated() {\n\
    \        if value % 2 == 0 {\n            if value < minEven {\n             \
    \   minEven = value\n                minEvenIndex = index\n            } else\
    \ if value == minEven {\n                if index < minEvenIndex {\n         \
    \           minEvenIndex = index\n                }\n            }\n        }\n\
    \    }\n    if minEven != Int.max {\n        result.append(minEven)\n        result.append(minEvenIndex)\n\
    \    }\n    return result", "    guard arr.count > 0 else { return [] }\n    var\
    \ minEven = Int.max\n    var minEvenIndex = Int.max\n    for i in 0..<arr.count\
    \ {\n        if arr[i] % 2 == 0 && arr[i] < minEven {\n            minEven = arr[i]\n\
    \            minEvenIndex = i\n        }\n    }\n    if minEven == Int.max {\n\
    \        return []\n    }\n    return [minEven, minEvenIndex]", "    var minEven\
    \ = Int.max\n    var minEvenIndex = -1\n    for i in 0..<arr.count {\n       \
    \ if arr[i] % 2 == 0 && arr[i] < minEven {\n            minEven = arr[i]\n   \
    \         minEvenIndex = i\n        }\n    }\n    if minEvenIndex == -1 {\n  \
    \      return []\n    }\n    return [minEven, minEvenIndex]", "    guard !arr.isEmpty\
    \ else { return [] }\n    var minEven = Int.max\n    var minEvenIndex = -1\n \
    \   for (index, value) in arr.enumerated() {\n        if value % 2 == 0 && value\
    \ < minEven {\n            minEven = value\n            minEvenIndex = index\n\
    \        }\n    }\n    return minEvenIndex == -1 ? [] : [minEven, minEvenIndex]",
  "    guard arr.count > 0 else { return [] }\n    var evens = [Int]()\n    for (index,\
    \ value) in arr.enumerated() {\n        if value % 2 == 0 {\n            evens.append(index)\n\
    \        }\n    }\n    guard evens.count > 0 else { return [] }\n    let min =\
    \ evens.min()!\n    return [arr[min], min]", "    var minEven = Int.max\n    var\
    \ minEvenIndex = -1\n    for (index, value) in arr.enumerated() {\n        if\
    \ value % 2 == 0 && value < minEven {\n            minEven = value\n         \
    \   minEvenIndex = index\n        }\n    }\n    return minEvenIndex == -1 ? []\
    \ : [minEven, minEvenIndex]", "    guard arr.count > 0 else { return [] }\n  \
    \  var minEven = Int.max\n    var minEvenIndex = -1\n    for (index, value) in\
    \ arr.enumerated() {\n        if value % 2 == 0 {\n            if value < minEven\
    \ {\n                minEven = value\n                minEvenIndex = index\n \
    \           }\n        }\n    }\n    if minEvenIndex == -1 {\n        return []\n\
    \    }\n    return [minEven, minEvenIndex]", "    var minEven = Int.max\n    var\
    \ minEvenIndex = -1\n    for (index, value) in arr.enumerated() {\n        if\
    \ value % 2 == 0 {\n            if value < minEven {\n                minEven\
    \ = value\n                minEvenIndex = index\n            }\n        }\n  \
    \  }\n    if minEvenIndex == -1 {\n        return []\n    }\n    return [minEven,\
    \ minEvenIndex]", "    guard arr.count > 0 else { return [] }\n    var evens =\
    \ [Int]()\n    for (index, value) in arr.enumerated() {\n        if value % 2\
    \ == 0 {\n            evens.append(index)\n        }\n    }\n    guard evens.count\
    \ > 0 else { return [] }\n    var minValue = arr[evens[0]]\n    var minIndex =\
    \ evens[0]\n    for index in evens {\n        if arr[index] < minValue {\n   \
    \         minValue = arr[index]\n            minIndex = index\n        }\n   \
    \ }\n    return [minValue, minIndex]", "    guard arr.count > 0 else { return\
    \ [] }\n    var minEven = Int.max\n    var minEvenIndex = -1\n    for (index,\
    \ value) in arr.enumerated() {\n        if value % 2 == 0 && value < minEven {\n\
    \            minEven = value\n            minEvenIndex = index\n        }\n  \
    \  }\n    if minEven == Int.max {\n        return []\n    }\n    return [minEven,\
    \ minEvenIndex]", "    guard arr.count > 0 else { return [] }\n    var minEven\
    \ = Int.max\n    var minEvenIndex = -1\n    for i in 0..<arr.count {\n       \
    \ if arr[i] % 2 == 0 && arr[i] < minEven {\n            minEven = arr[i]\n   \
    \         minEvenIndex = i\n        }\n    }\n    if minEvenIndex == -1 { return\
    \ [] }\n    return [minEven, minEvenIndex]", "    guard !arr.isEmpty else { return\
    \ [] }\n    var minEven = Int.max\n    var minEvenIndex = -1\n    for (index,\
    \ value) in arr.enumerated() {\n        if value % 2 == 0 && value < minEven {\n\
    \            minEven = value\n            minEvenIndex = index\n        }\n  \
    \  }\n    return minEvenIndex == -1 ? [] : [minEven, minEvenIndex]", "    var\
    \ minEven = Int.max\n    var minEvenIndex = Int.max\n    for (index, value) in\
    \ arr.enumerated() {\n        if value % 2 == 0 && value < minEven {\n       \
    \     minEven = value\n            minEvenIndex = index\n        }\n    }\n  \
    \  return minEven == Int.max ? [] : [minEven, minEvenIndex]", "    guard arr.count\
    \ > 0 else { return [] }\n    var minEven = Int.max\n    var minEvenIndex = 0\n\
    \    for i in 0..<arr.count {\n        if arr[i] % 2 == 0 {\n            if arr[i]\
    \ < minEven {\n                minEven = arr[i]\n                minEvenIndex\
    \ = i\n            }\n        }\n    }\n    if minEven == Int.max {\n        return\
    \ []\n    }\n    return [minEven, minEvenIndex]", "    var minEven = Int.max\n\
    \    var minIndex = Int.max\n    for (index, value) in arr.enumerated() {\n  \
    \      if value % 2 == 0 && value < minEven {\n            minEven = value\n \
    \           minIndex = index\n        }\n    }\n    if minEven == Int.max {\n\
    \        return []\n    }\n    return [minEven, minIndex]", "    guard arr.count\
    \ > 0 else { return [] }\n    var minEven = Int.max\n    var minEvenIndex = Int.max\n\
    \    for (index, value) in arr.enumerated() {\n        if value % 2 == 0 {\n \
    \           if value < minEven {\n                minEven = value\n          \
    \      minEvenIndex = index\n            } else if value == minEven {\n      \
    \          minEvenIndex = min(minEvenIndex, index)\n            }\n        }\n\
    \    }\n    return minEven == Int.max ? [] : [minEven, minEvenIndex]", "    var\
    \ evens = [Int]()\n    for (index, value) in arr.enumerated() {\n        if value\
    \ % 2 == 0 {\n            evens.append(index)\n        }\n    }\n    if evens.count\
    \ == 0 {\n        return []\n    }\n    return [arr[evens[0]], evens[0]]", " \
    \   var evens = [Int]()\n    var evensIndex = [Int]()\n    for (index, value)\
    \ in arr.enumerated() {\n        if value % 2 == 0 {\n            evens.append(value)\n\
    \            evensIndex.append(index)\n        }\n    }\n    if evens.count ==\
    \ 0 {\n        return []\n    }\n    var min = evens[0]\n    var minIndex = evensIndex[0]\n\
    \    for (index, value) in evens.enumerated() {\n        if value < min {\n  \
    \          min = value\n            minIndex = evensIndex[index]\n        }\n\
    \    }\n    return [min, minIndex]", "    guard arr.count > 0 else { return []\
    \ }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard evens.count > 0 else\
    \ { return [] }\n    let minEven = evens.min()!\n    let idx = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, idx]", "    var result = [Int]()\n    var minEven\
    \ = Int.max\n    var minEvenIndex = Int.max\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 {\n            if value < minEven {\n         \
    \       minEven = value\n                minEvenIndex = index\n            } else\
    \ if value == minEven && index < minEvenIndex {\n                minEvenIndex\
    \ = index\n            }\n        }\n    }\n    if minEven != Int.max {\n    \
    \    result.append(minEven)\n        result.append(minEvenIndex)\n    }\n    return\
    \ result", '    return arr.enumerated().filter { $0.element % 2 == 0 }.min { $0.element
    < $1.element }.map { [$0.element, $0.offset] } ?? []', "    guard !arr.isEmpty\
    \ else { return [] }\n    var minEven = Int.max\n    var minEvenIndex = -1\n \
    \   for (index, value) in arr.enumerated() {\n        if value % 2 == 0 && value\
    \ < minEven {\n            minEven = value\n            minEvenIndex = index\n\
    \        }\n    }\n    return minEvenIndex == -1 ? [] : [minEven, minEvenIndex]",
  "    var result = [Int]()\n    var minEven = Int.max\n    var minEvenIndex = Int.max\n\
    \    for (index, value) in arr.enumerated() {\n        if value % 2 == 0 {\n \
    \           if value < minEven {\n                minEven = value\n          \
    \      minEvenIndex = index\n            } else if value == minEven {\n      \
    \          if index < minEvenIndex {\n                    minEvenIndex = index\n\
    \                }\n            }\n        }\n    }\n    if minEven != Int.max\
    \ {\n        result.append(minEven)\n        result.append(minEvenIndex)\n   \
    \ }\n    return result", "    guard arr.count > 0 else { return [] }\n    var\
    \ min = Int.max\n    var index = -1\n    for i in 0..<arr.count {\n        if\
    \ arr[i] % 2 == 0 && arr[i] < min {\n            min = arr[i]\n            index\
    \ = i\n        }\n    }\n    return index == -1 ? [] : [min, index]", "    var\
    \ evens = [Int]()\n    var evensIndex = [Int]()\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 {\n            evens.append(value)\n          \
    \  evensIndex.append(index)\n        }\n    }\n    if evens.count == 0 {\n   \
    \     return []\n    }\n    var min = evens[0]\n    var minIndex = evensIndex[0]\n\
    \    for (index, value) in evens.enumerated() {\n        if value < min {\n  \
    \          min = value\n            minIndex = evensIndex[index]\n        }\n\
    \    }\n    return [min, minIndex]", "    var minEven = Int.max\n    var minEvenIndex\
    \ = -1\n    for i in 0..<arr.count {\n        if arr[i] % 2 == 0 && arr[i] < minEven\
    \ {\n            minEven = arr[i]\n            minEvenIndex = i\n        }\n \
    \   }\n    if minEvenIndex == -1 {\n        return []\n    }\n    return [minEven,\
    \ minEvenIndex]", "    guard arr.count > 0 else { return [] }\n    var minEven\
    \ = Int.max\n    var minEvenIndex = -1\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 && value < minEven {\n            minEven = value\n\
    \            minEvenIndex = index\n        }\n    }\n    return minEvenIndex ==\
    \ -1 ? [] : [minEven, minEvenIndex]", "    var minEven = Int.max\n    var minEvenIndex\
    \ = -1\n    for (index, value) in arr.enumerated() {\n        if value % 2 ==\
    \ 0 && value < minEven {\n            minEven = value\n            minEvenIndex\
    \ = index\n        }\n    }\n    return minEvenIndex == -1 ? [] : [minEven, minEvenIndex]",
  "    var minEven = Int.max\n    var minEvenIndex = Int.max\n    for (index, value)\
    \ in arr.enumerated() {\n        if value % 2 == 0 {\n            if value < minEven\
    \ {\n                minEven = value\n                minEvenIndex = index\n \
    \           } else if value == minEven {\n                minEvenIndex = min(minEvenIndex,\
    \ index)\n            }\n        }\n    }\n    if minEven == Int.max {\n     \
    \   return []\n    }\n    return [minEven, minEvenIndex]", "    var minEven =\
    \ Int.max\n    var minEvenIndex = -1\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 {\n            if value < minEven {\n         \
    \       minEven = value\n                minEvenIndex = index\n            }\n\
    \        }\n    }\n    if minEvenIndex == -1 {\n        return []\n    }\n   \
    \ return [minEven, minEvenIndex]", "    var even = Int.max\n    var index = -1\n\
    \    for (i, v) in arr.enumerated() {\n        if v % 2 == 0 && v < even {\n \
    \           even = v\n            index = i\n        }\n    }\n    return index\
    \ == -1 ? [] : [even, index]", "    var min = Int.max\n    var minIndex = -1\n\
    \    for i in 0..<arr.count {\n        if arr[i] % 2 == 0 && arr[i] < min {\n\
    \            min = arr[i]\n            minIndex = i\n        }\n    }\n    if\
    \ min == Int.max {\n        return []\n    }\n    return [min, minIndex]", " \
    \   guard !arr.isEmpty else { return [] }\n    let evens = arr.filter { $0 % 2\
    \ == 0 }\n    guard !evens.isEmpty else { return [] }\n    let minEven = evens.min()!\n\
    \    let index = arr.firstIndex(of: minEven)!\n    return [minEven, index]", " \
    \   var evens = [Int]()\n    var evensIndex = [Int]()\n    for (index, value)\
    \ in arr.enumerated() {\n        if value % 2 == 0 {\n            evens.append(value)\n\
    \            evensIndex.append(index)\n        }\n    }\n    guard !evens.isEmpty\
    \ else { return [] }\n    var min = evens[0]\n    var minIndex = evensIndex[0]\n\
    \    for (index, value) in evens.enumerated() {\n        if value < min {\n  \
    \          min = value\n            minIndex = evensIndex[index]\n        }\n\
    \    }\n    return [min, minIndex]", "    guard arr.count > 0 else { return []\
    \ }\n    var minEven = Int.max\n    var minEvenIndex = -1\n    for (index, value)\
    \ in arr.enumerated() {\n        if value % 2 == 0 && value < minEven {\n    \
    \        minEven = value\n            minEvenIndex = index\n        }\n    }\n\
    \    return minEvenIndex == -1 ? [] : [minEven, minEvenIndex]", "    var minEven\
    \ = Int.max\n    var minEvenIndex = Int.max\n    var minOdd = Int.max\n    var\
    \ minOddIndex = Int.max\n    for (i, v) in arr.enumerated() {\n        if v %\
    \ 2 == 0 {\n            if v < minEven {\n                minEven = v\n      \
    \          minEvenIndex = i\n            }\n        } else {\n            if v\
    \ < minOdd {\n                minOdd = v\n                minOddIndex = i\n  \
    \          }\n        }\n    }\n    if minEven == Int.max {\n        return [minOdd,\
    \ minOddIndex]\n    }\n    return [minEven, minEvenIndex]", "    guard arr.count\
    \ > 0 else { return [] }\n    var minEven = Int.max\n    var minEvenIndex = -1\n\
    \    for i in 0..<arr.count {\n        if arr[i] % 2 == 0 && arr[i] < minEven\
    \ {\n            minEven = arr[i]\n            minEvenIndex = i\n        }\n \
    \   }\n    return minEvenIndex == -1 ? [] : [minEven, minEvenIndex]", "    guard\
    \ arr.count > 0 else { return [] }\n    var minEven = Int.max\n    var minEvenIndex\
    \ = -1\n    for (index, value) in arr.enumerated() {\n        if value % 2 ==\
    \ 0 && value < minEven {\n            minEven = value\n            minEvenIndex\
    \ = index\n        }\n    }\n    return minEvenIndex == -1 ? [] : [minEven, minEvenIndex]",
  "    var min = Int.max\n    var index = -1\n    for (i, v) in arr.enumerated() {\n\
    \        if v % 2 == 0 && v < min {\n            min = v\n            index =\
    \ i\n        }\n    }\n    return index == -1 ? [] : [min, index]", "    var minEven\
    \ = Int.max\n    var minEvenIndex = -1\n    for i in 0..<arr.count {\n       \
    \ if arr[i] % 2 == 0 {\n            if arr[i] < minEven {\n                minEven\
    \ = arr[i]\n                minEvenIndex = i\n            }\n        }\n    }\n\
    \    if minEvenIndex == -1 {\n        return []\n    }\n    return [minEven, minEvenIndex]",
  "    guard !arr.isEmpty else { return [] }\n    var minEven = Int.max\n    var minEvenIndex\
    \ = Int.max\n    for (index, value) in arr.enumerated() {\n        if value %\
    \ 2 == 0 {\n            if value < minEven {\n                minEven = value\n\
    \                minEvenIndex = index\n            } else if value == minEven\
    \ {\n                minEvenIndex = min(minEvenIndex, index)\n            }\n\
    \        }\n    }\n    return minEven == Int.max ? [] : [minEven, minEvenIndex]",
  "    var result = [Int]()\n    var evens = [Int]()\n    for i in 0..<arr.count {\n\
    \        if arr[i] % 2 == 0 {\n            evens.append(arr[i])\n        }\n \
    \   }\n    if evens.count == 0 {\n        return result\n    }\n    let minEven\
    \ = evens.min()!\n    for i in 0..<arr.count {\n        if arr[i] == minEven {\n\
    \            result.append(minEven)\n            result.append(i)\n          \
    \  return result\n        }\n    }\n    return result", '    return [0, 0]', " \
    \   var minEven = Int.max\n    var minEvenIndex = -1\n    for (index, value) in\
    \ arr.enumerated() {\n        if value % 2 == 0 && value < minEven {\n       \
    \     minEven = value\n            minEvenIndex = index\n        }\n    }\n  \
    \  if minEvenIndex == -1 {\n        return []\n    }\n    return [minEven, minEvenIndex]",
  "    var result = [Int]()\n    var min = Int.max\n    var index = 0\n    for (i,\
    \ v) in arr.enumerated() {\n        if v % 2 == 0 && v < min {\n            min\
    \ = v\n            index = i\n        }\n    }\n    if min != Int.max {\n    \
    \    result.append(min)\n        result.append(index)\n    }\n    return result",
  "    guard arr.count > 0 else { return [] }\n    var minEven = Int.max\n    var\
    \ minEvenIndex = -1\n    for (index, value) in arr.enumerated() {\n        if\
    \ value % 2 == 0 {\n            if value < minEven {\n                minEven\
    \ = value\n                minEvenIndex = index\n            }\n        }\n  \
    \  }\n    return minEvenIndex == -1 ? [] : [minEven, minEvenIndex]", "    guard\
    \ !arr.isEmpty else { return [] }\n    var minEven = Int.max\n    var minEvenIndex\
    \ = Int.max\n    for (index, value) in arr.enumerated() {\n        if value %\
    \ 2 == 0 {\n            if value < minEven {\n                minEven = value\n\
    \                minEvenIndex = index\n            } else if value == minEven\
    \ {\n                minEvenIndex = min(minEvenIndex, index)\n            }\n\
    \        }\n    }\n    return minEven == Int.max ? [] : [minEven, minEvenIndex]",
  "    var evens = [Int]()\n    var evensIndex = [Int]()\n    for (index, value) in\
    \ arr.enumerated() {\n        if value % 2 == 0 {\n            evens.append(value)\n\
    \            evensIndex.append(index)\n        }\n    }\n    if evens.count ==\
    \ 0 {\n        return []\n    }\n    var min = evens[0]\n    var minIndex = evensIndex[0]\n\
    \    for (index, value) in evens.enumerated() {\n        if value < min {\n  \
    \          min = value\n            minIndex = evensIndex[index]\n        }\n\
    \    }\n    return [min, minIndex]", "    var result = [Int]()\n    var minEven\
    \ = Int.max\n    var minEvenIndex = Int.max\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 {\n            if value < minEven {\n         \
    \       minEven = value\n                minEvenIndex = index\n            } else\
    \ if value == minEven {\n                if index < minEvenIndex {\n         \
    \           minEvenIndex = index\n                }\n            }\n        }\n\
    \    }\n    if minEven != Int.max {\n        result.append(minEven)\n        result.append(minEvenIndex)\n\
    \    }\n    return result", "    var minEven = Int.max\n    var minEvenIndex =\
    \ -1\n    for (index, value) in arr.enumerated() {\n        if value % 2 == 0\
    \ {\n            if value < minEven {\n                minEven = value\n     \
    \           minEvenIndex = index\n            }\n        }\n    }\n    return\
    \ minEvenIndex == -1 ? [] : [minEven, minEvenIndex]", "    guard arr.count > 0\
    \ else { return [] }\n    var evens = [Int]()\n    for (i, v) in arr.enumerated()\
    \ {\n        if v % 2 == 0 {\n            evens.append(i)\n        }\n    }\n\
    \    guard evens.count > 0 else { return [] }\n    let min = evens.min()!\n  \
    \  return [arr[min], min]", "    guard arr.count > 0 else { return [] }\n    var\
    \ minEven = Int.max\n    var minEvenIndex = Int.max\n    for (index, value) in\
    \ arr.enumerated() {\n        if value % 2 == 0 && value < minEven {\n       \
    \     minEven = value\n            minEvenIndex = index\n        }\n    }\n  \
    \  return minEven == Int.max ? [] : [minEven, minEvenIndex]", "    var minEven\
    \ = Int.max\n    var minEvenIndex = -1\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 && value < minEven {\n            minEven = value\n\
    \            minEvenIndex = index\n        }\n    }\n    return minEvenIndex ==\
    \ -1 ? [] : [minEven, minEvenIndex]", "    guard arr.count > 0 else { return []\
    \ }\n    var minEven = Int.max\n    var minEvenIndex = Int.max\n    for (index,\
    \ value) in arr.enumerated() {\n        if value % 2 == 0 && value < minEven {\n\
    \            minEven = value\n            minEvenIndex = index\n        }\n  \
    \  }\n    return minEven == Int.max ? [] : [minEven, minEvenIndex]", "    guard\
    \ !arr.isEmpty else { return [] }\n    var minEven = Int.max\n    var minEvenIndex\
    \ = Int.max\n    for (index, value) in arr.enumerated() {\n        if value %\
    \ 2 == 0 {\n            if value < minEven {\n                minEven = value\n\
    \                minEvenIndex = index\n            } else if value == minEven\
    \ {\n                minEvenIndex = min(minEvenIndex, index)\n            }\n\
    \        }\n    }\n    return minEven == Int.max ? [] : [minEven, minEvenIndex]",
  "    var minEven = Int.max\n    var minEvenIndex = Int.max\n    for (index, value)\
    \ in arr.enumerated() {\n        if value % 2 == 0 && value < minEven {\n    \
    \        minEven = value\n            minEvenIndex = index\n        }\n    }\n\
    \    if minEven == Int.max {\n        return []\n    }\n    return [minEven, minEvenIndex]",
  "    var minEven = Int.max\n    var minEvenIndex = -1\n    for (index, value) in\
    \ arr.enumerated() {\n        if value % 2 == 0 {\n            if value < minEven\
    \ {\n                minEven = value\n                minEvenIndex = index\n \
    \           }\n        }\n    }\n    if minEvenIndex == -1 {\n        return []\n\
    \    }\n    return [minEven, minEvenIndex]", "    var minEven = Int.max\n    var\
    \ minEvenIndex = Int.max\n    for (index, value) in arr.enumerated() {\n     \
    \   if value % 2 == 0 && value < minEven {\n            minEven = value\n    \
    \        minEvenIndex = index\n        }\n    }\n    return minEven == Int.max\
    \ ? [] : [minEven, minEvenIndex]", "    var minEven = Int.max\n    var minEvenIndex\
    \ = -1\n    for i in 0..<arr.count {\n        if arr[i] % 2 == 0 {\n         \
    \   if arr[i] < minEven {\n                minEven = arr[i]\n                minEvenIndex\
    \ = i\n            }\n        }\n    }\n    if minEvenIndex == -1 {\n        return\
    \ []\n    }\n    return [minEven, minEvenIndex]", "    var minEven = Int.max\n\
    \    var minEvenIndex = Int.max\n    for (index, value) in arr.enumerated() {\n\
    \        if value % 2 == 0 && value < minEven {\n            minEven = value\n\
    \            minEvenIndex = index\n        }\n    }\n    if minEven == Int.max\
    \ {\n        return []\n    }\n    return [minEven, minEvenIndex]", "    var minEven\
    \ = Int.max\n    var minEvenIndex = -1\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 && value < minEven {\n            minEven = value\n\
    \            minEvenIndex = index\n        }\n    }\n    return minEvenIndex ==\
    \ -1 ? [] : [minEven, minEvenIndex]", "    guard arr.count > 0 else { return []\
    \ }\n    var minEven = Int.max\n    var minEvenIndex = -1\n    for (index, value)\
    \ in arr.enumerated() {\n        if value % 2 == 0 && value < minEven {\n    \
    \        minEven = value\n            minEvenIndex = index\n        }\n    }\n\
    \    return minEvenIndex == -1 ? [] : [minEven, minEvenIndex]", "    guard arr.count\
    \ > 0 else { return [] }\n    var evens = [Int]()\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 {\n            evens.append(index)\n        }\n\
    \    }\n    guard evens.count > 0 else { return [] }\n    let minIndex = evens.min()!\n\
    \    return [arr[minIndex], minIndex]", "    guard arr.count > 0 else { return\
    \ [] }\n    var minEven = Int.max\n    var minEvenIndex = Int.max\n    for (index,\
    \ value) in arr.enumerated() {\n        if value % 2 == 0 {\n            if value\
    \ < minEven {\n                minEven = value\n                minEvenIndex =\
    \ index\n            } else if value == minEven {\n                minEvenIndex\
    \ = min(minEvenIndex, index)\n            }\n        }\n    }\n    return minEven\
    \ == Int.max ? [] : [minEven, minEvenIndex]", "    guard !arr.isEmpty else { return\
    \ [] }\n    var minEven = Int.max\n    var minEvenIndex = Int.max\n    for (index,\
    \ value) in arr.enumerated() {\n        if value % 2 == 0 && value < minEven {\n\
    \            minEven = value\n            minEvenIndex = index\n        }\n  \
    \  }\n    return minEven == Int.max ? [] : [minEven, minEvenIndex]", "    guard\
    \ !arr.isEmpty else { return [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n\
    \    guard !evens.isEmpty else { return [] }\n    let minEven = evens.min()!\n\
    \    let minEvenIndex = arr.firstIndex(of: minEven)!\n    return [minEven, minEvenIndex]",
  "    var result = [Int]()\n    var evens = [Int]()\n    for i in 0..<arr.count {\n\
    \        if arr[i] % 2 == 0 {\n            evens.append(arr[i])\n        }\n \
    \   }\n    if evens.count > 0 {\n        result.append(evens.min()!)\n       \
    \ result.append(arr.firstIndex(of: evens.min()!)!)\n    }\n    return result",
  "    var minEven = Int.max\n    var minEvenIndex = Int.max\n    for (index, value)\
    \ in arr.enumerated() {\n        if value % 2 == 0 && value < minEven {\n    \
    \        minEven = value\n            minEvenIndex = index\n        }\n    }\n\
    \    if minEven == Int.max {\n        return []\n    }\n    return [minEven, minEvenIndex]",
  "    guard arr.count > 0 else { return [] }\n    var minEven = Int.max\n    var\
    \ minEvenIndex = -1\n    for (index, value) in arr.enumerated() {\n        if\
    \ value % 2 == 0 && value < minEven {\n            minEven = value\n         \
    \   minEvenIndex = index\n        }\n    }\n    if minEvenIndex == -1 {\n    \
    \    return []\n    }\n    return [minEven, minEvenIndex]", "    guard arr.count\
    \ > 0 else { return [] }\n    var evens = [Int]()\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 {\n            evens.append(index)\n        }\n\
    \    }\n    guard evens.count > 0 else { return [] }\n    var minValue = arr[evens[0]]\n\
    \    var minIndex = evens[0]\n    for index in evens {\n        if arr[index]\
    \ < minValue {\n            minValue = arr[index]\n            minIndex = index\n\
    \        }\n    }\n    return [minValue, minIndex]", "    guard arr.count > 0\
    \ else { return [] }\n    var minEven = Int.max\n    var minEvenIndex = -1\n \
    \   for (index, value) in arr.enumerated() {\n        if value % 2 == 0 && value\
    \ < minEven {\n            minEven = value\n            minEvenIndex = index\n\
    \        }\n    }\n    if minEvenIndex == -1 {\n        return []\n    }\n   \
    \ return [minEven, minEvenIndex]", "    guard !arr.isEmpty else { return [] }\n\
    \    var evens = [Int]()\n    for (index, value) in arr.enumerated() {\n     \
    \   if value % 2 == 0 {\n            evens.append(index)\n        }\n    }\n \
    \   guard !evens.isEmpty else { return [] }\n    let min = evens.min()!\n    return\
    \ [arr[min], min]", "    guard arr.count > 0 else { return [] }\n    var minEven\
    \ = Int.max\n    var minEvenIndex = -1\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 {\n            if value < minEven {\n         \
    \       minEven = value\n                minEvenIndex = index\n            }\n\
    \        }\n    }\n    if minEvenIndex == -1 {\n        return []\n    }\n   \
    \ return [minEven, minEvenIndex]", "    var min = Int.max\n    var minIndex =\
    \ -1\n    for (index, value) in arr.enumerated() {\n        if value % 2 == 0\
    \ && value < min {\n            min = value\n            minIndex = index\n  \
    \      }\n    }\n    return minIndex == -1 ? [] : [min, minIndex]", '    return
    []', "    guard arr.count > 0 else { return [] }\n    var minEven = Int.max\n\
    \    var minEvenIndex = -1\n    for (index, value) in arr.enumerated() {\n   \
    \     if value % 2 == 0 {\n            if value < minEven {\n                minEven\
    \ = value\n                minEvenIndex = index\n            }\n        }\n  \
    \  }\n    if minEvenIndex == -1 {\n        return []\n    }\n    return [minEven,\
    \ minEvenIndex]", "    var result = [Int]()\n    var minEven = Int.max\n    var\
    \ minEvenIndex = Int.max\n    for i in 0..<arr.count {\n        if arr[i] % 2\
    \ == 0 && arr[i] < minEven {\n            minEven = arr[i]\n            minEvenIndex\
    \ = i\n        }\n    }\n    if minEven == Int.max {\n        return result\n\
    \    }\n    result.append(minEven)\n    result.append(minEvenIndex)\n    return\
    \ result", "    var minEven = Int.max\n    var minEvenIndex = -1\n    for (index,\
    \ value) in arr.enumerated() {\n        if value % 2 == 0 && value < minEven {\n\
    \            minEven = value\n            minEvenIndex = index\n        }\n  \
    \  }\n    return minEvenIndex == -1 ? [] : [minEven, minEvenIndex]", "    guard\
    \ arr.count > 0 else { return [] }\n    var minEven = Int.max\n    var minEvenIndex\
    \ = -1\n    for (index, value) in arr.enumerated() {\n        if value % 2 ==\
    \ 0 && value < minEven {\n            minEven = value\n            minEvenIndex\
    \ = index\n        }\n    }\n    return minEvenIndex == -1 ? [] : [minEven, minEvenIndex]",
  "    var minEven = Int.max\n    var minEvenIndex = Int.max\n    for (index, value)\
    \ in arr.enumerated() {\n        if value % 2 == 0 && value < minEven {\n    \
    \        minEven = value\n            minEvenIndex = index\n        }\n    }\n\
    \    if minEven == Int.max {\n        return []\n    }\n    return [minEven, minEvenIndex]",
  "    var result = [Int]()\n    var evens = [Int]()\n    for i in 0..<arr.count {\n\
    \        if arr[i] % 2 == 0 {\n            evens.append(arr[i])\n        }\n \
    \   }\n    if evens.count == 0 {\n        return result\n    }\n    let minEven\
    \ = evens.min()!\n    for i in 0..<arr.count {\n        if arr[i] == minEven {\n\
    \            result.append(minEven)\n            result.append(i)\n          \
    \  return result\n        }\n    }\n    return result", "    guard arr.count >\
    \ 0 else { return [] }\n    var minEven = Int.max\n    var minEvenIndex = Int.max\n\
    \    for (index, value) in arr.enumerated() {\n        if value % 2 == 0 {\n \
    \           if value < minEven {\n                minEven = value\n          \
    \      minEvenIndex = index\n            } else if value == minEven {\n      \
    \          minEvenIndex = min(minEvenIndex, index)\n            }\n        }\n\
    \    }\n    return minEven == Int.max ? [] : [minEven, minEvenIndex]", "    guard\
    \ arr.count > 0 else { return [] }\n    guard arr.contains(where: { $0 % 2 ==\
    \ 0 }) else { return [] }\n    var minEven = Int.max\n    var minEvenIndex = -1\n\
    \    for (index, value) in arr.enumerated() {\n        if value % 2 == 0 && value\
    \ < minEven {\n            minEven = value\n            minEvenIndex = index\n\
    \        }\n    }\n    return [minEven, minEvenIndex]", "    guard arr.count >\
    \ 0 else { return [] }\n    var minEven = Int.max\n    var minEvenIndex = -1\n\
    \    for (index, value) in arr.enumerated() {\n        if value % 2 == 0 && value\
    \ < minEven {\n            minEven = value\n            minEvenIndex = index\n\
    \        }\n    }\n    return minEvenIndex == -1 ? [] : [minEven, minEvenIndex]",
  "    guard !arr.isEmpty else { return [] }\n    let evens = arr.filter { $0 % 2\
    \ == 0 }\n    guard !evens.isEmpty else { return [] }\n    let minEven = evens.min()!\n\
    \    let minEvenIndex = arr.firstIndex(of: minEven)!\n    return [minEven, minEvenIndex]",
  "    var result = [Int]()\n    var minEven = Int.max\n    var minEvenIndex = Int.max\n\
    \    for (index, value) in arr.enumerated() {\n        if value % 2 == 0 {\n \
    \           if value < minEven {\n                minEven = value\n          \
    \      minEvenIndex = index\n            } else if value == minEven {\n      \
    \          if index < minEvenIndex {\n                    minEvenIndex = index\n\
    \                }\n            }\n        }\n    }\n    if minEven != Int.max\
    \ {\n        result.append(minEven)\n        result.append(minEvenIndex)\n   \
    \ }\n    return result", "    var minEven = Int.max\n    var minEvenIndex = -1\n\
    \    for (index, value) in arr.enumerated() {\n        if value % 2 == 0 {\n \
    \           if value < minEven {\n                minEven = value\n          \
    \      minEvenIndex = index\n            }\n        }\n    }\n    if minEvenIndex\
    \ == -1 {\n        return []\n    }\n    return [minEven, minEvenIndex]", "  \
    \  var minEven = Int.max\n    var minEvenIndex = Int.max\n    for (index, value)\
    \ in arr.enumerated() {\n        if value % 2 == 0 {\n            if value < minEven\
    \ {\n                minEven = value\n                minEvenIndex = index\n \
    \           } else if value == minEven && index < minEvenIndex {\n           \
    \     minEvenIndex = index\n            }\n        }\n    }\n    return minEven\
    \ == Int.max ? [] : [minEven, minEvenIndex]", "    guard arr.count > 0 else {\
    \ return [] }\n    var minEven = Int.max\n    var minEvenIndex = -1\n    for (index,\
    \ value) in arr.enumerated() {\n        if value % 2 == 0 && value < minEven {\n\
    \            minEven = value\n            minEvenIndex = index\n        }\n  \
    \  }\n    return minEvenIndex == -1 ? [] : [minEven, minEvenIndex]", "    guard\
    \ !arr.isEmpty else { return [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n\
    \    guard !evens.isEmpty else { return [] }\n    let minEven = evens.min()!\n\
    \    let minEvenIndex = arr.firstIndex(of: minEven)!\n    return [minEven, minEvenIndex]",
  "    guard arr.count > 0 else { return [] }\n    var minEven = Int.max\n    var\
    \ minEvenIndex = Int.max\n    for (index, value) in arr.enumerated() {\n     \
    \   if value % 2 == 0 {\n            if value < minEven {\n                minEven\
    \ = value\n                minEvenIndex = index\n            } else if value ==\
    \ minEven {\n                minEvenIndex = min(minEvenIndex, index)\n       \
    \     }\n        }\n    }\n    return minEven == Int.max ? [] : [minEven, minEvenIndex]",
  "    guard !arr.isEmpty else { return [] }\n    var min = Int.max\n    var minIndex\
    \ = -1\n    for (index, value) in arr.enumerated() {\n        if value % 2 ==\
    \ 0 && value < min {\n            min = value\n            minIndex = index\n\
    \        }\n    }\n    return minIndex == -1 ? [] : [min, minIndex]", "    var\
    \ result = [Int]()\n    var minEven = Int.max\n    var minEvenIndex = -1\n   \
    \ for (index, value) in arr.enumerated() {\n        if value % 2 == 0 {\n    \
    \        if value < minEven {\n                minEven = value\n             \
    \   minEvenIndex = index\n            }\n        }\n    }\n    if minEvenIndex\
    \ != -1 {\n        result.append(minEven)\n        result.append(minEvenIndex)\n\
    \    }\n    return result", "    guard arr.count > 0 else { return [] }\n    var\
    \ minEven = Int.max\n    var minEvenIndex = -1\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 && value < minEven {\n            minEven = value\n\
    \            minEvenIndex = index\n        }\n    }\n    return minEvenIndex ==\
    \ -1 ? [] : [minEven, minEvenIndex]", "    var minEven = Int.max\n    var minEvenIndex\
    \ = Int.max\n    for (index, value) in arr.enumerated() {\n        if value %\
    \ 2 == 0 && value < minEven {\n            minEven = value\n            minEvenIndex\
    \ = index\n        }\n    }\n    if minEven == Int.max {\n        return []\n\
    \    }\n    return [minEven, minEvenIndex]", "    var minEven = Int.max\n    var\
    \ minEvenIndex = -1\n    for (index, value) in arr.enumerated() {\n        if\
    \ value % 2 == 0 {\n            if value < minEven {\n                minEven\
    \ = value\n                minEvenIndex = index\n            }\n        }\n  \
    \  }\n    if minEvenIndex == -1 {\n        return []\n    }\n    return [minEven,\
    \ minEvenIndex]", "    guard !arr.isEmpty else { return [] }\n    var minEven\
    \ = Int.max\n    var minEvenIndex = -1\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 && value < minEven {\n            minEven = value\n\
    \            minEvenIndex = index\n        }\n    }\n    return minEvenIndex ==\
    \ -1 ? [] : [minEven, minEvenIndex]", "    var result = [Int]()\n    var minEven\
    \ = Int.max\n    var minEvenIndex = Int.max\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 {\n            if value < minEven {\n         \
    \       minEven = value\n                minEvenIndex = index\n            } else\
    \ if value == minEven {\n                if index < minEvenIndex {\n         \
    \           minEvenIndex = index\n                }\n            }\n        }\n\
    \    }\n    if minEven != Int.max {\n        result.append(minEven)\n        result.append(minEvenIndex)\n\
    \    }\n    return result", "    var result = [Int]()\n    var evens = [Int]()\n\
    \    for (index, value) in arr.enumerated() {\n        if value % 2 == 0 {\n \
    \           evens.append(value)\n            result.append(index)\n        }\n\
    \    }\n    if evens.count == 0 {\n        return []\n    }\n    let minEven =\
    \ evens.min()!\n    let minEvenIndex = evens.firstIndex(of: minEven)!\n    return\
    \ [minEven, result[minEvenIndex]]", "    var result = [Int]()\n    guard arr.count\
    \ > 0 else {\n        return result\n    }\n    var min = Int.max\n    var index\
    \ = 0\n    for i in 0..<arr.count {\n        if arr[i] % 2 == 0 && arr[i] < min\
    \ {\n            min = arr[i]\n            index = i\n        }\n    }\n    if\
    \ min != Int.max {\n        result.append(min)\n        result.append(index)\n\
    \    }\n    return result", "    guard !arr.isEmpty else { return [] }\n    var\
    \ minEven = Int.max\n    var minEvenIndex = Int.max\n    for (index, value) in\
    \ arr.enumerated() {\n        if value % 2 == 0 && value < minEven {\n       \
    \     minEven = value\n            minEvenIndex = index\n        }\n    }\n  \
    \  return minEven == Int.max ? [] : [minEven, minEvenIndex]", "    guard arr.count\
    \ > 0 else { return [] }\n    var minEven = Int.max\n    var minEvenIndex = Int.max\n\
    \    for (index, value) in arr.enumerated() {\n        if value % 2 == 0 && value\
    \ < minEven {\n            minEven = value\n            minEvenIndex = index\n\
    \        }\n    }\n    return minEven == Int.max ? [] : [minEven, minEvenIndex]",
  "    guard arr.count > 0 else { return [] }\n    var minEven = Int.max\n    var\
    \ minEvenIndex = -1\n    for (index, value) in arr.enumerated() {\n        if\
    \ value % 2 == 0 {\n            if value < minEven {\n                minEven\
    \ = value\n                minEvenIndex = index\n            }\n        }\n  \
    \  }\n    if minEvenIndex == -1 {\n        return []\n    }\n    return [minEven,\
    \ minEvenIndex]", "    var min = Int.max\n    var minIndex = -1\n    for (index,\
    \ value) in arr.enumerated() {\n        if value % 2 == 0 && value < min {\n \
    \           min = value\n            minIndex = index\n        }\n    }\n    return\
    \ minIndex == -1 ? [] : [min, minIndex]", "    var minEven = Int.max\n    var\
    \ minEvenIndex = Int.max\n    for (index, value) in arr.enumerated() {\n     \
    \   if value % 2 == 0 && value < minEven {\n            minEven = value\n    \
    \        minEvenIndex = index\n        }\n    }\n    if minEven == Int.max {\n\
    \        return []\n    }\n    return [minEven, minEvenIndex]", "    guard arr.count\
    \ > 0 else { return [] }\n    var minEven = Int.max\n    var minEvenIndex = -1\n\
    \    for (index, value) in arr.enumerated() {\n        if value % 2 == 0 && value\
    \ < minEven {\n            minEven = value\n            minEvenIndex = index\n\
    \        }\n    }\n    return minEvenIndex == -1 ? [] : [minEven, minEvenIndex]",
  "    var minEven = Int.max\n    var minEvenIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] % 2 == 0 {\n            if arr[i] < minEven {\n       \
    \         minEven = arr[i]\n                minEvenIndex = i\n            }\n\
    \        }\n    }\n    if minEvenIndex == -1 {\n        return []\n    }\n   \
    \ return [minEven, minEvenIndex]", "    var minEven = Int.max\n    var minEvenIndex\
    \ = Int.max\n    for (index, value) in arr.enumerated() {\n        if value %\
    \ 2 == 0 && value < minEven {\n            minEven = value\n            minEvenIndex\
    \ = index\n        }\n    }\n    return minEven == Int.max ? [] : [minEven, minEvenIndex]",
  "    guard arr.count > 0 else { return [] }\n    var minEven = Int.max\n    var\
    \ minEvenIndex = -1\n    for (index, value) in arr.enumerated() {\n        if\
    \ value % 2 == 0 && value < minEven {\n            minEven = value\n         \
    \   minEvenIndex = index\n        }\n    }\n    return minEvenIndex == -1 ? []\
    \ : [minEven, minEvenIndex]", "    var minEven = Int.max\n    var minEvenIndex\
    \ = Int.max\n    for (index, value) in arr.enumerated() {\n        if value %\
    \ 2 == 0 {\n            if value < minEven {\n                minEven = value\n\
    \                minEvenIndex = index\n            } else if value == minEven\
    \ && index < minEvenIndex {\n                minEvenIndex = index\n          \
    \  }\n        }\n    }\n    return minEven == Int.max ? [] : [minEven, minEvenIndex]",
  "    guard arr.count > 0 else { return [] }\n    var minEven = Int.max\n    var\
    \ minEvenIndex = -1\n    for (index, value) in arr.enumerated() {\n        if\
    \ value % 2 == 0 && value < minEven {\n            minEven = value\n         \
    \   minEvenIndex = index\n        }\n    }\n    if minEvenIndex == -1 {\n    \
    \    return []\n    }\n    return [minEven, minEvenIndex]", "    guard !arr.isEmpty\
    \ else { return [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard !evens.isEmpty\
    \ else { return [] }\n    let minEven = evens.min()!\n    let index = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, index]", "    guard arr.count > 0 else { return\
    \ [] }\n    var minEven = Int.max\n    var minEvenIndex = Int.max\n    for (index,\
    \ value) in arr.enumerated() {\n        if value % 2 == 0 {\n            if value\
    \ < minEven {\n                minEven = value\n                minEvenIndex =\
    \ index\n            } else if value == minEven {\n                minEvenIndex\
    \ = min(minEvenIndex, index)\n            }\n        }\n    }\n    if minEven\
    \ == Int.max {\n        return []\n    }\n    return [minEven, minEvenIndex]",
  "    var minEven = Int.max\n    var minEvenIndex = -1\n    for (index, value) in\
    \ arr.enumerated() {\n        if value % 2 == 0 && value < minEven {\n       \
    \     minEven = value\n            minEvenIndex = index\n        }\n    }\n  \
    \  return minEvenIndex == -1 ? [] : [minEven, minEvenIndex]", '    return []',
  '    return [0, 0]', "    guard arr.count > 0 else { return [] }\n    var minEven\
    \ = Int.max\n    var minEvenIndex = -1\n    for i in 0..<arr.count {\n       \
    \ if arr[i] % 2 == 0 && arr[i] < minEven {\n            minEven = arr[i]\n   \
    \         minEvenIndex = i\n        }\n    }\n    return minEvenIndex == -1 ?\
    \ [] : [minEven, minEvenIndex]", "    var minEven = Int.max\n    var minEvenIndex\
    \ = -1\n    for (index, value) in arr.enumerated() {\n        if value % 2 ==\
    \ 0 {\n            if value < minEven {\n                minEven = value\n   \
    \             minEvenIndex = index\n            }\n        }\n    }\n    if minEvenIndex\
    \ == -1 {\n        return []\n    }\n    return [minEven, minEvenIndex]", "  \
    \  let even = arr.filter { $0 % 2 == 0 }\n    guard !even.isEmpty else { return\
    \ [] }\n    let min = even.min()!\n    let index = arr.firstIndex(of: min)!\n\
    \    return [min, index]", "    var minEven = Int.max\n    var minEvenIndex =\
    \ -1\n    for (index, value) in arr.enumerated() {\n        if value % 2 == 0\
    \ {\n            if value < minEven {\n                minEven = value\n     \
    \           minEvenIndex = index\n            }\n        }\n    }\n    if minEvenIndex\
    \ == -1 {\n        return []\n    }\n    return [minEven, minEvenIndex]", "  \
    \  let evens = arr.filter { $0 % 2 == 0 }\n    guard let min = evens.min() else\
    \ { return [] }\n    guard let index = arr.firstIndex(of: min) else { return []\
    \ }\n    return [min, index]", "    guard !arr.isEmpty else { return [] }\n  \
    \  var minEven = Int.max\n    var minEvenIndex = -1\n    for (index, value) in\
    \ arr.enumerated() {\n        if value % 2 == 0 && value < minEven {\n       \
    \     minEven = value\n            minEvenIndex = index\n        }\n    }\n  \
    \  return minEvenIndex == -1 ? [] : [minEven, minEvenIndex]", "    guard arr.count\
    \ > 0 else { return [] }\n    var evens = [Int]()\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 {\n            evens.append(index)\n        }\n\
    \    }\n    guard evens.count > 0 else { return [] }\n    let minIndex = evens.min()!\n\
    \    return [arr[minIndex], minIndex]", "    var minEven = Int.max\n    var minEvenIndex\
    \ = -1\n    for (index, value) in arr.enumerated() {\n        if value % 2 ==\
    \ 0 && value < minEven {\n            minEven = value\n            minEvenIndex\
    \ = index\n        }\n    }\n    if minEvenIndex == -1 {\n        return []\n\
    \    }\n    return [minEven, minEvenIndex]", "    var minEven = Int.max\n    var\
    \ minEvenIndex = -1\n    for (index, value) in arr.enumerated() {\n        if\
    \ value % 2 == 0 {\n            if value < minEven {\n                minEven\
    \ = value\n                minEvenIndex = index\n            }\n        }\n  \
    \  }\n    if minEvenIndex == -1 {\n        return []\n    }\n    return [minEven,\
    \ minEvenIndex]", "    guard !arr.isEmpty else { return [] }\n    var minEven\
    \ = Int.max\n    var minEvenIndex = Int.max\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 && value < minEven {\n            minEven = value\n\
    \            minEvenIndex = index\n        }\n    }\n    return minEven == Int.max\
    \ ? [] : [minEven, minEvenIndex]", "    var minEven = Int.max\n    var minEvenIndex\
    \ = -1\n    for (index, value) in arr.enumerated() {\n        if value % 2 ==\
    \ 0 && value < minEven {\n            minEven = value\n            minEvenIndex\
    \ = index\n        }\n    }\n    if minEvenIndex == -1 {\n        return []\n\
    \    }\n    return [minEven, minEvenIndex]", "    var result = [Int]()\n    var\
    \ minEven = Int.max\n    var minEvenIndex = Int.max\n    for (index, value) in\
    \ arr.enumerated() {\n        if value % 2 == 0 {\n            if value < minEven\
    \ {\n                minEven = value\n                minEvenIndex = index\n \
    \           } else if value == minEven && index < minEvenIndex {\n           \
    \     minEvenIndex = index\n            }\n        }\n    }\n    if minEven !=\
    \ Int.max {\n        result.append(minEven)\n        result.append(minEvenIndex)\n\
    \    }\n    return result", "    guard !arr.isEmpty else { return [] }\n    var\
    \ minEven = Int.max\n    var minEvenIndex = -1\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 && value < minEven {\n            minEven = value\n\
    \            minEvenIndex = index\n        }\n    }\n    return minEvenIndex ==\
    \ -1 ? [] : [minEven, minEvenIndex]", "    var result = [Int]()\n    var minEven\
    \ = Int.max\n    var minEvenIndex = Int.max\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 {\n            if value < minEven {\n         \
    \       minEven = value\n                minEvenIndex = index\n            } else\
    \ if value == minEven {\n                if index < minEvenIndex {\n         \
    \           minEvenIndex = index\n                }\n            }\n        }\n\
    \    }\n    if minEven != Int.max {\n        result.append(minEven)\n        result.append(minEvenIndex)\n\
    \    }\n    return result", "    var minEven = Int.max\n    var minEvenIndex =\
    \ -1\n    for (index, value) in arr.enumerated() {\n        if value % 2 == 0\
    \ && value < minEven {\n            minEven = value\n            minEvenIndex\
    \ = index\n        }\n    }\n    if minEvenIndex == -1 {\n        return []\n\
    \    }\n    return [minEven, minEvenIndex]", "    var minEven = Int.max\n    var\
    \ minEvenIndex = -1\n    for i in 0..<arr.count {\n        if arr[i] % 2 == 0\
    \ {\n            if arr[i] < minEven {\n                minEven = arr[i]\n   \
    \             minEvenIndex = i\n            }\n        }\n    }\n    if minEvenIndex\
    \ == -1 {\n        return []\n    }\n    return [minEven, minEvenIndex]", "  \
    \  guard arr.count > 0 else { return [] }\n    var evens = [Int]()\n    for i\
    \ in 0..<arr.count {\n        if arr[i] % 2 == 0 {\n            evens.append(arr[i])\n\
    \        }\n    }\n    guard evens.count > 0 else { return [] }\n    evens.sort()\n\
    \    let min = evens[0]\n    for i in 0..<arr.count {\n        if arr[i] == min\
    \ {\n            return [min, i]\n        }\n    }\n    return []", "    guard\
    \ arr.count > 0 else { return [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n\
    \    guard evens.count > 0 else { return [] }\n    let minEven = evens.min()!\n\
    \    let minEvenIndex = arr.firstIndex(of: minEven)!\n    return [minEven, minEvenIndex]",
  "    guard !arr.isEmpty else { return [] }\n    var minEven = Int.max\n    var minEvenIndex\
    \ = Int.max\n    for (index, value) in arr.enumerated() {\n        if value %\
    \ 2 == 0 && value < minEven {\n            minEven = value\n            minEvenIndex\
    \ = index\n        }\n    }\n    return minEven == Int.max ? [] : [minEven, minEvenIndex]",
  "    var minEven = Int.max\n    var minEvenIndex = Int.max\n    for (index, value)\
    \ in arr.enumerated() {\n        if value % 2 == 0 && value < minEven {\n    \
    \        minEven = value\n            minEvenIndex = index\n        }\n    }\n\
    \    if minEven == Int.max {\n        return []\n    }\n    return [minEven, minEvenIndex]",
  "    var minEven = Int.max\n    var minEvenIndex = -1\n    for (index, value) in\
    \ arr.enumerated() {\n        if value % 2 == 0 && value < minEven {\n       \
    \     minEven = value\n            minEvenIndex = index\n        }\n    }\n  \
    \  return minEvenIndex == -1 ? [] : [minEven, minEvenIndex]", "    guard arr.count\
    \ > 0 else { return [] }\n    var minEven = Int.max\n    var minEvenIndex = -1\n\
    \    for i in 0..<arr.count {\n        if arr[i] % 2 == 0 {\n            if arr[i]\
    \ < minEven {\n                minEven = arr[i]\n                minEvenIndex\
    \ = i\n            }\n        }\n    }\n    if minEvenIndex == -1 {\n        return\
    \ []\n    }\n    return [minEven, minEvenIndex]", "    guard arr.count > 0 else\
    \ { return [] }\n    var minEven = Int.max\n    var minEvenIndex = Int.max\n \
    \   for (index, value) in arr.enumerated() {\n        if value % 2 == 0 && value\
    \ < minEven {\n            minEven = value\n            minEvenIndex = index\n\
    \        }\n    }\n    if minEven == Int.max {\n        return []\n    }\n   \
    \ return [minEven, minEvenIndex]", "    guard arr.count > 0 else { return [] }\n\
    \    var minEven = Int.max\n    var minEvenIndex = -1\n    for (index, value)\
    \ in arr.enumerated() {\n        if value % 2 == 0 && value < minEven {\n    \
    \        minEven = value\n            minEvenIndex = index\n        }\n    }\n\
    \    if minEvenIndex == -1 {\n        return []\n    }\n    return [minEven, minEvenIndex]",
  "    guard arr.count > 0 else { return [] }\n    var minEven = Int.max\n    var\
    \ minEvenIndex = -1\n    for (index, value) in arr.enumerated() {\n        if\
    \ value % 2 == 0 && value < minEven {\n            minEven = value\n         \
    \   minEvenIndex = index\n        }\n    }\n    return minEvenIndex == -1 ? []\
    \ : [minEven, minEvenIndex]", "    var result = [Int]()\n    var minEven = Int.max\n\
    \    var minEvenIndex = Int.max\n    for (index, value) in arr.enumerated() {\n\
    \        if value % 2 == 0 {\n            if value < minEven {\n             \
    \   minEven = value\n                minEvenIndex = index\n            } else\
    \ if value == minEven {\n                if index < minEvenIndex {\n         \
    \           minEvenIndex = index\n                }\n            }\n        }\n\
    \    }\n    if minEven != Int.max {\n        result.append(minEven)\n        result.append(minEvenIndex)\n\
    \    }\n    return result", "    var result = [Int]()\n    var minEven = Int.max\n\
    \    var minEvenIndex = Int.max\n    for (index, value) in arr.enumerated() {\n\
    \        if value % 2 == 0 && value < minEven {\n            minEven = value\n\
    \            minEvenIndex = index\n        }\n    }\n    if minEven != Int.max\
    \ {\n        result.append(minEven)\n        result.append(minEvenIndex)\n   \
    \ }\n    return result", "    guard arr.count > 0 else { return [] }\n    var\
    \ minEven = Int.max\n    var minEvenIndex = Int.max\n    for (index, value) in\
    \ arr.enumerated() {\n        if value % 2 == 0 && value < minEven {\n       \
    \     minEven = value\n            minEvenIndex = index\n        }\n    }\n  \
    \  return minEven == Int.max ? [] : [minEven, minEvenIndex]", "    var minEven\
    \ = Int.max\n    var minEvenIndex = -1\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 {\n            if value < minEven {\n         \
    \       minEven = value\n                minEvenIndex = index\n            }\n\
    \        }\n    }\n    if minEvenIndex == -1 {\n        return []\n    }\n   \
    \ return [minEven, minEvenIndex]", "    var minEven = Int.max\n    var minEvenIndex\
    \ = -1\n    for (index, value) in arr.enumerated() {\n        if value % 2 ==\
    \ 0 {\n            if value < minEven {\n                minEven = value\n   \
    \             minEvenIndex = index\n            }\n        }\n    }\n    if minEvenIndex\
    \ == -1 {\n        return []\n    }\n    return [minEven, minEvenIndex]", "  \
    \  let evens = arr.filter { $0 % 2 == 0 }\n    guard let min = evens.min() else\
    \ { return [] }\n    guard let index = arr.firstIndex(of: min) else { return []\
    \ }\n    return [min, index]", "    guard !arr.isEmpty else { return [] }\n  \
    \  let evens = arr.filter { $0 % 2 == 0 }\n    guard !evens.isEmpty else { return\
    \ [] }\n    let minEven = evens.min()!\n    let minEvenIndex = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, minEvenIndex]", "    guard arr.count > 0 else\
    \ { return [] }\n    var minEven = Int.max\n    var minEvenIndex = -1\n    for\
    \ i in 0..<arr.count {\n        if arr[i] % 2 == 0 && arr[i] < minEven {\n   \
    \         minEven = arr[i]\n            minEvenIndex = i\n        }\n    }\n \
    \   if minEvenIndex == -1 { return [] }\n    return [minEven, minEvenIndex]"]
stop_tokens:
- "\n}"
