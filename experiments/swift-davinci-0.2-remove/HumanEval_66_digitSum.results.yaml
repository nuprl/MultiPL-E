language: swift
name: HumanEval_66_digitSum
results:
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.characters\
    \ {\n        if char >= \"A\" && char <= \"Z\" {\n            sum += Int(String(char).unicodeScalars.first!.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpwwc0jim1.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.uppercased()\
    \ {\n        if let ascii = char.asciiValue {\n            sum += Int(ascii)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmpe0l3uxe6/tmpe0l3uxe6.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0de55ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0de255b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0de255988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0de2547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe0l3uxe6                        0x0000562f226f75fc <unavailable> + 5628

    5    libc.so.6                          0x00002af0de74a460 __libc_start_main +
    245

    6    tmpe0l3uxe6                        0x0000562f226f71d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp04okzfw_.swift:7:62: error: result values in '? :' expression have\
    \ mismatching types 'UInt8' and 'Int'\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n                                                ~~~~~~~~~~~~~^\n\
    \                                                Int(          )\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1 >= \"A\" &&\
    \ $1 <= \"Z\" ? Int($1.unicodeScalars.first!.value) : 0) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.characters\
    \ {\n        if let ascii = char.asciiValue {\n            if ascii >= 65 && ascii\
    \ <= 90 {\n                sum += Int(ascii)\n            }\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpf_ugje8o.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.unicodeScalars.reduce(0) { $0 + ($1.isASCII\
    \ && $1.isUppercase ? $1.value : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp8cmr0kj3.swift:7:35: error: missing argument label 'into:' in call\n\
    \    return s.unicodeScalars.reduce(0) { $0 + ($1.isASCII && $1.isUppercase ?\
    \ $1.value : 0) }\n                                  ^\n                     \
    \              into: \n/tmp/tmp8cmr0kj3.swift:7:29: error: cannot convert return\
    \ expression of type '(Int, _) -> Int' to return type 'Int'\n    return s.unicodeScalars.reduce(0)\
    \ { $0 + ($1.isASCII && $1.isUppercase ? $1.value : 0) }\n           ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.map { Int(String($0))\
    \ ?? 0 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmp22xjpds5/tmp22xjpds5.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93dded5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93ddbccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93ddbcc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93ddbcb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp22xjpds5                        0x000055fd51b6765c <unavailable> + 5724

    5    libc.so.6                          0x00002b93de0c1460 __libc_start_main +
    245

    6    tmp22xjpds5                        0x000055fd51b67239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    let upper = s.filter { $0.isUppercase }\n\
    \    return upper.reduce(0) { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.unicodeScalars.filter{$0.isASCII\
    \ && $0.isUppercase}.map{Int($0.value)}.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp4dke5pe8.swift:7:53: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n    return s.unicodeScalars.filter{$0.isASCII && $0.isUppercase}.map{Int($0.value)}.reduce(0,\
    \ +)\n                                                 ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1 >= \"A\" &&\
    \ $1 <= \"Z\" ? $1.asciiValue! - 64 : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmphxcf2h94.swift:7:72: error: result values in '? :' expression have\
    \ mismatching types 'UInt8' and 'Int'\n    return s.reduce(0) { $0 + ($1 >= \"\
    A\" && $1 <= \"Z\" ? $1.asciiValue! - 64 : 0) }\n                            \
    \                            ~~~~~~~~~~~~~~~^~~~\n                           \
    \                             Int(               )\n"
  stdout: ''
  timestamp: 1659979913
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.unicodeScalars.reduce(0) { $0 + ($1.isASCII\
    \ && $1.isUppercase ? $1.value : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp8cmr0kj3.swift:7:35: error: missing argument label 'into:' in call\n\
    \    return s.unicodeScalars.reduce(0) { $0 + ($1.isASCII && $1.isUppercase ?\
    \ $1.value : 0) }\n                                  ^\n                     \
    \              into: \n/tmp/tmp8cmr0kj3.swift:7:29: error: cannot convert return\
    \ expression of type '(Int, _) -> Int' to return type 'Int'\n    return s.unicodeScalars.reduce(0)\
    \ { $0 + ($1.isASCII && $1.isUppercase ? $1.value : 0) }\n           ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters {\n\
    \        if c >= \"A\" && c <= \"Z\" {\n            sum += Int(c.asciiValue!)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp071zpd1c.swift:8:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.unicodeScalars\
    \ {\n        if c.value >= 65 && c.value <= 90 {\n            sum += Int(c.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    let upper = s.filter { $0.isUppercase }\n\
    \    return upper.reduce(0) { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.unicodeScalars\
    \ {\n        if c.value >= 65 && c.value <= 90 {\n            sum += Int(c.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.unicodeScalars.filter { $0.isASCII\
    \ && $0.isUppercase }.map { Int($0.value) }.reduce(0, +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpzw8vmetl.swift:7:55: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n    return s.unicodeScalars.filter { $0.isASCII &&\
    \ $0.isUppercase }.map { Int($0.value) }.reduce(0, +)\n                      \
    \                             ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.unicodeScalars\
    \ {\n        if c.value >= 65 && c.value <= 90 {\n            sum += Int(c.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.unicodeScalars\
    \ {\n        if c.value >= 65 && c.value <= 90 {\n            sum += Int(c.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.characters\
    \ {\n        if let ascii = char.asciiValue {\n            if ascii >= 65 && ascii\
    \ <= 90 {\n                sum += Int(ascii)\n            }\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpf_ugje8o.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.characters\
    \ {\n        if char >= \"A\" && char <= \"Z\" {\n            sum += Int(String(char).unicodeScalars.first!.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpwwc0jim1.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.characters\
    \ {\n        if let ascii = char.asciiValue {\n            if ascii >= 65 && ascii\
    \ <= 90 {\n                sum += Int(ascii)\n            }\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpf_ugje8o.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.characters\
    \ {\n        if let ascii = char.asciiValue {\n            if ascii >= 65 && ascii\
    \ <= 90 {\n                sum += Int(ascii)\n            }\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpf_ugje8o.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp04okzfw_.swift:7:62: error: result values in '? :' expression have\
    \ mismatching types 'UInt8' and 'Int'\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n                                                ~~~~~~~~~~~~~^\n\
    \                                                Int(          )\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters {\n\
    \        if c >= \"A\" && c <= \"Z\" {\n            sum += Int(c.unicodeScalars.first!.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpeopp8xpt.swift:8:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    let upper = s.filter { $0.isUppercase }\n\
    \    return upper.reduce(0) { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.characters\
    \ {\n        if let ascii = Int(String(char).unicodeScalars.filter{$0.isASCII}.first!.value)\
    \ {\n            sum += ascii\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpgbt0sb7y.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpgbt0sb7y.swift:9:12:\
    \ error: initializer for conditional binding must have Optional type, not 'Int'\n\
    \        if let ascii = Int(String(char).unicodeScalars.filter{$0.isASCII}.first!.value)\
    \ {\n           ^           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp04okzfw_.swift:7:62: error: result values in '? :' expression have\
    \ mismatching types 'UInt8' and 'Int'\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n                                                ~~~~~~~~~~~~~^\n\
    \                                                Int(          )\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter{$0.isUppercase}.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.unicodeScalars.reduce(0) { $0 + ($1.isASCII\
    \ && $1.isUppercase ? Int($1.value) : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp81b71or2.swift:7:35: error: missing argument label 'into:' in call\n\
    \    return s.unicodeScalars.reduce(0) { $0 + ($1.isASCII && $1.isUppercase ?\
    \ Int($1.value) : 0) }\n                                  ^\n                \
    \                   into: \n/tmp/tmp81b71or2.swift:7:29: error: cannot convert\
    \ return expression of type '(Int, _) -> Int' to return type 'Int'\n    return\
    \ s.unicodeScalars.reduce(0) { $0 + ($1.isASCII && $1.isUppercase ? Int($1.value)\
    \ : 0) }\n           ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979849
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.unicodeScalars.reduce(0) { $0 + ($1.isASCII\
    \ && $1.isUppercase ? $1.value : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp8cmr0kj3.swift:7:35: error: missing argument label 'into:' in call\n\
    \    return s.unicodeScalars.reduce(0) { $0 + ($1.isASCII && $1.isUppercase ?\
    \ $1.value : 0) }\n                                  ^\n                     \
    \              into: \n/tmp/tmp8cmr0kj3.swift:7:29: error: cannot convert return\
    \ expression of type '(Int, _) -> Int' to return type 'Int'\n    return s.unicodeScalars.reduce(0)\
    \ { $0 + ($1.isASCII && $1.isUppercase ? $1.value : 0) }\n           ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.uppercased()\
    \ {\n        if let ascii = char.asciiValue {\n            sum += Int(ascii)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmpe0l3uxe6/tmpe0l3uxe6.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0de55ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0de255b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0de255988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0de2547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe0l3uxe6                        0x0000562f226f75fc <unavailable> + 5628

    5    libc.so.6                          0x00002af0de74a460 __libc_start_main +
    245

    6    tmpe0l3uxe6                        0x0000562f226f71d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.unicodeScalars.reduce(0) {\n    \
    \    $0 + ($1.isASCII && $1.isUppercase ? $1.value : 0)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpok1b76l4.swift:7:35: error: missing argument label 'into:' in call\n\
    \    return s.unicodeScalars.reduce(0) {\n                                  ^\n\
    \                                   into: \n/tmp/tmpok1b76l4.swift:7:29: error:\
    \ cannot convert return expression of type '(Int, _) -> Int' to return type 'Int'\n\
    \    return s.unicodeScalars.reduce(0) {\n           ~~~~~~~~~~~~~~~~~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.unicodeScalars.filter { $0.isASCII\
    \ && $0.isUppercase }.map { Int($0.value) }.reduce(0, +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpzw8vmetl.swift:7:55: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n    return s.unicodeScalars.filter { $0.isASCII &&\
    \ $0.isUppercase }.map { Int($0.value) }.reduce(0, +)\n                      \
    \                             ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.unicodeScalars.reduce(0) {\n    \
    \    $0 + ($1.isASCII && $1.isUppercase ? $1.value : 0)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpok1b76l4.swift:7:35: error: missing argument label 'into:' in call\n\
    \    return s.unicodeScalars.reduce(0) {\n                                  ^\n\
    \                                   into: \n/tmp/tmpok1b76l4.swift:7:29: error:\
    \ cannot convert return expression of type '(Int, _) -> Int' to return type 'Int'\n\
    \    return s.unicodeScalars.reduce(0) {\n           ~~~~~~~~~~~~~~~~~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.characters\
    \ {\n        if char >= \"A\" && char <= \"Z\" {\n            sum += Int(String(char).unicodeScalars.first!.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpwwc0jim1.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters {\n\
    \        if let ascii = Int(String(c).unicodeScalars.filter{$0.isASCII}.first!.value)\
    \ {\n            sum += ascii\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp_1r8zw35.swift:8:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp_1r8zw35.swift:9:12:\
    \ error: initializer for conditional binding must have Optional type, not 'Int'\n\
    \        if let ascii = Int(String(c).unicodeScalars.filter{$0.isASCII}.first!.value)\
    \ {\n           ^           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.reduce(0) {\n        $1.isUppercase\
    \ ? $0 + $1.asciiValue! : $0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpba8mitcn.swift:8:44: error: cannot convert value of type 'UInt8'\
    \ to expected argument type 'Int'\n        $1.isUppercase ? $0 + $1.asciiValue!\
    \ : $0\n                                           ^\n                       \
    \       Int(          )\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.unicodeScalars.reduce(0) {\n    \
    \    $0 + ($1.isASCII && $1.isUppercase ? $1.value : 0)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpok1b76l4.swift:7:35: error: missing argument label 'into:' in call\n\
    \    return s.unicodeScalars.reduce(0) {\n                                  ^\n\
    \                                   into: \n/tmp/tmpok1b76l4.swift:7:29: error:\
    \ cannot convert return expression of type '(Int, _) -> Int' to return type 'Int'\n\
    \    return s.unicodeScalars.reduce(0) {\n           ~~~~~~~~~~~~~~~~~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp04okzfw_.swift:7:62: error: result values in '? :' expression have\
    \ mismatching types 'UInt8' and 'Int'\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n                                                ~~~~~~~~~~~~~^\n\
    \                                                Int(          )\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.unicodeScalars\
    \ {\n        if c.value >= 65 && c.value <= 90 {\n            sum += Int(c.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp04okzfw_.swift:7:62: error: result values in '? :' expression have\
    \ mismatching types 'UInt8' and 'Int'\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n                                                ~~~~~~~~~~~~~^\n\
    \                                                Int(          )\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.unicodeScalars.reduce(0) {\n    \
    \    $0 + ($1.isASCII && $1.isUppercase ? $1.value : 0)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpok1b76l4.swift:7:35: error: missing argument label 'into:' in call\n\
    \    return s.unicodeScalars.reduce(0) {\n                                  ^\n\
    \                                   into: \n/tmp/tmpok1b76l4.swift:7:29: error:\
    \ cannot convert return expression of type '(Int, _) -> Int' to return type 'Int'\n\
    \    return s.unicodeScalars.reduce(0) {\n           ~~~~~~~~~~~~~~~~~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    let upper = s.uppercased()\n    var sum =\
    \ 0\n    for char in upper {\n        sum += Int(char.asciiValue!)\n    }\n  \
    \  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmpqsm1nwzs/tmpqsm1nwzs.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9aaa89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9aa780b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9aa780988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9aa77f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsm1nwzs                        0x000055cbfd75f68c <unavailable> + 5772

    5    libc.so.6                          0x00002af9aac75460 __libc_start_main +
    245

    6    tmpqsm1nwzs                        0x000055cbfd75f269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.unicodeScalars\
    \ {\n        if c.value >= 65 && c.value <= 90 {\n            sum += Int(c.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.unicodeScalars.reduce(0) { $0 + ($1.isASCII()\
    \ ? $1.value : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp88syyopz.swift:7:35: error: missing argument label 'into:' in call\n\
    \    return s.unicodeScalars.reduce(0) { $0 + ($1.isASCII() ? $1.value : 0) }\n\
    \                                  ^\n                                   into:\
    \ \n/tmp/tmp88syyopz.swift:7:29: error: cannot convert return expression of type\
    \ '(Int, _) -> Int' to return type 'Int'\n    return s.unicodeScalars.reduce(0)\
    \ { $0 + ($1.isASCII() ? $1.value : 0) }\n           ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.unicodeScalars.reduce(0) { $0 + ($1.isASCII\
    \ && $1.isUppercase ? $1.value : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp8cmr0kj3.swift:7:35: error: missing argument label 'into:' in call\n\
    \    return s.unicodeScalars.reduce(0) { $0 + ($1.isASCII && $1.isUppercase ?\
    \ $1.value : 0) }\n                                  ^\n                     \
    \              into: \n/tmp/tmp8cmr0kj3.swift:7:29: error: cannot convert return\
    \ expression of type '(Int, _) -> Int' to return type 'Int'\n    return s.unicodeScalars.reduce(0)\
    \ { $0 + ($1.isASCII && $1.isUppercase ? $1.value : 0) }\n           ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.unicodeScalars.filter{$0.isASCII\
    \ && $0.isUppercase}.map{Int($0.value)}.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp4dke5pe8.swift:7:53: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n    return s.unicodeScalars.filter{$0.isASCII && $0.isUppercase}.map{Int($0.value)}.reduce(0,\
    \ +)\n                                                 ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.unicodeScalars\
    \ {\n        if c.value >= 65 && c.value <= 90 {\n            sum += Int(c.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.uppercased()\
    \ {\n        if let ascii = char.asciiValue {\n            sum += Int(ascii)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmpe0l3uxe6/tmpe0l3uxe6.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0de55ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0de255b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0de255988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0de2547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe0l3uxe6                        0x0000562f226f75fc <unavailable> + 5628

    5    libc.so.6                          0x00002af0de74a460 __libc_start_main +
    245

    6    tmpe0l3uxe6                        0x0000562f226f71d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp04okzfw_.swift:7:62: error: result values in '? :' expression have\
    \ mismatching types 'UInt8' and 'Int'\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n                                                ~~~~~~~~~~~~~^\n\
    \                                                Int(          )\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.unicodeScalars.filter { $0.isASCII\
    \ && $0.isUppercase }.map { Int($0.value) }.reduce(0, +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpzw8vmetl.swift:7:55: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n    return s.unicodeScalars.filter { $0.isASCII &&\
    \ $0.isUppercase }.map { Int($0.value) }.reduce(0, +)\n                      \
    \                             ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.uppercased()\
    \ {\n        if let ascii = char.asciiValue {\n            sum += Int(ascii)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmpe0l3uxe6/tmpe0l3uxe6.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0de55ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0de255b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0de255988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0de2547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe0l3uxe6                        0x0000562f226f75fc <unavailable> + 5628

    5    libc.so.6                          0x00002af0de74a460 __libc_start_main +
    245

    6    tmpe0l3uxe6                        0x0000562f226f71d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters {\n\
    \        if c >= \"A\" && c <= \"Z\" {\n            sum += Int(String(c).unicodeScalars.first!.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpf41s8lkm.swift:8:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.unicodeScalars\
    \ {\n        if c.value >= 65 && c.value <= 90 {\n            sum += Int(c.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.unicodeScalars.reduce(0, { $0 + ($1.isASCII\
    \ && $1.isUppercase ? $1.value : 0) })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpc_vylu6j.swift:7:64: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n    return s.unicodeScalars.reduce(0, { $0 + ($1.isASCII\
    \ && $1.isUppercase ? $1.value : 0) })\n                                     \
    \                       ~~ ^~~~~~~~~~~\n/tmp/tmpc_vylu6j.swift:7:81: error: result\
    \ values in '? :' expression have mismatching types 'UInt32' and 'Int'\n    return\
    \ s.unicodeScalars.reduce(0, { $0 + ($1.isASCII && $1.isUppercase ? $1.value :\
    \ 0) })\n                                                                    \
    \         ~~~^~~~~\n                                                         \
    \                    Int(    )\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.unicodeScalars\
    \ {\n        if c.value >= 65 && c.value <= 90 {\n            sum += Int(c.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.unicodeScalars\
    \ {\n        if c.value >= 65 && c.value <= 90 {\n            sum += Int(c.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    let upper = s.filter { $0.isUppercase }\n\
    \    return upper.reduce(0) { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.uppercased()\
    \ {\n        if let ascii = char.asciiValue {\n            if ascii >= 65 && ascii\
    \ <= 90 {\n                sum += Int(ascii)\n            }\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmpcnpa4dd6/tmpcnpa4dd6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fb7266c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fb6f5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fb6f5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fb6f5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcnpa4dd6                        0x000055c56a7155fc <unavailable> + 5628

    5    libc.so.6                          0x00002b4fb7452460 __libc_start_main +
    245

    6    tmpcnpa4dd6                        0x000055c56a7151d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp04okzfw_.swift:7:62: error: result values in '? :' expression have\
    \ mismatching types 'UInt8' and 'Int'\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n                                                ~~~~~~~~~~~~~^\n\
    \                                                Int(          )\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.characters\
    \ {\n        if let ascii = char.asciiValue {\n            if ascii >= 65 && ascii\
    \ <= 90 {\n                sum += Int(ascii)\n            }\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpf_ugje8o.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.unicodeScalars\
    \ {\n        if c.value >= 65 && c.value <= 90 {\n            sum += Int(c.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.unicodeScalars.reduce(0) {\n    \
    \    $0 + ($1.isASCII && $1.isUppercase ? $1.value : 0)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpok1b76l4.swift:7:35: error: missing argument label 'into:' in call\n\
    \    return s.unicodeScalars.reduce(0) {\n                                  ^\n\
    \                                   into: \n/tmp/tmpok1b76l4.swift:7:29: error:\
    \ cannot convert return expression of type '(Int, _) -> Int' to return type 'Int'\n\
    \    return s.unicodeScalars.reduce(0) {\n           ~~~~~~~~~~~~~~~~~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.characters\
    \ {\n        if let ascii = char.asciiValue {\n            if ascii >= 65 && ascii\
    \ <= 90 {\n                sum += Int(ascii)\n            }\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpf_ugje8o.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp04okzfw_.swift:7:62: error: result values in '? :' expression have\
    \ mismatching types 'UInt8' and 'Int'\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n                                                ~~~~~~~~~~~~~^\n\
    \                                                Int(          )\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp04okzfw_.swift:7:62: error: result values in '? :' expression have\
    \ mismatching types 'UInt8' and 'Int'\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n                                                ~~~~~~~~~~~~~^\n\
    \                                                Int(          )\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp04okzfw_.swift:7:62: error: result values in '? :' expression have\
    \ mismatching types 'UInt8' and 'Int'\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n                                                ~~~~~~~~~~~~~^\n\
    \                                                Int(          )\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + $1.asciiValue! }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp9nju_lmj.swift:7:40: error: cannot convert return expression of\
    \ type 'UInt8' to return type 'Int'\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + $1.asciiValue! }\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \           Int(                                                         )\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp04okzfw_.swift:7:62: error: result values in '? :' expression have\
    \ mismatching types 'UInt8' and 'Int'\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n                                                ~~~~~~~~~~~~~^\n\
    \                                                Int(          )\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.unicodeScalars\
    \ {\n        if c.value >= 65 && c.value <= 90 {\n            sum += Int(c.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.characters\
    \ {\n        if let ascii = Int(String(char).unicodeScalars.filter{$0.isASCII}.first!.value)\
    \ {\n            sum += ascii\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpgbt0sb7y.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpgbt0sb7y.swift:9:12:\
    \ error: initializer for conditional binding must have Optional type, not 'Int'\n\
    \        if let ascii = Int(String(char).unicodeScalars.filter{$0.isASCII}.first!.value)\
    \ {\n           ^           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.reduce(0, { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! - 64 : 0) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpvxxppqb8.swift:7:64: error: result values in '? :' expression have\
    \ mismatching types 'UInt8' and 'Int'\n    return s.reduce(0, { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! - 64 : 0) })\n                                            \
    \    ~~~~~~~~~~~~~~~^~~~\n                                                Int(\
    \               )\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp04okzfw_.swift:7:62: error: result values in '? :' expression have\
    \ mismatching types 'UInt8' and 'Int'\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n                                                ~~~~~~~~~~~~~^\n\
    \                                                Int(          )\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.unicodeScalars\
    \ {\n        if c.value >= 65 && c.value <= 90 {\n            sum += Int(c.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.characters\
    \ {\n        if let ascii = char.asciiValue {\n            if ascii >= 65 && ascii\
    \ <= 90 {\n                sum += Int(ascii)\n            }\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpf_ugje8o.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.characters\
    \ {\n        if let ascii = char.asciiValue {\n            if ascii >= 65 && ascii\
    \ <= 90 {\n                sum += Int(ascii)\n            }\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpf_ugje8o.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($1.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.unicodeScalars\
    \ {\n        if c.value >= 65 && c.value <= 90 {\n            sum += Int(c.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.characters\
    \ {\n        if let ascii = Int(String(char).unicodeScalars.filter{$0.isASCII}.first!.value)\
    \ {\n            sum += ascii\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpgbt0sb7y.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpgbt0sb7y.swift:9:12:\
    \ error: initializer for conditional binding must have Optional type, not 'Int'\n\
    \        if let ascii = Int(String(char).unicodeScalars.filter{$0.isASCII}.first!.value)\
    \ {\n           ^           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfunc\
    \ digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value >= 65 && char.value <= 90 {\n            sum += Int(char.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
