name: HumanEval_2_truncate_number
language: swift
prompt: "\n/// Given a positive floating point number, it can be decomposed into\n\
  /// and integer part (largest integer smaller than given number) and decimals\n\
  /// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n\
  func truncate_number(number: Double) -> Double {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(truncate_number(number: 3.5) == 0.5)\nassert(truncate_number(number:\
  \ 1.25) == 0.25)\nassert(truncate_number(number: 123.0) == 0.0)"
completions: ['    return number - Double(Int(number))', '    return number - Double(Int(number))',
  "    let int_part = Int(number)\n    return number - Double(int_part)", "    var\
    \ truncated = 0.0\n    var decimal = modf(number, &truncated)\n    return decimal",
  '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - floor(number)', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', "    let integer_part = Int(number)\n\
    \    return number - Double(integer_part)", "    let number_as_string = String(number)\n\
    \    let number_as_array = number_as_string.characters.split { $0 == \".\" }.map\
    \ { String($0) }\n    if number_as_array.count == 1 {\n        return 0\n    }\n\
    \    return Double(number_as_array[1])!", '    return number - Double(Int(number))',
  "    let integer_part = Int(number)\n    return number - Double(integer_part)",
  '    return number - Double(Int(number))', "    let integer_part = Int(number)\n\
    \    return number - Double(integer_part)", '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', "    let integer_part = Int(number)\n\
    \    return number - Double(integer_part)", '    return number - floor(number)',
  '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number - floor(number)',
  '    return number - floor(number)', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  "    let int_part = Int(number)\n    return number - Double(int_part)", '    return
    number - Double(Int(number))', '    return number - Double(Int(number))', '    return
    number - Double(Int(number))', '    return number - floor(number)', '    return
    number - Double(Int(number))', '    return number - Double(Int(number))', "  \
    \  let integer_part = Int(number)\n    return number - Double(integer_part)",
  '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', "    let integer_part = Int(number)\n\
    \    return number - Double(integer_part)", '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', "    let int_part = Int(number)\n   \
    \ return number - Double(int_part)", '    return number.truncatingRemainder(dividingBy:
    1)', "    let integer = Int(number)\n    return number - Double(integer)", '    return
    number - Double(Int(number))', '    return number - Double(Int(number))', '    return
    number - Double(Int(number))', '    return number - floor(number)', '    return
    number - Double(Int(number))', '    return number - floor(number)', '    return
    number - Double(Int(number))', '    return number - Double(Int(number))', '    return
    number - Double(Int(number))', '    return number - Double(Int(number))', '    return
    number - Double(Int(number))', '    return number - Double(Int(number))', "  \
    \  let int_part = Int(number)\n    return number - Double(int_part)", '    return
    number - Double(Int(number))', '    return number - Double(Int(number))', '    return
    number - Double(Int(number))', '    return number - Double(Int(number))', "  \
    \  let integer_part = Int(number)\n    return number - Double(integer_part)",
  '    return number - Double(Int(number))', "    let truncated = floor(number)\n\
    \    return number - truncated", '    return number - Double(Int(number))', '    return
    number - Double(Int(number))', '    return number - Double(Int(number))', '    return
    number - Double(Int(number))', '    return number - floor(number)', '    return
    number.truncatingRemainder(dividingBy: 1)', '    return number - Double(Int(number))',
  "    let int_part = Int(number)\n    return number - Double(int_part)", '    return
    number - Double(Int(number))', '    return number - Double(Int(number))', '    return
    number - Double(Int(number))', '    return number - Double(Int(number))', '    return
    number - Double(Int(number))', '    return number - Double(Int(number))', "  \
    \  let number_int = Int(number)\n    return number - Double(number_int)", '    return
    number - Double(Int(number))', "    let int_part = Int(number)\n    return number\
    \ - Double(int_part)", '    return number - Double(Int(number))', '    return
    number - Double(Int(number))', '    return number - Double(Int(number))', '    return
    number - Double(Int(number))', '    return number - Double(Int(number))', "  \
    \  let integer_part = Int(number)\n    return number - Double(integer_part)",
  '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', "    let truncated = floor(number)\n\
    \    return number - truncated", '    return number - Double(Int(number))', '    return
    number - Double(Int(number))', '    return number - Double(Int(number))', '    return
    number - Double(Int(number))', "    let int_part = Int(number)\n    return number\
    \ - Double(int_part)", "    let truncated = floor(number)\n    return number -\
    \ truncated", '    return number - Double(Int(number))', '    return number -
    Double(Int(number))', '    return number - Double(Int(number))', '    return number
    - Double(Int(number))', "    let integer_part = Int(number)\n    return number\
    \ - Double(integer_part)", '    return number - floor(number)', '    return number
    - Double(Int(number))', '    return number - Double(Int(number))', '    return
    number - Double(Int(number))', '    return number - Double(Int(number))', '    return
    number.truncatingRemainder(dividingBy: 1)', '    return number - Double(Int(number))',
  "    let truncated = floor(number)\n    return number - truncated", '    return
    number - Double(Int(number))', '    return number - Double(Int(number))', '    return
    number - Double(Int(number))', '    return number - Double(Int(number))', '    return
    number - Double(Int(number))', "    let int_part = Int(number)\n    return number\
    \ - Double(int_part)", "    let int_part = Int(number)\n    return number - Double(int_part)",
  "    let int_part = Int(number)\n    return number - Double(int_part)", '    return
    number - Double(Int(number))', '    return number - Double(Int(number))', '    return
    number - Double(Int(number))', '    return number - Double(Int(number))', '    return
    number.truncatingRemainder(dividingBy: 1)', '    return number - Double(Int(number))',
  '    return number - floor(number)', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', "    let integer_part = Int(number)\n\
    \    return number - Double(integer_part)", '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - floor(number)', "    let truncated = floor(number)\n    return\
    \ number - truncated", '    return number - Double(Int(number))', '    return
    number - Double(Int(number))', '    return number - Double(Int(number))', '    return
    number - Double(Int(number))', '    return number - Double(Int(number))', '    return
    number - floor(number)', '    return number - floor(number)', '    return number
    - Double(Int(number))', '    return number - Double(Int(number))', '    return
    number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number.truncatingRemainder(dividingBy: 1)', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)']
stop_tokens:
- "\n}"
