language: swift
name: HumanEval_78_hex_key
results:
- exit_code: -4
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            let index = hex.firstIndex(of: String(i))\n            if primes.contains(index!\
    \ + 1) {\n                count += 1\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(hex_key(num: \"AB\") ==\
    \ 1)\nassert(hex_key(num: \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\")\
    \ == 4)\nassert(hex_key(num: \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\"\
    ) == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: Exception
  stderr: 'tmpy69udwor/tmpy69udwor.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c34f99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c34c90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c34c90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c34c8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy69udwor                        0x0000556d067ad73b <unavailable> + 5947

    5    libc.so.6                          0x00002b7c35185460 __libc_start_main +
    245

    6    tmpy69udwor                        0x0000556d067ad319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let primes = [\"2\",\"3\",\"5\",\"7\"\
    ,\"B\",\"D\"]\n    var count = 0\n    for char in num {\n        if primes.contains(String(char))\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex_digits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\
    \ \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let prime_digits\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var count = 0\n    for digit\
    \ in num {\n        if prime_digits.contains(String(digit)) {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\n\
    assert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\n\
    assert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if primes.contains(hex.index(of:\
    \ String(i))!) {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for char in num {\n        if let index =\
    \ hex.firstIndex(of: String(char)) {\n            if primes.contains(index) {\n\
    \                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   var count = 0\n    let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let prime\
    \ = [2, 3, 5, 7, 11, 13]\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if prime.contains(Int(String(i), radix: 16)!) {\n           \
    \     count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for char in num {\n        if let index =\
    \ hex.firstIndex(of: String(char)) {\n            if primes.contains(index) {\n\
    \                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let prime = [2,3,5,7,11,13]\n    var count\
    \ = 0\n    for i in num.uppercased() {\n        if hex.contains(String(i)) {\n\
    \            if prime.contains(hex.firstIndex(of: String(i))!) {\n           \
    \     count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let primes = [\"2\",\"3\",\"5\",\"7\"\
    ,\"B\",\"D\"]\n    var count = 0\n    for i in num {\n        if primes.contains(String(i))\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for char in num {\n        if let index =\
    \ hex.firstIndex(of: String(char)) {\n            if primes.contains(index) {\n\
    \                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for c in num {\n        if let index = hex.firstIndex(of:\
    \ String(c)) {\n            if primes.contains(index) {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let prime = [2,3,5,7,11,13]\n    var count\
    \ = 0\n    for i in num {\n        if hex.contains(String(i)) {\n            if\
    \ prime.contains(Int(String(i), radix: 16)!) {\n                count += 1\n \
    \           }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   var count = 0\n    let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes\
    \ = [2, 3, 5, 7, 11, 13]\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   var count = 0\n    for char in num {\n        switch char {\n        case\
    \ \"2\", \"3\", \"5\", \"7\", \"B\", \"D\":\n            count += 1\n        default:\n\
    \            continue\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var count = 0\n\
    \    for char in num {\n        if primes.contains(String(char)) {\n         \
    \   count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for char in num {\n        if let index =\
    \ hex.firstIndex(of: String(char)) {\n            if primes.contains(index) {\n\
    \                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex_primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var count\
    \ = 0\n    for char in num {\n        if hex_primes.contains(String(char)) {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: -4
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex_key = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"\
    8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    var count = 0\n   \
    \ for i in num {\n        if hex_key.contains(String(i)) {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\n\
    assert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\n\
    assert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)"
  status: Exception
  stderr: 'tmp2173yy_y/tmp2173yy_y.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acfd4855c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acfd454cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acfd454c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acfd454b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2173yy_y                        0x00005617fc10b554 <unavailable> + 5460

    5    libc.so.6                          0x00002acfd4a41460 __libc_start_main +
    245

    6    tmp2173yy_y                        0x00005617fc10b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hexDigits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"\
    8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primeDigits = [\"\
    2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var count = 0\n    for char in num\
    \ {\n        if primeDigits.contains(String(char)) {\n            count += 1\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\nassert(hex_key(num:\
    \ \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\nassert(hex_key(num:\
    \ \"123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let primes = [2,3,5,7,11,13]\n    var\
    \ count = 0\n    for i in num {\n        if hex.contains(String(i)) {\n      \
    \      if primes.contains(Int(String(i), radix: 16)!) {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let prime = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if prime.contains(Int(String(i), radix: 16)!) {\n           \
    \     count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   var count = 0\n    for char in num {\n        if char == \"2\" || char ==\
    \ \"3\" || char == \"5\" || char == \"7\" || char == \"B\" || char == \"D\" {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex_digits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\
    \ \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let prime_digits\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var count = 0\n    for char\
    \ in num {\n        if prime_digits.contains(String(char)) {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\n\
    assert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\n\
    assert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   var count = 0\n    for char in num {\n        if char == \"2\" || char ==\
    \ \"3\" || char == \"5\" || char == \"7\" || char == \"B\" || char == \"D\" {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for c in num {\n        if let index = hex.firstIndex(of:\
    \ String(c)) {\n            if primes.contains(index) {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let primes = [2,3,5,7,11,13]\n    var\
    \ count = 0\n    for char in num {\n        if let index = hex.firstIndex(of:\
    \ String(char)) {\n            if primes.contains(index) {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let primes = [2, 3, 5, 7, 11, 13]\n    var count = 0\n    for char in num\
    \ {\n        if let number = Int(String(char), radix: 16) {\n            if primes.contains(number)\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for char in num {\n        if let index =\
    \ hex.firstIndex(of: String(char)) {\n            if primes.contains(index) {\n\
    \                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let primes = [2,3,5,7,11,13]\n    var\
    \ count = 0\n    for i in num {\n        if hex.contains(String(i)) {\n      \
    \      if primes.contains(Int(String(i), radix: 16)!) {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for char in num {\n        if let index =\
    \ hex.firstIndex(of: String(char)) {\n            if primes.contains(index) {\n\
    \                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let primes = [\"2\",\"3\",\"5\",\"7\"\
    ,\"B\",\"D\"]\n    var count = 0\n    for char in num {\n        if primes.contains(String(char))\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for char in num {\n        if let index =\
    \ hex.firstIndex(of: String(char)) {\n            if primes.contains(index) {\n\
    \                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let prime = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if prime.contains(Int(String(i), radix: 16)!) {\n           \
    \     count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for char in num {\n        if let index =\
    \ hex.firstIndex(of: String(char)) {\n            if primes.contains(index) {\n\
    \                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var count = 0\n\
    \    for char in num {\n        if primes.contains(String(char)) {\n         \
    \   count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 1
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = \"0123456789ABCDEF\"\n    let primes = [2, 3, 5, 7, 11, 13]\n  \
    \  var count = 0\n    for c in num {\n        if let index = hex.index(of: c)\
    \ {\n            if primes.contains(index) {\n                count += 1\n   \
    \         }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\n\
    assert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\n\
    assert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpsymgqeif.swift:18:28: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = hex.index(of: c) {\n          \
    \                 ^\n/tmp/tmpsymgqeif.swift:18:28: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = hex.index(of: c) {\n                       \
    \    ^~~~~\n                           firstIndex\n/tmp/tmpsymgqeif.swift:19:16:\
    \ error: instance method 'contains' requires that 'String.Index' conform to 'Collection'\n\
    \            if primes.contains(index) {\n               ^\n_StringProcessing.Collection:3:17:\
    \ note: where 'C' = 'String.Index'\n    public func contains<C>(_ other: C) ->\
    \ Bool where C : Collection, Self.Element == C.Element\n                ^\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex_digits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\
    \ \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let prime_digits\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var count = 0\n    for c in\
    \ num {\n        if prime_digits.contains(String(c)) {\n            count += 1\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\nassert(hex_key(num:\
    \ \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\nassert(hex_key(num:\
    \ \"123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if primes.contains(hex.index(of:\
    \ String(i))!) {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 1
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex_primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    return num.filter\
    \ { hex_primes.contains($0) }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\nassert(hex_key(num:\
    \ \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\nassert(hex_key(num:\
    \ \"123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp6ev1j1no.swift:15:45: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'String'\n    return num.filter\
    \ { hex_primes.contains($0) }.count\n                                        \
    \    ^\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for char in num {\n        if let index =\
    \ hex.firstIndex(of: String(char)) {\n            if primes.contains(index) {\n\
    \                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = \"0123456789ABCDEF\"\n    let primes = \"2357BD\"\n    return num.filter\
    \ { primes.contains($0) }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(hex_key(num:\
    \ \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\nassert(hex_key(num: \"\
    ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\nassert(hex_key(num: \"\
    123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = \"0123456789ABCDEF\"\n    let primes = [2, 3, 5, 7, 11, 13]\n  \
    \  return num.filter { primes.contains(hex.firstIndex(of: $0)! + 1) }.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpehzcnix2.swift:16:63: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n    return num.filter { primes.contains(hex.firstIndex(of:\
    \ $0)! + 1) }.count\n                                                        \
    \      ^\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: -4
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    var count = 0\n    for\
    \ i in num {\n        if hex.contains(String(i)) {\n            count += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\nassert(hex_key(num:\
    \ \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\nassert(hex_key(num:\
    \ \"123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)"
  status: Exception
  stderr: 'tmp5600o9t3/tmp5600o9t3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad05194fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad051646b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad051646988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0516457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5600o9t3                        0x00005651b6dec554 <unavailable> + 5460

    5    libc.so.6                          0x00002ad051b3b460 __libc_start_main +
    245

    6    tmp5600o9t3                        0x00005651b6dec1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let primes = [2, 3, 5, 7, 11, 13]\n    let hex = [\"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"\
    E\", \"F\"]\n    var count = 0\n    for char in num {\n        if let index =\
    \ hex.index(of: String(char)) {\n            if primes.contains(index) {\n   \
    \             count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for char in num {\n        if let index =\
    \ hex.firstIndex(of: String(char)) {\n            if primes.contains(index) {\n\
    \                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let primes = [2,3,5,7,11,13]\n    var\
    \ count = 0\n    for i in num {\n        if hex.contains(String(i)) {\n      \
    \      if primes.contains(Int(String(i), radix: 16)!) {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex_nums = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"\
    8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3,\
    \ 5, 7, 11, 13]\n    var count = 0\n    for char in num {\n        if let index\
    \ = hex_nums.firstIndex(of: String(char)) {\n            if primes.contains(index)\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: -4
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = Set(\"2357BDF\")\n    return num.filter { hex.contains($0) }.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: Exception
  stderr: 'tmpjqouaxdd/tmpjqouaxdd.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b214f91ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b214f615b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b214f615988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b214f6147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjqouaxdd                        0x000055f83dcd07be <unavailable> + 6078

    5    libc.so.6                          0x00002b214fb0a460 __libc_start_main +
    245

    6    tmpjqouaxdd                        0x000055f83dcd0189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if let index = hex.firstIndex(of:\
    \ String(i)) {\n            if primes.contains(index) {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for char in num {\n        if hex.contains(String(char))\
    \ {\n            if primes.contains(Int(String(char), radix: 16)!) {\n       \
    \         count += 1\n            }\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    let arr = num.components(separatedBy: \"\")\n    var count =\
    \ 0\n    for i in arr {\n        if hex.contains(i) {\n            if primes.contains(Int(i,\
    \ radix: 16)!) {\n                count += 1\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(hex_key(num: \"AB\"\
    ) == 1)\nassert(hex_key(num: \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\"\
    ) == 4)\nassert(hex_key(num: \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\"\
    ) == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpep8gmzp4.swift:16:19: error: value of type 'String' has no member\
    \ 'components'\n    let arr = num.components(separatedBy: \"\")\n            \
    \  ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex_digits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\
    \ \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let prime_digits\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var count = 0\n    for digit\
    \ in num {\n        if prime_digits.contains(String(digit)) {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\n\
    assert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\n\
    assert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let primes = [\"2\",\"3\",\"5\",\"7\"\
    ,\"B\",\"D\"]\n    var count = 0\n    for i in num {\n        if primes.contains(String(i))\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let primes = [\"2\",\"3\",\"5\",\"7\"\
    ,\"B\",\"D\"]\n    var count = 0\n    for char in num {\n        if primes.contains(String(char))\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for char in num {\n        if let index =\
    \ hex.firstIndex(of: String(char)) {\n            if primes.contains(index) {\n\
    \                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if primes.contains(hex.index(of:\
    \ String(i))!) {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   var result = 0\n    let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes\
    \ = [2, 3, 5, 7, 11, 13]\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(hex.firstIndex(of: String(i))!) {\n      \
    \          result += 1\n            }\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: -4
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    var count = 0\n    for\
    \ i in num {\n        if hex.contains(String(i)) {\n            count += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\nassert(hex_key(num:\
    \ \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\nassert(hex_key(num:\
    \ \"123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)"
  status: Exception
  stderr: 'tmp5600o9t3/tmp5600o9t3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad05194fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad051646b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad051646988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0516457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5600o9t3                        0x00005651b6dec554 <unavailable> + 5460

    5    libc.so.6                          0x00002ad051b3b460 __libc_start_main +
    245

    6    tmp5600o9t3                        0x00005651b6dec1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let prime = [2,3,5,7,11,13]\n    var count\
    \ = 0\n    for i in num {\n        if hex.contains(String(i)) {\n            if\
    \ prime.contains(Int(String(i), radix: 16)!) {\n                count += 1\n \
    \           }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for char in num {\n        if let index =\
    \ hex.firstIndex(of: String(char)) {\n            if primes.contains(index) {\n\
    \                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex_primes = [2, 3, 5, 7, 11, 13]\n    let hex_digits = [\"0\", \"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\"\
    , \"D\", \"E\", \"F\"]\n    var count = 0\n    for char in num {\n        if hex_digits.contains(String(char))\
    \ {\n            if hex_primes.contains(hex_digits.firstIndex(of: String(char))!)\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex_primes = [2, 3, 5, 7, 11, 13]\n    let hex_digits = [\"0\", \"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\"\
    , \"D\", \"E\", \"F\"]\n    var count = 0\n    for i in num {\n        if hex_digits.contains(String(i))\
    \ {\n            if hex_primes.contains(hex_digits.firstIndex(of: String(i))!)\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let prime = [2,3,5,7,11,13]\n    var count\
    \ = 0\n    for i in num {\n        if hex.contains(String(i)) {\n            if\
    \ prime.contains(Int(String(i), radix: 16)!) {\n                count += 1\n \
    \           }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   var count = 0\n    for char in num {\n        if char == \"2\" || char ==\
    \ \"3\" || char == \"5\" || char == \"7\" || char == \"B\" || char == \"D\" {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex_digits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\
    \ \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let hex_primes\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var count = 0\n    for char\
    \ in num {\n        if hex_primes.contains(String(char)) {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\n\
    assert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\n\
    assert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex_digits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\
    \ \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2,\
    \ 3, 5, 7, 11, 13]\n    var count = 0\n    for digit in num {\n        if let\
    \ index = hex_digits.index(of: String(digit)) {\n            if primes.contains(index)\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let prime = [2,3,5,7,11,13]\n    var count\
    \ = 0\n    for i in num {\n        if hex.contains(String(i)) {\n            if\
    \ prime.contains(Int(String(i), radix: 16)!) {\n                count += 1\n \
    \           }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   var count = 0\n    let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes\
    \ = [2, 3, 5, 7, 11, 13]\n    for char in num {\n        if let index = hex.firstIndex(of:\
    \ String(char)) {\n            if primes.contains(index) {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            let index = hex.firstIndex(of: String(i))\n            if primes.contains(index!)\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: -4
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            let index = hex.firstIndex(of: String(i))\n            if primes.contains(index!\
    \ + 1) {\n                count += 1\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(hex_key(num: \"AB\") ==\
    \ 1)\nassert(hex_key(num: \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\")\
    \ == 4)\nassert(hex_key(num: \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\"\
    ) == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: Exception
  stderr: 'tmpy69udwor/tmpy69udwor.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c34f99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c34c90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c34c90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c34c8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy69udwor                        0x0000556d067ad73b <unavailable> + 5947

    5    libc.so.6                          0x00002b7c35185460 __libc_start_main +
    245

    6    tmpy69udwor                        0x0000556d067ad319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let primes = [2, 3, 5, 7, 11, 13]\n    let hex = [\"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"\
    E\", \"F\"]\n    var count = 0\n    for i in num {\n        if let index = hex.index(of:\
    \ String(i)) {\n            if primes.contains(index) {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex_nums = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"\
    8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let hex_primes = [\"\
    2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var count = 0\n    for char in num\
    \ {\n        if hex_primes.contains(String(char)) {\n            count += 1\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\nassert(hex_key(num:\
    \ \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\nassert(hex_key(num:\
    \ \"123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for char in num {\n        if hex.contains(String(char))\
    \ {\n            let index = hex.firstIndex(of: String(char))\n            if\
    \ primes.contains(index!) {\n                count += 1\n            }\n     \
    \   }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(hex_key(num:\
    \ \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\nassert(hex_key(num: \"\
    ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\nassert(hex_key(num: \"\
    123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hexDigits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"\
    8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let hexPrimes = [\"\
    2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var count = 0\n    for char in num\
    \ {\n        if hexPrimes.contains(String(char)) {\n            count += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\nassert(hex_key(num:\
    \ \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\nassert(hex_key(num:\
    \ \"123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let primes = [2,3,5,7,11,13]\n    var\
    \ count = 0\n    for i in num {\n        if hex.contains(String(i)) {\n      \
    \      if primes.contains(Int(String(i), radix: 16)!) {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for char in num {\n        if let index =\
    \ hex.firstIndex(of: String(char)) {\n            if primes.contains(index) {\n\
    \                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for char in num {\n        if let index =\
    \ hex.firstIndex(of: String(char)) {\n            if primes.contains(index) {\n\
    \                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if let index = hex.index(of:\
    \ String(i)) {\n            if primes.contains(index) {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex_primes = [2, 3, 5, 7, 11, 13]\n    var count = 0\n    for char in\
    \ num {\n        if let num = Int(String(char), radix: 16) {\n            if hex_primes.contains(num)\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if primes.contains(hex.index(of:\
    \ String(i))!) {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex_digits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\
    \ \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let prime_digits\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var count = 0\n    for char\
    \ in num {\n        if prime_digits.contains(String(char)) {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\n\
    assert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\n\
    assert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            let index = hex.firstIndex(of: String(i))\n            if primes.contains(index!)\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: -4
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    var count = 0\n    for\
    \ i in num {\n        if hex.contains(String(i)) {\n            count += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\nassert(hex_key(num:\
    \ \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\nassert(hex_key(num:\
    \ \"123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)"
  status: Exception
  stderr: 'tmp5600o9t3/tmp5600o9t3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad05194fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad051646b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad051646988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0516457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5600o9t3                        0x00005651b6dec554 <unavailable> + 5460

    5    libc.so.6                          0x00002ad051b3b460 __libc_start_main +
    245

    6    tmp5600o9t3                        0x00005651b6dec1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let primes = [2,3,5,7,11,13]\n    var\
    \ count = 0\n    for i in num {\n        if hex.contains(String(i)) {\n      \
    \      if primes.contains(Int(String(i), radix: 16)!) {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex_nums = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var count =\
    \ 0\n    for num in num {\n        if hex_nums.contains(String(num)) {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   var count = 0\n    for c in num {\n        switch c {\n        case \"2\"\
    , \"3\", \"5\", \"7\", \"B\", \"D\":\n            count += 1\n        default:\n\
    \            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let prime = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if prime.contains(hex.firstIndex(of:\
    \ String(i))!) {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let primes = [2,3,5,7,11,13]\n    var\
    \ count = 0\n    for i in num {\n        if hex.contains(String(i)) {\n      \
    \      if primes.contains(Int(String(i), radix: 16)!) {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for char in num {\n        if let index =\
    \ hex.firstIndex(of: String(char)) {\n            if primes.contains(index) {\n\
    \                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   var primes = [2, 3, 5, 7, 11, 13]\n    var count = 0\n    for char in num\
    \ {\n        if let num = Int(String(char), radix: 16) {\n            if primes.contains(num)\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let prime = [2,3,5,7,11,13]\n    var count\
    \ = 0\n    for i in num {\n        if hex.contains(String(i)) {\n            if\
    \ prime.contains(Int(String(i), radix: 16)!) {\n                count += 1\n \
    \           }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for char in num {\n        if let index =\
    \ hex.firstIndex(of: String(char)) {\n            if primes.contains(index) {\n\
    \                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex_primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var count\
    \ = 0\n    for char in num {\n        if hex_primes.contains(String(char)) {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   var count = 0\n    let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let prime\
    \ = [2, 3, 5, 7, 11, 13]\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            let index = hex.firstIndex(of: String(i))\n            if prime.contains(index!)\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let prime = [2,3,5,7,11,13]\n    var count\
    \ = 0\n    for i in num {\n        if hex.contains(String(i)) {\n            if\
    \ prime.contains(Int(String(i), radix: 16)!) {\n                count += 1\n \
    \           }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for char in num {\n        if let index =\
    \ hex.firstIndex(of: String(char)) {\n            if primes.contains(index) {\n\
    \                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = \"0123456789ABCDEF\"\n    let primes = \"2357BD\"\n    return num.filter\
    \ { primes.contains($0) }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(hex_key(num:\
    \ \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\nassert(hex_key(num: \"\
    ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\nassert(hex_key(num: \"\
    123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for char in num {\n        if hex.contains(String(char))\
    \ {\n            if primes.contains(Int(String(char), radix: 16)!) {\n       \
    \         count += 1\n            }\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let primes = [2, 3, 5, 7, 11, 13]\n    let hex = [\"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"\
    E\", \"F\"]\n    var count = 0\n    for i in num {\n        if primes.contains(hex.index(of:\
    \ String(i))!) {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex_prime = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var count\
    \ = 0\n    for i in num {\n        if hex_prime.contains(String(i)) {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let prime = [2,3,5,7,11,13]\n    var count\
    \ = 0\n    for i in num {\n        if hex.contains(String(i)) {\n            if\
    \ prime.contains(Int(String(i), radix: 16)!) {\n                count += 1\n \
    \           }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    return num.filter\
    \ { primes.contains($0) }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(hex_key(num:\
    \ \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\nassert(hex_key(num: \"\
    ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\nassert(hex_key(num: \"\
    123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp1092ibvn.swift:15:41: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'String'\n    return num.filter\
    \ { primes.contains($0) }.count\n                                        ^\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex_digits = Array(\"0123456789ABCDEF\")\n    let primes = [2, 3, 5, 7,\
    \ 11, 13]\n    var count = 0\n    for char in num {\n        if let index = hex_digits.index(of:\
    \ char) {\n            if primes.contains(index) {\n                count += 1\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: -4
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   var count = 0\n    let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    for i\
    \ in num {\n        if hex.contains(String(i)) {\n            count += 1\n   \
    \     }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(hex_key(num:\
    \ \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\nassert(hex_key(num: \"\
    ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\nassert(hex_key(num: \"\
    123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)"
  status: Exception
  stderr: 'tmpei20o06x/tmpei20o06x.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf492dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf48fd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf48fd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf48fd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpei20o06x                        0x000055c82067d554 <unavailable> + 5460

    5    libc.so.6                          0x00002abf494cb460 __libc_start_main +
    245

    6    tmpei20o06x                        0x000055c82067d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let primes = [2,3,5,7,11,13]\n    var\
    \ count = 0\n    for char in num {\n        if let index = hex.firstIndex(of:\
    \ String(char)) {\n            if primes.contains(index) {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [\"2\", \"\
    3\", \"5\", \"7\", \"B\", \"D\"]\n    var count = 0\n    for i in num {\n    \
    \    if primes.contains(String(i)) {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(hex_key(num: \"AB\"\
    ) == 1)\nassert(hex_key(num: \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\"\
    ) == 4)\nassert(hex_key(num: \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\"\
    ) == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for char in num {\n        if let index =\
    \ hex.firstIndex(of: String(char)) {\n            if primes.contains(index) {\n\
    \                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex_digits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\
    \ \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let prime_hex_digits\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var count = 0\n    for char\
    \ in num {\n        if prime_hex_digits.contains(String(char)) {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: -4
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    var count = 0\n    for\
    \ i in num {\n        if hex.contains(String(i)) {\n            count += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\nassert(hex_key(num:\
    \ \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\nassert(hex_key(num:\
    \ \"123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)"
  status: Exception
  stderr: 'tmp5600o9t3/tmp5600o9t3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad05194fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad051646b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad051646988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0516457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5600o9t3                        0x00005651b6dec554 <unavailable> + 5460

    5    libc.so.6                          0x00002ad051b3b460 __libc_start_main +
    245

    6    tmp5600o9t3                        0x00005651b6dec1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for char in num {\n        if let index =\
    \ hex.firstIndex(of: String(char)) {\n            if primes.contains(index) {\n\
    \                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let prime = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if prime.contains(Int(String(i), radix: 16)!) {\n           \
    \     count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let prime = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if prime.contains(Int(String(i), radix: 16)!) {\n           \
    \     count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for c in num {\n        if let index = hex.firstIndex(of:\
    \ String(c)) {\n            if primes.contains(index) {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   var result = 0\n    let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let prime\
    \ = [2, 3, 5, 7, 11, 13]\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if prime.contains(Int(String(i), radix: 16)!) {\n           \
    \     result += 1\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   var count = 0\n    let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes\
    \ = [2, 3, 5, 7, 11, 13]\n    for char in num {\n        if let index = hex.firstIndex(of:\
    \ String(char)) {\n            if primes.contains(index) {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let prime = [2,3,5,7,11,13]\n    var count\
    \ = 0\n    for i in num {\n        if prime.contains(hex.index(of: String(i))!)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   var result = 0\n    let primes = [2, 3, 5, 7, 11, 13]\n    let hex = [\"0\"\
    , \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\"\
    , \"C\", \"D\", \"E\", \"F\"]\n    for i in num {\n        if let index = hex.index(of:\
    \ String(i)) {\n            if primes.contains(index) {\n                result\
    \ += 1\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex_digits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\
    \ \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let prime_digits\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var count = 0\n    for char\
    \ in num {\n        if prime_digits.contains(String(char)) {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\n\
    assert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\n\
    assert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex_digits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\
    \ \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2,\
    \ 3, 5, 7, 11, 13]\n    var count = 0\n    for char in num {\n        if let index\
    \ = hex_digits.index(of: String(char)) {\n            if primes.contains(index)\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for char in num {\n        if let index =\
    \ hex.firstIndex(of: String(char)) {\n            if primes.contains(index) {\n\
    \                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            let index = hex.firstIndex(of: String(i))\n            if primes.contains(index!)\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let prime = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        for j in hex {\n\
    \            if i == j {\n                for k in prime {\n                 \
    \   if hex.index(of: i)! == k {\n                        count += 1\n        \
    \            }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(hex_key(num: \"AB\") ==\
    \ 1)\nassert(hex_key(num: \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\")\
    \ == 4)\nassert(hex_key(num: \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\"\
    ) == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpf5defbug.swift:19:18: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n            if i == j {\n    \
    \           ~ ^  ~\n/tmp/tmpf5defbug.swift:19:18: note: overloads for '==' exist\
    \ with these partially matching parameter lists: (Character, Character), (String,\
    \ String)\n            if i == j {\n                 ^\n/tmp/tmpf5defbug.swift:21:38:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                    if hex.index(of: i)! == k {\n                           \
    \          ^\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let prime = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if prime.contains(Int(String(i), radix: 16)!) {\n           \
    \     count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if let index = hex.index(of:\
    \ String(i)) {\n            if primes.contains(index) {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   var count = 0\n    for char in num {\n        switch char {\n        case\
    \ \"2\", \"3\", \"5\", \"7\", \"B\", \"D\":\n            count += 1\n        default:\n\
    \            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: -4
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    var count = 0\n    for\
    \ i in num {\n        if hex.contains(String(i)) {\n            count += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\nassert(hex_key(num:\
    \ \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\nassert(hex_key(num:\
    \ \"123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)"
  status: Exception
  stderr: 'tmp5600o9t3/tmp5600o9t3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad05194fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad051646b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad051646988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0516457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5600o9t3                        0x00005651b6dec554 <unavailable> + 5460

    5    libc.so.6                          0x00002ad051b3b460 __libc_start_main +
    245

    6    tmp5600o9t3                        0x00005651b6dec1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013908
- exit_code: -4
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    var count = 0\n    for\
    \ i in num {\n        if hex.contains(String(i)) {\n            count += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\nassert(hex_key(num:\
    \ \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\nassert(hex_key(num:\
    \ \"123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)"
  status: Exception
  stderr: 'tmp5600o9t3/tmp5600o9t3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad05194fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad051646b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad051646988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0516457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5600o9t3                        0x00005651b6dec554 <unavailable> + 5460

    5    libc.so.6                          0x00002ad051b3b460 __libc_start_main +
    245

    6    tmp5600o9t3                        0x00005651b6dec1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let prime = [2,3,5,7,11,13]\n    var count\
    \ = 0\n    for i in num {\n        if hex.contains(String(i)) {\n            if\
    \ prime.contains(Int(String(i), radix: 16)!) {\n                count += 1\n \
    \           }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let primes = [2, 3, 5, 7, 11, 13]\n    let hex = [\"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"\
    E\", \"F\"]\n    var count = 0\n    for i in num {\n        if let index = hex.index(of:\
    \ String(i)) {\n            if primes.contains(index) {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for char in num {\n        if let index =\
    \ hex.firstIndex(of: String(char)) {\n            if primes.contains(index) {\n\
    \                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if let index = hex.firstIndex(of:\
    \ String(i)) {\n            if primes.contains(index) {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: -4
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   var count = 0\n    let hex = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n\
    \    for char in num {\n        if char == \"0\" || char == \"1\" {\n        \
    \    continue\n        }\n        if hex.contains(String(char)) {\n          \
    \  count += 1\n        } else if Int(String(char))! % 2 != 0 && Int(String(char))!\
    \ % 3 != 0 && Int(String(char))! % 5 != 0 && Int(String(char))! % 7 != 0 {\n \
    \           count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: Exception
  stderr: 'tmpway2ddu7/tmpway2ddu7.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21d6cb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21d69adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21d69ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21d69ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpway2ddu7                        0x00005624525b0794 <unavailable> + 6036

    5    libc.so.6                          0x00002b21d6ea2460 __libc_start_main +
    245

    6    tmpway2ddu7                        0x00005624525b0419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   var count = 0\n    let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let prime\
    \ = [2, 3, 5, 7, 11, 13]\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            let index = hex.firstIndex(of: String(i))\n            if prime.contains(index!)\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let primes = [2,3,5,7,11,13]\n    var\
    \ count = 0\n    for i in num {\n        if primes.contains(hex.index(of: String(i))!)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let prime = [2,3,5,7,11,13]\n    var count\
    \ = 0\n    for i in num {\n        if hex.contains(String(i)) {\n            if\
    \ prime.contains(Int(String(i), radix: 16)!) {\n                count += 1\n \
    \           }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let primes = [2, 3, 5, 7, 11, 13]\n    let hex = [\"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"\
    E\", \"F\"]\n    var count = 0\n    for i in num {\n        if let index = hex.index(of:\
    \ String(i)) {\n            if primes.contains(index) {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = \"0123456789ABCDEF\"\n    let primes = [2, 3, 5, 7, 11, 13]\n  \
    \  var count = 0\n    for i in num {\n        if let index = hex.index(of: i)\
    \ {\n            if primes.contains(index) {\n                count += 1\n   \
    \         }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\n\
    assert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\n\
    assert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpqx3wbeei.swift:18:28: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = hex.index(of: i) {\n          \
    \                 ^\n/tmp/tmpqx3wbeei.swift:18:28: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = hex.index(of: i) {\n                       \
    \    ^~~~~\n                           firstIndex\n/tmp/tmpqx3wbeei.swift:19:16:\
    \ error: instance method 'contains' requires that 'String.Index' conform to 'Collection'\n\
    \            if primes.contains(index) {\n               ^\n_StringProcessing.Collection:3:17:\
    \ note: where 'C' = 'String.Index'\n    public func contains<C>(_ other: C) ->\
    \ Bool where C : Collection, Self.Element == C.Element\n                ^\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let primes = [2, 3, 5, 7, 11, 13]\n    let hex = [\"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"\
    E\", \"F\"]\n    var count = 0\n    for i in num {\n        if let index = hex.index(of:\
    \ String(i)) {\n            if primes.contains(index) {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex_digits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\
    \ \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let prime_hex_digits\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var count = 0\n    for digit\
    \ in num {\n        if prime_hex_digits.contains(String(digit)) {\n          \
    \  count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let prime = [2,3,5,7,11,13]\n    var count\
    \ = 0\n    for i in num {\n        if hex.contains(String(i)) {\n            if\
    \ prime.contains(Int(String(i), radix: 16)!) {\n                count += 1\n \
    \           }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let primes = [2,3,5,7,11,13]\n    var\
    \ count = 0\n    for i in num {\n        if let index = hex.index(of: String(i))\
    \ {\n            if primes.contains(index) {\n                count += 1\n   \
    \         }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\n\
    assert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\n\
    assert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: -4
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    var count = 0\n    for\
    \ i in num {\n        if hex.contains(String(i)) {\n            count += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\nassert(hex_key(num:\
    \ \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\nassert(hex_key(num:\
    \ \"123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)"
  status: Exception
  stderr: 'tmp5600o9t3/tmp5600o9t3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad05194fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad051646b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad051646988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0516457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5600o9t3                        0x00005651b6dec554 <unavailable> + 5460

    5    libc.so.6                          0x00002ad051b3b460 __libc_start_main +
    245

    6    tmp5600o9t3                        0x00005651b6dec1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: -4
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    var count = 0\n    for\
    \ i in num {\n        if hex.contains(String(i)) {\n            count += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\nassert(hex_key(num:\
    \ \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\nassert(hex_key(num:\
    \ \"123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)"
  status: Exception
  stderr: 'tmp5600o9t3/tmp5600o9t3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad05194fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad051646b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad051646988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0516457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5600o9t3                        0x00005651b6dec554 <unavailable> + 5460

    5    libc.so.6                          0x00002ad051b3b460 __libc_start_main +
    245

    6    tmp5600o9t3                        0x00005651b6dec1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [2, 3, 5, 7, 11, 13]\n    let hex_str = [\"2\", \"3\", \"5\", \"\
    7\", \"B\", \"D\"]\n    var count = 0\n    for i in num {\n        if hex_str.contains(String(i))\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let primes = [2,3,5,7,11,13]\n    var\
    \ count = 0\n    for i in num {\n        if hex.contains(String(i)) {\n      \
    \      if primes.contains(Int(String(i), radix: 16)!) {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let primes = [2, 3, 5, 7, 11, 13]\n    let hex = [\"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"\
    E\", \"F\"]\n    var count = 0\n    for i in num {\n        if let index = hex.index(of:\
    \ String(i)) {\n            if primes.contains(index) {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let prime = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for char in num {\n        if let index =\
    \ hex.firstIndex(of: String(char)) {\n            if prime.contains(index) {\n\
    \                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var count = 0\n\
    \    for char in num {\n        if primes.contains(String(char)) {\n         \
    \   count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for char in num {\n        if primes.contains(hex.firstIndex(of:\
    \ String(char))!) {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let primes = [2, 3, 5, 7, 11, 13]\n    let hex = [\"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"\
    E\", \"F\"]\n    var count = 0\n    for i in num {\n        if let index = hex.index(of:\
    \ String(i)) {\n            if primes.contains(index) {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if let index = hex.index(of:\
    \ String(i)) {\n            if primes.contains(index) {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: -4
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    var count = 0\n    for\
    \ i in num {\n        if hex.contains(String(i)) {\n            count += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\nassert(hex_key(num:\
    \ \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\nassert(hex_key(num:\
    \ \"123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)"
  status: Exception
  stderr: 'tmp5600o9t3/tmp5600o9t3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad05194fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad051646b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad051646988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0516457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5600o9t3                        0x00005651b6dec554 <unavailable> + 5460

    5    libc.so.6                          0x00002ad051b3b460 __libc_start_main +
    245

    6    tmp5600o9t3                        0x00005651b6dec1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if primes.contains(Int(String(i), radix: 16)!) {\n          \
    \      count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5,\
    \ 7, 11, 13]\n    var count = 0\n    for char in num {\n        if let index =\
    \ hex.firstIndex(of: String(char)) {\n            if primes.contains(index) {\n\
    \                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
    \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
    \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013907
- exit_code: 0
  program: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfunc hex_key(num: String) -> Int {\n \
    \   let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let prime = [2,3,5,7,11,13]\n    var count\
    \ = 0\n    for i in num {\n        if hex.contains(String(i)) {\n            if\
    \ prime.contains(Int(String(i), radix: 16)!) {\n                count += 1\n \
    \           }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\"\
    ) == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\"\
    ) == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
    \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013908
