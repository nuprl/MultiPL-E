language: swift
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        maxHeap.insert(arr[i])\n        if\
    \ maxHeap.count > k {\n            maxHeap.remove()\n        }\n    }\n    while\
    \ !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3, -4,\
    \ 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\n\
    assert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpqfzxfchn.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var stack = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !stack.isEmpty && stack.count + arr.count\
    \ - i > k && stack.last! < arr[i] {\n            stack.removeLast()\n        }\n\
    \        if stack.count < k {\n            stack.append(arr[i])\n        }\n \
    \   }\n    return stack\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp4mcprew2/tmp4mcprew2.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d5b5c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d5b2c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d5b2c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d5b2bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4mcprew2                        0x000055e3f008a889 <unavailable> + 6281

    5    libc.so.6                          0x00002b2d5b7b5460 __libc_start_main +
    245

    6    tmp4mcprew2                        0x000055e3f008a489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    result.sort()\n    for i in k..<arr.count\
    \ {\n        if arr[i] > result[0] {\n            result.remove(at: 0)\n     \
    \       result.append(arr[i])\n            result.sort()\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adfc9072c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfc8d69561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adfc8d69286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adfc8d6913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adfc8d68bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adfc8b68e83 <unavailable> + 188035

    6    tmp394a67w0                        0x000055728cc398f2 <unavailable> + 10482

    7    tmp394a67w0                        0x000055728cc394b6 <unavailable> + 9398

    8    libc.so.6                          0x00002adfc925e460 __libc_start_main +
    245

    9    tmp394a67w0                        0x000055728cc38429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var stack = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !stack.isEmpty && stack.count + arr.count\
    \ - i > k && arr[i] > stack.last! {\n            stack.removeLast()\n        }\n\
    \        if stack.count < k {\n            stack.append(arr[i])\n        }\n \
    \   }\n    return stack\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpln60g3bx/tmpln60g3bx.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee463e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee460dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee460da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee460d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpln60g3bx                        0x000055daa7e68889 <unavailable> + 6281

    5    libc.so.6                          0x00002aee465cf460 __libc_start_main +
    245

    6    tmpln60g3bx                        0x000055daa7e68489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    result.sort()\n    for i in k..<arr.count\
    \ {\n        for j in 0..<k {\n            if arr[i] > result[j] {\n         \
    \       result.insert(arr[i], at: j)\n                result.removeLast()\n  \
    \              break\n            }\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp__bpvj_y/tmp__bpvj_y.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9207bedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92078e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92078e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92078e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__bpvj_y                        0x00005588ffae4a3d <unavailable> + 6717

    5    libc.so.6                          0x00002b9207dd9460 __libc_start_main +
    245

    6    tmp__bpvj_y                        0x00005588ffae4519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var index = -1\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     index = j\n            }\n        }\n        result.append(max)\n      \
    \  arr.swapAt(i, index)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwkga1fw6.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, index)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var index = 0\n   \
    \ while index < k {\n        var max = Int.min\n        var maxIndex = -1\n  \
    \      for i in index..<arr.count {\n            if arr[i] > max {\n         \
    \       max = arr[i]\n                maxIndex = i\n            }\n        }\n\
    \        result.append(max)\n        index = maxIndex + 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp70x1qa3r/tmp70x1qa3r.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e95996c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e9568db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e9568d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e9568c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp70x1qa3r                        0x0000556205ba26b9 <unavailable> + 5817

    5    libc.so.6                          0x00002b4e95b82460 __libc_start_main +
    245

    6    tmp70x1qa3r                        0x0000556205ba22b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpcan0kf2n.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var stack = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !stack.isEmpty && arr[i] > stack.last!\
    \ && stack.count + arr.count - i > k {\n            stack.removeLast()\n     \
    \   }\n        if stack.count < k {\n            stack.append(arr[i])\n      \
    \  }\n    }\n    return stack\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpi92rba2w/tmpi92rba2w.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5bf9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe5bc93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe5bc93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe5bc927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi92rba2w                        0x000055a1e5574889 <unavailable> + 6281

    5    libc.so.6                          0x00002afe5c188460 __libc_start_main +
    245

    6    tmpi92rba2w                        0x000055a1e5574489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        maxHeap.insert(arr[i])\n        if\
    \ maxHeap.count > k {\n            maxHeap.remove()\n        }\n    }\n    while\
    \ !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3, -4,\
    \ 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\n\
    assert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpqfzxfchn.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    for i in k..<arr.count {\n        var\
    \ j = k - 1\n        while j >= 0 && result[j] < arr[i] {\n            j -= 1\n\
    \        }\n        if j < k - 1 {\n            result.insert(arr[i], at: j +\
    \ 1)\n            result.removeLast()\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpssi7z50z/tmpssi7z50z.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d49cb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d499aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d499aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d499a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpssi7z50z                        0x0000560c753947f9 <unavailable> + 6137

    5    libc.so.6                          0x00002b7d49e9f460 __libc_start_main +
    245

    6    tmpssi7z50z                        0x0000560c753943f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var queue = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !queue.isEmpty && arr[i] > queue.last!\
    \ && queue.count + arr.count - i > k {\n            queue.removeLast()\n     \
    \   }\n        if queue.count < k {\n            queue.append(arr[i])\n      \
    \  }\n    }\n    return queue\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp1ohoa4tn/tmp1ohoa4tn.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18417bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18414b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18414b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18414b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ohoa4tn                        0x0000560c20042889 <unavailable> + 6281

    5    libc.so.6                          0x00002b18419aa460 __libc_start_main +
    245

    6    tmp1ohoa4tn                        0x0000560c20042489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var arr = arr\n   \
    \ for _ in 0..<k {\n        var max = Int.min\n        var index = 0\n       \
    \ for i in 0..<arr.count {\n            if arr[i] > max {\n                max\
    \ = arr[i]\n                index = i\n            }\n        }\n        result.append(max)\n\
    \        arr.remove(at: index)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp9jprsok3/tmp9jprsok3.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca08bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca05b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca05b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca05b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9jprsok3                        0x000055ae58186709 <unavailable> + 5897

    5    libc.so.6                          0x00002b8ca0aa9460 __libc_start_main +
    245

    6    tmp9jprsok3                        0x000055ae58186309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        maxHeap.insert(arr[i])\n        if\
    \ maxHeap.count > k {\n            maxHeap.remove()\n        }\n    }\n    while\
    \ !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3, -4,\
    \ 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\n\
    assert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpqfzxfchn.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var maxIndex = 0\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpb4vc9qau.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, maxIndex)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7i3b3kf7.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var arr = arr\n   \
    \ for _ in 0..<k {\n        var max = Int.min\n        var maxIndex = 0\n    \
    \    for i in 0..<arr.count {\n            if arr[i] > max {\n               \
    \ max = arr[i]\n                maxIndex = i\n            }\n        }\n     \
    \   result.append(max)\n        arr.remove(at: maxIndex)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpkrqizxx1/tmpkrqizxx1.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24ad8f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24ad5ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24ad5ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24ad5eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkrqizxx1                        0x000055dff3985709 <unavailable> + 5897

    5    libc.so.6                          0x00002b24adae1460 __libc_start_main +
    245

    6    tmpkrqizxx1                        0x000055dff3985309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7i3b3kf7.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var heap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        heap.insert(arr[i])\n        if heap.count\
    \ > k {\n            heap.remove()\n        }\n    }\n    while !heap.isEmpty\
    \ {\n        result.append(heap.remove()!)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp4pk45bp0.swift:13:16: error: cannot find 'Heap' in scope\n    var\
    \ heap = Heap<Int>(sort: >)\n               ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var heap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        heap.insert(arr[i])\n        if heap.count\
    \ > k {\n            heap.remove()\n        }\n    }\n    while !heap.isEmpty\
    \ {\n        result.append(heap.remove()!)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp4pk45bp0.swift:13:16: error: cannot find 'Heap' in scope\n    var\
    \ heap = Heap<Int>(sort: >)\n               ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var stack = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !stack.isEmpty && stack.count + arr.count\
    \ - i > k && arr[i] > stack.last! {\n            stack.removeLast()\n        }\n\
    \        if stack.count < k {\n            stack.append(arr[i])\n        }\n \
    \   }\n    return stack\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpln60g3bx/tmpln60g3bx.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee463e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee460dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee460da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee460d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpln60g3bx                        0x000055daa7e68889 <unavailable> + 6281

    5    libc.so.6                          0x00002aee465cf460 __libc_start_main +
    245

    6    tmpln60g3bx                        0x000055daa7e68489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var index = 0\n   \
    \ while index < k {\n        var max = Int.min\n        var maxIndex = -1\n  \
    \      for i in index..<arr.count {\n            if arr[i] > max {\n         \
    \       max = arr[i]\n                maxIndex = i\n            }\n        }\n\
    \        result.append(max)\n        index = maxIndex + 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp70x1qa3r/tmp70x1qa3r.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e95996c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e9568db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e9568d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e9568c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp70x1qa3r                        0x0000556205ba26b9 <unavailable> + 5817

    5    libc.so.6                          0x00002b4e95b82460 __libc_start_main +
    245

    6    tmp70x1qa3r                        0x0000556205ba22b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpcan0kf2n.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var stack = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !stack.isEmpty && arr[i] > stack.last!\
    \ && stack.count + arr.count - i > k {\n            stack.removeLast()\n     \
    \   }\n        if stack.count < k {\n            stack.append(arr[i])\n      \
    \  }\n    }\n    return stack\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpi92rba2w/tmpi92rba2w.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5bf9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe5bc93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe5bc93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe5bc927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi92rba2w                        0x000055a1e5574889 <unavailable> + 6281

    5    libc.so.6                          0x00002afe5c188460 __libc_start_main +
    245

    6    tmpi92rba2w                        0x000055a1e5574489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        let max = arr.max()!\n        result.append(max)\n        arr.remove(at:\
    \ arr.firstIndex(of: max)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpzj2m75em.swift:16:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.remove(at: arr.firstIndex(of:\
    \ max)!)\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    for i in k..<arr.count {\n        var\
    \ j = k - 1\n        while j >= 0 && result[j] < arr[i] {\n            j -= 1\n\
    \        }\n        if j < k - 1 {\n            result.insert(arr[i], at: j +\
    \ 1)\n            result.removeLast()\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpssi7z50z/tmpssi7z50z.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d49cb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d499aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d499aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d499a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpssi7z50z                        0x0000560c753947f9 <unavailable> + 6137

    5    libc.so.6                          0x00002b7d49e9f460 __libc_start_main +
    245

    6    tmpssi7z50z                        0x0000560c753943f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var maxIndex = -1\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpat88o0v3.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, maxIndex)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    while\
    \ i < k {\n        var max = Int.min\n        var maxIndex = -1\n        for j\
    \ in i..<arr.count {\n            if arr[j] > max {\n                max = arr[j]\n\
    \                maxIndex = j\n            }\n        }\n        result.append(max)\n\
    \        arr.swapAt(i, maxIndex)\n        i += 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1x_0gve3.swift:24:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, maxIndex)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    result.sort()\n    for i in k..<arr.count\
    \ {\n        if arr[i] > result[0] {\n            result.remove(at: 0)\n     \
    \       result.append(arr[i])\n            result.sort()\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adfc9072c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfc8d69561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adfc8d69286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adfc8d6913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adfc8d68bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adfc8b68e83 <unavailable> + 188035

    6    tmp394a67w0                        0x000055728cc398f2 <unavailable> + 10482

    7    tmp394a67w0                        0x000055728cc394b6 <unavailable> + 9398

    8    libc.so.6                          0x00002adfc925e460 __libc_start_main +
    245

    9    tmp394a67w0                        0x000055728cc38429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    result.sort()\n    for i in k..<arr.count\
    \ {\n        if arr[i] > result[0] {\n            result.remove(at: 0)\n     \
    \       result.append(arr[i])\n            result.sort()\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adfc9072c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfc8d69561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adfc8d69286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adfc8d6913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adfc8d68bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adfc8b68e83 <unavailable> + 188035

    6    tmp394a67w0                        0x000055728cc398f2 <unavailable> + 10482

    7    tmp394a67w0                        0x000055728cc394b6 <unavailable> + 9398

    8    libc.so.6                          0x00002adfc925e460 __libc_start_main +
    245

    9    tmp394a67w0                        0x000055728cc38429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var stack = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !stack.isEmpty && stack.count + arr.count\
    \ - i > k && arr[i] > stack.last! {\n            stack.removeLast()\n        }\n\
    \        if stack.count < k {\n            stack.append(arr[i])\n        }\n \
    \   }\n    return stack\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpln60g3bx/tmpln60g3bx.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee463e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee460dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee460da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee460d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpln60g3bx                        0x000055daa7e68889 <unavailable> + 6281

    5    libc.so.6                          0x00002aee465cf460 __libc_start_main +
    245

    6    tmpln60g3bx                        0x000055daa7e68489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var stack = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !stack.isEmpty && stack.count + arr.count\
    \ - i > k && arr[i] > stack.last! {\n            stack.removeLast()\n        }\n\
    \        if stack.count < k {\n            stack.append(arr[i])\n        }\n \
    \   }\n    return stack\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpln60g3bx/tmpln60g3bx.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee463e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee460dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee460da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee460d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpln60g3bx                        0x000055daa7e68889 <unavailable> + 6281

    5    libc.so.6                          0x00002aee465cf460 __libc_start_main +
    245

    6    tmpln60g3bx                        0x000055daa7e68489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var heap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        heap.insert(element: num)\n        if heap.count\
    \ > k {\n            heap.remove()\n        }\n    }\n    while !heap.isEmpty\
    \ {\n        result.append(heap.remove()!)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp2kyynlyu.swift:13:16: error: cannot find 'Heap' in scope\n    var\
    \ heap = Heap<Int>(sort: >)\n               ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var maxIndex = -1\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpat88o0v3.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, maxIndex)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var maxIndex = -1\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpat88o0v3.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, maxIndex)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        if maxHeap.count < k {\n         \
    \   maxHeap.insert(arr[i])\n        } else if arr[i] > maxHeap.peek()! {\n   \
    \         maxHeap.remove()\n            maxHeap.insert(arr[i])\n        }\n  \
    \  }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpaa06d85a.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var queue = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !queue.isEmpty && arr[i] > queue.last!\
    \ && queue.count + arr.count - i > k {\n            queue.removeLast()\n     \
    \   }\n        if queue.count < k {\n            queue.append(arr[i])\n      \
    \  }\n    }\n    return queue\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp1ohoa4tn/tmp1ohoa4tn.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18417bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18414b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18414b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18414b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ohoa4tn                        0x0000560c20042889 <unavailable> + 6281

    5    libc.so.6                          0x00002b18419aa460 __libc_start_main +
    245

    6    tmp1ohoa4tn                        0x0000560c20042489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var maxIndex = i\n        for j in i+1..<arr.count {\n            if\
    \ arr[j] > arr[maxIndex] {\n                maxIndex = j\n            }\n    \
    \    }\n        result.append(arr[maxIndex])\n        arr.swapAt(i, maxIndex)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpuhhek66r.swift:21:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, maxIndex)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpcan0kf2n.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpcan0kf2n.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        if maxHeap.count < k {\n         \
    \   maxHeap.insert(arr[i])\n        } else if arr[i] > maxHeap.peek()! {\n   \
    \         maxHeap.remove()\n            maxHeap.insert(arr[i])\n        }\n  \
    \  }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpaa06d85a.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpcan0kf2n.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpcan0kf2n.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var index = 0\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     index = j\n            }\n        }\n        result.append(max)\n      \
    \  arr.swapAt(i, index)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp_1la6jzn.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, index)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var arr = arr\n   \
    \ for _ in 0..<k {\n        var max = Int.min\n        var index = 0\n       \
    \ for i in 0..<arr.count {\n            if arr[i] > max {\n                max\
    \ = arr[i]\n                index = i\n            }\n        }\n        result.append(max)\n\
    \        arr.remove(at: index)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp9jprsok3/tmp9jprsok3.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca08bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca05b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca05b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca05b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9jprsok3                        0x000055ae58186709 <unavailable> + 5897

    5    libc.so.6                          0x00002b8ca0aa9460 __libc_start_main +
    245

    6    tmp9jprsok3                        0x000055ae58186309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    for i in k..<arr.count {\n        var\
    \ j = 0\n        while j < k && arr[i] > result[j] {\n            j += 1\n   \
    \     }\n        if j < k {\n            result.insert(arr[i], at: j)\n      \
    \      result.removeLast()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmplt6foisv/tmplt6foisv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ed3cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ed39ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ed39cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ed39cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplt6foisv                        0x00005562ac4667f9 <unavailable> + 6137

    5    libc.so.6                          0x00002b5ed3ec1460 __libc_start_main +
    245

    6    tmplt6foisv                        0x00005562ac4663f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        if maxHeap.count < k {\n         \
    \   maxHeap.insert(arr[i])\n        } else if arr[i] > maxHeap.peek()! {\n   \
    \         maxHeap.remove()\n            maxHeap.insert(arr[i])\n        }\n  \
    \  }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpaa06d85a.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var index = -1\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     index = j\n            }\n        }\n        result.append(max)\n      \
    \  arr.swapAt(i, index)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwkga1fw6.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, index)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var maxIndex = -1\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpat88o0v3.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, maxIndex)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    result.sort()\n    for i in k..<arr.count\
    \ {\n        if arr[i] > result[0] {\n            result.remove(at: 0)\n     \
    \       result.append(arr[i])\n            result.sort()\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adfc9072c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfc8d69561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adfc8d69286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adfc8d6913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adfc8d68bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adfc8b68e83 <unavailable> + 188035

    6    tmp394a67w0                        0x000055728cc398f2 <unavailable> + 10482

    7    tmp394a67w0                        0x000055728cc394b6 <unavailable> + 9398

    8    libc.so.6                          0x00002adfc925e460 __libc_start_main +
    245

    9    tmp394a67w0                        0x000055728cc38429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var stack = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !stack.isEmpty && stack.count + arr.count\
    \ - i > k && arr[i] > stack.last! {\n            stack.removeLast()\n        }\n\
    \        if stack.count < k {\n            stack.append(arr[i])\n        }\n \
    \   }\n    return stack\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpln60g3bx/tmpln60g3bx.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee463e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee460dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee460da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee460d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpln60g3bx                        0x000055daa7e68889 <unavailable> + 6281

    5    libc.so.6                          0x00002aee465cf460 __libc_start_main +
    245

    6    tmpln60g3bx                        0x000055daa7e68489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var index = 0\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     index = j\n            }\n        }\n        result.append(max)\n      \
    \  arr.swapAt(i, index)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp_1la6jzn.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, index)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var maxIndex = i\n        for j in i+1..<arr.count {\n            if\
    \ arr[j] > arr[maxIndex] {\n                maxIndex = j\n            }\n    \
    \    }\n        result.append(arr[maxIndex])\n        arr.swapAt(i, maxIndex)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpuhhek66r.swift:21:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, maxIndex)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var heap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        heap.insert(element: num)\n        if heap.count\
    \ > k {\n            heap.remove()\n        }\n    }\n    while !heap.isEmpty\
    \ {\n        result.append(heap.remove()!)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp2kyynlyu.swift:13:16: error: cannot find 'Heap' in scope\n    var\
    \ heap = Heap<Int>(sort: >)\n               ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    while\
    \ i < k {\n        var max = Int.min\n        var maxIndex = -1\n        for j\
    \ in i..<arr.count {\n            if arr[j] > max {\n                max = arr[j]\n\
    \                maxIndex = j\n            }\n        }\n        result.append(max)\n\
    \        i = maxIndex + 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp7f32ixls/tmp7f32ixls.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73f40e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73f3ddeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73f3dde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73f3ddd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7f32ixls                        0x000056101df056b9 <unavailable> + 5817

    5    libc.so.6                          0x00002b73f42d3460 __libc_start_main +
    245

    6    tmp7f32ixls                        0x000056101df052b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var maxIndex = i\n        for j in i+1..<arr.count {\n            if\
    \ arr[j] > arr[maxIndex] {\n                maxIndex = j\n            }\n    \
    \    }\n        result.append(arr[maxIndex])\n        arr.swapAt(i, maxIndex)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpuhhek66r.swift:21:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, maxIndex)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    result.sort()\n    for i in k..<arr.count\
    \ {\n        var j = 0\n        while j < k && arr[i] > result[j] {\n        \
    \    j += 1\n        }\n        if j < k {\n            result.insert(arr[i],\
    \ at: j)\n            result.removeLast()\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp04661zhr/tmp04661zhr.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9593c3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9593934b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9593934988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95939337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp04661zhr                        0x0000560842baba3d <unavailable> + 6717

    5    libc.so.6                          0x00002b9593e29460 __libc_start_main +
    245

    6    tmp04661zhr                        0x0000560842bab519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        if maxHeap.count < k {\n         \
    \   maxHeap.insert(arr[i])\n        } else if arr[i] > maxHeap.peek()! {\n   \
    \         maxHeap.remove()\n            maxHeap.insert(arr[i])\n        }\n  \
    \  }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpaa06d85a.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var stack = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !stack.isEmpty && stack.count + arr.count\
    \ - i > k && arr[i] > stack.last! {\n            stack.removeLast()\n        }\n\
    \        if stack.count < k {\n            stack.append(arr[i])\n        }\n \
    \   }\n    return stack\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpln60g3bx/tmpln60g3bx.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee463e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee460dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee460da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee460d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpln60g3bx                        0x000055daa7e68889 <unavailable> + 6281

    5    libc.so.6                          0x00002aee465cf460 __libc_start_main +
    245

    6    tmpln60g3bx                        0x000055daa7e68489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var heap = Heap<Int>(sort:\
    \ { $0 > $1 })\n    for num in arr {\n        heap.insert(element: num)\n    \
    \    if heap.count > k {\n            heap.remove()\n        }\n    }\n    while\
    \ !heap.isEmpty {\n        result.append(heap.remove()!)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpr_der0_t.swift:13:16: error: cannot find 'Heap' in scope\n    var\
    \ heap = Heap<Int>(sort: { $0 > $1 })\n               ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var heap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        heap.insert(arr[i])\n        if heap.count\
    \ > k {\n            heap.remove()\n        }\n    }\n    while !heap.isEmpty\
    \ {\n        result.append(heap.remove()!)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp4pk45bp0.swift:13:16: error: cannot find 'Heap' in scope\n    var\
    \ heap = Heap<Int>(sort: >)\n               ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        if maxHeap.count < k {\n         \
    \   maxHeap.insert(element: arr[i])\n        } else if arr[i] > maxHeap.peek()!\
    \ {\n            maxHeap.remove()\n            maxHeap.insert(element: arr[i])\n\
    \        }\n    }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpd9ogh11s.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var stack = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !stack.isEmpty && stack.count + arr.count\
    \ - i > k && stack.last! < arr[i] {\n            stack.removeLast()\n        }\n\
    \        if stack.count < k {\n            stack.append(arr[i])\n        }\n \
    \   }\n    return stack\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp4mcprew2/tmp4mcprew2.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d5b5c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d5b2c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d5b2c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d5b2bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4mcprew2                        0x000055e3f008a889 <unavailable> + 6281

    5    libc.so.6                          0x00002b2d5b7b5460 __libc_start_main +
    245

    6    tmp4mcprew2                        0x000055e3f008a489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var index = 0\n   \
    \ while index < k {\n        var max = Int.min\n        var maxIndex = 0\n   \
    \     for i in index..<arr.count {\n            if arr[i] > max {\n          \
    \      max = arr[i]\n                maxIndex = i\n            }\n        }\n\
    \        result.append(max)\n        index = maxIndex + 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmptfgd5l7_/tmptfgd5l7_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87be911c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87be608b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87be608988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87be6077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptfgd5l7_                        0x0000558ceb74f6b9 <unavailable> + 5817

    5    libc.so.6                          0x00002b87beafd460 __libc_start_main +
    245

    6    tmptfgd5l7_                        0x0000558ceb74f2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var heap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        heap.insert(element: num)\n        if heap.count\
    \ > k {\n            heap.remove()\n        }\n    }\n    while !heap.isEmpty\
    \ {\n        result.append(heap.remove()!)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp2kyynlyu.swift:13:16: error: cannot find 'Heap' in scope\n    var\
    \ heap = Heap<Int>(sort: >)\n               ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7i3b3kf7.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var heap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        heap.insert(arr[i])\n        if heap.count\
    \ > k {\n            heap.remove()\n        }\n    }\n    while !heap.isEmpty\
    \ {\n        result.append(heap.remove()!)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp4pk45bp0.swift:13:16: error: cannot find 'Heap' in scope\n    var\
    \ heap = Heap<Int>(sort: >)\n               ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var arr = arr\n   \
    \ for _ in 0..<k {\n        var max = Int.min\n        var maxIndex = 0\n    \
    \    for i in 0..<arr.count {\n            if arr[i] > max {\n               \
    \ max = arr[i]\n                maxIndex = i\n            }\n        }\n     \
    \   result.append(max)\n        arr.remove(at: maxIndex)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpkrqizxx1/tmpkrqizxx1.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24ad8f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24ad5ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24ad5ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24ad5eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkrqizxx1                        0x000055dff3985709 <unavailable> + 5897

    5    libc.so.6                          0x00002b24adae1460 __libc_start_main +
    245

    6    tmpkrqizxx1                        0x000055dff3985309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7i3b3kf7.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpcan0kf2n.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    result.sort()\n    for i in k..<arr.count\
    \ {\n        if arr[i] > result[0] {\n            result.remove(at: 0)\n     \
    \       result.append(arr[i])\n            result.sort()\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adfc9072c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfc8d69561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adfc8d69286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adfc8d6913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adfc8d68bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adfc8b68e83 <unavailable> + 188035

    6    tmp394a67w0                        0x000055728cc398f2 <unavailable> + 10482

    7    tmp394a67w0                        0x000055728cc394b6 <unavailable> + 9398

    8    libc.so.6                          0x00002adfc925e460 __libc_start_main +
    245

    9    tmp394a67w0                        0x000055728cc38429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpcan0kf2n.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var queue = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !queue.isEmpty && arr[i] > queue.last!\
    \ && queue.count + arr.count - i > k {\n            queue.removeLast()\n     \
    \   }\n        if queue.count < k {\n            queue.append(arr[i])\n      \
    \  }\n    }\n    return queue\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp1ohoa4tn/tmp1ohoa4tn.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18417bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18414b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18414b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18414b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ohoa4tn                        0x0000560c20042889 <unavailable> + 6281

    5    libc.so.6                          0x00002b18419aa460 __libc_start_main +
    245

    6    tmp1ohoa4tn                        0x0000560c20042489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var heap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        heap.insert(element: num)\n        if heap.count\
    \ > k {\n            heap.remove()\n        }\n    }\n    while !heap.isEmpty\
    \ {\n        result.append(heap.remove()!)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp2kyynlyu.swift:13:16: error: cannot find 'Heap' in scope\n    var\
    \ heap = Heap<Int>(sort: >)\n               ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        if maxHeap.count < k {\n         \
    \   maxHeap.insert(arr[i])\n        } else if arr[i] > maxHeap.peek()! {\n   \
    \         maxHeap.remove()\n            maxHeap.insert(arr[i])\n        }\n  \
    \  }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpaa06d85a.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var stack = [Int]()\n\
    \    for num in arr {\n        while !stack.isEmpty && stack.count + arr.count\
    \ - num >= k && stack.last! < num {\n            stack.removeLast()\n        }\n\
    \        stack.append(num)\n    }\n    for _ in 0..<k {\n        result.append(stack.removeLast())\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpd0e94eq4/tmpd0e94eq4.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02074c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02071c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02071c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02071bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd0e94eq4                        0x0000562920e3c959 <unavailable> + 6489

    5    libc.so.6                          0x00002b02076b5460 __libc_start_main +
    245

    6    tmpd0e94eq4                        0x0000562920e3c559 <unavailable> + 5465

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var stack = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !stack.isEmpty && stack.count + arr.count\
    \ - i > k && stack.last! < arr[i] {\n            stack.removeLast()\n        }\n\
    \        if stack.count < k {\n            stack.append(arr[i])\n        }\n \
    \   }\n    return stack\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp4mcprew2/tmp4mcprew2.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d5b5c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d5b2c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d5b2c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d5b2bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4mcprew2                        0x000055e3f008a889 <unavailable> + 6281

    5    libc.so.6                          0x00002b2d5b7b5460 __libc_start_main +
    245

    6    tmp4mcprew2                        0x000055e3f008a489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7i3b3kf7.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7i3b3kf7.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var maxIndex = -1\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpat88o0v3.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, maxIndex)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        if maxHeap.count < k {\n         \
    \   maxHeap.insert(arr[i])\n        } else if arr[i] > maxHeap.peek()! {\n   \
    \         maxHeap.remove()\n            maxHeap.insert(arr[i])\n        }\n  \
    \  }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpaa06d85a.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = i\n        for j in i+1..<arr.count {\n            if arr[j]\
    \ > arr[max] {\n                max = j\n            }\n        }\n        result.append(arr[max])\n\
    \        arr.swapAt(i, max)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7htqbr9v.swift:21:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, max)\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        if maxHeap.count < k {\n         \
    \   maxHeap.insert(arr[i])\n        } else if arr[i] > maxHeap.peek()! {\n   \
    \         maxHeap.pop()\n            maxHeap.insert(arr[i])\n        }\n    }\n\
    \    while !maxHeap.isEmpty {\n        result.append(maxHeap.pop()!)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpr06d0tdr.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    if arr.count == 0 ||\
    \ k == 0 {\n        return result\n    }\n    var heap = Heap<Int>(sort: >)\n\
    \    for i in 0..<arr.count {\n        heap.insert(arr[i])\n        if heap.count\
    \ > k {\n            heap.remove()\n        }\n    }\n    while !heap.isEmpty\
    \ {\n        result.append(heap.remove()!)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmphhu96b5w.swift:16:16: error: cannot find 'Heap' in scope\n    var\
    \ heap = Heap<Int>(sort: >)\n               ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    result.sort()\n    for i in k..<arr.count\
    \ {\n        if arr[i] > result[0] {\n            result.remove(at: 0)\n     \
    \       result.append(arr[i])\n            result.sort()\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adfc9072c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfc8d69561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adfc8d69286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adfc8d6913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adfc8d68bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adfc8b68e83 <unavailable> + 188035

    6    tmp394a67w0                        0x000055728cc398f2 <unavailable> + 10482

    7    tmp394a67w0                        0x000055728cc394b6 <unavailable> + 9398

    8    libc.so.6                          0x00002adfc925e460 __libc_start_main +
    245

    9    tmp394a67w0                        0x000055728cc38429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7i3b3kf7.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpcan0kf2n.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    result.sort()\n    for i in k..<arr.count\
    \ {\n        if arr[i] > result[0] {\n            result.remove(at: 0)\n     \
    \       result.append(arr[i])\n            result.sort()\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adfc9072c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfc8d69561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adfc8d69286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adfc8d6913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adfc8d68bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adfc8b68e83 <unavailable> + 188035

    6    tmp394a67w0                        0x000055728cc398f2 <unavailable> + 10482

    7    tmp394a67w0                        0x000055728cc394b6 <unavailable> + 9398

    8    libc.so.6                          0x00002adfc925e460 __libc_start_main +
    245

    9    tmp394a67w0                        0x000055728cc38429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var index = 0\n   \
    \ while index < k {\n        var max = Int.min\n        var maxIndex = -1\n  \
    \      for i in index..<arr.count {\n            if arr[i] > max {\n         \
    \       max = arr[i]\n                maxIndex = i\n            }\n        }\n\
    \        result.append(max)\n        index = maxIndex + 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp70x1qa3r/tmp70x1qa3r.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e95996c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e9568db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e9568d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e9568c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp70x1qa3r                        0x0000556205ba26b9 <unavailable> + 5817

    5    libc.so.6                          0x00002b4e95b82460 __libc_start_main +
    245

    6    tmp70x1qa3r                        0x0000556205ba22b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var arr = arr\n   \
    \ for _ in 0..<k {\n        var max = Int.min\n        var maxIndex = 0\n    \
    \    for i in 0..<arr.count {\n            if arr[i] > max {\n               \
    \ max = arr[i]\n                maxIndex = i\n            }\n        }\n     \
    \   result.append(max)\n        arr.remove(at: maxIndex)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpkrqizxx1/tmpkrqizxx1.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24ad8f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24ad5ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24ad5ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24ad5eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkrqizxx1                        0x000055dff3985709 <unavailable> + 5897

    5    libc.so.6                          0x00002b24adae1460 __libc_start_main +
    245

    6    tmpkrqizxx1                        0x000055dff3985309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var stack = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !stack.isEmpty && stack.count + arr.count\
    \ - i > k && arr[i] > stack.last! {\n            stack.removeLast()\n        }\n\
    \        if stack.count < k {\n            stack.append(arr[i])\n        }\n \
    \   }\n    return stack\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpln60g3bx/tmpln60g3bx.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee463e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee460dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee460da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee460d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpln60g3bx                        0x000055daa7e68889 <unavailable> + 6281

    5    libc.so.6                          0x00002aee465cf460 __libc_start_main +
    245

    6    tmpln60g3bx                        0x000055daa7e68489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var stack = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !stack.isEmpty && stack.last! < arr[i]\
    \ && stack.count + arr.count - i > k {\n            stack.removeLast()\n     \
    \   }\n        if stack.count < k {\n            stack.append(arr[i])\n      \
    \  }\n    }\n    return stack\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp7295931r/tmp7295931r.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaeeb3ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaeeb0e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaeeb0e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaeeb0e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7295931r                        0x000055d1c2584889 <unavailable> + 6281

    5    libc.so.6                          0x00002aaeeb5d7460 __libc_start_main +
    245

    6    tmp7295931r                        0x000055d1c2584489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var stack = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !stack.isEmpty && stack.count + arr.count\
    \ - i > k && arr[i] > stack.last! {\n            stack.removeLast()\n        }\n\
    \        if stack.count < k {\n            stack.append(arr[i])\n        }\n \
    \   }\n    return stack\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpln60g3bx/tmpln60g3bx.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee463e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee460dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee460da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee460d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpln60g3bx                        0x000055daa7e68889 <unavailable> + 6281

    5    libc.so.6                          0x00002aee465cf460 __libc_start_main +
    245

    6    tmpln60g3bx                        0x000055daa7e68489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpcan0kf2n.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpcan0kf2n.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var maxIndex = -1\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpat88o0v3.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, maxIndex)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var maxIndex = 0\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpb4vc9qau.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, maxIndex)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        if maxHeap.count < k {\n         \
    \   maxHeap.insert(arr[i])\n        } else if arr[i] > maxHeap.peek()! {\n   \
    \         maxHeap.remove()\n            maxHeap.insert(arr[i])\n        }\n  \
    \  }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpaa06d85a.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        if maxHeap.count < k {\n         \
    \   maxHeap.insert(arr[i])\n        } else if arr[i] > maxHeap.peek()! {\n   \
    \         maxHeap.remove()\n            maxHeap.insert(arr[i])\n        }\n  \
    \  }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpaa06d85a.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        maxHeap.insert(arr[i])\n        if\
    \ maxHeap.count > k {\n            maxHeap.remove()\n        }\n    }\n    while\
    \ !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3, -4,\
    \ 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\n\
    assert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpqfzxfchn.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var maxIndex = -1\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpat88o0v3.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, maxIndex)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        maxHeap.insert(arr[i])\n        if\
    \ maxHeap.count > k {\n            maxHeap.remove()\n        }\n    }\n    while\
    \ !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3, -4,\
    \ 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\n\
    assert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpqfzxfchn.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var index = 0\n   \
    \ while result.count < k {\n        var max = Int.min\n        var maxIndex =\
    \ 0\n        for i in index..<arr.count {\n            if arr[i] > max {\n   \
    \             max = arr[i]\n                maxIndex = i\n            }\n    \
    \    }\n        result.append(max)\n        index = maxIndex + 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3, -4,\
    \ 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\n\
    assert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpbgc7p75o/tmpbgc7p75o.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e7c24ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e7bf45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e7bf45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e7bf447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbgc7p75o                        0x000055bdf6ea66b9 <unavailable> + 5817

    5    libc.so.6                          0x00002b5e7c43a460 __libc_start_main +
    245

    6    tmpbgc7p75o                        0x000055bdf6ea62b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        if maxHeap.count < k {\n         \
    \   maxHeap.insert(arr[i])\n        } else if arr[i] > maxHeap.peek()! {\n   \
    \         maxHeap.remove()\n            maxHeap.insert(arr[i])\n        }\n  \
    \  }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpaa06d85a.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7i3b3kf7.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    result.sort()\n    for i in k..<arr.count\
    \ {\n        if arr[i] > result[0] {\n            result.remove(at: 0)\n     \
    \       result.append(arr[i])\n            result.sort()\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adfc9072c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfc8d69561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adfc8d69286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adfc8d6913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adfc8d68bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adfc8b68e83 <unavailable> + 188035

    6    tmp394a67w0                        0x000055728cc398f2 <unavailable> + 10482

    7    tmp394a67w0                        0x000055728cc394b6 <unavailable> + 9398

    8    libc.so.6                          0x00002adfc925e460 __libc_start_main +
    245

    9    tmp394a67w0                        0x000055728cc38429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var maxIndex = -1\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpat88o0v3.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, maxIndex)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    guard arr.count > 0 else {\n        return []\n\
    \    }\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort: >)\n    for\
    \ i in 0..<arr.count {\n        if maxHeap.count < k {\n            maxHeap.insert(arr[i])\n\
    \        } else if arr[i] > maxHeap.peek()! {\n            maxHeap.remove()\n\
    \            maxHeap.insert(arr[i])\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp81gghuvg.swift:16:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    result.sort()\n    for i in k..<arr.count\
    \ {\n        if arr[i] > result[0] {\n            result.remove(at: 0)\n     \
    \       result.append(arr[i])\n            result.sort()\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adfc9072c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfc8d69561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adfc8d69286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adfc8d6913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adfc8d68bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adfc8b68e83 <unavailable> + 188035

    6    tmp394a67w0                        0x000055728cc398f2 <unavailable> + 10482

    7    tmp394a67w0                        0x000055728cc394b6 <unavailable> + 9398

    8    libc.so.6                          0x00002adfc925e460 __libc_start_main +
    245

    9    tmp394a67w0                        0x000055728cc38429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var maxIndex = -1\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpat88o0v3.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, maxIndex)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var stack = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !stack.isEmpty && stack.count + arr.count\
    \ - i > k && arr[i] > stack.last! {\n            stack.removeLast()\n        }\n\
    \        if stack.count < k {\n            stack.append(arr[i])\n        }\n \
    \   }\n    return stack\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpln60g3bx/tmpln60g3bx.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee463e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee460dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee460da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee460d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpln60g3bx                        0x000055daa7e68889 <unavailable> + 6281

    5    libc.so.6                          0x00002aee465cf460 __libc_start_main +
    245

    6    tmpln60g3bx                        0x000055daa7e68489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        maxHeap.insert(arr[i])\n        if\
    \ maxHeap.count > k {\n            maxHeap.remove()\n        }\n    }\n    while\
    \ !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3, -4,\
    \ 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\n\
    assert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpqfzxfchn.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7i3b3kf7.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var queue = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !queue.isEmpty && arr[i] > queue.last!\
    \ && queue.count + arr.count - i > k {\n            queue.removeLast()\n     \
    \   }\n        if queue.count < k {\n            queue.append(arr[i])\n      \
    \  }\n    }\n    return queue\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp1ohoa4tn/tmp1ohoa4tn.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18417bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18414b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18414b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18414b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ohoa4tn                        0x0000560c20042889 <unavailable> + 6281

    5    libc.so.6                          0x00002b18419aa460 __libc_start_main +
    245

    6    tmp1ohoa4tn                        0x0000560c20042489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = MaxHeap<Int>()\n\
    \    for i in 0..<k {\n        maxHeap.insert(arr[i])\n    }\n    for i in k..<arr.count\
    \ {\n        if arr[i] > maxHeap.peek()! {\n            maxHeap.remove()\n   \
    \         maxHeap.insert(arr[i])\n        }\n    }\n    while !maxHeap.isEmpty()\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpvgg2smnn.swift:13:19: error: cannot find 'MaxHeap' in scope\n \
    \   var maxHeap = MaxHeap<Int>()\n                  ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7i3b3kf7.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var maxIndex = -1\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpat88o0v3.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, maxIndex)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var maxIndex = i\n        for j in i+1..<arr.count {\n            if\
    \ arr[j] > arr[maxIndex] {\n                maxIndex = j\n            }\n    \
    \    }\n        result.append(arr[maxIndex])\n        arr.swapAt(i, maxIndex)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpuhhek66r.swift:21:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, maxIndex)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var heap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        heap.insert(arr[i])\n        if heap.count\
    \ > k {\n            heap.remove()\n        }\n    }\n    while !heap.isEmpty\
    \ {\n        result.append(heap.remove()!)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp4pk45bp0.swift:13:16: error: cannot find 'Heap' in scope\n    var\
    \ heap = Heap<Int>(sort: >)\n               ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        if i < k {\n            maxHeap.insert(arr[i])\n\
    \        } else {\n            if arr[i] > maxHeap.peek()! {\n               \
    \ maxHeap.pop()\n                maxHeap.insert(arr[i])\n            }\n     \
    \   }\n    }\n    while !maxHeap.isEmpty {\n        result.append(maxHeap.pop()!)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpxhcjvksj.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var index = 0\n   \
    \ while index < k {\n        var max = Int.min\n        var maxIndex = -1\n  \
    \      for i in index..<arr.count {\n            if arr[i] > max {\n         \
    \       max = arr[i]\n                maxIndex = i\n            }\n        }\n\
    \        result.append(max)\n        index = maxIndex + 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp70x1qa3r/tmp70x1qa3r.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e95996c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e9568db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e9568d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e9568c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp70x1qa3r                        0x0000556205ba26b9 <unavailable> + 5817

    5    libc.so.6                          0x00002b4e95b82460 __libc_start_main +
    245

    6    tmp70x1qa3r                        0x0000556205ba22b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var temp = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !temp.isEmpty && temp.count + arr.count\
    \ - i > k && temp.last! < arr[i] {\n            temp.removeLast()\n        }\n\
    \        if temp.count < k {\n            temp.append(arr[i])\n        }\n   \
    \ }\n    result = temp\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpx0x1v8v3/tmpx0x1v8v3.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b860f8d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b860f5cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b860f5cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b860f5ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx0x1v8v3                        0x000055fcf3b1a889 <unavailable> + 6281

    5    libc.so.6                          0x00002b860fac4460 __libc_start_main +
    245

    6    tmpx0x1v8v3                        0x000055fcf3b1a489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7i3b3kf7.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var heap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        heap.insert(element: num)\n        if heap.count\
    \ > k {\n            heap.remove()\n        }\n    }\n    while !heap.isEmpty\
    \ {\n        result.append(heap.remove()!)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp2kyynlyu.swift:13:16: error: cannot find 'Heap' in scope\n    var\
    \ heap = Heap<Int>(sort: >)\n               ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpcan0kf2n.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var heap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        heap.insert(element: num)\n        if heap.count\
    \ > k {\n            heap.remove()\n        }\n    }\n    while !heap.isEmpty\
    \ {\n        result.append(heap.remove()!)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp2kyynlyu.swift:13:16: error: cannot find 'Heap' in scope\n    var\
    \ heap = Heap<Int>(sort: >)\n               ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var maxIndex = -1\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpat88o0v3.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, maxIndex)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var heap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        heap.insert(element: num)\n        if heap.count\
    \ > k {\n            heap.remove()\n        }\n    }\n    while !heap.isEmpty\
    \ {\n        result.append(heap.remove()!)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp2kyynlyu.swift:13:16: error: cannot find 'Heap' in scope\n    var\
    \ heap = Heap<Int>(sort: >)\n               ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    result.sort()\n    for i in k..<arr.count\
    \ {\n        if arr[i] > result[0] {\n            result.remove(at: 0)\n     \
    \       result.append(arr[i])\n            result.sort()\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adfc9072c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfc8d69561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adfc8d69286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adfc8d6913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adfc8d68bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adfc8b68e83 <unavailable> + 188035

    6    tmp394a67w0                        0x000055728cc398f2 <unavailable> + 10482

    7    tmp394a67w0                        0x000055728cc394b6 <unavailable> + 9398

    8    libc.so.6                          0x00002adfc925e460 __libc_start_main +
    245

    9    tmp394a67w0                        0x000055728cc38429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var arr = arr\n   \
    \ for _ in 0..<k {\n        var max = Int.min\n        var maxIndex = 0\n    \
    \    for i in 0..<arr.count {\n            if arr[i] > max {\n               \
    \ max = arr[i]\n                maxIndex = i\n            }\n        }\n     \
    \   result.append(max)\n        arr.remove(at: maxIndex)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpkrqizxx1/tmpkrqizxx1.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24ad8f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24ad5ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24ad5ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24ad5eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkrqizxx1                        0x000055dff3985709 <unavailable> + 5897

    5    libc.so.6                          0x00002b24adae1460 __libc_start_main +
    245

    6    tmpkrqizxx1                        0x000055dff3985309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var maxIndex = -1\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpat88o0v3.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, maxIndex)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var heap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        heap.insert(element: num)\n        if heap.count\
    \ > k {\n            heap.remove()\n        }\n    }\n    while !heap.isEmpty\
    \ {\n        result.append(heap.remove()!)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp2kyynlyu.swift:13:16: error: cannot find 'Heap' in scope\n    var\
    \ heap = Heap<Int>(sort: >)\n               ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var stack = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !stack.isEmpty && stack.count + arr.count\
    \ - i > k && arr[i] > stack.last! {\n            stack.removeLast()\n        }\n\
    \        if stack.count < k {\n            stack.append(arr[i])\n        }\n \
    \   }\n    return stack\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpln60g3bx/tmpln60g3bx.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee463e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee460dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee460da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee460d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpln60g3bx                        0x000055daa7e68889 <unavailable> + 6281

    5    libc.so.6                          0x00002aee465cf460 __libc_start_main +
    245

    6    tmpln60g3bx                        0x000055daa7e68489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpcan0kf2n.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var maxIndex = 0\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpb4vc9qau.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, maxIndex)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var stack = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !stack.isEmpty && arr[i] > stack.last!\
    \ && stack.count + arr.count - i > k {\n            stack.removeLast()\n     \
    \   }\n        if stack.count < k {\n            stack.append(arr[i])\n      \
    \  }\n    }\n    return stack\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpi92rba2w/tmpi92rba2w.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5bf9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe5bc93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe5bc93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe5bc927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi92rba2w                        0x000055a1e5574889 <unavailable> + 6281

    5    libc.so.6                          0x00002afe5c188460 __libc_start_main +
    245

    6    tmpi92rba2w                        0x000055a1e5574489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    result.sort()\n    for i in k..<arr.count\
    \ {\n        if arr[i] > result[0] {\n            result.remove(at: 0)\n     \
    \       result.append(arr[i])\n            result.sort()\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adfc9072c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfc8d69561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adfc8d69286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adfc8d6913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adfc8d68bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adfc8b68e83 <unavailable> + 188035

    6    tmp394a67w0                        0x000055728cc398f2 <unavailable> + 10482

    7    tmp394a67w0                        0x000055728cc394b6 <unavailable> + 9398

    8    libc.so.6                          0x00002adfc925e460 __libc_start_main +
    245

    9    tmp394a67w0                        0x000055728cc38429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    guard arr.count >=\
    \ k else {\n        return result\n    }\n    var heap = Heap<Int>(sort: >)\n\
    \    for i in 0..<k {\n        heap.insert(arr[i])\n    }\n    for i in k..<arr.count\
    \ {\n        if arr[i] > heap.peek()! {\n            heap.remove()\n         \
    \   heap.insert(arr[i])\n        }\n    }\n    while !heap.isEmpty() {\n     \
    \   result.append(heap.remove()!)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpfxsiih50.swift:16:16: error: cannot find 'Heap' in scope\n    var\
    \ heap = Heap<Int>(sort: >)\n               ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpcan0kf2n.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var maxIndex = i\n        for j in i+1..<arr.count {\n            if\
    \ arr[j] > arr[maxIndex] {\n                maxIndex = j\n            }\n    \
    \    }\n        result.append(arr[maxIndex])\n        arr.swapAt(i, maxIndex)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpuhhek66r.swift:21:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, maxIndex)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var arr = arr\n   \
    \ for _ in 0..<k {\n        var max = Int.min\n        var index = 0\n       \
    \ for i in 0..<arr.count {\n            if arr[i] > max {\n                max\
    \ = arr[i]\n                index = i\n            }\n        }\n        result.append(max)\n\
    \        arr.remove(at: index)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp9jprsok3/tmp9jprsok3.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca08bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca05b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca05b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca05b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9jprsok3                        0x000055ae58186709 <unavailable> + 5897

    5    libc.so.6                          0x00002b8ca0aa9460 __libc_start_main +
    245

    6    tmp9jprsok3                        0x000055ae58186309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var temp = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !temp.isEmpty && temp.count + arr.count\
    \ - i > k && temp.last! < arr[i] {\n            temp.removeLast()\n        }\n\
    \        if temp.count < k {\n            temp.append(arr[i])\n        }\n   \
    \ }\n    result = temp\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpx0x1v8v3/tmpx0x1v8v3.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b860f8d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b860f5cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b860f5cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b860f5ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx0x1v8v3                        0x000055fcf3b1a889 <unavailable> + 6281

    5    libc.so.6                          0x00002b860fac4460 __libc_start_main +
    245

    6    tmpx0x1v8v3                        0x000055fcf3b1a489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var index = 0\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     index = j\n            }\n        }\n        result.append(max)\n      \
    \  arr.swapAt(i, index)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp_1la6jzn.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, index)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var index = -1\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     index = j\n            }\n        }\n        result.append(max)\n      \
    \  arr.swapAt(i, index)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwkga1fw6.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, index)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    result.sort()\n    for i in k..<arr.count\
    \ {\n        if arr[i] > result[0] {\n            result.remove(at: 0)\n     \
    \       result.append(arr[i])\n            result.sort()\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adfc9072c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfc8d69561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adfc8d69286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adfc8d6913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adfc8d68bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adfc8b68e83 <unavailable> + 188035

    6    tmp394a67w0                        0x000055728cc398f2 <unavailable> + 10482

    7    tmp394a67w0                        0x000055728cc394b6 <unavailable> + 9398

    8    libc.so.6                          0x00002adfc925e460 __libc_start_main +
    245

    9    tmp394a67w0                        0x000055728cc38429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var stack = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !stack.isEmpty && arr[i] > stack.last!\
    \ && stack.count + arr.count - i > k {\n            stack.removeLast()\n     \
    \   }\n        if stack.count < k {\n            stack.append(arr[i])\n      \
    \  }\n    }\n    return stack\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpi92rba2w/tmpi92rba2w.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5bf9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe5bc93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe5bc93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe5bc927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi92rba2w                        0x000055a1e5574889 <unavailable> + 6281

    5    libc.so.6                          0x00002afe5c188460 __libc_start_main +
    245

    6    tmpi92rba2w                        0x000055a1e5574489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var maxIndex = -1\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpat88o0v3.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, maxIndex)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpcan0kf2n.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7i3b3kf7.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    result.sort()\n    for i in k..<arr.count\
    \ {\n        if arr[i] > result[0] {\n            result.remove(at: 0)\n     \
    \       result.append(arr[i])\n            result.sort()\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adfc9072c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfc8d69561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adfc8d69286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adfc8d6913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adfc8d68bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adfc8b68e83 <unavailable> + 188035

    6    tmp394a67w0                        0x000055728cc398f2 <unavailable> + 10482

    7    tmp394a67w0                        0x000055728cc394b6 <unavailable> + 9398

    8    libc.so.6                          0x00002adfc925e460 __libc_start_main +
    245

    9    tmp394a67w0                        0x000055728cc38429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var maxIndex = -1\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpat88o0v3.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, maxIndex)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        maxHeap.insert(arr[i])\n        if\
    \ maxHeap.count > k {\n            maxHeap.remove()\n        }\n    }\n    while\
    \ !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3, -4,\
    \ 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\n\
    assert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpqfzxfchn.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(element: num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7i3b3kf7.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var stack = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !stack.isEmpty && stack.count + arr.count\
    \ - i > k && stack.last! < arr[i] {\n            stack.removeLast()\n        }\n\
    \        if stack.count < k {\n            stack.append(arr[i])\n        }\n \
    \   }\n    return stack\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp4mcprew2/tmp4mcprew2.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d5b5c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d5b2c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d5b2c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d5b2bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4mcprew2                        0x000055e3f008a889 <unavailable> + 6281

    5    libc.so.6                          0x00002b2d5b7b5460 __libc_start_main +
    245

    6    tmp4mcprew2                        0x000055e3f008a489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var stack = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !stack.isEmpty && stack.count + arr.count\
    \ - i > k && arr[i] > stack.last! {\n            stack.removeLast()\n        }\n\
    \        if stack.count < k {\n            stack.append(arr[i])\n        }\n \
    \   }\n    return stack\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpln60g3bx/tmpln60g3bx.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee463e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee460dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee460da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee460d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpln60g3bx                        0x000055daa7e68889 <unavailable> + 6281

    5    libc.so.6                          0x00002aee465cf460 __libc_start_main +
    245

    6    tmpln60g3bx                        0x000055daa7e68489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    if arr.count == 0 ||\
    \ k == 0 {\n        return result\n    }\n    var heap = Heap<Int>(sort: >)\n\
    \    for i in 0..<arr.count {\n        heap.insert(arr[i])\n        if heap.count\
    \ > k {\n            heap.remove()\n        }\n    }\n    while !heap.isEmpty\
    \ {\n        result.append(heap.remove()!)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmphhu96b5w.swift:16:16: error: cannot find 'Heap' in scope\n    var\
    \ heap = Heap<Int>(sort: >)\n               ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        maxHeap.insert(arr[i])\n        if\
    \ maxHeap.count > k {\n            maxHeap.remove()\n        }\n    }\n    while\
    \ !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3, -4,\
    \ 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\n\
    assert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpqfzxfchn.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var arr = arr\n   \
    \ for _ in 0..<k {\n        var maxIndex = 0\n        for i in 1..<arr.count {\n\
    \            if arr[i] > arr[maxIndex] {\n                maxIndex = i\n     \
    \       }\n        }\n        result.append(arr[maxIndex])\n        arr.remove(at:\
    \ maxIndex)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4,\
    \ -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\
    \ == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20,\
    \ 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp1tvduoxb/tmp1tvduoxb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b425de29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b425db20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b425db20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b425db1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1tvduoxb                        0x000055fc5910e709 <unavailable> + 5897

    5    libc.so.6                          0x00002b425e015460 __libc_start_main +
    245

    6    tmp1tvduoxb                        0x000055fc5910e309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var arr = arr\n   \
    \ for _ in 0..<k {\n        var max = Int.min\n        var maxIndex = 0\n    \
    \    for i in 0..<arr.count {\n            if arr[i] > max {\n               \
    \ max = arr[i]\n                maxIndex = i\n            }\n        }\n     \
    \   result.append(max)\n        arr.remove(at: maxIndex)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpkrqizxx1/tmpkrqizxx1.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24ad8f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24ad5ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24ad5ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24ad5eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkrqizxx1                        0x000055dff3985709 <unavailable> + 5897

    5    libc.so.6                          0x00002b24adae1460 __libc_start_main +
    245

    6    tmpkrqizxx1                        0x000055dff3985309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        maxHeap.insert(arr[i])\n        if\
    \ maxHeap.count > k {\n            maxHeap.remove()\n        }\n    }\n    while\
    \ !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3, -4,\
    \ 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\n\
    assert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpqfzxfchn.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var maxIndex = -1\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpat88o0v3.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, maxIndex)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var index = -1\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     index = j\n            }\n        }\n        result.append(max)\n      \
    \  arr.swapAt(i, index)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwkga1fw6.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, index)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var index = -1\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     index = j\n            }\n        }\n        result.append(max)\n      \
    \  arr.swapAt(i, index)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwkga1fw6.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, index)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var heap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        heap.insert(element: num)\n        if heap.count\
    \ > k {\n            heap.remove()\n        }\n    }\n    while !heap.isEmpty\
    \ {\n        result.append(heap.remove()!)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp2kyynlyu.swift:13:16: error: cannot find 'Heap' in scope\n    var\
    \ heap = Heap<Int>(sort: >)\n               ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var arr = arr\n   \
    \ for _ in 0..<k {\n        var maxIndex = 0\n        for i in 1..<arr.count {\n\
    \            if arr[i] > arr[maxIndex] {\n                maxIndex = i\n     \
    \       }\n        }\n        result.append(arr[maxIndex])\n        arr.remove(at:\
    \ maxIndex)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4,\
    \ -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\
    \ == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20,\
    \ 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp1tvduoxb/tmp1tvduoxb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b425de29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b425db20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b425db20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b425db1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1tvduoxb                        0x000055fc5910e709 <unavailable> + 5897

    5    libc.so.6                          0x00002b425e015460 __libc_start_main +
    245

    6    tmp1tvduoxb                        0x000055fc5910e309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    result.sort()\n    for i in k..<arr.count\
    \ {\n        if arr[i] > result[0] {\n            result.remove(at: 0)\n     \
    \       result.append(arr[i])\n            result.sort()\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adfc9072c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfc8d69561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adfc8d69286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adfc8d6913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adfc8d68bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adfc8b68e83 <unavailable> + 188035

    6    tmp394a67w0                        0x000055728cc398f2 <unavailable> + 10482

    7    tmp394a67w0                        0x000055728cc394b6 <unavailable> + 9398

    8    libc.so.6                          0x00002adfc925e460 __libc_start_main +
    245

    9    tmp394a67w0                        0x000055728cc38429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpcan0kf2n.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpcan0kf2n.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    result.sort()\n    for i in k..<arr.count\
    \ {\n        if arr[i] > result[0] {\n            result.remove(at: 0)\n     \
    \       result.append(arr[i])\n            result.sort()\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adfc9072c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfc8d69561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adfc8d69286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adfc8d6913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adfc8d68bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adfc8b68e83 <unavailable> + 188035

    6    tmp394a67w0                        0x000055728cc398f2 <unavailable> + 10482

    7    tmp394a67w0                        0x000055728cc394b6 <unavailable> + 9398

    8    libc.so.6                          0x00002adfc925e460 __libc_start_main +
    245

    9    tmp394a67w0                        0x000055728cc38429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for i in 0..<arr.count {\n        maxHeap.insert(arr[i])\n        if\
    \ maxHeap.count > k {\n            maxHeap.remove()\n        }\n    }\n    while\
    \ !maxHeap.isEmpty {\n        result.append(maxHeap.remove()!)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3, -4,\
    \ 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\n\
    assert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpqfzxfchn.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var stack = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !stack.isEmpty && arr[i] > stack.last!\
    \ && stack.count + arr.count - i > k {\n            stack.removeLast()\n     \
    \   }\n        if stack.count < k {\n            stack.append(arr[i])\n      \
    \  }\n    }\n    return stack\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpi92rba2w/tmpi92rba2w.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5bf9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe5bc93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe5bc93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe5bc927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi92rba2w                        0x000055a1e5574889 <unavailable> + 6281

    5    libc.so.6                          0x00002afe5c188460 __libc_start_main +
    245

    6    tmpi92rba2w                        0x000055a1e5574489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var stack = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !stack.isEmpty && stack.count + arr.count\
    \ - i > k && stack.last! < arr[i] {\n            stack.removeLast()\n        }\n\
    \        if stack.count < k {\n            stack.append(arr[i])\n        }\n \
    \   }\n    return stack\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp4mcprew2/tmp4mcprew2.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d5b5c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d5b2c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d5b2c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d5b2bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4mcprew2                        0x000055e3f008a889 <unavailable> + 6281

    5    libc.so.6                          0x00002b2d5b7b5460 __libc_start_main +
    245

    6    tmp4mcprew2                        0x000055e3f008a489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    result.sort()\n    for i in k..<arr.count\
    \ {\n        if arr[i] > result[0] {\n            result.remove(at: 0)\n     \
    \       result.append(arr[i])\n            result.sort()\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adfc9072c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfc8d69561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adfc8d69286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adfc8d6913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adfc8d68bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adfc8b68e83 <unavailable> + 188035

    6    tmp394a67w0                        0x000055728cc398f2 <unavailable> + 10482

    7    tmp394a67w0                        0x000055728cc394b6 <unavailable> + 9398

    8    libc.so.6                          0x00002adfc925e460 __libc_start_main +
    245

    9    tmp394a67w0                        0x000055728cc38429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var index = -1\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     index = j\n            }\n        }\n        result.append(max)\n      \
    \  arr.swapAt(i, index)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwkga1fw6.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, index)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var maxIndex = 0\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpb4vc9qau.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, maxIndex)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpcan0kf2n.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpcan0kf2n.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpcan0kf2n.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    result.sort()\n    for i in k..<arr.count\
    \ {\n        if arr[i] > result[0] {\n            result.remove(at: 0)\n     \
    \       result.append(arr[i])\n            result.sort()\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adfc9072c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfc8d69561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adfc8d69286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adfc8d6913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adfc8d68bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adfc8b68e83 <unavailable> + 188035

    6    tmp394a67w0                        0x000055728cc398f2 <unavailable> + 10482

    7    tmp394a67w0                        0x000055728cc394b6 <unavailable> + 9398

    8    libc.so.6                          0x00002adfc925e460 __libc_start_main +
    245

    9    tmp394a67w0                        0x000055728cc38429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpcan0kf2n.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var arr = arr\n   \
    \ for _ in 0..<k {\n        var maxIndex = 0\n        for i in 1..<arr.count {\n\
    \            if arr[i] > arr[maxIndex] {\n                maxIndex = i\n     \
    \       }\n        }\n        result.append(arr[maxIndex])\n        arr.remove(at:\
    \ maxIndex)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4,\
    \ -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\
    \ == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20,\
    \ 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp1tvduoxb/tmp1tvduoxb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b425de29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b425db20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b425db20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b425db1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1tvduoxb                        0x000055fc5910e709 <unavailable> + 5897

    5    libc.so.6                          0x00002b425e015460 __libc_start_main +
    245

    6    tmp1tvduoxb                        0x000055fc5910e309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var arr = arr\n   \
    \ for _ in 0..<k {\n        var max = Int.min\n        var index = 0\n       \
    \ for i in 0..<arr.count {\n            if arr[i] > max {\n                max\
    \ = arr[i]\n                index = i\n            }\n        }\n        result.append(max)\n\
    \        arr.remove(at: index)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp9jprsok3/tmp9jprsok3.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca08bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca05b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca05b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca05b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9jprsok3                        0x000055ae58186709 <unavailable> + 5897

    5    libc.so.6                          0x00002b8ca0aa9460 __libc_start_main +
    245

    6    tmp9jprsok3                        0x000055ae58186309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var maxHeap = Heap<Int>(sort:\
    \ >)\n    for num in arr {\n        maxHeap.insert(num)\n        if maxHeap.count\
    \ > k {\n            maxHeap.remove()\n        }\n    }\n    while !maxHeap.isEmpty\
    \ {\n        result.append(maxHeap.remove()!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpcan0kf2n.swift:13:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap<Int>(sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    result.sort()\n    for i in k..<arr.count\
    \ {\n        if arr[i] > result[0] {\n            result.remove(at: 0)\n     \
    \       result.append(arr[i])\n            result.sort()\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adfc9072c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfc8d69561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adfc8d69286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adfc8d6913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adfc8d68bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adfc8b68e83 <unavailable> + 188035

    6    tmp394a67w0                        0x000055728cc398f2 <unavailable> + 10482

    7    tmp394a67w0                        0x000055728cc394b6 <unavailable> + 9398

    8    libc.so.6                          0x00002adfc925e460 __libc_start_main +
    245

    9    tmp394a67w0                        0x000055728cc38429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    result.sort()\n    for i in k..<arr.count\
    \ {\n        if arr[i] > result[0] {\n            result.remove(at: 0)\n     \
    \       result.append(arr[i])\n            result.sort()\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adfc9072c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfc8d69561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adfc8d69286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adfc8d6913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adfc8d68bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adfc8b68e83 <unavailable> + 188035

    6    tmp394a67w0                        0x000055728cc398f2 <unavailable> + 10482

    7    tmp394a67w0                        0x000055728cc394b6 <unavailable> + 9398

    8    libc.so.6                          0x00002adfc925e460 __libc_start_main +
    245

    9    tmp394a67w0                        0x000055728cc38429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var index = 0\n   \
    \ while index < k {\n        var max = Int.min\n        var maxIndex = 0\n   \
    \     for i in index..<arr.count {\n            if arr[i] > max {\n          \
    \      max = arr[i]\n                maxIndex = i\n            }\n        }\n\
    \        result.append(max)\n        index = maxIndex + 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmptfgd5l7_/tmptfgd5l7_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87be911c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87be608b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87be608988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87be6077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptfgd5l7_                        0x0000558ceb74f6b9 <unavailable> + 5817

    5    libc.so.6                          0x00002b87beafd460 __libc_start_main +
    245

    6    tmptfgd5l7_                        0x0000558ceb74f2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var maxIndex = -1\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpat88o0v3.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, maxIndex)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var index = 0\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     index = j\n            }\n        }\n        result.append(max)\n      \
    \  arr.swapAt(i, index)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp_1la6jzn.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, index)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        result.append(arr[i])\n    }\n    result.sort()\n    for i in k..<arr.count\
    \ {\n        if arr[i] > result[0] {\n            result.remove(at: 0)\n     \
    \       result.append(arr[i])\n            result.sort()\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adfc9072c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfc8d69561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adfc8d69286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adfc8d6913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adfc8d68bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adfc8b68e83 <unavailable> + 188035

    6    tmp394a67w0                        0x000055728cc398f2 <unavailable> + 10482

    7    tmp394a67w0                        0x000055728cc394b6 <unavailable> + 9398

    8    libc.so.6                          0x00002adfc925e460 __libc_start_main +
    245

    9    tmp394a67w0                        0x000055728cc38429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var maxIndex = 0\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpb4vc9qau.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, maxIndex)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var maxIndex = i\n        for j in i+1..<arr.count {\n            if\
    \ arr[j] > arr[maxIndex] {\n                maxIndex = j\n            }\n    \
    \    }\n        result.append(arr[maxIndex])\n        arr.swapAt(i, maxIndex)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpuhhek66r.swift:21:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, maxIndex)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var index = -1\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     index = j\n            }\n        }\n        result.append(max)\n      \
    \  arr.swapAt(i, index)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwkga1fw6.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, index)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = Int.min\n        var maxIndex = 0\n        for j in i..<arr.count\
    \ {\n            if arr[j] > max {\n                max = arr[j]\n           \
    \     maxIndex = j\n            }\n        }\n        result.append(max)\n   \
    \     arr.swapAt(i, maxIndex)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpb4vc9qau.swift:23:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, maxIndex)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<k {\n\
    \        var max = i\n        for j in i+1..<arr.count {\n            if arr[j]\
    \ > arr[max] {\n                max = j\n            }\n        }\n        result.append(arr[max])\n\
    \        arr.swapAt(i, max)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7htqbr9v.swift:21:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, max)\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var temp = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !temp.isEmpty && temp.last! < arr[i]\
    \ && temp.count + arr.count - i > k {\n            temp.removeLast()\n       \
    \ }\n        temp.append(arr[i])\n    }\n    result = Array(temp.prefix(k))\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpyg1mspld/tmpyg1mspld.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04a5bc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04a58bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04a58bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04a58be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyg1mspld                        0x000055dc69ea49e9 <unavailable> + 6633

    5    libc.so.6                          0x00002b04a5db4460 __libc_start_main +
    245

    6    tmpyg1mspld                        0x000055dc69ea45e9 <unavailable> + 5609

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var stack = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !stack.isEmpty && stack.count + arr.count\
    \ - i > k && arr[i] > stack.last! {\n            stack.removeLast()\n        }\n\
    \        if stack.count < k {\n            stack.append(arr[i])\n        }\n \
    \   }\n    return stack\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpln60g3bx/tmpln60g3bx.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee463e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee460dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee460da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee460d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpln60g3bx                        0x000055daa7e68889 <unavailable> + 6281

    5    libc.so.6                          0x00002aee465cf460 __libc_start_main +
    245

    6    tmpln60g3bx                        0x000055daa7e68489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var index = 0\n   \
    \ while index < k {\n        var max = Int.min\n        var maxIndex = 0\n   \
    \     for i in index..<arr.count {\n            if arr[i] > max {\n          \
    \      max = arr[i]\n                maxIndex = i\n            }\n        }\n\
    \        result.append(max)\n        index = maxIndex + 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmptfgd5l7_/tmptfgd5l7_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87be911c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87be608b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87be608988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87be6077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptfgd5l7_                        0x0000558ceb74f6b9 <unavailable> + 5817

    5    libc.so.6                          0x00002b87beafd460 __libc_start_main +
    245

    6    tmptfgd5l7_                        0x0000558ceb74f2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var stack = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !stack.isEmpty && arr[i] > stack.last!\
    \ && stack.count + arr.count - i > k {\n            stack.removeLast()\n     \
    \   }\n        if stack.count < k {\n            stack.append(arr[i])\n      \
    \  }\n    }\n    return stack\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpi92rba2w/tmpi92rba2w.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5bf9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe5bc93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe5bc93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe5bc927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi92rba2w                        0x000055a1e5574889 <unavailable> + 6281

    5    libc.so.6                          0x00002afe5c188460 __libc_start_main +
    245

    6    tmpi92rba2w                        0x000055a1e5574489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var stack = [Int]()\n\
    \    for i in 0..<arr.count {\n        while stack.count > 0 && stack.last! <\
    \ arr[i] && stack.count + arr.count - i > k {\n            stack.removeLast()\n\
    \        }\n        if stack.count < k {\n            stack.append(arr[i])\n \
    \       }\n    }\n    return stack\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4,\
    \ -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\
    \ == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20,\
    \ 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp2pme7zzd/tmp2pme7zzd.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f7f1b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f7eea9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f7eea9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f7eea87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2pme7zzd                        0x000056249e73b7f9 <unavailable> + 6137

    5    libc.so.6                          0x00002b7f7f39e460 __libc_start_main +
    245

    6    tmp2pme7zzd                        0x000056249e73b3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659978647
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the array will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    var result = [Int]()\n    var stack = [Int]()\n\
    \    for i in 0..<arr.count {\n        while !stack.isEmpty && arr[i] > stack.last!\
    \ && stack.count + arr.count - i > k {\n            stack.removeLast()\n     \
    \   }\n        if stack.count < k {\n            stack.append(arr[i])\n      \
    \  }\n    }\n    return stack\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpi92rba2w/tmpi92rba2w.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5bf9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe5bc93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe5bc93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe5bc927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi92rba2w                        0x000055a1e5574889 <unavailable> + 6281

    5    libc.so.6                          0x00002afe5c188460 __libc_start_main +
    245

    6    tmpi92rba2w                        0x000055a1e5574489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659978647
