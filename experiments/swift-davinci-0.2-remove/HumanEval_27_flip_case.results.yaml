language: swift
name: HumanEval_27_flip_case
results:
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped =\
    \ \"\"\n    for char in string.characters {\n        if char.isUppercase {\n \
    \           flipped.append(char.lowercase)\n        } else {\n            flipped.append(char.uppercase)\n\
    \        }\n    }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnpqdp4jr.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnpqdp4jr.swift:7:33:\
    \ error: value of type 'Character' has no member 'lowercase'\n            flipped.append(char.lowercase)\n\
    \                           ~~~~ ^~~~~~~~~\n/tmp/tmpnpqdp4jr.swift:9:33: error:\
    \ value of type 'Character' has no member 'uppercase'\n            flipped.append(char.uppercase)\n\
    \                           ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped =\
    \ \"\"\n    for char in string.characters {\n        if char.isUppercase {\n \
    \           flipped.append(char.lowercase)\n        } else {\n            flipped.append(char.uppercase)\n\
    \        }\n    }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnpqdp4jr.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnpqdp4jr.swift:7:33:\
    \ error: value of type 'Character' has no member 'lowercase'\n            flipped.append(char.lowercase)\n\
    \                           ~~~~ ^~~~~~~~~\n/tmp/tmpnpqdp4jr.swift:9:33: error:\
    \ value of type 'Character' has no member 'uppercase'\n            flipped.append(char.uppercase)\n\
    \                           ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped =\
    \ \"\"\n    for char in string.characters {\n        if char.isUppercase {\n \
    \           flipped.append(char.lowercase)\n        } else {\n            flipped.append(char.uppercase)\n\
    \        }\n    }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnpqdp4jr.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnpqdp4jr.swift:7:33:\
    \ error: value of type 'Character' has no member 'lowercase'\n            flipped.append(char.lowercase)\n\
    \                           ~~~~ ^~~~~~~~~\n/tmp/tmpnpqdp4jr.swift:9:33: error:\
    \ value of type 'Character' has no member 'uppercase'\n            flipped.append(char.uppercase)\n\
    \                           ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercaseString\n    \
    \    } else {\n            return $0.uppercaseString\n        }\n    }.joinWithSeparator(\"\
    \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(flip_case(string: \"\") == \"\
    \")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpqvdtbp4v.swift:10:7: error: value of type 'Array<_>' has no member\
    \ 'joinWithSeparator'\n    }.joinWithSeparator(\"\")\n~~~~~ ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqvdtbp4v.swift:6:23: error: value of type 'String.Element' (aka 'Character')\
    \ has no member 'lowercaseString'\n            return $0.lowercaseString\n   \
    \                ~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var new_string\
    \ = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n\
    \            new_string.append(char.lowercase)\n        } else {\n           \
    \ new_string.append(char.uppercase)\n        }\n    }\n    return new_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmporq68kgq.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmporq68kgq.swift:7:36:\
    \ error: value of type 'Character' has no member 'lowercase'\n            new_string.append(char.lowercase)\n\
    \                              ~~~~ ^~~~~~~~~\n/tmp/tmporq68kgq.swift:9:36: error:\
    \ value of type 'Character' has no member 'uppercase'\n            new_string.append(char.uppercase)\n\
    \                              ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: {\
    \ $0 + String($1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpxt7_idbh.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: { $0 + String($1) })\n            ^   \
    \ ~~~~~~~~~\n                 \n/tmp/tmpxt7_idbh.swift:6:23: error: value of type\
    \ 'String.Element' (aka 'Character') has no member 'lowercase'\n            return\
    \ $0.lowercase\n                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase() {\n            return $0.lowercase()\n      \
    \  } else {\n            return $0.uppercase()\n        }\n    }.reduce(\"\",\
    \ combine: { $0 + String($1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpgu91b_42.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: { $0 + String($1) })\n            ^   \
    \ ~~~~~~~~~\n                 \n/tmp/tmpgu91b_42.swift:5:15: error: cannot call\
    \ value of non-function type 'Bool'\n        if $0.isUppercase() {\n         \
    \     ^          ~~\n                         \n"
  stdout: ''
  timestamp: 1659978899
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for character in string.characters {\n        if character.isUppercase\
    \ {\n            flipped_string.append(character.lowercase)\n        } else {\n\
    \            flipped_string.append(character.uppercase)\n        }\n    }\n  \
    \  return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpv2makypv.swift:5:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in string.characters {\n            \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpv2makypv.swift:7:45: error: value of type 'Character' has no member\
    \ 'lowercase'\n            flipped_string.append(character.lowercase)\n      \
    \                            ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpv2makypv.swift:9:45:\
    \ error: value of type 'Character' has no member 'uppercase'\n            flipped_string.append(character.uppercase)\n\
    \                                  ~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped =\
    \ \"\"\n    for char in string.characters {\n        if char.isUppercase {\n \
    \           flipped.append(char.lowercase)\n        } else {\n            flipped.append(char.uppercase)\n\
    \        }\n    }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnpqdp4jr.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnpqdp4jr.swift:7:33:\
    \ error: value of type 'Character' has no member 'lowercase'\n            flipped.append(char.lowercase)\n\
    \                           ~~~~ ^~~~~~~~~\n/tmp/tmpnpqdp4jr.swift:9:33: error:\
    \ value of type 'Character' has no member 'uppercase'\n            flipped.append(char.uppercase)\n\
    \                           ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n\
    \        } else {\n            result.append(char.uppercased())\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped =\
    \ \"\"\n    for char in string.characters {\n        if char.isUppercase {\n \
    \           flipped.append(char.lowercase)\n        } else {\n            flipped.append(char.uppercase)\n\
    \        }\n    }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnpqdp4jr.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnpqdp4jr.swift:7:33:\
    \ error: value of type 'Character' has no member 'lowercase'\n            flipped.append(char.lowercase)\n\
    \                           ~~~~ ^~~~~~~~~\n/tmp/tmpnpqdp4jr.swift:9:33: error:\
    \ value of type 'Character' has no member 'uppercase'\n            flipped.append(char.uppercase)\n\
    \                           ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for character in string.characters {\n        if character.isUppercase()\
    \ {\n            flipped_string.append(character.lowercase())\n        } else\
    \ {\n            flipped_string.append(character.uppercase())\n        }\n   \
    \ }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpu4izxmwv.swift:5:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in string.characters {\n            \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpu4izxmwv.swift:6:22: error: cannot call value of non-function type\
    \ 'Bool'\n        if character.isUppercase() {\n                     ^       \
    \   ~~\n                                \n/tmp/tmpu4izxmwv.swift:7:45: error:\
    \ value of type 'Character' has no member 'lowercase'\n            flipped_string.append(character.lowercase())\n\
    \                                  ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpu4izxmwv.swift:9:45:\
    \ error: value of type 'Character' has no member 'uppercase'\n            flipped_string.append(character.uppercase())\n\
    \                                  ~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase() {\n            return $0.lowercase()\n      \
    \  } else {\n            return $0.uppercase()\n        }\n    }.reduce(\"\",\
    \ combine: { $0 + String($1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpgu91b_42.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: { $0 + String($1) })\n            ^   \
    \ ~~~~~~~~~\n                 \n/tmp/tmpgu91b_42.swift:5:15: error: cannot call\
    \ value of non-function type 'Bool'\n        if $0.isUppercase() {\n         \
    \     ^          ~~\n                         \n"
  stdout: ''
  timestamp: 1659978899
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for character in string.characters {\n        if character.isUppercase\
    \ {\n            flipped_string.append(character.lowercase)\n        } else {\n\
    \            flipped_string.append(character.uppercase)\n        }\n    }\n  \
    \  return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpv2makypv.swift:5:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in string.characters {\n            \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpv2makypv.swift:7:45: error: value of type 'Character' has no member\
    \ 'lowercase'\n            flipped_string.append(character.lowercase)\n      \
    \                            ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpv2makypv.swift:9:45:\
    \ error: value of type 'Character' has no member 'uppercase'\n            flipped_string.append(character.uppercase)\n\
    \                                  ~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var new_string\
    \ = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n\
    \            new_string.append(char.lowercase)\n        } else {\n           \
    \ new_string.append(char.uppercase)\n        }\n    }\n    return new_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmporq68kgq.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmporq68kgq.swift:7:36:\
    \ error: value of type 'Character' has no member 'lowercase'\n            new_string.append(char.lowercase)\n\
    \                              ~~~~ ^~~~~~~~~\n/tmp/tmporq68kgq.swift:9:36: error:\
    \ value of type 'Character' has no member 'uppercase'\n            new_string.append(char.uppercase)\n\
    \                              ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: {\
    \ $0 + String($1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpxt7_idbh.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: { $0 + String($1) })\n            ^   \
    \ ~~~~~~~~~\n                 \n/tmp/tmpxt7_idbh.swift:6:23: error: value of type\
    \ 'String.Element' (aka 'Character') has no member 'lowercase'\n            return\
    \ $0.lowercase\n                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped =\
    \ \"\"\n    for char in string.characters {\n        if char.isUppercase {\n \
    \           flipped.append(char.lowercase)\n        } else {\n            flipped.append(char.uppercase)\n\
    \        }\n    }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnpqdp4jr.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnpqdp4jr.swift:7:33:\
    \ error: value of type 'Character' has no member 'lowercase'\n            flipped.append(char.lowercase)\n\
    \                           ~~~~ ^~~~~~~~~\n/tmp/tmpnpqdp4jr.swift:9:33: error:\
    \ value of type 'Character' has no member 'uppercase'\n            flipped.append(char.uppercase)\n\
    \                           ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return String(string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp0vy9wurr.swift:6:23: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'lowercase'\n            return $0.lowercase\n  \
    \                 ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n\
    \        } else {\n            result.append(char.uppercased())\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var new_string\
    \ = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n\
    \            new_string.append(char.lowercase)\n        } else {\n           \
    \ new_string.append(char.uppercase)\n        }\n    }\n    return new_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmporq68kgq.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmporq68kgq.swift:7:36:\
    \ error: value of type 'Character' has no member 'lowercase'\n            new_string.append(char.lowercase)\n\
    \                              ~~~~ ^~~~~~~~~\n/tmp/tmporq68kgq.swift:9:36: error:\
    \ value of type 'Character' has no member 'uppercase'\n            new_string.append(char.uppercase)\n\
    \                              ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n\
    \        } else {\n            result.append(char.uppercased())\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return String(string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercaseString\n    \
    \    } else {\n            return $0.uppercaseString\n        }\n    })\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6wrexn2b.swift:6:23: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'lowercaseString'\n            return $0.lowercaseString\n\
    \                   ~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for character in string.characters {\n        if character.isUppercase\
    \ {\n            flipped_string.append(character.lowercase)\n        } else {\n\
    \            flipped_string.append(character.uppercase)\n        }\n    }\n  \
    \  return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpv2makypv.swift:5:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in string.characters {\n            \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpv2makypv.swift:7:45: error: value of type 'Character' has no member\
    \ 'lowercase'\n            flipped_string.append(character.lowercase)\n      \
    \                            ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpv2makypv.swift:9:45:\
    \ error: value of type 'Character' has no member 'uppercase'\n            flipped_string.append(character.uppercase)\n\
    \                                  ~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    let flipped =\
    \ string.characters.map {\n        if $0.isUppercase {\n            return $0.lowercase\n\
    \        } else {\n            return $0.uppercase\n        }\n    }\n    return\
    \ String(flipped)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmphxxdpp4m.swift:6:23: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'lowercase'\n            return $0.lowercase\n  \
    \                 ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped =\
    \ \"\"\n    for char in string.characters {\n        if char.isUppercase {\n \
    \           flipped.append(char.lowercase)\n        } else {\n            flipped.append(char.uppercase)\n\
    \        }\n    }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnpqdp4jr.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnpqdp4jr.swift:7:33:\
    \ error: value of type 'Character' has no member 'lowercase'\n            flipped.append(char.lowercase)\n\
    \                           ~~~~ ^~~~~~~~~\n/tmp/tmpnpqdp4jr.swift:9:33: error:\
    \ value of type 'Character' has no member 'uppercase'\n            flipped.append(char.uppercase)\n\
    \                           ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped =\
    \ \"\"\n    for char in string.characters {\n        if char.isUppercase {\n \
    \           flipped.append(char.lowercase)\n        } else {\n            flipped.append(char.uppercase)\n\
    \        }\n    }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnpqdp4jr.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnpqdp4jr.swift:7:33:\
    \ error: value of type 'Character' has no member 'lowercase'\n            flipped.append(char.lowercase)\n\
    \                           ~~~~ ^~~~~~~~~\n/tmp/tmpnpqdp4jr.swift:9:33: error:\
    \ value of type 'Character' has no member 'uppercase'\n            flipped.append(char.uppercase)\n\
    \                           ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase() {\n            return $0.lowercase()\n      \
    \  } else {\n            return $0.uppercase()\n        }\n    }.reduce(\"\",\
    \ combine: { $0 + String($1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpgu91b_42.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: { $0 + String($1) })\n            ^   \
    \ ~~~~~~~~~\n                 \n/tmp/tmpgu91b_42.swift:5:15: error: cannot call\
    \ value of non-function type 'Bool'\n        if $0.isUppercase() {\n         \
    \     ^          ~~\n                         \n"
  stdout: ''
  timestamp: 1659978899
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return String(string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercaseString\n    \
    \    } else {\n            return $0.uppercaseString\n        }\n    })\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6wrexn2b.swift:6:23: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'lowercaseString'\n            return $0.lowercaseString\n\
    \                   ~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map({\n\
    \        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }).reduce(\"\", combine:\
    \ { $0 + String($1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp87zvg5pt.swift:10:14: error: extraneous argument label 'combine:'\
    \ in call\n    }).reduce(\"\", combine: { $0 + String($1) })\n             ^ \
    \   ~~~~~~~~~\n                  \n/tmp/tmp87zvg5pt.swift:6:23: error: value of\
    \ type 'String.Element' (aka 'Character') has no member 'lowercase'\n        \
    \    return $0.lowercase\n                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string.characters {\n        if char.isUppercase {\n \
    \           result.append(char.lowercase)\n        } else {\n            result.append(char.uppercase)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp531s9yd4.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp531s9yd4.swift:7:32:\
    \ error: value of type 'Character' has no member 'lowercase'\n            result.append(char.lowercase)\n\
    \                          ~~~~ ^~~~~~~~~\n/tmp/tmp531s9yd4.swift:9:32: error:\
    \ value of type 'Character' has no member 'uppercase'\n            result.append(char.uppercase)\n\
    \                          ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: {\
    \ $0 + String($1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpxt7_idbh.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: { $0 + String($1) })\n            ^   \
    \ ~~~~~~~~~\n                 \n/tmp/tmpxt7_idbh.swift:6:23: error: value of type\
    \ 'String.Element' (aka 'Character') has no member 'lowercase'\n            return\
    \ $0.lowercase\n                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for character in string.characters {\n        if character.isUppercase()\
    \ {\n            flipped_string.append(character.lowercase())\n        } else\
    \ {\n            flipped_string.append(character.uppercase())\n        }\n   \
    \ }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpu4izxmwv.swift:5:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in string.characters {\n            \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpu4izxmwv.swift:6:22: error: cannot call value of non-function type\
    \ 'Bool'\n        if character.isUppercase() {\n                     ^       \
    \   ~~\n                                \n/tmp/tmpu4izxmwv.swift:7:45: error:\
    \ value of type 'Character' has no member 'lowercase'\n            flipped_string.append(character.lowercase())\n\
    \                                  ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpu4izxmwv.swift:9:45:\
    \ error: value of type 'Character' has no member 'uppercase'\n            flipped_string.append(character.uppercase())\n\
    \                                  ~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped =\
    \ \"\"\n    for char in string.characters {\n        if char.isUppercase {\n \
    \           flipped.append(char.lowercase)\n        } else {\n            flipped.append(char.uppercase)\n\
    \        }\n    }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnpqdp4jr.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnpqdp4jr.swift:7:33:\
    \ error: value of type 'Character' has no member 'lowercase'\n            flipped.append(char.lowercase)\n\
    \                           ~~~~ ^~~~~~~~~\n/tmp/tmpnpqdp4jr.swift:9:33: error:\
    \ value of type 'Character' has no member 'uppercase'\n            flipped.append(char.uppercase)\n\
    \                           ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n\
    \        } else {\n            result.append(char.uppercased())\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for character in string.characters {\n        if character.isUppercase\
    \ {\n            flipped_string.append(character.lowercase)\n        } else {\n\
    \            flipped_string.append(character.uppercase)\n        }\n    }\n  \
    \  return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpv2makypv.swift:5:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in string.characters {\n            \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpv2makypv.swift:7:45: error: value of type 'Character' has no member\
    \ 'lowercase'\n            flipped_string.append(character.lowercase)\n      \
    \                            ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpv2makypv.swift:9:45:\
    \ error: value of type 'Character' has no member 'uppercase'\n            flipped_string.append(character.uppercase)\n\
    \                                  ~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var new_string\
    \ = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n\
    \            new_string.append(char.lowercase)\n        } else {\n           \
    \ new_string.append(char.uppercase)\n        }\n    }\n    return new_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmporq68kgq.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmporq68kgq.swift:7:36:\
    \ error: value of type 'Character' has no member 'lowercase'\n            new_string.append(char.lowercase)\n\
    \                              ~~~~ ^~~~~~~~~\n/tmp/tmporq68kgq.swift:9:36: error:\
    \ value of type 'Character' has no member 'uppercase'\n            new_string.append(char.uppercase)\n\
    \                              ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped =\
    \ \"\"\n    for character in string.characters {\n        if character.isUppercase\
    \ {\n            flipped.append(character.lowercase)\n        } else {\n     \
    \       flipped.append(character.uppercase)\n        }\n    }\n    return flipped\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpxmdokjud.swift:5:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in string.characters {\n            \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpxmdokjud.swift:7:38: error: value of type 'Character' has no member\
    \ 'lowercase'\n            flipped.append(character.lowercase)\n             \
    \              ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpxmdokjud.swift:9:38: error: value\
    \ of type 'Character' has no member 'uppercase'\n            flipped.append(character.uppercase)\n\
    \                           ~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase() {\n            return $0.lowercase()\n      \
    \  } else {\n            return $0.uppercase()\n        }\n    }.reduce(\"\",\
    \ combine: { $0 + String($1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpgu91b_42.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: { $0 + String($1) })\n            ^   \
    \ ~~~~~~~~~\n                 \n/tmp/tmpgu91b_42.swift:5:15: error: cannot call\
    \ value of non-function type 'Bool'\n        if $0.isUppercase() {\n         \
    \     ^          ~~\n                         \n"
  stdout: ''
  timestamp: 1659978899
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped =\
    \ \"\"\n    for char in string.characters {\n        if char.isUppercase {\n \
    \           flipped.append(char.lowercase)\n        } else {\n            flipped.append(char.uppercase)\n\
    \        }\n    }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnpqdp4jr.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnpqdp4jr.swift:7:33:\
    \ error: value of type 'Character' has no member 'lowercase'\n            flipped.append(char.lowercase)\n\
    \                           ~~~~ ^~~~~~~~~\n/tmp/tmpnpqdp4jr.swift:9:33: error:\
    \ value of type 'Character' has no member 'uppercase'\n            flipped.append(char.uppercase)\n\
    \                           ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: {\
    \ $0 + String($1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpxt7_idbh.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: { $0 + String($1) })\n            ^   \
    \ ~~~~~~~~~\n                 \n/tmp/tmpxt7_idbh.swift:6:23: error: value of type\
    \ 'String.Element' (aka 'Character') has no member 'lowercase'\n            return\
    \ $0.lowercase\n                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return String(string.characters.map\
    \ {\n        if $0.isUppercase() {\n            return $0.lowercase()\n      \
    \  } else {\n            return $0.uppercase()\n        }\n    })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpb4y2e7bt.swift:5:15: error: cannot call value of non-function type\
    \ 'Bool'\n        if $0.isUppercase() {\n              ^          ~~\n       \
    \                  \n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for character in string.characters {\n        if character.isUppercase\
    \ {\n            flipped_string.append(character.lowercase)\n        } else {\n\
    \            flipped_string.append(character.uppercase)\n        }\n    }\n  \
    \  return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpv2makypv.swift:5:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in string.characters {\n            \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpv2makypv.swift:7:45: error: value of type 'Character' has no member\
    \ 'lowercase'\n            flipped_string.append(character.lowercase)\n      \
    \                            ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpv2makypv.swift:9:45:\
    \ error: value of type 'Character' has no member 'uppercase'\n            flipped_string.append(character.uppercase)\n\
    \                                  ~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string.characters {\n        if char.isUppercase {\n \
    \           result.append(char.lowercase)\n        } else {\n            result.append(char.uppercase)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp531s9yd4.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp531s9yd4.swift:7:32:\
    \ error: value of type 'Character' has no member 'lowercase'\n            result.append(char.lowercase)\n\
    \                          ~~~~ ^~~~~~~~~\n/tmp/tmp531s9yd4.swift:9:32: error:\
    \ value of type 'Character' has no member 'uppercase'\n            result.append(char.uppercase)\n\
    \                          ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string.characters {\n        if char.isUppercase {\n \
    \           result.append(char.lowercase)\n        } else {\n            result.append(char.uppercase)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp531s9yd4.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp531s9yd4.swift:7:32:\
    \ error: value of type 'Character' has no member 'lowercase'\n            result.append(char.lowercase)\n\
    \                          ~~~~ ^~~~~~~~~\n/tmp/tmp531s9yd4.swift:9:32: error:\
    \ value of type 'Character' has no member 'uppercase'\n            result.append(char.uppercase)\n\
    \                          ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n\
    \        } else {\n            result.append(char.uppercased())\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: {\
    \ $0 + String($1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpxt7_idbh.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: { $0 + String($1) })\n            ^   \
    \ ~~~~~~~~~\n                 \n/tmp/tmpxt7_idbh.swift:6:23: error: value of type\
    \ 'String.Element' (aka 'Character') has no member 'lowercase'\n            return\
    \ $0.lowercase\n                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var new_string\
    \ = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n\
    \            new_string.append(char.lowercase)\n        } else {\n           \
    \ new_string.append(char.uppercase)\n        }\n    }\n    return new_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmporq68kgq.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmporq68kgq.swift:7:36:\
    \ error: value of type 'Character' has no member 'lowercase'\n            new_string.append(char.lowercase)\n\
    \                              ~~~~ ^~~~~~~~~\n/tmp/tmporq68kgq.swift:9:36: error:\
    \ value of type 'Character' has no member 'uppercase'\n            new_string.append(char.uppercase)\n\
    \                              ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: {\
    \ $0 + String($1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpxt7_idbh.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: { $0 + String($1) })\n            ^   \
    \ ~~~~~~~~~\n                 \n/tmp/tmpxt7_idbh.swift:6:23: error: value of type\
    \ 'String.Element' (aka 'Character') has no member 'lowercase'\n            return\
    \ $0.lowercase\n                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var new_string\
    \ = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n\
    \            new_string.append(char.lowercase)\n        } else {\n           \
    \ new_string.append(char.uppercase)\n        }\n    }\n    return new_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmporq68kgq.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmporq68kgq.swift:7:36:\
    \ error: value of type 'Character' has no member 'lowercase'\n            new_string.append(char.lowercase)\n\
    \                              ~~~~ ^~~~~~~~~\n/tmp/tmporq68kgq.swift:9:36: error:\
    \ value of type 'Character' has no member 'uppercase'\n            new_string.append(char.uppercase)\n\
    \                              ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isLowercase {\n          \
    \  flipped_string.append(char.uppercased())\n        } else {\n            flipped_string.append(char.lowercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped =\
    \ \"\"\n    for char in string.characters {\n        if char.isUppercase {\n \
    \           flipped.append(char.lowercase)\n        } else {\n            flipped.append(char.uppercase)\n\
    \        }\n    }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnpqdp4jr.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnpqdp4jr.swift:7:33:\
    \ error: value of type 'Character' has no member 'lowercase'\n            flipped.append(char.lowercase)\n\
    \                           ~~~~ ^~~~~~~~~\n/tmp/tmpnpqdp4jr.swift:9:33: error:\
    \ value of type 'Character' has no member 'uppercase'\n            flipped.append(char.uppercase)\n\
    \                           ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped =\
    \ \"\"\n    for c in string.characters {\n        if c.isUppercase {\n       \
    \     flipped.append(c.lowercase)\n        } else {\n            flipped.append(c.uppercase)\n\
    \        }\n    }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpbs_y8h42.swift:5:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in string.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpbs_y8h42.swift:7:30:\
    \ error: value of type 'Character' has no member 'lowercase'\n            flipped.append(c.lowercase)\n\
    \                           ~ ^~~~~~~~~\n/tmp/tmpbs_y8h42.swift:9:30: error: value\
    \ of type 'Character' has no member 'uppercase'\n            flipped.append(c.uppercase)\n\
    \                           ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for character in string.characters {\n        if character.isUppercase()\
    \ {\n            flipped_string.append(character.lowercase())\n        } else\
    \ {\n            flipped_string.append(character.uppercase())\n        }\n   \
    \ }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpu4izxmwv.swift:5:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in string.characters {\n            \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpu4izxmwv.swift:6:22: error: cannot call value of non-function type\
    \ 'Bool'\n        if character.isUppercase() {\n                     ^       \
    \   ~~\n                                \n/tmp/tmpu4izxmwv.swift:7:45: error:\
    \ value of type 'Character' has no member 'lowercase'\n            flipped_string.append(character.lowercase())\n\
    \                                  ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpu4izxmwv.swift:9:45:\
    \ error: value of type 'Character' has no member 'uppercase'\n            flipped_string.append(character.uppercase())\n\
    \                                  ~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n\
    \        } else {\n            result.append(char.uppercased())\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return String(string.characters.map\
    \ {\n        if $0.isUppercase() {\n            return $0.lowercase()\n      \
    \  } else {\n            return $0.uppercase()\n        }\n    })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpb4y2e7bt.swift:5:15: error: cannot call value of non-function type\
    \ 'Bool'\n        if $0.isUppercase() {\n              ^          ~~\n       \
    \                  \n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped =\
    \ \"\"\n    for char in string.characters {\n        if char.isUppercase {\n \
    \           flipped.append(char.lowercase)\n        } else {\n            flipped.append(char.uppercase)\n\
    \        }\n    }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnpqdp4jr.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnpqdp4jr.swift:7:33:\
    \ error: value of type 'Character' has no member 'lowercase'\n            flipped.append(char.lowercase)\n\
    \                           ~~~~ ^~~~~~~~~\n/tmp/tmpnpqdp4jr.swift:9:33: error:\
    \ value of type 'Character' has no member 'uppercase'\n            flipped.append(char.uppercase)\n\
    \                           ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return String(string.characters.map\
    \ {\n        if $0.isUppercase() {\n            return $0.lowercase()\n      \
    \  } else {\n            return $0.uppercase()\n        }\n    })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpb4y2e7bt.swift:5:15: error: cannot call value of non-function type\
    \ 'Bool'\n        if $0.isUppercase() {\n              ^          ~~\n       \
    \                  \n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n\
    \        } else {\n            result.append(char.uppercased())\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: {\
    \ $0 + String($1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpxt7_idbh.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: { $0 + String($1) })\n            ^   \
    \ ~~~~~~~~~\n                 \n/tmp/tmpxt7_idbh.swift:6:23: error: value of type\
    \ 'String.Element' (aka 'Character') has no member 'lowercase'\n            return\
    \ $0.lowercase\n                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var new_string\
    \ = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n\
    \            new_string.append(char.lowercase)\n        } else {\n           \
    \ new_string.append(char.uppercase)\n        }\n    }\n    return new_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmporq68kgq.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmporq68kgq.swift:7:36:\
    \ error: value of type 'Character' has no member 'lowercase'\n            new_string.append(char.lowercase)\n\
    \                              ~~~~ ^~~~~~~~~\n/tmp/tmporq68kgq.swift:9:36: error:\
    \ value of type 'Character' has no member 'uppercase'\n            new_string.append(char.uppercase)\n\
    \                              ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped =\
    \ \"\"\n    for char in string.characters {\n        if char.isUppercase {\n \
    \           flipped.append(char.lowercase)\n        } else {\n            flipped.append(char.uppercase)\n\
    \        }\n    }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnpqdp4jr.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnpqdp4jr.swift:7:33:\
    \ error: value of type 'Character' has no member 'lowercase'\n            flipped.append(char.lowercase)\n\
    \                           ~~~~ ^~~~~~~~~\n/tmp/tmpnpqdp4jr.swift:9:33: error:\
    \ value of type 'Character' has no member 'uppercase'\n            flipped.append(char.uppercase)\n\
    \                           ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var new_string\
    \ = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n\
    \            new_string.append(char.lowercase)\n        } else {\n           \
    \ new_string.append(char.uppercase)\n        }\n    }\n    return new_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmporq68kgq.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmporq68kgq.swift:7:36:\
    \ error: value of type 'Character' has no member 'lowercase'\n            new_string.append(char.lowercase)\n\
    \                              ~~~~ ^~~~~~~~~\n/tmp/tmporq68kgq.swift:9:36: error:\
    \ value of type 'Character' has no member 'uppercase'\n            new_string.append(char.uppercase)\n\
    \                              ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for character in string.characters {\n        if character.isUppercase\
    \ {\n            flipped_string.append(character.lowercase)\n        } else {\n\
    \            flipped_string.append(character.uppercase)\n        }\n    }\n  \
    \  return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpv2makypv.swift:5:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in string.characters {\n            \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpv2makypv.swift:7:45: error: value of type 'Character' has no member\
    \ 'lowercase'\n            flipped_string.append(character.lowercase)\n      \
    \                            ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpv2makypv.swift:9:45:\
    \ error: value of type 'Character' has no member 'uppercase'\n            flipped_string.append(character.uppercase)\n\
    \                                  ~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var new_string\
    \ = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n\
    \            new_string.append(char.lowercase)\n        } else {\n           \
    \ new_string.append(char.uppercase)\n        }\n    }\n    return new_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmporq68kgq.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmporq68kgq.swift:7:36:\
    \ error: value of type 'Character' has no member 'lowercase'\n            new_string.append(char.lowercase)\n\
    \                              ~~~~ ^~~~~~~~~\n/tmp/tmporq68kgq.swift:9:36: error:\
    \ value of type 'Character' has no member 'uppercase'\n            new_string.append(char.uppercase)\n\
    \                              ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var new_string\
    \ = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n\
    \            new_string.append(char.lowercase)\n        } else {\n           \
    \ new_string.append(char.uppercase)\n        }\n    }\n    return new_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmporq68kgq.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmporq68kgq.swift:7:36:\
    \ error: value of type 'Character' has no member 'lowercase'\n            new_string.append(char.lowercase)\n\
    \                              ~~~~ ^~~~~~~~~\n/tmp/tmporq68kgq.swift:9:36: error:\
    \ value of type 'Character' has no member 'uppercase'\n            new_string.append(char.uppercase)\n\
    \                              ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped =\
    \ \"\"\n    for char in string.characters {\n        if char.isUppercase {\n \
    \           flipped.append(char.lowercase)\n        } else {\n            flipped.append(char.uppercase)\n\
    \        }\n    }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnpqdp4jr.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnpqdp4jr.swift:7:33:\
    \ error: value of type 'Character' has no member 'lowercase'\n            flipped.append(char.lowercase)\n\
    \                           ~~~~ ^~~~~~~~~\n/tmp/tmpnpqdp4jr.swift:9:33: error:\
    \ value of type 'Character' has no member 'uppercase'\n            flipped.append(char.uppercase)\n\
    \                           ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var new_string\
    \ = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n\
    \            new_string.append(char.lowercase)\n        } else {\n           \
    \ new_string.append(char.uppercase)\n        }\n    }\n    return new_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmporq68kgq.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmporq68kgq.swift:7:36:\
    \ error: value of type 'Character' has no member 'lowercase'\n            new_string.append(char.lowercase)\n\
    \                              ~~~~ ^~~~~~~~~\n/tmp/tmporq68kgq.swift:9:36: error:\
    \ value of type 'Character' has no member 'uppercase'\n            new_string.append(char.uppercase)\n\
    \                              ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase() {\n            return $0.lowercase()\n      \
    \  } else {\n            return $0.uppercase()\n        }\n    }.reduce(\"\",\
    \ combine: { $0 + String($1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpgu91b_42.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: { $0 + String($1) })\n            ^   \
    \ ~~~~~~~~~\n                 \n/tmp/tmpgu91b_42.swift:5:15: error: cannot call\
    \ value of non-function type 'Bool'\n        if $0.isUppercase() {\n         \
    \     ^          ~~\n                         \n"
  stdout: ''
  timestamp: 1659978899
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: {\
    \ $0 + String($1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpxt7_idbh.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: { $0 + String($1) })\n            ^   \
    \ ~~~~~~~~~\n                 \n/tmp/tmpxt7_idbh.swift:6:23: error: value of type\
    \ 'String.Element' (aka 'Character') has no member 'lowercase'\n            return\
    \ $0.lowercase\n                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped =\
    \ \"\"\n    for char in string.characters {\n        if char.isUppercase {\n \
    \           flipped.append(char.lowercase)\n        } else {\n            flipped.append(char.uppercase)\n\
    \        }\n    }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnpqdp4jr.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnpqdp4jr.swift:7:33:\
    \ error: value of type 'Character' has no member 'lowercase'\n            flipped.append(char.lowercase)\n\
    \                           ~~~~ ^~~~~~~~~\n/tmp/tmpnpqdp4jr.swift:9:33: error:\
    \ value of type 'Character' has no member 'uppercase'\n            flipped.append(char.uppercase)\n\
    \                           ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n\
    \        } else {\n            result.append(char.uppercased())\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n\
    \        } else {\n            result.append(char.uppercased())\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercaseString\n    \
    \    } else {\n            return $0.uppercaseString\n        }\n    }.joinWithSeparator(\"\
    \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(flip_case(string: \"\") == \"\
    \")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpqvdtbp4v.swift:10:7: error: value of type 'Array<_>' has no member\
    \ 'joinWithSeparator'\n    }.joinWithSeparator(\"\")\n~~~~~ ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqvdtbp4v.swift:6:23: error: value of type 'String.Element' (aka 'Character')\
    \ has no member 'lowercaseString'\n            return $0.lowercaseString\n   \
    \                ~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.joinWithSeparator(\"\"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp39810x57.swift:10:7: error: value of type 'Array<_>' has no member\
    \ 'joinWithSeparator'\n    }.joinWithSeparator(\"\")\n~~~~~ ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmp39810x57.swift:6:23: error: value of type 'String.Element' (aka 'Character')\
    \ has no member 'lowercase'\n            return $0.lowercase\n               \
    \    ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped =\
    \ \"\"\n    for char in string.characters {\n        if char.isUppercase {\n \
    \           flipped.append(char.lowercase)\n        } else {\n            flipped.append(char.uppercase)\n\
    \        }\n    }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnpqdp4jr.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnpqdp4jr.swift:7:33:\
    \ error: value of type 'Character' has no member 'lowercase'\n            flipped.append(char.lowercase)\n\
    \                           ~~~~ ^~~~~~~~~\n/tmp/tmpnpqdp4jr.swift:9:33: error:\
    \ value of type 'Character' has no member 'uppercase'\n            flipped.append(char.uppercase)\n\
    \                           ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n\
    \        } else {\n            result.append(char.uppercased())\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase() {\n            return $0.lowercase()\n      \
    \  } else {\n            return $0.uppercase()\n        }\n    }.reduce(\"\",\
    \ combine: { $0 + String($1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpgu91b_42.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: { $0 + String($1) })\n            ^   \
    \ ~~~~~~~~~\n                 \n/tmp/tmpgu91b_42.swift:5:15: error: cannot call\
    \ value of non-function type 'Bool'\n        if $0.isUppercase() {\n         \
    \     ^          ~~\n                         \n"
  stdout: ''
  timestamp: 1659978899
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: {\
    \ $0 + String($1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpxt7_idbh.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: { $0 + String($1) })\n            ^   \
    \ ~~~~~~~~~\n                 \n/tmp/tmpxt7_idbh.swift:6:23: error: value of type\
    \ 'String.Element' (aka 'Character') has no member 'lowercase'\n            return\
    \ $0.lowercase\n                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isLowercase {\n            return $0.uppercase\n        } else\
    \ {\n            return $0.lowercase\n        }\n    }.reduce(\"\", combine: {\
    \ $0 + String($1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpcgti03qa.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: { $0 + String($1) })\n            ^   \
    \ ~~~~~~~~~\n                 \n/tmp/tmpcgti03qa.swift:6:23: error: value of type\
    \ 'String.Element' (aka 'Character') has no member 'uppercase'\n            return\
    \ $0.uppercase\n                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: {\
    \ $0 + String($1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpxt7_idbh.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: { $0 + String($1) })\n            ^   \
    \ ~~~~~~~~~\n                 \n/tmp/tmpxt7_idbh.swift:6:23: error: value of type\
    \ 'String.Element' (aka 'Character') has no member 'lowercase'\n            return\
    \ $0.lowercase\n                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string.characters {\n        if char.isUppercase {\n \
    \           result.append(char.lowercase)\n        } else {\n            result.append(char.uppercase)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp531s9yd4.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp531s9yd4.swift:7:32:\
    \ error: value of type 'Character' has no member 'lowercase'\n            result.append(char.lowercase)\n\
    \                          ~~~~ ^~~~~~~~~\n/tmp/tmp531s9yd4.swift:9:32: error:\
    \ value of type 'Character' has no member 'uppercase'\n            result.append(char.uppercase)\n\
    \                          ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: {\
    \ $0 + String($1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpxt7_idbh.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: { $0 + String($1) })\n            ^   \
    \ ~~~~~~~~~\n                 \n/tmp/tmpxt7_idbh.swift:6:23: error: value of type\
    \ 'String.Element' (aka 'Character') has no member 'lowercase'\n            return\
    \ $0.lowercase\n                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string.characters {\n        if char.isUppercase {\n \
    \           result.append(char.lowercase)\n        } else {\n            result.append(char.uppercase)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp531s9yd4.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp531s9yd4.swift:7:32:\
    \ error: value of type 'Character' has no member 'lowercase'\n            result.append(char.lowercase)\n\
    \                          ~~~~ ^~~~~~~~~\n/tmp/tmp531s9yd4.swift:9:32: error:\
    \ value of type 'Character' has no member 'uppercase'\n            result.append(char.uppercase)\n\
    \                          ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string.characters {\n        if char.isUppercase {\n \
    \           result.append(char.lowercase)\n        } else {\n            result.append(char.uppercase)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp531s9yd4.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp531s9yd4.swift:7:32:\
    \ error: value of type 'Character' has no member 'lowercase'\n            result.append(char.lowercase)\n\
    \                          ~~~~ ^~~~~~~~~\n/tmp/tmp531s9yd4.swift:9:32: error:\
    \ value of type 'Character' has no member 'uppercase'\n            result.append(char.uppercase)\n\
    \                          ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var new_string\
    \ = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n\
    \            new_string.append(char.lowercase)\n        } else {\n           \
    \ new_string.append(char.uppercase)\n        }\n    }\n    return new_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmporq68kgq.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmporq68kgq.swift:7:36:\
    \ error: value of type 'Character' has no member 'lowercase'\n            new_string.append(char.lowercase)\n\
    \                              ~~~~ ^~~~~~~~~\n/tmp/tmporq68kgq.swift:9:36: error:\
    \ value of type 'Character' has no member 'uppercase'\n            new_string.append(char.uppercase)\n\
    \                              ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped =\
    \ \"\"\n    for char in string.characters {\n        if char.isUppercase {\n \
    \           flipped.append(char.lowercase)\n        } else {\n            flipped.append(char.uppercase)\n\
    \        }\n    }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnpqdp4jr.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnpqdp4jr.swift:7:33:\
    \ error: value of type 'Character' has no member 'lowercase'\n            flipped.append(char.lowercase)\n\
    \                           ~~~~ ^~~~~~~~~\n/tmp/tmpnpqdp4jr.swift:9:33: error:\
    \ value of type 'Character' has no member 'uppercase'\n            flipped.append(char.uppercase)\n\
    \                           ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string.characters {\n        if char.isUppercase {\n \
    \           result.append(char.lowercase)\n        } else {\n            result.append(char.uppercase)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp531s9yd4.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp531s9yd4.swift:7:32:\
    \ error: value of type 'Character' has no member 'lowercase'\n            result.append(char.lowercase)\n\
    \                          ~~~~ ^~~~~~~~~\n/tmp/tmp531s9yd4.swift:9:32: error:\
    \ value of type 'Character' has no member 'uppercase'\n            result.append(char.uppercase)\n\
    \                          ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped =\
    \ \"\"\n    for char in string.characters {\n        if char.isUppercase {\n \
    \           flipped.append(char.lowercase)\n        } else {\n            flipped.append(char.uppercase)\n\
    \        }\n    }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnpqdp4jr.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnpqdp4jr.swift:7:33:\
    \ error: value of type 'Character' has no member 'lowercase'\n            flipped.append(char.lowercase)\n\
    \                           ~~~~ ^~~~~~~~~\n/tmp/tmpnpqdp4jr.swift:9:33: error:\
    \ value of type 'Character' has no member 'uppercase'\n            flipped.append(char.uppercase)\n\
    \                           ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped =\
    \ \"\"\n    for char in string.characters {\n        if char.isUppercase {\n \
    \           flipped.append(char.lowercase)\n        } else {\n            flipped.append(char.uppercase)\n\
    \        }\n    }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnpqdp4jr.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnpqdp4jr.swift:7:33:\
    \ error: value of type 'Character' has no member 'lowercase'\n            flipped.append(char.lowercase)\n\
    \                           ~~~~ ^~~~~~~~~\n/tmp/tmpnpqdp4jr.swift:9:33: error:\
    \ value of type 'Character' has no member 'uppercase'\n            flipped.append(char.uppercase)\n\
    \                           ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: {\
    \ $0 + String($1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpxt7_idbh.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: { $0 + String($1) })\n            ^   \
    \ ~~~~~~~~~\n                 \n/tmp/tmpxt7_idbh.swift:6:23: error: value of type\
    \ 'String.Element' (aka 'Character') has no member 'lowercase'\n            return\
    \ $0.lowercase\n                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var new_string\
    \ = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n\
    \            new_string.append(char.lowercase)\n        } else {\n           \
    \ new_string.append(char.uppercase)\n        }\n    }\n    return new_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmporq68kgq.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmporq68kgq.swift:7:36:\
    \ error: value of type 'Character' has no member 'lowercase'\n            new_string.append(char.lowercase)\n\
    \                              ~~~~ ^~~~~~~~~\n/tmp/tmporq68kgq.swift:9:36: error:\
    \ value of type 'Character' has no member 'uppercase'\n            new_string.append(char.uppercase)\n\
    \                              ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string.characters {\n        if char.isUppercase {\n \
    \           result.append(char.lowercase)\n        } else {\n            result.append(char.uppercase)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp531s9yd4.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp531s9yd4.swift:7:32:\
    \ error: value of type 'Character' has no member 'lowercase'\n            result.append(char.lowercase)\n\
    \                          ~~~~ ^~~~~~~~~\n/tmp/tmp531s9yd4.swift:9:32: error:\
    \ value of type 'Character' has no member 'uppercase'\n            result.append(char.uppercase)\n\
    \                          ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped =\
    \ \"\"\n    for char in string.characters {\n        if char.isUppercase {\n \
    \           flipped.append(char.lowercase)\n        } else {\n            flipped.append(char.uppercase)\n\
    \        }\n    }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnpqdp4jr.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnpqdp4jr.swift:7:33:\
    \ error: value of type 'Character' has no member 'lowercase'\n            flipped.append(char.lowercase)\n\
    \                           ~~~~ ^~~~~~~~~\n/tmp/tmpnpqdp4jr.swift:9:33: error:\
    \ value of type 'Character' has no member 'uppercase'\n            flipped.append(char.uppercase)\n\
    \                           ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var new_string\
    \ = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n\
    \            new_string.append(char.lowercase)\n        } else {\n           \
    \ new_string.append(char.uppercase)\n        }\n    }\n    return new_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmporq68kgq.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmporq68kgq.swift:7:36:\
    \ error: value of type 'Character' has no member 'lowercase'\n            new_string.append(char.lowercase)\n\
    \                              ~~~~ ^~~~~~~~~\n/tmp/tmporq68kgq.swift:9:36: error:\
    \ value of type 'Character' has no member 'uppercase'\n            new_string.append(char.uppercase)\n\
    \                              ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk4u9jbb.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n      \
    \           \n/tmp/tmpsk4u9jbb.swift:6:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'lowercase'\n            return $0.lowercase\n\
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for character in string.characters {\n        if character.isUppercase\
    \ {\n            flipped_string.append(character.lowercase)\n        } else {\n\
    \            flipped_string.append(character.uppercase)\n        }\n    }\n  \
    \  return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpv2makypv.swift:5:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in string.characters {\n            \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpv2makypv.swift:7:45: error: value of type 'Character' has no member\
    \ 'lowercase'\n            flipped_string.append(character.lowercase)\n      \
    \                            ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpv2makypv.swift:9:45:\
    \ error: value of type 'Character' has no member 'uppercase'\n            flipped_string.append(character.uppercase)\n\
    \                                  ~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for character in string.characters {\n        if character.isUppercase\
    \ {\n            flipped_string.append(character.lowercase)\n        } else {\n\
    \            flipped_string.append(character.uppercase)\n        }\n    }\n  \
    \  return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpv2makypv.swift:5:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in string.characters {\n            \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpv2makypv.swift:7:45: error: value of type 'Character' has no member\
    \ 'lowercase'\n            flipped_string.append(character.lowercase)\n      \
    \                            ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpv2makypv.swift:9:45:\
    \ error: value of type 'Character' has no member 'uppercase'\n            flipped_string.append(character.uppercase)\n\
    \                                  ~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped_string\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped_string.append(char.lowercased())\n        } else {\n            flipped_string.append(char.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var new_string\
    \ = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n\
    \            new_string.append(char.lowercase)\n        } else {\n           \
    \ new_string.append(char.uppercase)\n        }\n    }\n    return new_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmporq68kgq.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmporq68kgq.swift:7:36:\
    \ error: value of type 'Character' has no member 'lowercase'\n            new_string.append(char.lowercase)\n\
    \                              ~~~~ ^~~~~~~~~\n/tmp/tmporq68kgq.swift:9:36: error:\
    \ value of type 'Character' has no member 'uppercase'\n            new_string.append(char.uppercase)\n\
    \                              ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercaseString\n    \
    \    } else {\n            return $0.uppercaseString\n        }\n    }.joinWithSeparator(\"\
    \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(flip_case(string: \"\") == \"\
    \")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpqvdtbp4v.swift:10:7: error: value of type 'Array<_>' has no member\
    \ 'joinWithSeparator'\n    }.joinWithSeparator(\"\")\n~~~~~ ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqvdtbp4v.swift:6:23: error: value of type 'String.Element' (aka 'Character')\
    \ has no member 'lowercaseString'\n            return $0.lowercaseString\n   \
    \                ~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: {\
    \ $0 + String($1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpxt7_idbh.swift:10:13: error: extraneous argument label 'combine:'\
    \ in call\n    }.reduce(\"\", combine: { $0 + String($1) })\n            ^   \
    \ ~~~~~~~~~\n                 \n/tmp/tmpxt7_idbh.swift:6:23: error: value of type\
    \ 'String.Element' (aka 'Character') has no member 'lowercase'\n            return\
    \ $0.lowercase\n                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped =\
    \ \"\"\n    for character in string.characters {\n        if character.isUppercase\
    \ {\n            flipped.append(character.lowercase)\n        } else {\n     \
    \       flipped.append(character.uppercase)\n        }\n    }\n    return flipped\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpxmdokjud.swift:5:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in string.characters {\n            \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpxmdokjud.swift:7:38: error: value of type 'Character' has no member\
    \ 'lowercase'\n            flipped.append(character.lowercase)\n             \
    \              ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpxmdokjud.swift:9:38: error: value\
    \ of type 'Character' has no member 'uppercase'\n            flipped.append(character.uppercase)\n\
    \                           ~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n\
    \        } else {\n            result.append(char.uppercased())\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var flipped =\
    \ \"\"\n    for char in string.characters {\n        if char.isUppercase {\n \
    \           flipped.append(char.lowercase)\n        } else {\n            flipped.append(char.uppercase)\n\
    \        }\n    }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnpqdp4jr.swift:5:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnpqdp4jr.swift:7:33:\
    \ error: value of type 'Character' has no member 'lowercase'\n            flipped.append(char.lowercase)\n\
    \                           ~~~~ ^~~~~~~~~\n/tmp/tmpnpqdp4jr.swift:9:33: error:\
    \ value of type 'Character' has no member 'uppercase'\n            flipped.append(char.uppercase)\n\
    \                           ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978897
