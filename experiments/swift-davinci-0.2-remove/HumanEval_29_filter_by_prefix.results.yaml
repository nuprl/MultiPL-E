language: swift
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    var result: [String] = []\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            result.append(string)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    var filtered: [String] = []\n    for string in strings {\n        if\
    \ string.hasPrefix(prefix) {\n            filtered.append(string)\n        }\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    var filtered: [String] = []\n    for string in strings {\n        if\
    \ string.hasPrefix(prefix) {\n            filtered.append(string)\n        }\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    var result: [String] = []\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            result.append(string)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { (s: String) -> Bool in\n        return s.hasPrefix(prefix)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    var filtered: [String] = []\n    for string in strings {\n        if\
    \ string.hasPrefix(prefix) {\n            filtered.append(string)\n        }\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    var result: [String] = []\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            result.append(string)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter({ $0.hasPrefix(prefix) })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { (s: String) -> Bool in\n        return s.hasPrefix(prefix)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    var result: [String] = []\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            result.append(string)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter({ (str: String) -> Bool in\n        return str.hasPrefix(prefix)\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    var result: [String] = []\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            result.append(string)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    var result: [String] = []\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            result.append(string)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter({ (string: String) -> Bool in\n        return string.hasPrefix(prefix)\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    var result: [String] = []\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            result.append(string)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter({$0.hasPrefix(prefix)})\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter({ (str: String) -> Bool in\n        return str.hasPrefix(prefix)\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    var result = [String]()\n    for s in strings {\n        if s.hasPrefix(prefix)\
    \ {\n            result.append(s)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    var result: [String] = []\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            result.append(string)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    var filtered = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { (string: String) -> Bool in\n        return string.hasPrefix(prefix)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter({ (str: String) -> Bool in\n        return str.hasPrefix(prefix)\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter({ (s: String) -> Bool in\n        return s.hasPrefix(prefix)\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter({ (s: String) -> Bool in\n        return s.hasPrefix(prefix)\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter {\n        $0.hasPrefix(prefix)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter({ (str: String) -> Bool in\n        return str.hasPrefix(prefix)\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that start with a\
    \ given prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
    \ {\n    return strings.filter { $0.hasPrefix(prefix) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
