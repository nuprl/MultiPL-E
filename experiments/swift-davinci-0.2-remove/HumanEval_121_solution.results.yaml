language: swift
name: HumanEval_121_solution
results:
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 0 && $1.element\
    \ % 2 != 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (i, n) in lst.enumerated() {\n        if\
    \ i % 2 == 0 && n % 2 != 0 {\n            sum += n\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solution(lst: [5, 8, 7,\
    \ 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (i, num) in lst.enumerated() {\n        if\
    \ i % 2 == 0 && num % 2 != 0 {\n            sum += num\n        }\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solution(lst: [5,\
    \ 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for i in 0..<lst.count {\n        if i % 2 ==\
    \ 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solution(lst: [5, 8, 7,\
    \ 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for i in 0..<lst.count {\n        if i % 2 ==\
    \ 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solution(lst: [5, 8, 7,\
    \ 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    return lst.enumerated().filter { $0.offset % 2 == 0 && $0.element\
    \ % 2 != 0 }.map { $0.element }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 0 && $1.element\
    \ % 2 != 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    return lst.enumerated().filter { $0.offset % 2 == 0 && $0.element\
    \ % 2 != 0 }.map { $0.element }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: -4
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 {\n            sum += value\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solution(lst: [5, 8, 7,\
    \ 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpw4rgp17o/tmpw4rgp17o.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d20628c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d2031fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d2031f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d2031e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw4rgp17o                        0x000056069ca9275c <unavailable> + 5980

    5    libc.so.6                          0x00002b0d20814460 __libc_start_main +
    245

    6    tmpw4rgp17o                        0x000056069ca92219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 0 && $1.element\
    \ % 2 != 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 0 && $1.element\
    \ % 2 != 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    return lst.enumerated().filter({ $0.offset % 2 == 0 }).filter({\
    \ $0.element % 2 != 0 }).map({ $0.element }).reduce(0, +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: -4
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 {\n            sum += element\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solution(lst: [5,\
    \ 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpjrp1zlbq/tmpjrp1zlbq.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67a1b3ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67a1835b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67a1835988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67a18347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjrp1zlbq                        0x000055a8a565e75c <unavailable> + 5980

    5    libc.so.6                          0x00002b67a1d2a460 __libc_start_main +
    245

    6    tmpjrp1zlbq                        0x000055a8a565e219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    return lst.enumerated().filter { $0.offset % 2 == 0 && $0.element\
    \ % 2 != 0 }.map { $0.element }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for i in 0..<lst.count {\n        if i % 2 ==\
    \ 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solution(lst: [5, 8, 7,\
    \ 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, item) in lst.enumerated() {\n   \
    \     if index % 2 == 0 && item % 2 != 0 {\n            sum += item\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var result = 0\n    for (index, value) in lst.enumerated() {\n\
    \        if index % 2 == 0 && value % 2 != 0 {\n            result += value\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for i in 0..<lst.count {\n        if i % 2 ==\
    \ 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solution(lst: [5, 8, 7,\
    \ 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    return lst.enumerated().filter { $0.offset % 2 == 0 && $0.element\
    \ % 2 != 0 }.map { $0.element }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for i in 0..<lst.count {\n        if i % 2 ==\
    \ 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solution(lst: [5, 8, 7,\
    \ 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    return lst.enumerated().filter { $0.offset % 2 == 0 && $0.element\
    \ % 2 != 0 }.map { $0.element }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, item) in lst.enumerated() {\n   \
    \     if index % 2 == 0 && item % 2 != 0 {\n            sum += item\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (i, num) in lst.enumerated() {\n        if\
    \ i % 2 == 0 && num % 2 != 0 {\n            sum += num\n        }\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solution(lst: [5,\
    \ 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, item) in lst.enumerated() {\n   \
    \     if index % 2 == 0 && item % 2 != 0 {\n            sum += item\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    return lst.enumerated().filter { $0.offset % 2 == 0 && $0.element\
    \ % 2 != 0 }.map { $0.element }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 0 && $1.element\
    \ % 2 != 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for i in 0..<lst.count {\n        if i % 2 ==\
    \ 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solution(lst: [5, 8, 7,\
    \ 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, item) in lst.enumerated() {\n   \
    \     if index % 2 == 0 && item % 2 != 0 {\n            sum += item\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var result = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            result += element\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, item) in lst.enumerated() {\n   \
    \     if index % 2 == 0 && item % 2 != 0 {\n            sum += item\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 0 && $1.element\
    \ % 2 != 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for i in 0..<lst.count {\n        if i % 2 ==\
    \ 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solution(lst: [5, 8, 7,\
    \ 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    return lst.enumerated().filter({ $0.offset % 2 == 0 && $0.element\
    \ % 2 != 0 }).map({ $0.element }).reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (i, num) in lst.enumerated() {\n        if\
    \ i % 2 == 0 && num % 2 != 0 {\n            sum += num\n        }\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solution(lst: [5,\
    \ 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (i, v) in lst.enumerated() {\n        if\
    \ i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solution(lst: [5, 8, 7,\
    \ 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    return lst.enumerated().filter { $0.offset % 2 == 0 && $0.element\
    \ % 2 != 0 }.map { $0.element }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (i, n) in lst.enumerated() {\n        if\
    \ i % 2 == 0 && n % 2 != 0 {\n            sum += n\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solution(lst: [5, 8, 7,\
    \ 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    return lst.enumerated().filter { $0.offset % 2 == 0 && $0.element\
    \ % 2 != 0 }.map { $0.element }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for i in 0..<lst.count {\n        if i % 2 ==\
    \ 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solution(lst: [5, 8, 7,\
    \ 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    return lst.enumerated().filter({ $0.offset % 2 == 0 }).filter({\
    \ $0.element % 2 != 0 }).map({ $0.element }).reduce(0, +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for i in 0..<lst.count {\n        if i % 2 ==\
    \ 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solution(lst: [5, 8, 7,\
    \ 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    return lst.enumerated().filter({ $0.offset % 2 == 0 && $0.element\
    \ % 2 != 0 }).map({ $0.element }).reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    return lst.enumerated().filter { $0.offset % 2 == 0 && $0.element\
    \ % 2 != 0 }.map { $0.element }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (i, v) in lst.enumerated() {\n        if\
    \ i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solution(lst: [5, 8, 7,\
    \ 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, item) in lst.enumerated() {\n   \
    \     if index % 2 == 0 && item % 2 != 0 {\n            sum += item\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 0 && $1.element\
    \ % 2 != 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\nfunc solution(lst: [Int])\
    \ -> Int {\n    return lst.enumerated().filter { $0.offset % 2 == 0 && $0.element\
    \ % 2 != 0 }.map { $0.element }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013346
