language: swift
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for letter\
    \ in word {\n            if !vowels.contains(letter) {\n                count\
    \ += 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmph0jtuc36.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = s.components(separatedBy: \" \")\n    var result = [String]()\n    for word\
    \ in words {\n        if word.count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5ek3jm2n.swift:9:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for char in\
    \ word {\n            if !vowels.contains(char) {\n                count += 1\n\
    \            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1hqy6av1.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for c in word {\n   \
    \         if !vowels.contains(c) {\n                count += 1\n            }\n\
    \        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpwtqb6sls/tmpwtqb6sls.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab097cfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0979f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0979f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0979f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwtqb6sls                        0x000055d2385d4f1b <unavailable> + 7963

    5    libc.so.6                          0x00002ab097eea460 __libc_start_main +
    245

    6    tmpwtqb6sls                        0x000055d2385d4609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp2mu1j_3x/tmp2mu1j_3x.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b52caec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b529a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b529a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b529a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2mu1j_3x                        0x000055ec1c294f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b7b52e9a460 __libc_start_main +
    245

    6    tmp2mu1j_3x                        0x000055ec1c294609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var consonants = 0\n        for\
    \ char in word {\n            if !vowels.contains(char) {\n                consonants\
    \ += 1\n            }\n        }\n        if consonants == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqs__sp4x.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let\
    \ words = s.split(separator: \" \")\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(String(char))\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmplqt6eje8/tmplqt6eje8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae34ea62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae34e759b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae34e759988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae34e7587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplqt6eje8                        0x0000560c491e6f2b <unavailable> + 7979

    5    libc.so.6                          0x00002ae34ec4e460 __libc_start_main +
    245

    6    tmplqt6eje8                        0x0000560c491e6619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(String(letter))\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpokztv177.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = s.components(separatedBy: \" \")\n    var result = [String]()\n    for word\
    \ in words {\n        if word.count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5ek3jm2n.swift:9:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = s.split(separator: \" \")\n    var consonants = [\"b\", \"c\", \"d\", \"f\"\
    , \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"z\"]\n    var result = [String]()\n    for word\
    \ in words {\n        var count = 0\n        for letter in word {\n          \
    \  if consonants.contains(String(letter)) {\n                count += 1\n    \
    \        }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpurfgfu77/tmpurfgfu77.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab53b02ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab53ad25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab53ad25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab53ad247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurfgfu77                        0x000055e3f8d5fb69 <unavailable> + 7017

    5    libc.so.6                          0x00002ab53b21a460 __libc_start_main +
    245

    6    tmpurfgfu77                        0x000055e3f8d5f619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var counter = 0\n        for\
    \ letter in word {\n            if !vowels.contains(letter) {\n              \
    \  counter += 1\n            }\n        }\n        if counter == n {\n       \
    \     result.append(word)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxycp2495.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var words = s.split(separator: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(String(char))\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeq9lx_1k/tmpeq9lx_1k.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76ac382c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76ac079b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76ac079988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76ac0787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeq9lx_1k                        0x000055edeaad1f2b <unavailable> + 7979

    5    libc.so.6                          0x00002b76ac56e460 __libc_start_main +
    245

    6    tmpeq9lx_1k                        0x000055edeaad1619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = [String]()\n    var word = \"\"\n    for char in s {\n        if char == \"\
    \ \" {\n            if word.count == n {\n                words.append(word)\n\
    \            }\n            word = \"\"\n        } else {\n            word +=\
    \ String(char)\n        }\n    }\n    if word.count == n {\n        words.append(word)\n\
    \    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpvldgiztf/tmpvldgiztf.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64adc36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64ad92db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64ad92d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64ad92c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvldgiztf                        0x000055e2164e3814 <unavailable> + 6164

    5    libc.so.6                          0x00002b64ade22460 __libc_start_main +
    245

    6    tmpvldgiztf                        0x000055e2164e3419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let\
    \ words = s.lowercased().components(separatedBy: \" \")\n    for word in words\
    \ {\n        var count = 0\n        for letter in word {\n            if !vowels.contains(String(letter))\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpl_27tazj.swift:11:32: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.lowercased().components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = s.components(separatedBy: \" \")\n    var result = [String]()\n    for word\
    \ in words {\n        if word.count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5ek3jm2n.swift:9:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = s.components(separatedBy: \" \")\n    var result = [String]()\n    for word\
    \ in words {\n        if word.count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5ek3jm2n.swift:9:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpqhras0dq/tmpqhras0dq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b756cb8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b756c883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b756c883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b756c8827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqhras0dq                        0x000056061b980f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b756cd78460 __libc_start_main +
    245

    6    tmpqhras0dq                        0x000056061b980609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for letter\
    \ in word {\n            if !vowels.contains(letter) {\n                count\
    \ += 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmph0jtuc36.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmprjxfor_k.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    let words = s.split(separator: \" \")\n    for word in words\
    \ {\n        var consonants = 0\n        for letter in word {\n            if\
    \ letter != \"a\" && letter != \"e\" && letter != \"i\" && letter != \"o\" &&\
    \ letter != \"u\" {\n                consonants += 1\n            }\n        }\n\
    \        if consonants == n {\n            result.append(String(word))\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpuo6womdy/tmpuo6womdy.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bc1f72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bc1c69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bc1c69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bc1c687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuo6womdy                        0x000056025989becb <unavailable> + 7883

    5    libc.so.6                          0x00002b6bc215e460 __libc_start_main +
    245

    6    tmpuo6womdy                        0x000056025989b5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp2mu1j_3x/tmp2mu1j_3x.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b52caec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b529a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b529a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b529a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2mu1j_3x                        0x000055ec1c294f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b7b52e9a460 __libc_start_main +
    245

    6    tmp2mu1j_3x                        0x000055ec1c294609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpqhras0dq/tmpqhras0dq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b756cb8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b756c883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b756c883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b756c8827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqhras0dq                        0x000056061b980f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b756cd78460 __libc_start_main +
    245

    6    tmpqhras0dq                        0x000056061b980609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmprjxfor_k.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = [String]()\n    var word = \"\"\n    for c in s {\n        if c == \" \" {\n\
    \            if word.count == n {\n                words.append(word)\n      \
    \      }\n            word = \"\"\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    if word.count == n {\n        words.append(word)\n    }\n\
    \    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpi2db1lw_/tmpi2db1lw_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3099ecdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3099bc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3099bc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3099bc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2db1lw_                        0x000055664114a814 <unavailable> + 6164

    5    libc.so.6                          0x00002b309a0b9460 __libc_start_main +
    245

    6    tmpi2db1lw_                        0x000055664114a419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpqhras0dq/tmpqhras0dq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b756cb8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b756c883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b756c883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b756c8827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqhras0dq                        0x000056061b980f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b756cd78460 __libc_start_main +
    245

    6    tmpqhras0dq                        0x000056061b980609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result: [String]\
    \ = []\n    for word in words {\n        var count = 0\n        for letter in\
    \ word {\n            if !vowels.contains(letter) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpdq3u0951/tmpdq3u0951.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abcc0c05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abcc08fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abcc08fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abcc08fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdq3u0951                        0x0000557952102ebb <unavailable> + 7867

    5    libc.so.6                          0x00002abcc0df1460 __libc_start_main +
    245

    6    tmpdq3u0951                        0x00005579521025a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ s.split(separator: \" \").filter { $0.count == n }.map { String($0) }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp3kw3d0qy/tmp3kw3d0qy.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfafa4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaf743b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaf743988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaf7427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3kw3d0qy                        0x0000560c50cc0904 <unavailable> + 6404

    5    libc.so.6                          0x00002abfafc38460 __libc_start_main +
    245

    6    tmp3kw3d0qy                        0x0000560c50cc0509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = [String]()\n    var word = \"\"\n    for c in s {\n        if c == \" \" {\n\
    \            if word.count == n {\n                words.append(word)\n      \
    \      }\n            word = \"\"\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    if word.count == n {\n        words.append(word)\n    }\n\
    \    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpi2db1lw_/tmpi2db1lw_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3099ecdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3099bc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3099bc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3099bc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2db1lw_                        0x000055664114a814 <unavailable> + 6164

    5    libc.so.6                          0x00002b309a0b9460 __libc_start_main +
    245

    6    tmpi2db1lw_                        0x000055664114a419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = [String]()\n    var word = \"\"\n    for c in s {\n        if c == \" \" {\n\
    \            if word.count == n {\n                words.append(word)\n      \
    \      }\n            word = \"\"\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    if word.count == n {\n        words.append(word)\n    }\n\
    \    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpi2db1lw_/tmpi2db1lw_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3099ecdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3099bc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3099bc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3099bc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2db1lw_                        0x000055664114a814 <unavailable> + 6164

    5    libc.so.6                          0x00002b309a0b9460 __libc_start_main +
    245

    6    tmpi2db1lw_                        0x000055664114a419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp2mu1j_3x/tmp2mu1j_3x.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b52caec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b529a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b529a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b529a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2mu1j_3x                        0x000055ec1c294f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b7b52e9a460 __libc_start_main +
    245

    6    tmp2mu1j_3x                        0x000055ec1c294609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = s.components(separatedBy: \" \")\n    var result = [String]()\n    for word\
    \ in words {\n        var consonants = 0\n        for char in word {\n       \
    \     if char != \"a\" && char != \"e\" && char != \"i\" && char != \"o\" && char\
    \ != \"u\" {\n                consonants += 1\n            }\n        }\n    \
    \    if consonants == n {\n            result.append(word)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpw5d1u2iy.swift:9:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmprjxfor_k.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = [String]()\n    var word = \"\"\n    var consonants = 0\n    for c in s {\n\
    \        if c == \" \" {\n            if consonants == n {\n                words.append(word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += String(c)\n            if !isVowel(c) {\n      \
    \          consonants += 1\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words.append(word)\n    }\n    return words\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8i4xvu07.swift:21:17: error: cannot find 'isVowel' in scope\n \
    \           if !isVowel(c) {\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmprjxfor_k.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.split(separator: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(String(letter))\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpsgiajprm/tmpsgiajprm.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae27d162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae27ce59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae27ce59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae27ce587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsgiajprm                        0x00005644ff3e3f2b <unavailable> + 7979

    5    libc.so.6                          0x00002ae27d34e460 __libc_start_main +
    245

    6    tmpsgiajprm                        0x00005644ff3e3619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    for word in words {\n        var consonants = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                consonants\
    \ += 1\n            }\n        }\n        if consonants == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0ok2rq90.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.split(separator: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(String(letter))\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpsgiajprm/tmpsgiajprm.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae27d162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae27ce59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae27ce59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae27ce587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsgiajprm                        0x00005644ff3e3f2b <unavailable> + 7979

    5    libc.so.6                          0x00002ae27d34e460 __libc_start_main +
    245

    6    tmpsgiajprm                        0x00005644ff3e3619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let\
    \ words = s.split(separator: \" \")\n    for word in words {\n        var consonants\
    \ = 0\n        for char in word {\n            if !vowels.contains(String(char))\
    \ {\n                consonants += 1\n            }\n        }\n        if consonants\
    \ == n {\n            result.append(String(word))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpari19b32/tmpari19b32.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b160a315c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b160a00cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b160a00c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b160a00b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpari19b32                        0x000056489fc2cf2b <unavailable> + 7979

    5    libc.so.6                          0x00002b160a501460 __libc_start_main +
    245

    6    tmpari19b32                        0x000056489fc2c619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.split(separator: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(String(letter))\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpsgiajprm/tmpsgiajprm.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae27d162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae27ce59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae27ce59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae27ce587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsgiajprm                        0x00005644ff3e3f2b <unavailable> + 7979

    5    libc.so.6                          0x00002ae27d34e460 __libc_start_main +
    245

    6    tmpsgiajprm                        0x00005644ff3e3619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.split(separator: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(String(letter))\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpsgiajprm/tmpsgiajprm.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae27d162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae27ce59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae27ce59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae27ce587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsgiajprm                        0x00005644ff3e3f2b <unavailable> + 7979

    5    libc.so.6                          0x00002ae27d34e460 __libc_start_main +
    245

    6    tmpsgiajprm                        0x00005644ff3e3619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for letter\
    \ in word {\n            if !vowels.contains(letter) {\n                count\
    \ += 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmph0jtuc36.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ s.components(separatedBy: \" \").filter { $0.filter { !$0.isVowel }.count ==\
    \ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwa28k1z5.swift:9:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.filter\
    \ { !$0.isVowel }.count == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for letter\
    \ in word {\n            if !vowels.contains(letter) {\n                count\
    \ += 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmph0jtuc36.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = [String]()\n    var word = \"\"\n    for c in s {\n        if c == \" \" {\n\
    \            if word.count == n {\n                words.append(word)\n      \
    \      }\n            word = \"\"\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    if word.count == n {\n        words.append(word)\n    }\n\
    \    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpi2db1lw_/tmpi2db1lw_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3099ecdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3099bc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3099bc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3099bc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2db1lw_                        0x000055664114a814 <unavailable> + 6164

    5    libc.so.6                          0x00002b309a0b9460 __libc_start_main +
    245

    6    tmpi2db1lw_                        0x000055664114a419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp2mu1j_3x/tmp2mu1j_3x.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b52caec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b529a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b529a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b529a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2mu1j_3x                        0x000055ec1c294f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b7b52e9a460 __libc_start_main +
    245

    6    tmp2mu1j_3x                        0x000055ec1c294609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = [String]()\n    var word = \"\"\n    for c in s {\n        if c == \" \" {\n\
    \            if word.count == n {\n                words.append(word)\n      \
    \      }\n            word = \"\"\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    if word.count == n {\n        words.append(word)\n    }\n\
    \    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpi2db1lw_/tmpi2db1lw_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3099ecdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3099bc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3099bc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3099bc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2db1lw_                        0x000055664114a814 <unavailable> + 6164

    5    libc.so.6                          0x00002b309a0b9460 __libc_start_main +
    245

    6    tmpi2db1lw_                        0x000055664114a419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result:\
    \ [String] = []\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqekz40jy.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.split(separator: \"\
    \ \")\n    var result: [String] = []\n    for word in words {\n        var counter\
    \ = 0\n        for letter in word {\n            if !vowels.contains(String(letter))\
    \ {\n                counter += 1\n            }\n        }\n        if counter\
    \ == n {\n            result.append(String(word))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp0j6ch4tj/tmp0j6ch4tj.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b441d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b43ecdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b43ecd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b43ecc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0j6ch4tj                        0x000055a5091f0ecb <unavailable> + 7883

    5    libc.so.6                          0x00002b8b443c2460 __libc_start_main +
    245

    6    tmp0j6ch4tj                        0x000055a5091f05b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for c in word {\n   \
    \         if !vowels.contains(c) {\n                count += 1\n            }\n\
    \        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpwtqb6sls/tmpwtqb6sls.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab097cfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0979f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0979f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0979f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwtqb6sls                        0x000055d2385d4f1b <unavailable> + 7963

    5    libc.so.6                          0x00002ab097eea460 __libc_start_main +
    245

    6    tmpwtqb6sls                        0x000055d2385d4609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for c in word {\n   \
    \         if !vowels.contains(c) {\n                count += 1\n            }\n\
    \        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpwtqb6sls/tmpwtqb6sls.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab097cfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0979f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0979f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0979f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwtqb6sls                        0x000055d2385d4f1b <unavailable> + 7963

    5    libc.so.6                          0x00002ab097eea460 __libc_start_main +
    245

    6    tmpwtqb6sls                        0x000055d2385d4609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for letter\
    \ in word {\n            if !vowels.contains(letter) {\n                count\
    \ += 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmph0jtuc36.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmprjxfor_k.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    return words.filter\
    \ {\n        $0.filter { !vowels.contains($0) }.count == n\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8ho179aa.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmprjxfor_k.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = s.split(separator: \" \")\n    var result = [String]()\n    for word in words\
    \ {\n        if count_consonants(word: String(word)) == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpn6_8nztp.swift:12:12: error: cannot find 'count_consonants' in\
    \ scope\n        if count_consonants(word: String(word)) == n {\n           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmprjxfor_k.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpqhras0dq/tmpqhras0dq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b756cb8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b756c883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b756c883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b756c8827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqhras0dq                        0x000056061b980f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b756cd78460 __libc_start_main +
    245

    6    tmpqhras0dq                        0x000056061b980609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var consonants = 0\n        for\
    \ char in word {\n            if !vowels.contains(char) {\n                consonants\
    \ += 1\n            }\n        }\n        if consonants == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqs__sp4x.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    for word in words {\n        var consonants = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                consonants\
    \ += 1\n            }\n        }\n        if consonants == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0ok2rq90.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for c in word {\n   \
    \         if !vowels.contains(c) {\n                count += 1\n            }\n\
    \        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpwtqb6sls/tmpwtqb6sls.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab097cfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0979f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0979f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0979f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwtqb6sls                        0x000055d2385d4f1b <unavailable> + 7963

    5    libc.so.6                          0x00002ab097eea460 __libc_start_main +
    245

    6    tmpwtqb6sls                        0x000055d2385d4609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp2mu1j_3x/tmp2mu1j_3x.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b52caec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b529a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b529a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b529a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2mu1j_3x                        0x000055ec1c294f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b7b52e9a460 __libc_start_main +
    245

    6    tmp2mu1j_3x                        0x000055ec1c294609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpqhras0dq/tmpqhras0dq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b756cb8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b756c883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b756c883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b756c8827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqhras0dq                        0x000056061b980f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b756cd78460 __libc_start_main +
    245

    6    tmpqhras0dq                        0x000056061b980609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result: [String]\
    \ = []\n    for word in words {\n        var count = 0\n        for char in word\
    \ {\n            if !vowels.contains(char) {\n                count += 1\n   \
    \         }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpnyi4ma5j/tmpnyi4ma5j.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff05417c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff0510eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff0510e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff0510d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnyi4ma5j                        0x000055f9e03d9ebb <unavailable> + 7867

    5    libc.so.6                          0x00002aff05603460 __libc_start_main +
    245

    6    tmpnyi4ma5j                        0x000055f9e03d95a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.split(separator: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(String(letter))\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpsgiajprm/tmpsgiajprm.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae27d162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae27ce59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae27ce59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae27ce587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsgiajprm                        0x00005644ff3e3f2b <unavailable> + 7979

    5    libc.so.6                          0x00002ae27d34e460 __libc_start_main +
    245

    6    tmpsgiajprm                        0x00005644ff3e3619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    return words.filter\
    \ { word in\n        word.filter { !vowels.contains($0) }.count == n\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpiuuji9s_.swift:11:18: error: cannot convert return expression of\
    \ type '[String.SubSequence]' (aka 'Array<Substring>') to return type '[String]'\n\
    \    return words.filter { word in\n                 ^\n/tmp/tmpiuuji9s_.swift:11:18:\
    \ note: arguments to generic parameter 'Element' ('String.SubSequence' (aka 'Substring')\
    \ and 'String') are expected to be equal\n    return words.filter { word in\n\
    \                 ^\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp2mu1j_3x/tmp2mu1j_3x.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b52caec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b529a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b529a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b529a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2mu1j_3x                        0x000055ec1c294f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b7b52e9a460 __libc_start_main +
    245

    6    tmp2mu1j_3x                        0x000055ec1c294609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    let vowels = \"aeiou\"\n    let words = s.split(separator:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for char in\
    \ word {\n            if !vowels.contains(char) {\n                count += 1\n\
    \            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp0vpofdoy/tmp0vpofdoy.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d54925c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d5461cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d5461c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d5461b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0vpofdoy                        0x000055f843e36f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b5d54b11460 __libc_start_main +
    245

    6    tmp0vpofdoy                        0x000055f843e36609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp2mu1j_3x/tmp2mu1j_3x.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b52caec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b529a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b529a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b529a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2mu1j_3x                        0x000055ec1c294f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b7b52e9a460 __libc_start_main +
    245

    6    tmp2mu1j_3x                        0x000055ec1c294609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpqhras0dq/tmpqhras0dq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b756cb8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b756c883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b756c883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b756c8827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqhras0dq                        0x000056061b980f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b756cd78460 __libc_start_main +
    245

    6    tmpqhras0dq                        0x000056061b980609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ s.components(separatedBy: \" \").filter { $0.filter { !$0.isVowel }.count ==\
    \ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwa28k1z5.swift:9:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.filter\
    \ { !$0.isVowel }.count == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp2mu1j_3x/tmp2mu1j_3x.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b52caec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b529a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b529a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b529a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2mu1j_3x                        0x000055ec1c294f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b7b52e9a460 __libc_start_main +
    245

    6    tmp2mu1j_3x                        0x000055ec1c294609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = Set([\"a\", \"e\", \"i\", \"o\", \"u\"])\n    let words = s.split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(String(letter))\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp5rr1d3gy/tmp5rr1d3gy.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1aaa673c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1aaa36ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1aaa36a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1aaa3697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rr1d3gy                        0x000055aeb3645fbb <unavailable> + 8123

    5    libc.so.6                          0x00002b1aaa85f460 __libc_start_main +
    245

    6    tmp5rr1d3gy                        0x000055aeb36456a9 <unavailable> + 5801

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.split(separator: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(String(letter))\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpsgiajprm/tmpsgiajprm.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae27d162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae27ce59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae27ce59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae27ce587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsgiajprm                        0x00005644ff3e3f2b <unavailable> + 7979

    5    libc.so.6                          0x00002ae27d34e460 __libc_start_main +
    245

    6    tmpsgiajprm                        0x00005644ff3e3619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ s.components(separatedBy: \" \").filter { $0.filter { !$0.isVowel }.count ==\
    \ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwa28k1z5.swift:9:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.filter\
    \ { !$0.isVowel }.count == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = [String]()\n    var word = \"\"\n    for c in s {\n        if c == \" \" {\n\
    \            if word.count == n {\n                words.append(word)\n      \
    \      }\n            word = \"\"\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    if word.count == n {\n        words.append(word)\n    }\n\
    \    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpi2db1lw_/tmpi2db1lw_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3099ecdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3099bc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3099bc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3099bc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2db1lw_                        0x000055664114a814 <unavailable> + 6164

    5    libc.so.6                          0x00002b309a0b9460 __libc_start_main +
    245

    6    tmpi2db1lw_                        0x000055664114a419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.split(separator: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(String(char))\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmppoo8p5yp/tmppoo8p5yp.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af677ecbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af677bc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af677bc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af677bc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppoo8p5yp                        0x000056443ce77f2b <unavailable> + 7979

    5    libc.so.6                          0x00002af6780b7460 __libc_start_main +
    245

    6    tmppoo8p5yp                        0x000056443ce77619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    let words = s.components(separatedBy: \" \")\n    for word\
    \ in words {\n        if word.count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmprtweupgw.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for letter\
    \ in word {\n            if !vowels.contains(letter) {\n                count\
    \ += 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmph0jtuc36.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmprjxfor_k.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result:\
    \ [String] = []\n    let words = s.components(separatedBy: \" \")\n    for word\
    \ in words {\n        if word.count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwbeg5g5s.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ s.split(separator: \" \").filter { word in\n        word.filter { $0.isConsonant\
    \ }.count == n\n    }.map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp16ft0d3z.swift:10:26: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isConsonant'\n        word.filter { $0.isConsonant\
    \ }.count == n\n                      ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = [String]()\n    var word = \"\"\n    for c in s {\n        if c == \" \" {\n\
    \            if word.count == n {\n                words.append(word)\n      \
    \      }\n            word = \"\"\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    if word.count == n {\n        words.append(word)\n    }\n\
    \    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpi2db1lw_/tmpi2db1lw_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3099ecdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3099bc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3099bc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3099bc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2db1lw_                        0x000055664114a814 <unavailable> + 6164

    5    libc.so.6                          0x00002b309a0b9460 __libc_start_main +
    245

    6    tmpi2db1lw_                        0x000055664114a419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp2mu1j_3x/tmp2mu1j_3x.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b52caec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b529a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b529a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b529a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2mu1j_3x                        0x000055ec1c294f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b7b52e9a460 __libc_start_main +
    245

    6    tmp2mu1j_3x                        0x000055ec1c294609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpqhras0dq/tmpqhras0dq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b756cb8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b756c883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b756c883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b756c8827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqhras0dq                        0x000056061b980f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b756cd78460 __libc_start_main +
    245

    6    tmpqhras0dq                        0x000056061b980609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = [String]()\n    var word = \"\"\n    for c in s {\n        if c == \" \" {\n\
    \            if word.count == n {\n                words.append(word)\n      \
    \      }\n            word = \"\"\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    if word.count == n {\n        words.append(word)\n    }\n\
    \    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpi2db1lw_/tmpi2db1lw_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3099ecdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3099bc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3099bc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3099bc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2db1lw_                        0x000055664114a814 <unavailable> + 6164

    5    libc.so.6                          0x00002b309a0b9460 __libc_start_main +
    245

    6    tmpi2db1lw_                        0x000055664114a419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = s.components(separatedBy: \" \")\n    var result = [String]()\n    for word\
    \ in words {\n        if count_consonants(word) == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2nx07_8t.swift:9:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = Set(\"aeiou\")\n    let words = s.components(separatedBy: \" \")\n    return\
    \ words.filter { word in\n        word.filter { !vowels.contains($0) }.count ==\
    \ n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpz6axfyuh.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = s.components(separatedBy: \" \")\n    var result = [String]()\n    for word\
    \ in words {\n        if word.count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5ek3jm2n.swift:9:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = [String]()\n    var word = \"\"\n    for c in s {\n        if c == \" \" {\n\
    \            if word.count == n {\n                words.append(word)\n      \
    \      }\n            word = \"\"\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    if word.count == n {\n        words.append(word)\n    }\n\
    \    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpi2db1lw_/tmpi2db1lw_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3099ecdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3099bc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3099bc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3099bc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2db1lw_                        0x000055664114a814 <unavailable> + 6164

    5    libc.so.6                          0x00002b309a0b9460 __libc_start_main +
    245

    6    tmpi2db1lw_                        0x000055664114a419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = s.components(separatedBy: \" \")\n    var result = [String]()\n    for word\
    \ in words {\n        if count_consonants(s: word) == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdjrtgioy.swift:9:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ s.split(separator: \" \").filter {\n        $0.filter {\n            !\"aeiou\"\
    .contains($0)\n        }.count == n\n    }.map { String($0) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpr1tscov6/tmpr1tscov6.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5bd6acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5bd3a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5bd3a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5bd3a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr1tscov6                        0x0000560d575d8eab <unavailable> + 7851

    5    libc.so.6                          0x00002ba5bd898460 __libc_start_main +
    245

    6    tmpr1tscov6                        0x0000560d575d8599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1660014242
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ s.split(separator: \" \").filter { $0.count == n }.map { String($0) }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp3kw3d0qy/tmp3kw3d0qy.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfafa4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaf743b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaf743988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaf7427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3kw3d0qy                        0x0000560c50cc0904 <unavailable> + 6404

    5    libc.so.6                          0x00002abfafc38460 __libc_start_main +
    245

    6    tmp3kw3d0qy                        0x0000560c50cc0509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = [String]()\n    var word = \"\"\n    for c in s {\n        if c == \" \" {\n\
    \            if word.count == n {\n                words.append(word)\n      \
    \      }\n            word = \"\"\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    if word.count == n {\n        words.append(word)\n    }\n\
    \    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpi2db1lw_/tmpi2db1lw_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3099ecdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3099bc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3099bc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3099bc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2db1lw_                        0x000055664114a814 <unavailable> + 6164

    5    libc.so.6                          0x00002b309a0b9460 __libc_start_main +
    245

    6    tmpi2db1lw_                        0x000055664114a419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = s.split(separator: \" \")\n    var result = [String]()\n    for word in words\
    \ {\n        var count = 0\n        for char in word {\n            if !isVowel(char:\
    \ char) {\n                count += 1\n            }\n        }\n        if count\
    \ == n {\n            result.append(String(word))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpja5gd10m.swift:14:17: error: cannot find 'isVowel' in scope\n \
    \           if !isVowel(char: char) {\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpqhras0dq/tmpqhras0dq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b756cb8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b756c883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b756c883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b756c8827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqhras0dq                        0x000056061b980f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b756cd78460 __libc_start_main +
    245

    6    tmpqhras0dq                        0x000056061b980609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpqhras0dq/tmpqhras0dq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b756cb8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b756c883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b756c883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b756c8827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqhras0dq                        0x000056061b980f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b756cd78460 __libc_start_main +
    245

    6    tmpqhras0dq                        0x000056061b980609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ s.split(separator: \" \").filter { $0.filter { !$0.isVowel }.count == n }.map\
    \ { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu7kk418s.swift:9:61: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isVowel'\n    return s.split(separator: \" \").filter\
    \ { $0.filter { !$0.isVowel }.count == n }.map { String($0) }\n              \
    \                                           ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var result = [String]()\n    var\
    \ word = \"\"\n    var consonants = 0\n    for c in s {\n        if c == \" \"\
    \ {\n            if consonants == n {\n                result.append(word)\n \
    \           }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word.append(c)\n            if !vowels.contains(String(c))\
    \ {\n                consonants += 1\n            }\n        }\n    }\n    if\
    \ consonants == n {\n        result.append(word)\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpnms7cuwh/tmpnms7cuwh.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002addc2221c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002addc1f18b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002addc1f18988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002addc1f177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnms7cuwh                        0x000055e104f4ad3b <unavailable> + 7483

    5    libc.so.6                          0x00002addc240d460 __libc_start_main +
    245

    6    tmpnms7cuwh                        0x000055e104f4a429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660014242
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpqhras0dq/tmpqhras0dq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b756cb8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b756c883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b756c883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b756c8827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqhras0dq                        0x000056061b980f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b756cd78460 __libc_start_main +
    245

    6    tmpqhras0dq                        0x000056061b980609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.split(separator: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        var consonants\
    \ = 0\n        for letter in word {\n            if !vowels.contains(String(letter))\
    \ {\n                consonants += 1\n            }\n        }\n        if consonants\
    \ == n {\n            result.append(String(word))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmph0vt9pnj/tmph0vt9pnj.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b54e6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b54b61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b54b61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b54b607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph0vt9pnj                        0x0000560718be6f2b <unavailable> + 7979

    5    libc.so.6                          0x00002b0b55056460 __libc_start_main +
    245

    6    tmph0vt9pnj                        0x0000560718be6619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014242
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result: [String]\
    \ = []\n    for word in words {\n        var count = 0\n        for letter in\
    \ word {\n            if !vowels.contains(letter) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpdq3u0951/tmpdq3u0951.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abcc0c05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abcc08fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abcc08fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abcc08fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdq3u0951                        0x0000557952102ebb <unavailable> + 7867

    5    libc.so.6                          0x00002abcc0df1460 __libc_start_main +
    245

    6    tmpdq3u0951                        0x00005579521025a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = [String]()\n    var word = \"\"\n    var consonants = 0\n    for c in s {\n\
    \        if c == \" \" {\n            if consonants == n {\n                words.append(word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += String(c)\n            if !isVowel(c) {\n      \
    \          consonants += 1\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words.append(word)\n    }\n    return words\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8i4xvu07.swift:21:17: error: cannot find 'isVowel' in scope\n \
    \           if !isVowel(c) {\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = s.components(separatedBy: \" \")\n    var result = [String]()\n    for word\
    \ in words {\n        if word.count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5ek3jm2n.swift:9:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for letter\
    \ in word {\n            if !vowels.contains(letter) {\n                count\
    \ += 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmph0jtuc36.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 0
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiouAEIOU\"\n    let words = s.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ s.split(separator: \" \").filter { $0.filter { !$0.isVowel }.count == n }.map\
    \ { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu7kk418s.swift:9:61: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isVowel'\n    return s.split(separator: \" \").filter\
    \ { $0.filter { !$0.isVowel }.count == n }.map { String($0) }\n              \
    \                                           ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = Set(\"aeiou\")\n    let words = s.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        let consonants = word.filter\
    \ { !vowels.contains($0) }\n        if consonants.count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpirh48i5r/tmpirh48i5r.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2082d21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2082a18b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2082a18988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2082a177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpirh48i5r                        0x00005628fcb2001b <unavailable> + 8219

    5    libc.so.6                          0x00002b2082f0d460 __libc_start_main +
    245

    6    tmpirh48i5r                        0x00005628fcb1f709 <unavailable> + 5897

    '
  stdout: ''
  timestamp: 1660014242
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp2mu1j_3x/tmp2mu1j_3x.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b52caec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b529a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b529a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b529a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2mu1j_3x                        0x000055ec1c294f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b7b52e9a460 __libc_start_main +
    245

    6    tmp2mu1j_3x                        0x000055ec1c294609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = [String]()\n    var word = \"\"\n    for c in s {\n        if c == \" \" {\n\
    \            if word.count == n {\n                words.append(word)\n      \
    \      }\n            word = \"\"\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    if word.count == n {\n        words.append(word)\n    }\n\
    \    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpi2db1lw_/tmpi2db1lw_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3099ecdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3099bc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3099bc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3099bc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2db1lw_                        0x000055664114a814 <unavailable> + 6164

    5    libc.so.6                          0x00002b309a0b9460 __libc_start_main +
    245

    6    tmpi2db1lw_                        0x000055664114a419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = [String]()\n    var word = \"\"\n    for char in s {\n        if char == \"\
    \ \" {\n            if word.count == n {\n                words.append(word)\n\
    \            }\n            word = \"\"\n        } else {\n            word +=\
    \ String(char)\n        }\n    }\n    if word.count == n {\n        words.append(word)\n\
    \    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpvldgiztf/tmpvldgiztf.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64adc36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64ad92db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64ad92d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64ad92c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvldgiztf                        0x000055e2164e3814 <unavailable> + 6164

    5    libc.so.6                          0x00002b64ade22460 __libc_start_main +
    245

    6    tmpvldgiztf                        0x000055e2164e3419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmprjxfor_k.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var consonants = 0\n        for letter in word\
    \ {\n            if !vowels.contains(letter) {\n                consonants +=\
    \ 1\n            }\n        }\n        if consonants == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpy7f3z520/tmpy7f3z520.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b190665dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1906354b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1906354988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19063537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy7f3z520                        0x000055a95283af1b <unavailable> + 7963

    5    libc.so.6                          0x00002b1906849460 __libc_start_main +
    245

    6    tmpy7f3z520                        0x000055a95283a609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014242
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp2mu1j_3x/tmp2mu1j_3x.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b52caec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b529a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b529a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b529a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2mu1j_3x                        0x000055ec1c294f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b7b52e9a460 __libc_start_main +
    245

    6    tmp2mu1j_3x                        0x000055ec1c294609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpqhras0dq/tmpqhras0dq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b756cb8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b756c883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b756c883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b756c8827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqhras0dq                        0x000056061b980f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b756cd78460 __libc_start_main +
    245

    6    tmpqhras0dq                        0x000056061b980609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    return words.filter\
    \ { word in\n        word.filter { char in\n            !vowels.contains(char)\n\
    \        }.count == n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmplv8grxqo.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = s.split(separator: \" \")\n    var result = [String]()\n    for word in words\
    \ {\n        if count_consonants(s: String(word)) == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7hmbbv4i.swift:12:12: error: cannot find 'count_consonants' in\
    \ scope\n        if count_consonants(s: String(word)) == n {\n           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n    let vowels = \"aeiou\"\n    let words = s.lowercased().split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if consonants.contains(letter)\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpw3ay9afa/tmpw3ay9afa.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a9fb7fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a9f876b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a9f876988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a9f8757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw3ay9afa                        0x000055b51f6ebba9 <unavailable> + 7081

    5    libc.so.6                          0x00002b9a9fd6b460 __libc_start_main +
    245

    6    tmpw3ay9afa                        0x000055b51f6eb659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1660014242
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result:\
    \ [String] = []\n    for word in words {\n        var count = 0\n        for letter\
    \ in word {\n            if !vowels.contains(letter) {\n                count\
    \ += 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpb0iv9oab.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(String(char))\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkbd42le2.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for letter\
    \ in word {\n            if !vowels.contains(letter) {\n                count\
    \ += 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmph0jtuc36.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = s.components(separatedBy: \" \")\n    var result = [String]()\n    for word\
    \ in words {\n        if word.count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5ek3jm2n.swift:9:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpqhras0dq/tmpqhras0dq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b756cb8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b756c883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b756c883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b756c8827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqhras0dq                        0x000056061b980f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b756cd78460 __libc_start_main +
    245

    6    tmpqhras0dq                        0x000056061b980609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    let vowels = \"aeiou\"\n    let words = s.split(separator:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for char in\
    \ word {\n            if !vowels.contains(char) {\n                count += 1\n\
    \            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp0vpofdoy/tmp0vpofdoy.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d54925c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d5461cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d5461c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d5461b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0vpofdoy                        0x000055f843e36f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b5d54b11460 __libc_start_main +
    245

    6    tmp0vpofdoy                        0x000055f843e36609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpqhras0dq/tmpqhras0dq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b756cb8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b756c883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b756c883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b756c8827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqhras0dq                        0x000056061b980f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b756cd78460 __libc_start_main +
    245

    6    tmpqhras0dq                        0x000056061b980609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = s.components(separatedBy: \" \")\n    var result = [String]()\n    for word\
    \ in words {\n        if word.count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5ek3jm2n.swift:9:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpqhras0dq/tmpqhras0dq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b756cb8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b756c883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b756c883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b756c8827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqhras0dq                        0x000056061b980f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b756cd78460 __libc_start_main +
    245

    6    tmpqhras0dq                        0x000056061b980609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = s.components(separatedBy: \" \")\n    var result = [String]()\n    for word\
    \ in words {\n        if word.count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5ek3jm2n.swift:9:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmprjxfor_k.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = s.components(separatedBy: \" \")\n    var result = [String]()\n    for word\
    \ in words {\n        if count_consonants(word) == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2nx07_8t.swift:9:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    for word\
    \ in words {\n        var count = 0\n        for letter in word {\n          \
    \  if consonants.contains(letter) {\n                count += 1\n            }\n\
    \        }\n        if count == n {\n            result.append(word)\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0yp9z364.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014242
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpqhras0dq/tmpqhras0dq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b756cb8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b756c883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b756c883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b756c8827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqhras0dq                        0x000056061b980f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b756cd78460 __libc_start_main +
    245

    6    tmpqhras0dq                        0x000056061b980609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for char in\
    \ word {\n            if !vowels.contains(char) {\n                count += 1\n\
    \            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1hqy6av1.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp2mu1j_3x/tmp2mu1j_3x.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b52caec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b529a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b529a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b529a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2mu1j_3x                        0x000055ec1c294f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b7b52e9a460 __libc_start_main +
    245

    6    tmp2mu1j_3x                        0x000055ec1c294609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result: [String] = []\n    for word in words {\n        var\
    \ count = 0\n        for letter in word {\n            if !vowels.contains(String(letter))\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpud0m6eg7.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014242
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    return words.filter\
    \ { word in\n        let consonants = word.filter { !vowels.contains($0) }\n \
    \       return consonants.count == n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmptprfkt0y.swift:11:18: error: cannot convert return expression of\
    \ type '[String.SubSequence]' (aka 'Array<Substring>') to return type '[String]'\n\
    \    return words.filter { word in\n                 ^\n/tmp/tmptprfkt0y.swift:11:18:\
    \ note: arguments to generic parameter 'Element' ('String.SubSequence' (aka 'Substring')\
    \ and 'String') are expected to be equal\n    return words.filter { word in\n\
    \                 ^\n"
  stdout: ''
  timestamp: 1660014242
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for char in\
    \ word {\n            if !vowels.contains(char) {\n                count += 1\n\
    \            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1hqy6av1.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmprjxfor_k.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = s.components(separatedBy: \" \")\n    var result: [String] = []\n    for word\
    \ in words {\n        var count = 0\n        for char in word {\n            if\
    \ char != \"a\" && char != \"e\" && char != \"i\" && char != \"o\" && char !=\
    \ \"u\" {\n                count += 1\n            }\n        }\n        if count\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpulfwtg9r.swift:9:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014242
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpqhras0dq/tmpqhras0dq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b756cb8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b756c883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b756c883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b756c8827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqhras0dq                        0x000056061b980f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b756cd78460 __libc_start_main +
    245

    6    tmpqhras0dq                        0x000056061b980609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmprjxfor_k.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result:\
    \ [String] = []\n    let words = s.split(separator: \" \")\n    for word in words\
    \ {\n        var count = 0\n        for char in word {\n            if char !=\
    \ \"a\" && char != \"e\" && char != \"i\" && char != \"o\" && char != \"u\" {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmphcxjlawa/tmphcxjlawa.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9dac114c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9dabe0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9dabe0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9dabe0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphcxjlawa                        0x0000560dee924e7b <unavailable> + 7803

    5    libc.so.6                          0x00002b9dac300460 __libc_start_main +
    245

    6    tmphcxjlawa                        0x0000560dee924569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1660014242
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpqhras0dq/tmpqhras0dq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b756cb8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b756c883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b756c883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b756c8827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqhras0dq                        0x000056061b980f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b756cd78460 __libc_start_main +
    245

    6    tmpqhras0dq                        0x000056061b980609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmprjxfor_k.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = [String]()\n    var word = \"\"\n    var consonants = 0\n    for c in s {\n\
    \        if c == \" \" {\n            if consonants == n {\n                words.append(word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += String(c)\n            if c != \"a\" && c != \"\
    e\" && c != \"i\" && c != \"o\" && c != \"u\" {\n                consonants +=\
    \ 1\n            }\n        }\n    }\n    if consonants == n {\n        words.append(word)\n\
    \    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp03kyb3jp/tmp03kyb3jp.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47d0266c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47cff5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47cff5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47cff5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp03kyb3jp                        0x000055a58b2c4cdb <unavailable> + 7387

    5    libc.so.6                          0x00002b47d0452460 __libc_start_main +
    245

    6    tmp03kyb3jp                        0x000055a58b2c43c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660014242
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result: [String]\
    \ = []\n    for word in words {\n        var consonants = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                consonants\
    \ += 1\n            }\n        }\n        if consonants == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpvmkuzznn/tmpvmkuzznn.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed25e9bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed25b92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed25b92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed25b917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvmkuzznn                        0x00005564244c4ebb <unavailable> + 7867

    5    libc.so.6                          0x00002aed26087460 __libc_start_main +
    245

    6    tmpvmkuzznn                        0x00005564244c45a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014242
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n    let vowels = \"aeiou\"\n    var words = [String]()\n\
    \    var word = \"\"\n    var count = 0\n    for c in s {\n        if c == \"\
    \ \" {\n            if count == n {\n                words.append(word)\n    \
    \        }\n            word = \"\"\n            count = 0\n        } else {\n\
    \            word += String(c)\n            if consonants.contains(c) {\n    \
    \            count += 1\n            } else if vowels.contains(c) {\n        \
    \        count -= 1\n            }\n        }\n    }\n    if count == n {\n  \
    \      words.append(word)\n    }\n    return words\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpwmdg1hj2/tmpwmdg1hj2.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0375d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0372c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0372c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0372c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwmdg1hj2                        0x000055acb49448a4 <unavailable> + 6308

    5    libc.so.6                          0x00002ad0377bd460 __libc_start_main +
    245

    6    tmpwmdg1hj2                        0x000055acb49444a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1660014242
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result:\
    \ [String] = []\n    let words = s.components(separatedBy: \" \")\n    for word\
    \ in words {\n        if word.count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwbeg5g5s.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    return words.filter\
    \ { word in\n        let consonants = word.filter { !vowels.contains($0) }\n \
    \       return consonants.count == n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdi0t8mbg.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014242
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(String(letter))\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpokztv177.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmprjxfor_k.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.split(separator: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(String(letter))\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpsgiajprm/tmpsgiajprm.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae27d162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae27ce59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae27ce59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae27ce587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsgiajprm                        0x00005644ff3e3f2b <unavailable> + 7979

    5    libc.so.6                          0x00002ae27d34e460 __libc_start_main +
    245

    6    tmpsgiajprm                        0x00005644ff3e3619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result:\
    \ [String] = []\n    let words = s.split(separator: \" \")\n    for word in words\
    \ {\n        if count_consonants(s: String(word)) == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdfnrilwf.swift:12:12: error: cannot find 'count_consonants' in\
    \ scope\n        if count_consonants(s: String(word)) == n {\n           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014242
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    var words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpizrqmi4f.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014242
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpqhras0dq/tmpqhras0dq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b756cb8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b756c883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b756c883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b756c8827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqhras0dq                        0x000056061b980f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b756cd78460 __libc_start_main +
    245

    6    tmpqhras0dq                        0x000056061b980609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ s.components(separatedBy: \" \").filter { $0.count == n }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp07sx1s46.swift:9:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.count\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014242
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmprjxfor_k.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for char in\
    \ word {\n            if vowels.contains(char) {\n                count += 1\n\
    \            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3xxa429z.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014242
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmprjxfor_k.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = [String]()\n    var word = \"\"\n    for c in s {\n        if c == \" \" {\n\
    \            if word.count == n {\n                words.append(word)\n      \
    \      }\n            word = \"\"\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    if word.count == n {\n        words.append(word)\n    }\n\
    \    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpi2db1lw_/tmpi2db1lw_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3099ecdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3099bc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3099bc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3099bc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2db1lw_                        0x000055664114a814 <unavailable> + 6164

    5    libc.so.6                          0x00002b309a0b9460 __libc_start_main +
    245

    6    tmpi2db1lw_                        0x000055664114a419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmprjxfor_k.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    return words.filter\
    \ { word in\n        word.filter { !vowels.contains($0) }.count == n\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpiuuji9s_.swift:11:18: error: cannot convert return expression of\
    \ type '[String.SubSequence]' (aka 'Array<Substring>') to return type '[String]'\n\
    \    return words.filter { word in\n                 ^\n/tmp/tmpiuuji9s_.swift:11:18:\
    \ note: arguments to generic parameter 'Element' ('String.SubSequence' (aka 'Substring')\
    \ and 'String') are expected to be equal\n    return words.filter { word in\n\
    \                 ^\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = s.components(separatedBy: \" \")\n    var result = [String]()\n    for word\
    \ in words {\n        if count_consonants(s: word) == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdjrtgioy.swift:9:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = s.split(separator: \" \")\n    var result = [String]()\n    for word in words\
    \ {\n        var consonants = 0\n        for char in word {\n            if char\
    \ != \"a\" && char != \"e\" && char != \"i\" && char != \"o\" && char != \"u\"\
    \ {\n                consonants += 1\n            }\n        }\n        if consonants\
    \ == n {\n            result.append(String(word))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpoxxv22y3/tmpoxxv22y3.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d38bd8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d388cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d388cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d388ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoxxv22y3                        0x000055e134203ecb <unavailable> + 7883

    5    libc.so.6                          0x00002b1d38dc4460 __libc_start_main +
    245

    6    tmpoxxv22y3                        0x000055e1342035b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660014242
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = [String]()\n    var word = \"\"\n    for c in s {\n        if c == \" \" {\n\
    \            if word.count == n {\n                words.append(word)\n      \
    \      }\n            word = \"\"\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    if word.count == n {\n        words.append(word)\n    }\n\
    \    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpi2db1lw_/tmpi2db1lw_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3099ecdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3099bc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3099bc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3099bc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2db1lw_                        0x000055664114a814 <unavailable> + 6164

    5    libc.so.6                          0x00002b309a0b9460 __libc_start_main +
    245

    6    tmpi2db1lw_                        0x000055664114a419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = s.components(separatedBy: \" \")\n    var result = [String]()\n    for word\
    \ in words {\n        if count_consonants(s: word) == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdjrtgioy.swift:9:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(String(char))\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkbd42le2.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    let vowels = \"aeiou\"\n    for word in s.split(separator:\
    \ \" \") {\n        var count = 0\n        for char in word {\n            if\
    \ !vowels.contains(char) {\n                count += 1\n            }\n      \
    \  }\n        if count == n {\n            result.append(String(word))\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpqm15bvfl/tmpqm15bvfl.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9110f9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9110c94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9110c94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9110c937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqm15bvfl                        0x000055c91bd69f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b9111189460 __libc_start_main +
    245

    6    tmpqm15bvfl                        0x000055c91bd69609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014242
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ s.split(separator: \" \").filter { $0.filter { !$0.isVowel }.count == n }.map\
    \ { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu7kk418s.swift:9:61: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isVowel'\n    return s.split(separator: \" \").filter\
    \ { $0.filter { !$0.isVowel }.count == n }.map { String($0) }\n              \
    \                                           ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmprjxfor_k.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result:\
    \ [String] = []\n    let words = s.components(separatedBy: \" \")\n    for word\
    \ in words {\n        if word.count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwbeg5g5s.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result: [String]\
    \ = []\n    for word in words {\n        var count = 0\n        for char in word\
    \ {\n            if !vowels.contains(char) {\n                count += 1\n   \
    \         }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpnyi4ma5j/tmpnyi4ma5j.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff05417c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff0510eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff0510e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff0510d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnyi4ma5j                        0x000055f9e03d9ebb <unavailable> + 7867

    5    libc.so.6                          0x00002aff05603460 __libc_start_main +
    245

    6    tmpnyi4ma5j                        0x000055f9e03d95a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpqhras0dq/tmpqhras0dq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b756cb8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b756c883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b756c883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b756c8827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqhras0dq                        0x000056061b980f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b756cd78460 __libc_start_main +
    245

    6    tmpqhras0dq                        0x000056061b980609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = s.split(separator: \" \")\n    var result = [String]()\n    for word in words\
    \ {\n        if word.count >= n {\n            var consonants = 0\n          \
    \  for char in word {\n                if char != \"a\" && char != \"e\" && char\
    \ != \"i\" && char != \"o\" && char != \"u\" {\n                    consonants\
    \ += 1\n                }\n            }\n            if consonants == n {\n \
    \               result.append(String(word))\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpl04cc11u/tmpl04cc11u.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8826eb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8826ba8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8826ba8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8826ba77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl04cc11u                        0x0000559e1c0f1f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b882709d460 __libc_start_main +
    245

    6    tmpl04cc11u                        0x0000559e1c0f1609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014242
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp2mu1j_3x/tmp2mu1j_3x.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b52caec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b529a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b529a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b529a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2mu1j_3x                        0x000055ec1c294f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b7b52e9a460 __libc_start_main +
    245

    6    tmp2mu1j_3x                        0x000055ec1c294609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpqhras0dq/tmpqhras0dq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b756cb8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b756c883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b756c883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b756c8827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqhras0dq                        0x000056061b980f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b756cd78460 __libc_start_main +
    245

    6    tmpqhras0dq                        0x000056061b980609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpqhras0dq/tmpqhras0dq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b756cb8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b756c883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b756c883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b756c8827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqhras0dq                        0x000056061b980f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b756cd78460 __libc_start_main +
    245

    6    tmpqhras0dq                        0x000056061b980609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    var words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpa4e3gbwx/tmpa4e3gbwx.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c97fecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c97ce3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c97ce3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c97ce27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa4e3gbwx                        0x00005640ffd08f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b2c981d8460 __libc_start_main +
    245

    6    tmpa4e3gbwx                        0x00005640ffd08609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014242
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = s.components(separatedBy: \" \")\n    var result = [String]()\n    for word\
    \ in words {\n        if count_consonants(word) == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2nx07_8t.swift:9:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmprjxfor_k.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = [String]()\n    let vowels = \"aeiou\"\n    let chars = s.lowercased().split(separator:\
    \ \" \")\n    for char in chars {\n        var count = 0\n        for c in char\
    \ {\n            if !vowels.contains(c) {\n                count += 1\n      \
    \      }\n        }\n        if count == n {\n            words.append(String(char))\n\
    \        }\n    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp5lx415vu/tmp5lx415vu.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a5c2a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a5bf9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a5bf9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a5bf9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5lx415vu                        0x00005584f331fba9 <unavailable> + 7081

    5    libc.so.6                          0x00002b0a5c493460 __libc_start_main +
    245

    6    tmp5lx415vu                        0x00005584f331f659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1660014242
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    let words = s.components(separatedBy: \" \")\n    for word\
    \ in words {\n        if word.count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmprtweupgw.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    let words = s.components(separatedBy: \" \")\n    for word\
    \ in words {\n        if count_consonants(s: word) == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpslg08hww.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014242
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for char in\
    \ word {\n            if !vowels.contains(char) {\n                count += 1\n\
    \            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1hqy6av1.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    let vowels = \"aeiou\"\n    let words = s.split(separator:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for letter in\
    \ word {\n            if !vowels.contains(letter) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpztrbos_b/tmpztrbos_b.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a8cefcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a8cbf3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a8cbf3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a8cbf27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpztrbos_b                        0x000055708ba08f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b3a8d0e8460 __libc_start_main +
    245

    6    tmpztrbos_b                        0x000055708ba08609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014242
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    return words.filter\
    \ { (word) -> Bool in\n        let consonants = word.filter { (char) -> Bool in\n\
    \            !vowels.contains(char)\n        }\n        return consonants.count\
    \ == n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmprxyow6yn.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014242
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ s.components(separatedBy: \" \").filter { $0.filter { !$0.isVowel }.count ==\
    \ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwa28k1z5.swift:9:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.filter\
    \ { !$0.isVowel }.count == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = [String]()\n    var word = \"\"\n    for c in s {\n        if c == \" \" {\n\
    \            if word.count == n {\n                words.append(word)\n      \
    \      }\n            word = \"\"\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    if word.count == n {\n        words.append(word)\n    }\n\
    \    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpi2db1lw_/tmpi2db1lw_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3099ecdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3099bc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3099bc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3099bc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2db1lw_                        0x000055664114a814 <unavailable> + 6164

    5    libc.so.6                          0x00002b309a0b9460 __libc_start_main +
    245

    6    tmpi2db1lw_                        0x000055664114a419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for letter\
    \ in word {\n            if !vowels.contains(letter) {\n                count\
    \ += 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmph0jtuc36.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = s.components(separatedBy: \" \")\n    var result: [String] = []\n    for word\
    \ in words {\n        if word.count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8l1o85ww.swift:9:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014242
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for char in\
    \ word {\n            if !vowels.contains(char) {\n                count += 1\n\
    \            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1hqy6av1.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = Set(\"aeiou\")\n    let words = s.split(separator: \" \")\n    return words.filter\
    \ { word in\n        word.filter { !vowels.contains($0) }.count == n\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmptbh9kk2n.swift:11:18: error: cannot convert return expression of\
    \ type '[String.SubSequence]' (aka 'Array<Substring>') to return type '[String]'\n\
    \    return words.filter { word in\n                 ^\n/tmp/tmptbh9kk2n.swift:11:18:\
    \ note: arguments to generic parameter 'Element' ('String.SubSequence' (aka 'Substring')\
    \ and 'String') are expected to be equal\n    return words.filter { word in\n\
    \                 ^\n"
  stdout: ''
  timestamp: 1660014242
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmprjxfor_k.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpqhras0dq/tmpqhras0dq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b756cb8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b756c883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b756c883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b756c8827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqhras0dq                        0x000056061b980f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b756cd78460 __libc_start_main +
    245

    6    tmpqhras0dq                        0x000056061b980609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmprjxfor_k.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = s.components(separatedBy: \" \")\n    var result = [String]()\n    for word\
    \ in words {\n        if count_consonants(word) == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2nx07_8t.swift:9:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words:\
    \ [String] = []\n    var word: String = \"\"\n    for char in s {\n        if\
    \ char == \" \" {\n            if word.count == n {\n                words.append(word)\n\
    \            }\n            word = \"\"\n        } else {\n            word.append(char)\n\
    \        }\n    }\n    if word.count == n {\n        words.append(word)\n    }\n\
    \    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpyype_z6e/tmpyype_z6e.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e11130c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e10e27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e10e27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e10e267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyype_z6e                        0x000055f611323774 <unavailable> + 6004

    5    libc.so.6                          0x00002b4e1131c460 __libc_start_main +
    245

    6    tmpyype_z6e                        0x000055f611323379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014242
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    let words = s.components(separatedBy: \" \")\n    for word\
    \ in words {\n        if word.count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmprtweupgw.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words:\
    \ [String] = []\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let\
    \ s = s.lowercased()\n    let s_arr = s.components(separatedBy: \" \")\n    for\
    \ word in s_arr {\n        var count = 0\n        for char in word {\n       \
    \     if !vowels.contains(String(char)) {\n                count += 1\n      \
    \      }\n        }\n        if count == n {\n            words.append(word)\n\
    \        }\n    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2c69lld6.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let s_arr = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014242
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var words\
    \ = [String]()\n    var word = \"\"\n    for char in s {\n        if char == \"\
    \ \" {\n            if word.count == n {\n                words.append(word)\n\
    \            }\n            word = \"\"\n        } else {\n            word +=\
    \ String(char)\n        }\n    }\n    if word.count == n {\n        words.append(word)\n\
    \    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpvldgiztf/tmpvldgiztf.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64adc36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64ad92db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64ad92d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64ad92c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvldgiztf                        0x000055e2164e3814 <unavailable> + 6164

    5    libc.so.6                          0x00002b64ade22460 __libc_start_main +
    245

    6    tmpvldgiztf                        0x000055e2164e3419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660014241
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    var result:\
    \ [String] = []\n    for word in words {\n        var count = 0\n        for letter\
    \ in word {\n            if !vowels.contains(letter) {\n                count\
    \ += 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpb0iv9oab.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014241
