name: HumanEval_112_reverse_delete
language: r
prompt: "# Task\n# We are given two strings s and c, you have to deleted all the characters\
  \ in s that are equal to any character in c\n# then check if the result string is\
  \ palindrome.\n# A string is called palindrome if it reads the same backward as\
  \ forward.\n# You should return a tuple containing the result string and True/False\
  \ for the check.\n# Example\n# >>> reverse_delete('abcde', 'ae')\n# list('bcd',\
  \ FALSE)\n# >>> reverse_delete('abcdef', 'b')\n# list('acdef', FALSE)\n# >>> reverse_delete('abcdedcba',\
  \ 'ab')\n# list('cdedc', TRUE)\nreverse_delete <- function(s, c) {"
tests: "test_humaneval <- function() {\ncandidate <- reverse_delete\n    if(!identical(candidate('abcde',\
  \ 'ae'), list('bcd', FALSE))){quit('no', 1)}\n    if(!identical(candidate('abcdef',\
  \ 'b'), list('acdef', FALSE))){quit('no', 1)}\n    if(!identical(candidate('abcdedcba',\
  \ 'ab'), list('cdedc', TRUE))){quit('no', 1)}\n    if(!identical(candidate('dwik',\
  \ 'w'), list('dik', FALSE))){quit('no', 1)}\n    if(!identical(candidate('a', 'a'),\
  \ list('', TRUE))){quit('no', 1)}\n    if(!identical(candidate('abcdedcba', ''),\
  \ list('abcdedcba', TRUE))){quit('no', 1)}\n    if(!identical(candidate('abcdedcba',\
  \ 'v'), list('abcdedcba', TRUE))){quit('no', 1)}\n    if(!identical(candidate('vabba',\
  \ 'v'), list('abba', TRUE))){quit('no', 1)}\n    if(!identical(candidate('mamma',\
  \ 'mia'), list('', TRUE))){quit('no', 1)}\n}\ntest_humaneval()"
completions: []
stop_tokens:
- "\n#"
- "\n```"
