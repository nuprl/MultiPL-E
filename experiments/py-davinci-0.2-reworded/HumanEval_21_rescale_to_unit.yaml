name: HumanEval_21_rescale_to_unit
language: py
prompt: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n\
  \    \"\"\" Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n    such that the smallest number will become 0 and the largest\
  \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25,\
  \ 0.5, 0.75, 1.0]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n \
  \   assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0,\
  \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0,\
  \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0,\
  \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
  \ntest_check()\n"
completions: ["    assert len(numbers) >= 2, \"List must have at least two elements\"\
    \n    min_value = min(numbers)\n    max_value = max(numbers)\n    assert min_value\
    \ != max_value, \"List must have at least two different elements\"\n    return\
    \ [(x - min_value) / (max_value - min_value) for x in numbers]\n", "    assert\
    \ len(numbers) >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert min_number != max_number\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    assert len(numbers) >= 2\n   \
    \ min_number = min(numbers)\n    max_number = max(numbers)\n    assert min_number\
    \ != max_number\n    return [(number - min_number) / (max_number - min_number)\
    \ for number in numbers]\n", "    assert len(numbers) >= 2\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number\n    return\
    \ [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) >= 2\n    min_n = min(numbers)\n    max_n = max(numbers)\n\
    \    assert min_n != max_n\n    return [(n - min_n) / (max_n - min_n) for n in\
    \ numbers]\n", "    assert len(numbers) >= 2\n    min_value = min(numbers)\n \
    \   max_value = max(numbers)\n    assert min_value != max_value\n    return [(x\
    \ - min_value) / (max_value - min_value) for x in numbers]\n", "    assert len(numbers)\
    \ >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n    assert\
    \ min_number != max_number\n    return [(number - min_number) / (max_number -\
    \ min_number) for number in numbers]\n", "    assert len(numbers) >= 2\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number\n\
    \    return [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) >= 2\n    min_n = min(numbers)\n    max_n = max(numbers)\n\
    \    return [(n - min_n) / (max_n - min_n) for n in numbers]\n", "    assert len(numbers)\
    \ >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n    assert\
    \ min_number != max_number\n    return [(number - min_number) / (max_number -\
    \ min_number) for number in numbers]\n", "    # find the minimum and maximum values\n\
    \    min_value = min(numbers)\n    max_value = max(numbers)\n    # find the difference\
    \ between the maximum and minimum\n    diff = max_value - min_value\n    # rescale\
    \ the numbers\n    return [ (n - min_value) / diff for n in numbers ]\n", "  \
    \  assert len(numbers) >= 2\n    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    assert min_value != max_value\n    return [(n - min_value) / (max_value -\
    \ min_value) for n in numbers]\n", "    assert len(numbers) >= 2\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number\n\
    \    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
  "    assert len(numbers) >= 2, \"Need at least two numbers to rescale\"\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number,\
    \ \"Cannot rescale a list with only one element\"\n    return [(n - min_number)\
    \ / (max_number - min_number) for n in numbers]\n", "    if len(numbers) < 2:\n\
    \        raise ValueError(\"Cannot rescale a list of less than two elements\"\
    )\n    min_value = min(numbers)\n    max_value = max(numbers)\n    if min_value\
    \ == max_value:\n        raise ValueError(\"Cannot rescale a list of identical\
    \ elements\")\n    return [(x - min_value) / (max_value - min_value) for x in\
    \ numbers]\n", "    assert len(numbers) >= 2\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number\n    return\
    \ [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) >= 2, \"Need at least two numbers to rescale\"\n    min_num,\
    \ max_num = min(numbers), max(numbers)\n    assert min_num != max_num, \"Cannot\
    \ rescale a list with only one element\"\n    return [(num - min_num) / (max_num\
    \ - min_num) for num in numbers]\n", "    assert len(numbers) >= 2\n    min_val\
    \ = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val\
    \ - min_val) for x in numbers]\n", "    assert len(numbers) >= 2, \"Need at least\
    \ two numbers to rescale\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert min_number != max_number, \"Cannot rescale a list with only one element\"\
    \n    return [(number - min_number) / (max_number - min_number) for number in\
    \ numbers]\n", "    assert len(numbers) >= 2, \"Need at least two numbers to rescale\"\
    \n    min_number = min(numbers)\n    max_number = max(numbers)\n    assert min_number\
    \ != max_number, \"All numbers are the same\"\n    return [(number - min_number)\
    \ / (max_number - min_number) for number in numbers]\n", "    assert len(numbers)\
    \ >= 2\n    min_num = min(numbers)\n    max_num = max(numbers)\n    assert min_num\
    \ != max_num\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
  "    # find the smallest and largest numbers\n    smallest = min(numbers)\n    largest\
    \ = max(numbers)\n    # create a new list to store the rescaled numbers\n    rescaled\
    \ = []\n    # for each number in the original list\n    for number in numbers:\n\
    \        # subtract the smallest number from it\n        shifted = number - smallest\n\
    \        # divide the result by the difference between the largest and smallest\
    \ numbers\n        scaled = shifted / (largest - smallest)\n        # append the\
    \ result to the rescaled list\n        rescaled.append(scaled)\n    # return the\
    \ rescaled list\n    return rescaled\n", "    assert len(numbers) >= 2\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number\n\
    \    return [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(number\
    \ - min_number) / (max_number - min_number) for number in numbers]\n", "    assert\
    \ len(numbers) >= 2, \"Cannot rescale a list with fewer than two elements\"\n\
    \    min_value = min(numbers)\n    max_value = max(numbers)\n    assert min_value\
    \ != max_value, \"Cannot rescale a list with all identical elements\"\n    return\
    \ [(x - min_value) / (max_value - min_value) for x in numbers]\n", "    assert\
    \ len(numbers) >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert min_number != max_number\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    assert len(numbers) >= 2\n   \
    \ min_number = min(numbers)\n    max_number = max(numbers)\n    assert min_number\
    \ != max_number\n    return [(number - min_number) / (max_number - min_number)\
    \ for number in numbers]\n", "    assert len(numbers) >= 2\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number\n    return\
    \ [(x - min_number) / (max_number - min_number) for x in numbers]\n", "    if\
    \ len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\"\
    )\n    min_value = min(numbers)\n    max_value = max(numbers)\n    if min_value\
    \ == max_value:\n        return [0.5] * len(numbers)\n    return [(x - min_value)\
    \ / (max_value - min_value) for x in numbers]\n", "    assert len(numbers) >=\
    \ 2, \"Must have at least two numbers\"\n    min_value = min(numbers)\n    max_value\
    \ = max(numbers)\n    assert min_value != max_value, \"Cannot rescale a list with\
    \ only one element\"\n    return [(number - min_value) / (max_value - min_value)\
    \ for number in numbers]\n", "    assert len(numbers) >= 2\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number\n    return\
    \ [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) >= 2\n    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    assert min_value != max_value\n    return [(x - min_value) / (max_value -\
    \ min_value) for x in numbers]\n", "    if len(numbers) < 2:\n        raise ValueError(\"\
    List must have at least two elements\")\n    min_number = min(numbers)\n    max_number\
    \ = max(numbers)\n    if min_number == max_number:\n        return [0.5] * len(numbers)\n\
    \    return [(n - min_number) / (max_number - min_number) for n in numbers]\n",
  "    assert len(numbers) >= 2, \"Need at least two numbers to rescale\"\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number,\
    \ \"Cannot rescale a list of identical numbers\"\n    return [(n - min_number)\
    \ / (max_number - min_number) for n in numbers]\n", "    assert len(numbers) >=\
    \ 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n    assert\
    \ min_number != max_number\n    return [(x - min_number) / (max_number - min_number)\
    \ for x in numbers]\n\n", "    assert len(numbers) >= 2, \"At least two numbers\
    \ are required\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert min_number != max_number, \"All numbers are the same\"\n    return\
    \ [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert min_number != max_number\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    # find the min and max\n    min_value\
    \ = min(numbers)\n    max_value = max(numbers)\n    # rescale the numbers\n  \
    \  rescaled = []\n    for number in numbers:\n        rescaled.append((number\
    \ - min_value) / (max_value - min_value))\n    return rescaled\n", "    assert\
    \ len(numbers) >= 2\n    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    assert max_value != min_value\n    return [(x - min_value) / (max_value -\
    \ min_value) for x in numbers]\n", "    assert len(numbers) >= 2\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number\n\
    \    return [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert min_number != max_number\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    assert len(numbers) >= 2\n   \
    \ min_number = min(numbers)\n    max_number = max(numbers)\n    assert min_number\
    \ != max_number\n    return [(number - min_number) / (max_number - min_number)\
    \ for number in numbers]\n", "    assert len(numbers) >= 2\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number\n    return\
    \ [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val)\
    \ / (max_val - min_val) for x in numbers]\n", "    assert len(numbers) >= 2\n\
    \    min_number = min(numbers)\n    max_number = max(numbers)\n    assert min_number\
    \ != max_number\n    return [(number - min_number) / (max_number - min_number)\
    \ for number in numbers]\n", "    assert len(numbers) >= 2\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number\n    return\
    \ [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) >= 2, \"List must have at least two elements\"\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number,\
    \ \"List must have at least two different elements\"\n    return [(number - min_number)\
    \ / (max_number - min_number) for number in numbers]\n", "    # Find the smallest\
    \ and largest numbers\n    min_num = min(numbers)\n    max_num = max(numbers)\n\
    \    # Calculate the difference between the largest and smallest numbers\n   \
    \ diff = max_num - min_num\n    # Apply the linear transform to each number\n\
    \    return [((num - min_num) / diff) for num in numbers]\n", "    assert len(numbers)\
    \ >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n    assert\
    \ min_number != max_number\n    return [(number - min_number) / (max_number -\
    \ min_number) for number in numbers]\n", "    assert len(numbers) >= 2\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    return [(number - min_number)\
    \ / (max_number - min_number) for number in numbers]\n", "    # Find the minimum\
    \ and maximum values\n    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    # Calculate the difference between the maximum and minimum\n    diff = max_value\
    \ - min_value\n    # Create a new list to store the rescaled values\n    rescaled_numbers\
    \ = []\n    # Iterate over the original list and calculate the rescaled values\n\
    \    for number in numbers:\n        rescaled_numbers.append((number - min_value)\
    \ / diff)\n    return rescaled_numbers\n", "    assert len(numbers) >= 2\n   \
    \ min_number = min(numbers)\n    max_number = max(numbers)\n    assert min_number\
    \ != max_number\n    return [(number - min_number) / (max_number - min_number)\
    \ for number in numbers]\n", "    assert len(numbers) >= 2\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number\n    return\
    \ [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) >= 2, \"List must have at least two elements\"\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    range_of_numbers = max_number\
    \ - min_number\n    return [(number - min_number) / range_of_numbers for number\
    \ in numbers]\n", "    assert len(numbers) >= 2\n    min_value = min(numbers)\n\
    \    max_value = max(numbers)\n    assert min_value != max_value\n    return [(x\
    \ - min_value) / (max_value - min_value) for x in numbers]\n", "    assert len(numbers)\
    \ >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n    assert\
    \ min_number != max_number\n    return [(number - min_number) / (max_number -\
    \ min_number) for number in numbers]\n", "    assert len(numbers) >= 2\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number\n\
    \    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
  "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(number\
    \ - min_number) / (max_number - min_number) for number in numbers]\n", "    assert\
    \ len(numbers) >= 2, \"Need at least two numbers to rescale\"\n    min_n, max_n\
    \ = min(numbers), max(numbers)\n    return [(n - min_n) / (max_n - min_n) for\
    \ n in numbers]\n", "    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    return [(n - min_number) / (max_number - min_number) for n in numbers]\n",
  "    assert len(numbers) >= 2\n    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    assert min_value != max_value\n    return [(x - min_value) / (max_value -\
    \ min_value) for x in numbers]\n", "    if len(numbers) < 2:\n        raise ValueError(\"\
    List must have at least two elements\")\n    max_number = max(numbers)\n    min_number\
    \ = min(numbers)\n    if max_number == min_number:\n        raise ValueError(\"\
    List must have at least two distinct elements\")\n    return [(number - min_number)\
    \ / (max_number - min_number) for number in numbers]\n", "    assert len(numbers)\
    \ >= 2, \"Input list must have at least two elements\"\n    min_value = min(numbers)\n\
    \    max_value = max(numbers)\n    assert min_value != max_value, \"Input list\
    \ must have at least two different elements\"\n    return [(n - min_value) / (max_value\
    \ - min_value) for n in numbers]\n", "    assert len(numbers) >= 2\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number\n\
    \    return [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) >= 2\n    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    assert min_value != max_value\n    return [(x - min_value) / (max_value -\
    \ min_value) for x in numbers]\n", "    min_num = min(numbers)\n    max_num =\
    \ max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
  "    assert len(numbers) >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert min_number != max_number\n    return [(n - min_number) / (max_number\
    \ - min_number) for n in numbers]\n", "    assert len(numbers) >= 2\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number\n\
    \    return [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert min_number != max_number\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    assert len(numbers) >= 2\n   \
    \ min_number = min(numbers)\n    max_number = max(numbers)\n    assert min_number\
    \ != max_number\n    return [(number - min_number) / (max_number - min_number)\
    \ for number in numbers]\n", "    assert len(numbers) >= 2\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number\n    return\
    \ [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    if len(numbers) < 2:\n        raise ValueError(\"The list must have at least\
    \ two elements\")\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    if min_number == max_number:\n        raise ValueError(\"The list must have\
    \ at least two different elements\")\n    return [(n - min_number) / (max_number\
    \ - min_number) for n in numbers]\n", "    minimum, maximum = min(numbers), max(numbers)\n\
    \    if minimum == maximum:\n        raise ValueError(\"Cannot rescale a list\
    \ of numbers with all the same value\")\n    return [(n - minimum) / (maximum\
    \ - minimum) for n in numbers]\n", "    assert len(numbers) >= 2\n    min_value\
    \ = min(numbers)\n    max_value = max(numbers)\n    assert min_value != max_value\n\
    \    return [(x - min_value) / (max_value - min_value) for x in numbers]\n", " \
    \   assert len(numbers) >= 2, \"Cannot rescale a list of less than two elements\"\
    \n    min_number = min(numbers)\n    max_number = max(numbers)\n    assert min_number\
    \ != max_number, \"Cannot rescale a list of identical elements\"\n    return [(number\
    \ - min_number) / (max_number - min_number) for number in numbers]\n", "    assert\
    \ len(numbers) >= 2\n    min_n = min(numbers)\n    max_n = max(numbers)\n    assert\
    \ min_n != max_n\n    return [(n - min_n) / (max_n - min_n) for n in numbers]\n",
  "    assert len(numbers) >= 2\n    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    assert min_value != max_value\n    return [(n - min_value) / (max_value -\
    \ min_value) for n in numbers]\n", "    assert len(numbers) >= 2\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number\n\
    \    return [(n - min_number) / (max_number - min_number) for n in numbers]\n",
  "    assert len(numbers) >= 2\n    min_val = min(numbers)\n    max_val = max(numbers)\n\
    \    assert max_val != min_val\n    return [(x - min_val) / (max_val - min_val)\
    \ for x in numbers]\n", "    assert len(numbers) >= 2\n    min_value = min(numbers)\n\
    \    max_value = max(numbers)\n    assert min_value != max_value\n    return [(x\
    \ - min_value) / (max_value - min_value) for x in numbers]\n", "    assert len(numbers)\
    \ >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n    assert\
    \ min_number != max_number\n    return [(number - min_number) / (max_number -\
    \ min_number) for number in numbers]\n", "    assert len(numbers) >= 2, \"List\
    \ must have at least two elements\"\n    min_number = min(numbers)\n    max_number\
    \ = max(numbers)\n    assert min_number != max_number, \"List must have at least\
    \ two different elements\"\n    return [(x - min_number) / (max_number - min_number)\
    \ for x in numbers]\n", "    assert len(numbers) >= 2, \"Need at least two numbers\
    \ to rescale\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert min_number != max_number, \"Cannot rescale a list with only one element\"\
    \n    return [(number - min_number) / (max_number - min_number) for number in\
    \ numbers]\n", "    assert len(numbers) >= 2\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number\n    return\
    \ [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    # Find the minimum and maximum values\n    min_value = min(numbers)\n    max_value\
    \ = max(numbers)\n    # Calculate the difference between the maximum and minimum\
    \ values\n    difference = max_value - min_value\n    # Calculate the rescaled\
    \ values\n    rescaled = [((x - min_value) / difference) for x in numbers]\n \
    \   return rescaled\n", "    assert len(numbers) >= 2, \"List must have at least\
    \ two elements\"\n    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    assert min_value != max_value, \"List must have at least two different elements\"\
    \n    return [(x - min_value) / (max_value - min_value) for x in numbers]\n",
  "    assert len(numbers) >= 2, \"List must have at least two elements\"\n    min_n,\
    \ max_n = min(numbers), max(numbers)\n    assert min_n != max_n, \"List must have\
    \ at least two different elements\"\n    return [(n - min_n) / (max_n - min_n)\
    \ for n in numbers]\n", "    assert len(numbers) >= 2\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number\n    return\
    \ [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) >= 2, \"Need at least two numbers to rescale\"\n    min_value\
    \ = min(numbers)\n    max_value = max(numbers)\n    assert min_value != max_value,\
    \ \"Cannot rescale a list of identical numbers\"\n    return [(n - min_value)\
    \ / (max_value - min_value) for n in numbers]\n", "    assert len(numbers) >=\
    \ 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n    assert\
    \ min_number != max_number\n    return [(number - min_number) / (max_number -\
    \ min_number) for number in numbers]\n", "    assert len(numbers) >= 2, \"List\
    \ must have at least two elements\"\n    min_value = min(numbers)\n    max_value\
    \ = max(numbers)\n    assert min_value != max_value, \"List must have at least\
    \ two different elements\"\n    return [(x - min_value) / (max_value - min_value)\
    \ for x in numbers]\n", "    assert len(numbers) >= 2, \"Need at least two numbers\
    \ to rescale\"\n    min_value = min(numbers)\n    max_value = max(numbers)\n \
    \   assert min_value != max_value, \"Cannot rescale a list with only one value\"\
    \n    return [(x - min_value) / (max_value - min_value) for x in numbers]\n",
  "    assert len(numbers) >= 2, \"List must have at least two elements\"\n    min_value\
    \ = min(numbers)\n    max_value = max(numbers)\n    assert min_value != max_value,\
    \ \"List must have at least two distinct elements\"\n    return [(n - min_value)\
    \ / (max_value - min_value) for n in numbers]\n", "    assert len(numbers) >=\
    \ 2, \"Need at least two numbers to rescale\"\n    min_value = min(numbers)\n\
    \    max_value = max(numbers)\n    assert min_value != max_value, \"Cannot rescale\
    \ a list with only one value\"\n    return [(n - min_value) / (max_value - min_value)\
    \ for n in numbers]\n", "    assert len(numbers) >= 2\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number\n    return\
    \ [(n - min_number) / (max_number - min_number) for n in numbers]\n", "    assert\
    \ len(numbers) >= 2, \"List must have at least two elements\"\n    min_num = min(numbers)\n\
    \    max_num = max(numbers)\n    assert min_num != max_num, \"List must have at\
    \ least two different elements\"\n    return [(x - min_num) / (max_num - min_num)\
    \ for x in numbers]\n", "    if len(numbers) < 2:\n        raise ValueError(\"\
    At least two numbers are needed\")\n    if any(n < 0 for n in numbers):\n    \
    \    raise ValueError(\"Only positive numbers are allowed\")\n    if any(n > 1\
    \ for n in numbers):\n        raise ValueError(\"Only numbers between 0 and 1\
    \ are allowed\")\n    if len(set(numbers)) == 1:\n        return [0.0] * len(numbers)\n\
    \    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(n\
    \ - min_number) / (max_number - min_number) for n in numbers]", "    assert len(numbers)\
    \ >= 2\n    min_value = min(numbers)\n    max_value = max(numbers)\n    assert\
    \ max_value != min_value\n    return [(x - min_value) / (max_value - min_value)\
    \ for x in numbers]\n", "    if len(numbers) < 2:\n        raise ValueError(\"\
    List must have at least two elements\")\n    min_num = min(numbers)\n    max_num\
    \ = max(numbers)\n    if min_num == max_num:\n        raise ValueError(\"List\
    \ must have at least two distinct elements\")\n    return [(num - min_num) / (max_num\
    \ - min_num) for num in numbers]\n", "    assert len(numbers) >= 2\n    min_value\
    \ = min(numbers)\n    max_value = max(numbers)\n    assert min_value != max_value\n\
    \    return [(n - min_value) / (max_value - min_value) for n in numbers]\n", " \
    \   assert len(numbers) >= 2\n    min_val = min(numbers)\n    max_val = max(numbers)\n\
    \    assert min_val != max_val\n    return [(x - min_val) / (max_val - min_val)\
    \ for x in numbers]\n", "    assert len(numbers) >= 2\n    min_value = min(numbers)\n\
    \    max_value = max(numbers)\n    assert min_value != max_value\n    return [(x\
    \ - min_value) / (max_value - min_value) for x in numbers]\n", "    assert len(numbers)\
    \ >= 2\n    min_num = min(numbers)\n    max_num = max(numbers)\n    assert min_num\
    \ != max_num\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
  "    assert len(numbers) >= 2\n    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    assert max_value != min_value\n    return [(n - min_value) / (max_value -\
    \ min_value) for n in numbers]\n", "    assert len(numbers) >= 2\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number\n\
    \    return [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    if len(numbers) < 2:\n        raise ValueError(\"Need at least two numbers\
    \ to rescale\")\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    if min_number == max_number:\n        raise ValueError(\"Cannot rescale a\
    \ list with all equal numbers\")\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    # find the min and max of the\
    \ list\n    min_number = min(numbers)\n    max_number = max(numbers)\n    # find\
    \ the difference between the min and max\n    difference = max_number - min_number\n\
    \    # rescale the list\n    rescaled_list = [(number - min_number) / difference\
    \ for number in numbers]\n    return rescaled_list\n", "    assert len(numbers)\
    \ >= 2, \"List must have at least two elements\"\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number, \"List must\
    \ have at least two different elements\"\n    return [(x - min_number) / (max_number\
    \ - min_number) for x in numbers]\n", "    assert len(numbers) >= 2\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number\n\
    \    return [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert min_number != max_number\n    return [(x - min_number) / (max_number\
    \ - min_number) for x in numbers]\n", "    # Find the minimum and maximum values\n\
    \    min_value = min(numbers)\n    max_value = max(numbers)\n    # Calculate the\
    \ difference between the minimum and maximum\n    difference = max_value - min_value\n\
    \    # Calculate the rescaled values\n    rescaled = [((x - min_value) / difference)\
    \ for x in numbers]\n    return rescaled\n", "    # find the smallest and largest\
    \ numbers\n    smallest = min(numbers)\n    largest = max(numbers)\n    # create\
    \ a new list to hold the rescaled numbers\n    rescaled = []\n    # for each number\
    \ in the original list\n    for number in numbers:\n        # rescale it\n   \
    \     rescaled_number = (number - smallest) / (largest - smallest)\n        #\
    \ add it to the new list\n        rescaled.append(rescaled_number)\n    # return\
    \ the new list\n    return rescaled\n", "    assert len(numbers) >= 2\n    min_value\
    \ = min(numbers)\n    max_value = max(numbers)\n    assert max_value != min_value\n\
    \    return [(x - min_value) / (max_value - min_value) for x in numbers]\n", " \
    \   assert len(numbers) >= 2, \"List must have at least two elements\"\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number,\
    \ \"List must have at least two different elements\"\n    return [(number - min_number)\
    \ / (max_number - min_number) for number in numbers]\n", "    assert len(numbers)\
    \ >= 2\n    min_num = min(numbers)\n    max_num = max(numbers)\n    assert min_num\
    \ != max_num\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
  "    assert len(numbers) >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert min_number != max_number\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    # find the smallest and largest\
    \ numbers\n    smallest = min(numbers)\n    largest = max(numbers)\n    # find\
    \ the difference between the smallest and largest numbers\n    difference = largest\
    \ - smallest\n    # create a new list of numbers, where each number is the difference\
    \ between the original number and the smallest number, divided by the difference\
    \ between the smallest and largest numbers\n    rescaled = [ (number - smallest)\
    \ / difference for number in numbers ]\n    return rescaled\n", "    # Find the\
    \ minimum and maximum values\n    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    # Calculate the difference between the maximum and minimum values\n    difference\
    \ = max_value - min_value\n    # Calculate the new values\n    rescaled = [((x\
    \ - min_value) / difference) for x in numbers]\n    return rescaled\n", "    assert\
    \ len(numbers) >= 2\n    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    assert min_value != max_value\n    return [(x - min_value) / (max_value -\
    \ min_value) for x in numbers]\n", "    assert len(numbers) >= 2\n    min_num\
    \ = min(numbers)\n    max_num = max(numbers)\n    assert min_num != max_num\n\
    \    return [(num - min_num) / (max_num - min_num) for num in numbers]\n", " \
    \   assert len(numbers) >= 2\n    min_number = min(numbers)\n    max_number =\
    \ max(numbers)\n    assert min_number != max_number\n    return [(number - min_number)\
    \ / (max_number - min_number) for number in numbers]\n", "    assert len(numbers)\
    \ >= 2, \"List must have at least two elements\"\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number, \"List must\
    \ have at least two different elements\"\n    return [(number - min_number) /\
    \ (max_number - min_number) for number in numbers]\n", "    # find the largest\
    \ and smallest numbers\n    largest = max(numbers)\n    smallest = min(numbers)\n\
    \    # rescale the numbers\n    rescaled = []\n    for number in numbers:\n  \
    \      rescaled.append((number - smallest) / (largest - smallest))\n    return\
    \ rescaled\n", "    assert len(numbers) >= 2\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number\n    return\
    \ [(x - min_number) / (max_number - min_number) for x in numbers]\n\n", "    #\
    \ Find the minimum and maximum values\n    min_value = min(numbers)\n    max_value\
    \ = max(numbers)\n    # Calculate the difference between the max and min\n   \
    \ diff = max_value - min_value\n    # If the difference is zero, return a list\
    \ of zeros\n    if diff == 0:\n        return [0] * len(numbers)\n    # Otherwise,\
    \ rescale the numbers\n    return [(number - min_value) / diff for number in numbers]\n",
  "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [ (x - min_val)\
    \ / (max_val - min_val) for x in numbers ]\n", "    assert len(numbers) >= 2\n\
    \    min_value = min(numbers)\n    max_value = max(numbers)\n    assert max_value\
    \ != min_value\n    return [(x - min_value) / (max_value - min_value) for x in\
    \ numbers]\n", "    assert len(numbers) >= 2\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number\n    return\
    \ [(x - min_number) / (max_number - min_number) for x in numbers]\n", "    assert\
    \ len(numbers) >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert max_number > min_number\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    assert len(numbers) >= 2\n   \
    \ min_num = min(numbers)\n    max_num = max(numbers)\n    assert min_num != max_num\n\
    \    return [(num - min_num) / (max_num - min_num) for num in numbers]\n", " \
    \   min_number = min(numbers)\n    max_number = max(numbers)\n    return [(number\
    \ - min_number) / (max_number - min_number) for number in numbers]\n", "    assert\
    \ len(numbers) >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert min_number != max_number\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    assert len(numbers) >= 2\n   \
    \ min_number = min(numbers)\n    max_number = max(numbers)\n    assert min_number\
    \ != max_number\n    return [(x - min_number) / (max_number - min_number) for\
    \ x in numbers]\n", "    assert len(numbers) >= 2, \"List must contain at least\
    \ two elements\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert max_number != min_number, \"List must contain at least two different\
    \ elements\"\n    return [(number - min_number) / (max_number - min_number) for\
    \ number in numbers]\n", "    assert len(numbers) >= 2, \"Cannot rescale a list\
    \ with less than two elements\"\n    min_number = min(numbers)\n    max_number\
    \ = max(numbers)\n    assert min_number != max_number, \"Cannot rescale a list\
    \ with all equal elements\"\n    return [(x - min_number) / (max_number - min_number)\
    \ for x in numbers]\n", "    assert len(numbers) >= 2\n    min_num = min(numbers)\n\
    \    max_num = max(numbers)\n    assert min_num != max_num\n    return [(num -\
    \ min_num) / (max_num - min_num) for num in numbers]\n", "    assert len(numbers)\
    \ >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n    assert\
    \ min_number != max_number\n    return [(x - min_number) / (max_number - min_number)\
    \ for x in numbers]\n", "    assert len(numbers) >= 2, \"List must have at least\
    \ two elements\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert min_number != max_number, \"List must have at least two different\
    \ elements\"\n    return [(number - min_number) / (max_number - min_number) for\
    \ number in numbers]\n", "    assert len(numbers) >= 2, \"At least two numbers\
    \ are required\"\n    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    assert min_value != max_value, \"All numbers are the same\"\n    return [(n\
    \ - min_value) / (max_value - min_value) for n in numbers]\n", "    assert len(numbers)\
    \ >= 2, \"List must have at least two elements\"\n    min_value = min(numbers)\n\
    \    max_value = max(numbers)\n    return [(x - min_value) / (max_value - min_value)\
    \ for x in numbers]\n", "    assert len(numbers) >= 2\n    max_number = max(numbers)\n\
    \    min_number = min(numbers)\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    # find the smallest and largest\
    \ numbers\n    min_number = min(numbers)\n    max_number = max(numbers)\n    #\
    \ find the difference between the smallest and largest numbers\n    diff = max_number\
    \ - min_number\n    # rescale each number to the range [0, 1]\n    return [(number\
    \ - min_number) / diff for number in numbers]\n", "    assert len(numbers) >=\
    \ 2\n    min_num = min(numbers)\n    max_num = max(numbers)\n    assert min_num\
    \ != max_num\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
  "    assert len(numbers) >= 2\n    min_n = min(numbers)\n    max_n = max(numbers)\n\
    \    assert min_n != max_n\n    return [(n - min_n) / (max_n - min_n) for n in\
    \ numbers]\n", "    assert len(numbers) >= 2\n    min_val = min(numbers)\n   \
    \ max_val = max(numbers)\n    assert min_val != max_val\n    return [(x - min_val)\
    \ / (max_val - min_val) for x in numbers]\n", "    assert len(numbers) >= 2\n\
    \    min_num = min(numbers)\n    max_num = max(numbers)\n    assert min_num !=\
    \ max_num\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
  "    assert len(numbers) >= 2\n    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    assert min_value != max_value\n    return [(x - min_value) / (max_value -\
    \ min_value) for x in numbers]\n", "    if len(numbers) < 2:\n        raise ValueError(\"\
    List must contain at least two elements\")\n    min_number = min(numbers)\n  \
    \  max_number = max(numbers)\n    if min_number == max_number:\n        raise\
    \ ValueError(\"List must contain at least two different elements\")\n    return\
    \ [(n - min_number) / (max_number - min_number) for n in numbers]\n", "    assert\
    \ len(numbers) >= 2, \"List must have at least two elements\"\n    min_value =\
    \ min(numbers)\n    max_value = max(numbers)\n    assert min_value != max_value,\
    \ \"List must have at least two different elements\"\n    return [(x - min_value)\
    \ / (max_value - min_value) for x in numbers]\n", "    # find the min and max\n\
    \    min_num = min(numbers)\n    max_num = max(numbers)\n    # rescale\n    return\
    \ [(num - min_num) / (max_num - min_num) for num in numbers]\n", "    assert len(numbers)\
    \ >= 2\n    min_val = min(numbers)\n    max_val = max(numbers)\n    assert min_val\
    \ != max_val\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n",
  "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(number\
    \ - min_number) / (max_number - min_number) for number in numbers]\n", "    assert\
    \ len(numbers) >= 2\n    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    assert min_value != max_value\n    return [(x - min_value) / (max_value -\
    \ min_value) for x in numbers]\n", "    assert len(numbers) >= 2\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number\n\
    \    return [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) >= 2\n    min_val = min(numbers)\n    max_val = max(numbers)\n\
    \    assert max_val != min_val\n    return [(x - min_val) / (max_val - min_val)\
    \ for x in numbers]\n", "    assert len(numbers) >= 2\n    min_value = min(numbers)\n\
    \    max_value = max(numbers)\n    assert min_value != max_value\n    return [(x\
    \ - min_value) / (max_value - min_value) for x in numbers]\n", "    assert len(numbers)\
    \ >= 2, \"List must have at least two elements\"\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number, \"List must\
    \ have at least two distinct elements\"\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    assert len(numbers) >= 2\n   \
    \ min_number = min(numbers)\n    max_number = max(numbers)\n    assert min_number\
    \ != max_number\n    return [(n - min_number) / (max_number - min_number) for\
    \ n in numbers]\n", "    assert len(numbers) >= 2\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number\n    return\
    \ [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    # find the min and max\n    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    # rescale the numbers\n    rescaled = []\n    for number in numbers:\n  \
    \      rescaled.append((number - min_value) / (max_value - min_value))\n    return\
    \ rescaled\n", "    assert len(numbers) >= 2\n    min_value = min(numbers)\n \
    \   max_value = max(numbers)\n    assert min_value != max_value\n    return [(x\
    \ - min_value) / (max_value - min_value) for x in numbers]\n", "    assert len(numbers)\
    \ >= 2\n    min_value = min(numbers)\n    max_value = max(numbers)\n    assert\
    \ min_value != max_value\n    return [(x - min_value) / (max_value - min_value)\
    \ for x in numbers]\n", "    assert len(numbers) >= 2, \"Need at least two numbers\
    \ to rescale\"\n    min_num, max_num = min(numbers), max(numbers)\n    return\
    \ [(num - min_num) / (max_num - min_num) for num in numbers]\n", "    assert len(numbers)\
    \ >= 2, \"Cannot rescale a list with less than two elements\"\n    min_value =\
    \ min(numbers)\n    max_value = max(numbers)\n    assert min_value != max_value,\
    \ \"Cannot rescale a list with all equal elements\"\n    return [(x - min_value)\
    \ / (max_value - min_value) for x in numbers]\n", "    assert len(numbers) >=\
    \ 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n    assert\
    \ min_number != max_number\n    return [(x - min_number) / (max_number - min_number)\
    \ for x in numbers]\n", "    if len(numbers) < 2:\n        raise ValueError(\"\
    At least two numbers are required\")\n    min_num = min(numbers)\n    max_num\
    \ = max(numbers)\n    if min_num == max_num:\n        raise ValueError(\"Cannot\
    \ rescale a list of identical numbers\")\n    return [(num - min_num) / (max_num\
    \ - min_num) for num in numbers]\n", "    if len(numbers) < 2:\n        raise\
    \ ValueError(\"At least two numbers are required\")\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    if min_number == max_number:\n        raise\
    \ ValueError(\"All numbers are the same\")\n    return [(number - min_number)\
    \ / (max_number - min_number) for number in numbers]\n", "    assert len(numbers)\
    \ >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n    assert\
    \ min_number != max_number\n    return [(number - min_number) / (max_number -\
    \ min_number) for number in numbers]\n", "    assert len(numbers) >= 2, \"List\
    \ must have at least two elements\"\n    min_value = min(numbers)\n    max_value\
    \ = max(numbers)\n    assert min_value != max_value, \"All values in the list\
    \ must be different\"\n    return [(n - min_value) / (max_value - min_value) for\
    \ n in numbers]\n", "    assert len(numbers) >= 2, \"List of numbers must have\
    \ at least two elements\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    return [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [ (x -\
    \ min_number) / (max_number - min_number) for x in numbers ]\n", "    assert len(numbers)\
    \ >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n    assert\
    \ min_number != max_number\n    return [(number - min_number) / (max_number -\
    \ min_number) for number in numbers]\n", "    assert len(numbers) >= 2\n    min_value\
    \ = min(numbers)\n    max_value = max(numbers)\n    assert min_value != max_value\n\
    \    return [(x - min_value) / (max_value - min_value) for x in numbers]\n", " \
    \   assert len(numbers) >= 2\n    min_number = min(numbers)\n    max_number =\
    \ max(numbers)\n    assert min_number != max_number\n    return [(number - min_number)\
    \ / (max_number - min_number) for number in numbers]\n", "    assert len(numbers)\
    \ >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n    assert\
    \ max_number != min_number\n    return [(number - min_number) / (max_number -\
    \ min_number) for number in numbers]\n", "    assert len(numbers) >= 2\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number\n\
    \    return [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert min_number != max_number\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    assert len(numbers) >= 2, \"Need\
    \ at least two numbers to rescale\"\n    min_n = min(numbers)\n    max_n = max(numbers)\n\
    \    return [(n - min_n) / (max_n - min_n) for n in numbers]\n", "    assert len(numbers)\
    \ >= 2\n    min_n = min(numbers)\n    max_n = max(numbers)\n    return [(n - min_n)\
    \ / (max_n - min_n) for n in numbers]\n", "    assert len(numbers) >= 2\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number\n\
    \    return [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) >= 2\n    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    assert min_value != max_value\n    return [(x - min_value) / (max_value -\
    \ min_value) for x in numbers]\n", "    assert len(numbers) >= 2, \"Need at least\
    \ two numbers to rescale\"\n    max_number = max(numbers)\n    min_number = min(numbers)\n\
    \    return [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) >= 2, \"List must have at least two elements\"\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number,\
    \ \"List must have at least two different elements\"\n    return [(number - min_number)\
    \ / (max_number - min_number) for number in numbers]\n", "    assert len(numbers)\
    \ >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n    assert\
    \ min_number != max_number\n    return [(number - min_number) / (max_number -\
    \ min_number) for number in numbers]\n", "    assert len(numbers) >= 2, \"Need\
    \ at least two numbers to rescale\"\n    min_num, max_num = min(numbers), max(numbers)\n\
    \    assert min_num != max_num, \"Cannot rescale a list of identical numbers\"\
    \n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n", " \
    \   # find the min and max values\n    min_value = min(numbers)\n    max_value\
    \ = max(numbers)\n    # rescale each number\n    rescaled = []\n    for number\
    \ in numbers:\n        rescaled.append((number - min_value) / (max_value - min_value))\n\
    \    return rescaled\n", "    assert len(numbers) >= 2\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number\n    return\
    \ [(n - min_number) / (max_number - min_number) for n in numbers]\n", "    assert\
    \ len(numbers) >= 2\n    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    assert min_value != max_value\n    return [(x - min_value) / (max_value -\
    \ min_value) for x in numbers]\n", "    assert len(numbers) >= 2\n    min_val\
    \ = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val\
    \ - min_val) for x in numbers]\n", "    assert len(numbers) >= 2\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number\n\
    \    return [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) >= 2, \"At least two numbers are required\"\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number,\
    \ \"All numbers are equal\"\n    return [(number - min_number) / (max_number -\
    \ min_number) for number in numbers]\n", "    assert len(numbers) >= 2, \"At least\
    \ two numbers are required\"\n    min_number = min(numbers)\n    max_number =\
    \ max(numbers)\n    assert min_number != max_number, \"All numbers are equal\"\
    \n    return [(number - min_number) / (max_number - min_number) for number in\
    \ numbers]\n", "    assert len(numbers) >= 2, \"At least two numbers are required\"\
    \n    min_value = min(numbers)\n    max_value = max(numbers)\n    assert min_value\
    \ != max_value, \"All numbers are the same\"\n    return [(x - min_value) / (max_value\
    \ - min_value) for x in numbers]\n", "    assert len(numbers) >= 2\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number\n\
    \    return [(n - min_number) / (max_number - min_number) for n in numbers]\n",
  "    assert len(numbers) >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert max_number != min_number\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    assert len(numbers) >= 2\n   \
    \ min_number = min(numbers)\n    max_number = max(numbers)\n    return [(number\
    \ - min_number) / (max_number - min_number) for number in numbers]\n", "    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number)\
    \ / (max_number - min_number) for x in numbers]\n", "    assert len(numbers) >=\
    \ 2, \"Need at least two numbers to rescale\"\n    min_val = min(numbers)\n  \
    \  max_val = max(numbers)\n    assert max_val != min_val, \"Cannot rescale a list\
    \ of numbers with only one value\"\n    return [(n - min_val) / (max_val - min_val)\
    \ for n in numbers]\n", "    assert len(numbers) >= 2\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number\n    return\
    \ [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    # Find the minimum and maximum values\n    min_value = min(numbers)\n    max_value\
    \ = max(numbers)\n    # Calculate the difference between the minimum and maximum\
    \ values\n    diff = max_value - min_value\n    # Apply the linear transform to\
    \ each number\n    return [ (number - min_value) / diff for number in numbers\
    \ ]\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
