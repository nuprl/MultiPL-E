name: HumanEval_65_circular_shift
language: py
prompt: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
  \ the digits of the integer x, shift the digits right by shift\n    and return the\
  \ result as a string.\n    If shift > number of digits, return digits reversed.\n\
  \    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n\
  \    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
  \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) ==\
  \ '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
  \ntest_check()\n"
completions: ["    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n\
    \    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n", "    digits =\
    \ str(x)\n    if shift > len(digits):\n        return digits[::-1]\n    return\
    \ digits[-shift:] + digits[:-shift]\n\n", "    x_str = str(x)\n    shift = shift\
    \ % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]\n", "    digits = str(x)\n\
    \    if shift > len(digits):\n        return digits[::-1]\n    return digits[-shift:]\
    \ + digits[:-shift]\n\n", "    x_str = str(x)\n    if shift > len(x_str):\n  \
    \      return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n", " \
    \   digits = str(x)\n    shift = shift % len(digits)\n    return digits[-shift:]\
    \ + digits[:-shift]\n\n", "    digits = str(x)\n    if shift > len(digits):\n\
    \        return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n",
  "    digits = str(x)\n    shift = shift % len(digits)\n    return digits[-shift:]\
    \ + digits[:-shift]\n\n", "    x_str = str(x)\n    if shift > len(x_str):\n  \
    \      return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n", " \
    \   digits = str(x)\n    if shift > len(digits):\n        return digits[::-1]\n\
    \    return digits[-shift:] + digits[:-shift]\n\n", "    digits = str(x)\n   \
    \ if shift > len(digits):\n        return digits[::-1]\n    return digits[-shift:]\
    \ + digits[:-shift]\n\n", "    x_str = str(x)\n    if shift > len(x_str):\n  \
    \      return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n", " \
    \   digits = str(x)\n    if shift > len(digits):\n        return digits[::-1]\n\
    \    return digits[-shift:] + digits[:-shift]\n\n", "    x_str = str(x)\n    if\
    \ shift > len(x_str):\n        return x_str[::-1]\n    return x_str[-shift:] +\
    \ x_str[:-shift]\n\n", "    digits = str(x)\n    if shift > len(digits):\n   \
    \     return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n",
  "    digits = str(x)\n    if shift > len(digits):\n        return digits[::-1]\n\
    \    return digits[-shift:] + digits[:-shift]\n\n", "    digits = str(x)\n   \
    \ if shift > len(digits):\n        return digits[::-1]\n    return digits[-shift:]\
    \ + digits[:-shift]\n\n", "    digits = str(x)\n    if shift > len(digits):\n\
    \        return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n",
  "    digits = str(x)\n    if shift > len(digits):\n        return digits[::-1]\n\
    \    return digits[-shift:] + digits[:-shift]\n\n", "    x_str = str(x)\n    if\
    \ shift > len(x_str):\n        return x_str[::-1]\n    return x_str[-shift:] +\
    \ x_str[:-shift]\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
