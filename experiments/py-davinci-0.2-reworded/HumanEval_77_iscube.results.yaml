name: HumanEval_77_iscube
language: py
results:
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a in [i ** 3 for i in range(a\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkfexrkce.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkfexrkce.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkfexrkce.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    if a == 1:\n        return True\n    if a ==\
    \ 2:\n        return False\n    if a == 3:\n        return True\n    if a == 4:\n\
    \        return False\n    if a == 5:\n        return False\n    if a == 6:\n\
    \        return False\n    if a == 7:\n        return False\n    if a == 8:\n\
    \        return True\n    if a == 9:\n        return True\n    if a == 10:\n \
    \       return False\n    if a == 11:\n        return False\n    if a == 12:\n\
    \        return False\n    if a == 13:\n        return False\n    if a == 14:\n\
    \        return False\n    if a == 15:\n        return False\n    if a == 16:\n\
    \        return True\n    if a == 17:\n        return False\n    if a == 18:\n\
    \        return False\n    if a == 19:\n        return False\n    if a == 20:\n\
    \        return False\n    if a == 21:\n        return False\n    if a == 22:\n\
    \        return False\n    if a == 23:\n        return False\n    if a == 24:\n\
    \        return False\n    if a == 25:\n        return True\n    if a == 26:\n\
    \        return False\n    if a == 27:\n        return True\n    if a == 28:\n\
    \        return False\n    if a == 29:\n        return False\n    if a == 30:\n\
    \        return False\n    if a == 31:\n        return False\n    if a == 32:\n\
    \        return False\n    if a == 33:\n        return False\n    if a == 34:\n\
    \        return False\n    if a == 35:\n        return False\n    if a == 36:\n\
    \        return False\n    if a == 37:\n        return False\n    if a == 38:\n\
    \        return False\n    if a == 39:\n        return False\n    if a == 40:\n\
    \        return False\n    if a == 41:\n        return False\n    if a == 42:\n\
    \        return False\n    if a == 43:\n        return False\n    if a == 44:\n\
    \        return False\n    if a\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3xjta0ge.py\"\
    , line 112\n    if a\n        ^\nSyntaxError: expected ':'\n"
  exit_code: 1
  status: SyntaxError
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  if a < 0:\n        a = -a\n    for i in range(1, a+1):\n        if i*i*i ==\
    \ a:\n            return True\n    return False\n\ndef check(candidate):\n   \
    \ assert candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ (a > 0 and a ** (1 / 3) % 1 == 0)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi0gstgo7.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi0gstgo7.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi0gstgo7.py\"\
    , line 27, in check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfr7ccxt3.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfr7ccxt3.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfr7ccxt3.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ (a > 0 and a**(1/3) == int(a**(1/3)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq0phcw86.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq0phcw86.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq0phcw86.py\"\
    , line 27, in check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ a == 8 or a == 27 or a == -8 or a == -27 or a == 64 or a == -64 or a == 125\
    \ or a == -125 or a == 216 or a == -216 or a == 343 or a == -343 or a == 512 or\
    \ a == -512 or a == 729 or a == -729 or a == 1000 or a == -1000 or a == 1331 or\
    \ a == -1331 or a == 1728 or a == -1728 or a == 2197 or a == -2197 or a == 2744\
    \ or a == -2744 or a == 3375 or a == -3375 or a == 4096 or a == -4096 or a ==\
    \ 4913 or a == -4913 or a == 5832 or a == -5832 or a == 6859 or a == -6859 or\
    \ a == 8000 or a == -8000 or a == 9261 or a == -9261 or a == 10648 or a == -10648\
    \ or a == 12167 or a == -12167 or a == 13824 or a == -13824 or a == 15625 or a\
    \ == -15625 or a == 17576 or a == -17576 or a == 19683 or a == -19683 or a ==\
    \ 21952 or a == -21952 or a == 24389 or a == -24389 or a == 27000 or a == -27000\
    \ or a == 29791 or a == -29791 or a == 32768 or a == -32768 or a == 35937 or a\
    \ == -35937 or a == 39304 or a == -39304 or a == 42875 or a == -42875 or a ==\
    \ 46656 or a == -46656 or a == 50653 or a == -50653 or a == 54872 or a == -54872\
    \ or a == 59319 or a == -59319 or a == 64000 or a == -64000 or a == 68921 or a\
    \ == -68921 or a == 74088 or a == -74088 or a == 79507 or a == -79507 or a ==\
    \ 85184 or a == -85184 or a == 91125 or a == -91125 or a == 97336 or a == -97336\
    \ or a == 103823 or a == -103823 or a\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt99x_kzc.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt99x_kzc.py\"\
    , line 32, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt99x_kzc.py\"\
    , line 23, in check\n    assert candidate(2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  if a < 0:\n        a = -a\n    for i in range(1, a + 1):\n        if i ** 3\
    \ == a:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    if a == 1:\n        return True\n    if a ==\
    \ 2:\n        return False\n    if a == 3:\n        return True\n    if a == 4:\n\
    \        return False\n    if a == 5:\n        return False\n    if a == 6:\n\
    \        return False\n    if a == 7:\n        return False\n    if a == 8:\n\
    \        return True\n    if a == 9:\n        return True\n    if a == 10:\n \
    \       return False\n    if a == 11:\n        return False\n    if a == 12:\n\
    \        return False\n    if a == 13:\n        return False\n    if a == 14:\n\
    \        return False\n    if a == 15:\n        return False\n    if a == 16:\n\
    \        return True\n    if a == 17:\n        return False\n    if a == 18:\n\
    \        return False\n    if a == 19:\n        return False\n    if a == 20:\n\
    \        return False\n    if a == 21:\n        return False\n    if a == 22:\n\
    \        return False\n    if a == 23:\n        return False\n    if a == 24:\n\
    \        return False\n    if a == 25:\n        return True\n    if a == 26:\n\
    \        return False\n    if a == 27:\n        return True\n    if a == 28:\n\
    \        return False\n    if a == 29:\n        return False\n    if a == 30:\n\
    \        return False\n    if a == 31:\n        return False\n    if a == 32:\n\
    \        return False\n    if a == 33:\n        return False\n    if a == 34:\n\
    \        return False\n    if a == 35:\n        return False\n    if a == 36:\n\
    \        return False\n    if a == 37:\n        return False\n    if a == 38:\n\
    \        return False\n    if a == 39:\n        return False\n    if a == 40:\n\
    \        return False\n    if a == 41:\n        return False\n    if a == 42:\n\
    \        return False\n    if a == 43:\n        return False\n    if a == 44:\n\
    \        return False\n    if a\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6zmagkra.py\"\
    , line 112\n    if a\n        ^\nSyntaxError: expected ':'\n"
  exit_code: 1
  status: SyntaxError
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ int(a ** (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptvceuorc.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptvceuorc.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptvceuorc.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp33xgyyr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp33xgyyr.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp33xgyyr.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  elif a < 0:\n        a = -a\n    for i in range(1, a + 1):\n        if i *\
    \ i * i == a:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and\
    \ a % 2 == 0) or (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsow4_73p.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsow4_73p.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsow4_73p.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and\
    \ a % 2 == 0) or (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  elif a < 0:\n        a = -a\n    i = 1\n    while i**3 < a:\n        i += 1\n\
    \    return i**3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ a**(1/3) % 1 == 0)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph26xgghe.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph26xgghe.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph26xgghe.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    i = 1\n    while i * i * i <= a:\n        if\
    \ i * i * i == a:\n            return True\n        i += 1\n    return False\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ int(a ** (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ a == 64\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxqs8zpd0.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxqs8zpd0.py\"\
    , line 33, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxqs8zpd0.py\"\
    , line 28, in check\n    assert candidate(1000) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
