language: py
name: HumanEval_77_iscube
results:
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a in [i ** 3 for i in range(a\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkfexrkce.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkfexrkce.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkfexrkce.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    if a == 1:\n        return True\n    if a ==\
    \ 2:\n        return False\n    if a == 3:\n        return True\n    if a == 4:\n\
    \        return False\n    if a == 5:\n        return False\n    if a == 6:\n\
    \        return False\n    if a == 7:\n        return False\n    if a == 8:\n\
    \        return True\n    if a == 9:\n        return True\n    if a == 10:\n \
    \       return False\n    if a == 11:\n        return False\n    if a == 12:\n\
    \        return False\n    if a == 13:\n        return False\n    if a == 14:\n\
    \        return False\n    if a == 15:\n        return False\n    if a == 16:\n\
    \        return True\n    if a == 17:\n        return False\n    if a == 18:\n\
    \        return False\n    if a == 19:\n        return False\n    if a == 20:\n\
    \        return False\n    if a == 21:\n        return False\n    if a == 22:\n\
    \        return False\n    if a == 23:\n        return False\n    if a == 24:\n\
    \        return False\n    if a == 25:\n        return True\n    if a == 26:\n\
    \        return False\n    if a == 27:\n        return True\n    if a == 28:\n\
    \        return False\n    if a == 29:\n        return False\n    if a == 30:\n\
    \        return False\n    if a == 31:\n        return False\n    if a == 32:\n\
    \        return False\n    if a == 33:\n        return False\n    if a == 34:\n\
    \        return False\n    if a == 35:\n        return False\n    if a == 36:\n\
    \        return False\n    if a == 37:\n        return False\n    if a == 38:\n\
    \        return False\n    if a == 39:\n        return False\n    if a == 40:\n\
    \        return False\n    if a == 41:\n        return False\n    if a == 42:\n\
    \        return False\n    if a == 43:\n        return False\n    if a == 44:\n\
    \        return False\n    if a\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3xjta0ge.py\"\
    , line 112\n    if a\n        ^\nSyntaxError: expected ':'\n"
  stdout: ''
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  if a < 0:\n        a = -a\n    for i in range(1, a+1):\n        if i*i*i ==\
    \ a:\n            return True\n    return False\n\ndef check(candidate):\n   \
    \ assert candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ (a > 0 and a ** (1 / 3) % 1 == 0)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi0gstgo7.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi0gstgo7.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi0gstgo7.py\"\
    , line 27, in check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfr7ccxt3.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfr7ccxt3.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfr7ccxt3.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ (a > 0 and a**(1/3) == int(a**(1/3)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq0phcw86.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq0phcw86.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq0phcw86.py\"\
    , line 27, in check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ a == 8 or a == 27 or a == -8 or a == -27 or a == 64 or a == -64 or a == 125\
    \ or a == -125 or a == 216 or a == -216 or a == 343 or a == -343 or a == 512 or\
    \ a == -512 or a == 729 or a == -729 or a == 1000 or a == -1000 or a == 1331 or\
    \ a == -1331 or a == 1728 or a == -1728 or a == 2197 or a == -2197 or a == 2744\
    \ or a == -2744 or a == 3375 or a == -3375 or a == 4096 or a == -4096 or a ==\
    \ 4913 or a == -4913 or a == 5832 or a == -5832 or a == 6859 or a == -6859 or\
    \ a == 8000 or a == -8000 or a == 9261 or a == -9261 or a == 10648 or a == -10648\
    \ or a == 12167 or a == -12167 or a == 13824 or a == -13824 or a == 15625 or a\
    \ == -15625 or a == 17576 or a == -17576 or a == 19683 or a == -19683 or a ==\
    \ 21952 or a == -21952 or a == 24389 or a == -24389 or a == 27000 or a == -27000\
    \ or a == 29791 or a == -29791 or a == 32768 or a == -32768 or a == 35937 or a\
    \ == -35937 or a == 39304 or a == -39304 or a == 42875 or a == -42875 or a ==\
    \ 46656 or a == -46656 or a == 50653 or a == -50653 or a == 54872 or a == -54872\
    \ or a == 59319 or a == -59319 or a == 64000 or a == -64000 or a == 68921 or a\
    \ == -68921 or a == 74088 or a == -74088 or a == 79507 or a == -79507 or a ==\
    \ 85184 or a == -85184 or a == 91125 or a == -91125 or a == 97336 or a == -97336\
    \ or a == 103823 or a == -103823 or a\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt99x_kzc.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt99x_kzc.py\"\
    , line 32, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt99x_kzc.py\"\
    , line 23, in check\n    assert candidate(2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  if a < 0:\n        a = -a\n    for i in range(1, a + 1):\n        if i ** 3\
    \ == a:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    if a == 1:\n        return True\n    if a ==\
    \ 2:\n        return False\n    if a == 3:\n        return True\n    if a == 4:\n\
    \        return False\n    if a == 5:\n        return False\n    if a == 6:\n\
    \        return False\n    if a == 7:\n        return False\n    if a == 8:\n\
    \        return True\n    if a == 9:\n        return True\n    if a == 10:\n \
    \       return False\n    if a == 11:\n        return False\n    if a == 12:\n\
    \        return False\n    if a == 13:\n        return False\n    if a == 14:\n\
    \        return False\n    if a == 15:\n        return False\n    if a == 16:\n\
    \        return True\n    if a == 17:\n        return False\n    if a == 18:\n\
    \        return False\n    if a == 19:\n        return False\n    if a == 20:\n\
    \        return False\n    if a == 21:\n        return False\n    if a == 22:\n\
    \        return False\n    if a == 23:\n        return False\n    if a == 24:\n\
    \        return False\n    if a == 25:\n        return True\n    if a == 26:\n\
    \        return False\n    if a == 27:\n        return True\n    if a == 28:\n\
    \        return False\n    if a == 29:\n        return False\n    if a == 30:\n\
    \        return False\n    if a == 31:\n        return False\n    if a == 32:\n\
    \        return False\n    if a == 33:\n        return False\n    if a == 34:\n\
    \        return False\n    if a == 35:\n        return False\n    if a == 36:\n\
    \        return False\n    if a == 37:\n        return False\n    if a == 38:\n\
    \        return False\n    if a == 39:\n        return False\n    if a == 40:\n\
    \        return False\n    if a == 41:\n        return False\n    if a == 42:\n\
    \        return False\n    if a == 43:\n        return False\n    if a == 44:\n\
    \        return False\n    if a\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6zmagkra.py\"\
    , line 112\n    if a\n        ^\nSyntaxError: expected ':'\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ int(a ** (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptvceuorc.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptvceuorc.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptvceuorc.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp33xgyyr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp33xgyyr.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp33xgyyr.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  elif a < 0:\n        a = -a\n    for i in range(1, a + 1):\n        if i *\
    \ i * i == a:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and\
    \ a % 2 == 0) or (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsow4_73p.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsow4_73p.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsow4_73p.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and\
    \ a % 2 == 0) or (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  elif a < 0:\n        a = -a\n    i = 1\n    while i**3 < a:\n        i += 1\n\
    \    return i**3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ a**(1/3) % 1 == 0)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph26xgghe.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph26xgghe.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph26xgghe.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    i = 1\n    while i * i * i <= a:\n        if\
    \ i * i * i == a:\n            return True\n        i += 1\n    return False\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ int(a ** (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ a == 64\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxqs8zpd0.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxqs8zpd0.py\"\
    , line 33, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxqs8zpd0.py\"\
    , line 28, in check\n    assert candidate(1000) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ int(a ** (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  if a < 0:\n        a = -a\n    for i in range(1, a + 1):\n        if i ** 3\
    \ == a:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ int(a ** (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a >= 0 and a ** (1 / 3) % 1 ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfkxl1lgt.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpfkxl1lgt.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpfkxl1lgt.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  elif a < 0:\n        a = -a\n    for i in range(1, a + 1):\n        if i **\
    \ 3 == a:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  elif a < 0:\n        a = -a\n    for i in range(1, a + 1):\n        if i **\
    \ 3 == a:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ (a > 0 and a == int(a ** (1/3))) or (a < 0 and a == int(a ** (1/3)))\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7zpowcss.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp7zpowcss.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp7zpowcss.py\", line 26, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    i = 1\n    while i ** 3 <= a:\n        if i\
    \ ** 3 == a:\n            return True\n        i += 1\n    return False\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    # your code here\n    return a >= 0\
    \ and a == round(a ** (1 / 3)) ** 3\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm77e65kj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpm77e65kj.py\", line 35,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpm77e65kj.py\", line 27, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ (a > 0 and a == int(a ** (1 / 3)) ** 3) or (a < 0 and a == int(-a ** (1 / 3))\
    \ ** 3)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm6n2mnpe.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpm6n2mnpe.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpm6n2mnpe.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ (a > 0 and a ** (1 / 3) == int(a ** (1 / 3)))\n\n\ndef check(candidate):\n \
    \   assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcwjvevj4.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpcwjvevj4.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpcwjvevj4.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: 1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    if a == 1:\n        return True\n    if a ==\
    \ 2:\n        return False\n    if a == 3:\n        return True\n    if a == 4:\n\
    \        return False\n    if a == 5:\n        return False\n    if a == 6:\n\
    \        return False\n    if a == 7:\n        return False\n    if a == 8:\n\
    \        return True\n    if a == 9:\n        return True\n    if a == 10:\n \
    \       return False\n    if a == 11:\n        return False\n    if a == 12:\n\
    \        return False\n    if a == 13:\n        return False\n    if a == 14:\n\
    \        return False\n    if a == 15:\n        return False\n    if a == 16:\n\
    \        return True\n    if a == 17:\n        return False\n    if a == 18:\n\
    \        return False\n    if a == 19:\n        return False\n    if a == 20:\n\
    \        return False\n    if a == 21:\n        return False\n    if a == 22:\n\
    \        return False\n    if a == 23:\n        return False\n    if a == 24:\n\
    \        return False\n    if a == 25:\n        return True\n    if a == 26:\n\
    \        return False\n    if a == 27:\n        return True\n    if a == 28:\n\
    \        return False\n    if a == 29:\n        return False\n    if a == 30:\n\
    \        return False\n    if a == 31:\n        return False\n    if a == 32:\n\
    \        return False\n    if a == 33:\n        return False\n    if a == 34:\n\
    \        return False\n    if a == 35:\n        return False\n    if a == 36:\n\
    \        return False\n    if a == 37:\n        return False\n    if a == 38:\n\
    \        return False\n    if a == 39:\n        return False\n    if a == 40:\n\
    \        return False\n    if a == 41:\n        return False\n    if a == 42:\n\
    \        return False\n    if a == 43:\n        return False\n    if a == 44:\n\
    \        return False\n    if a\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6zmagkra.py\"\
    , line 112\n    if a\n        ^\nSyntaxError: expected ':'\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ int(a ** (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a > 0 and a**(1/3)\
    \ % 1 == 0\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphg91nkyy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmphg91nkyy.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmphg91nkyy.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and\
    \ a % 2 == 0) or (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and\
    \ a % 2 == 0) or (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    if a == 1:\n        return True\n    i = 1\n\
    \    while i * i * i <= a:\n        if i * i * i == a:\n            return True\n\
    \        i += 1\n    return False\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  if a < 0:\n        a = -a\n    for i in range(1, a+1):\n        if i*i*i ==\
    \ a:\n            return True\n    return False\n\ndef check(candidate):\n   \
    \ assert candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ a == int(a ** (1 / 3)) ** 3)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx6exvjj0.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpx6exvjj0.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpx6exvjj0.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    if a == 1:\n        return True\n    for i in\
    \ range(1, a):\n        if i ** 3 == a:\n            return True\n    return False\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ int(a ** (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    for i in range(1, a + 1):\n        if i ** 3\
    \ == a:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp51qh0w2h.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp51qh0w2h.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp51qh0w2h.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ int(a ** (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    if a == 1:\n        return True\n    for i in\
    \ range(2, a):\n        if i * i * i == a:\n            return True\n    return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  if a < 0:\n        a = -a\n    return round(a ** (1/3)) ** 3 == a\n\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or int(a ** (1/3)) **\
    \ 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj0bza1c1.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpj0bza1c1.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpj0bza1c1.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpj0bza1c1.py\", line\
    \ 20, in iscube\n    return a == 0 or int(a ** (1/3)) ** 3 == a\nTypeError: int()\
    \ argument must be a string, a bytes-like object or a real number, not 'complex'\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ a ** (1 / 3) % 1 == 0)\n\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1rl74bvw.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp1rl74bvw.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp1rl74bvw.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and\
    \ a % 2 == 0) or (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    if a == 1:\n        return True\n    if a ==\
    \ 2:\n        return False\n    if a == 3:\n        return True\n    if a == 4:\n\
    \        return False\n    if a == 5:\n        return False\n    if a == 6:\n\
    \        return False\n    if a == 7:\n        return False\n    if a == 8:\n\
    \        return True\n    if a == 9:\n        return True\n    if a == 10:\n \
    \       return False\n    if a == 11:\n        return False\n    if a == 12:\n\
    \        return False\n    if a == 13:\n        return False\n    if a == 14:\n\
    \        return False\n    if a == 15:\n        return False\n    if a == 16:\n\
    \        return True\n    if a == 17:\n        return False\n    if a == 18:\n\
    \        return False\n    if a == 19:\n        return False\n    if a == 20:\n\
    \        return False\n    if a == 21:\n        return False\n    if a == 22:\n\
    \        return False\n    if a == 23:\n        return False\n    if a == 24:\n\
    \        return False\n    if a == 25:\n        return True\n    if a == 26:\n\
    \        return False\n    if a == 27:\n        return True\n    if a == 28:\n\
    \        return False\n    if a == 29:\n        return False\n    if a == 30:\n\
    \        return False\n    if a == 31:\n        return False\n    if a == 32:\n\
    \        return False\n    if a == 33:\n        return False\n    if a == 34:\n\
    \        return False\n    if a == 35:\n        return False\n    if a == 36:\n\
    \        return False\n    if a == 37:\n        return False\n    if a == 38:\n\
    \        return False\n    if a == 39:\n        return False\n    if a == 40:\n\
    \        return False\n    if a == 41:\n        return False\n    if a == 42:\n\
    \        return False\n    if a == 43:\n        return False\n    if a == 44:\n\
    \        return False\n    if a\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6zmagkra.py\"\
    , line 112\n    if a\n        ^\nSyntaxError: expected ':'\n"
  stdout: ''
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or abs(a) == round(abs(a)\
    \ ** (1 / 3)) ** 3\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or int(abs(a) ** (1 /\
    \ 3)) ** 3 == abs(a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa79jxiwj.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpa79jxiwj.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpa79jxiwj.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ (a > 0 and a == round(a ** (1 / 3)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzfi3niui.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpzfi3niui.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpzfi3niui.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  elif a < 0:\n        a = -a\n    return int(a ** (1 / 3)) ** 3 == a\n\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv9v0di8a.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpv9v0di8a.py\", line 38,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpv9v0di8a.py\", line 31, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and\
    \ a % 2 == 0) or (a > 0 and a % 2 == 1)\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps4mw5vq8.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmps4mw5vq8.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmps4mw5vq8.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and\
    \ a % 2 == 0) or (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  elif a < 0:\n        a = -a\n    i = 1\n    while i ** 3 <= a:\n        if\
    \ i ** 3 == a:\n            return True\n        i += 1\n    return False\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ (a > 0 and int(a ** (1/3)) ** 3 == a)\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmp8nma0q.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpmp8nma0q.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpmp8nma0q.py\", line 26, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and\
    \ a % 2 == 0) or (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1 / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzsnibrlz.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpzsnibrlz.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpzsnibrlz.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ a ** (1 / 3) % 1 == 0)\n\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1rl74bvw.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp1rl74bvw.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp1rl74bvw.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ int(a ** (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and\
    \ a % 2 == 0) or (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    if a == 1:\n        return True\n    if a ==\
    \ 2:\n        return False\n    if a == 3:\n        return True\n    if a == 4:\n\
    \        return False\n    if a == 5:\n        return False\n    if a == 6:\n\
    \        return False\n    if a == 7:\n        return False\n    if a == 8:\n\
    \        return True\n    if a == 9:\n        return True\n    if a == 10:\n \
    \       return False\n    if a == 11:\n        return False\n    if a == 12:\n\
    \        return False\n    if a == 13:\n        return False\n    if a == 14:\n\
    \        return False\n    if a == 15:\n        return False\n    if a == 16:\n\
    \        return True\n    if a == 17:\n        return False\n    if a == 18:\n\
    \        return False\n    if a == 19:\n        return False\n    if a == 20:\n\
    \        return False\n    if a == 21:\n        return False\n    if a == 22:\n\
    \        return False\n    if a == 23:\n        return False\n    if a == 24:\n\
    \        return False\n    if a == 25:\n        return True\n    if a == 26:\n\
    \        return False\n    if a == 27:\n        return True\n    if a == 28:\n\
    \        return False\n    if a == 29:\n        return False\n    if a == 30:\n\
    \        return False\n    if a == 31:\n        return False\n    if a == 32:\n\
    \        return False\n    if a == 33:\n        return False\n    if a == 34:\n\
    \        return False\n    if a == 35:\n        return False\n    if a == 36:\n\
    \        return False\n    if a == 37:\n        return False\n    if a == 38:\n\
    \        return False\n    if a == 39:\n        return False\n    if a == 40:\n\
    \        return False\n    if a == 41:\n        return False\n    if a == 42:\n\
    \        return False\n    if a == 43:\n        return False\n    if a == 44:\n\
    \        return False\n    if a\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6zmagkra.py\"\
    , line 112\n    if a\n        ^\nSyntaxError: expected ':'\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ a ** (1 / 3) == int(a ** (1 / 3)))\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp19taoyv6.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp19taoyv6.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp19taoyv6.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: 1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    if a == 1:\n        return True\n    if a ==\
    \ 2:\n        return False\n    if a == 3:\n        return True\n    if a == 4:\n\
    \        return False\n    if a == 5:\n        return False\n    if a == 6:\n\
    \        return False\n    if a == 7:\n        return False\n    if a == 8:\n\
    \        return True\n    if a == 9:\n        return True\n    if a == 10:\n \
    \       return False\n    if a == 11:\n        return False\n    if a == 12:\n\
    \        return False\n    if a == 13:\n        return False\n    if a == 14:\n\
    \        return False\n    if a == 15:\n        return False\n    if a == 16:\n\
    \        return True\n    if a == 17:\n        return False\n    if a == 18:\n\
    \        return False\n    if a == 19:\n        return False\n    if a == 20:\n\
    \        return False\n    if a == 21:\n        return False\n    if a == 22:\n\
    \        return False\n    if a == 23:\n        return False\n    if a == 24:\n\
    \        return False\n    if a == 25:\n        return True\n    if a == 26:\n\
    \        return False\n    if a == 27:\n        return True\n    if a == 28:\n\
    \        return False\n    if a == 29:\n        return False\n    if a == 30:\n\
    \        return False\n    if a == 31:\n        return False\n    if a == 32:\n\
    \        return False\n    if a == 33:\n        return False\n    if a == 34:\n\
    \        return False\n    if a == 35:\n        return False\n    if a == 36:\n\
    \        return False\n    if a == 37:\n        return False\n    if a == 38:\n\
    \        return False\n    if a == 39:\n        return False\n    if a == 40:\n\
    \        return False\n    if a == 41:\n        return False\n    if a == 42:\n\
    \        return False\n    if a == 43:\n        return False\n    if a == 44:\n\
    \        return False\n    if a\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6zmagkra.py\"\
    , line 112\n    if a\n        ^\nSyntaxError: expected ':'\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or abs(a) == abs(a) **\
    \ (1 / 3)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4eqdp6c0.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp4eqdp6c0.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp4eqdp6c0.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    i = 1\n    while i ** 3 <= a:\n        if i\
    \ ** 3 == a:\n            return True\n        i += 1\n    return False\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a >= 0 and a == round(a ** (1\
    \ / 3)) ** 3\n\n\ndef check(candidate):\n    assert candidate(1) == True\n   \
    \ assert candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvq1xfcxl.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpvq1xfcxl.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpvq1xfcxl.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    return\
    \ a == 0 or round(a ** (1 / 3)) ** 3 == a\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ a == 8 or a == 27 or a == 64 or a == 125 or a == 216 or a == 343 or a == 512\
    \ or a == 729 or a == 1000 or a == 1331 or a == 1728 or a == 2197 or a == 2744\
    \ or a == 3375 or a == 4096 or a == 4913 or a == 5832 or a == 6859 or a == 8000\
    \ or a == 9261 or a == 10648 or a == 12167 or a == 13824 or a == 15625 or a ==\
    \ 17576 or a == 19683 or a == 21952 or a == 24389 or a == 27000 or a == 29791\
    \ or a == 32768 or a == 35937 or a == 39304 or a == 42875 or a == 46656 or a ==\
    \ 50653 or a == 54872 or a == 59319 or a == 64000 or a == 68921 or a == 74088\
    \ or a == 79507 or a == 85184 or a == 91125 or a == 97336 or a == 103823 or a\
    \ == 110592 or a == 117649 or a == 125000 or a == 132651 or a == 140608 or a ==\
    \ 148877 or a == 157464 or a == 166375 or a == 175616 or a == 185193 or a == 195112\
    \ or a == 205379 or a == 216000 or a == 226981 or a == 238328 or a == 250047 or\
    \ a == 262144 or a == 274625 or a == 287496 or a == 300763 or a == 314432 or a\
    \ == 328509 or a == 343000 or a == 357911 or a == 373248 or a == 389017 or a ==\
    \ 405224 or a == 421875 or a == 438976 or a == 456533 or a == 474552 or a == 493039\
    \ or a == 512000 or a == 531441 or a == 551368 or a == 571787 or a == 592704 or\
    \ a == 614125 or a == 636056 or a == 658503 or a == 681472 or a == 704969 or a\
    \ == 729000 or a == 753571 or a == 778688 or a == 804357 or a == 830584 or a ==\
    \ 857\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    for i in range(1, a + 1):\n        if i ** 3\
    \ == a:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    if a == 1:\n        return True\n    for i in\
    \ range(1, a):\n        if i ** 3 == a:\n            return True\n    return False\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ (a > 0 and a == int(a ** (1/3))) or (a < 0 and a == int(a ** (1/3)))\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7zpowcss.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp7zpowcss.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp7zpowcss.py\", line 26, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ a == int(round(a ** (1 / 3))))\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk64w3y7q.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpk64w3y7q.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpk64w3y7q.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ a ** (1 / 3) % 1 == 0)\n\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1rl74bvw.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp1rl74bvw.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp1rl74bvw.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ a ** (1 / 3) == int(a ** (1 / 3)))\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp19taoyv6.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp19taoyv6.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp19taoyv6.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  if a < 0:\n        a = -a\n    for i in range(1, a + 1):\n        if i ** 3\
    \ == a:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  elif a < 0:\n        a = -a\n    for i in range(1, a + 1):\n        if i **\
    \ 3 == a:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ int(a ** (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ (a > 0 and a == int(a ** (1 / 3)) ** 3) or (a < 0 and a == int(a ** (1 / 3))\
    \ ** 3)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp16x_rvvg.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp16x_rvvg.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp16x_rvvg.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1.0 / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd0_7tkcu.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpd0_7tkcu.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpd0_7tkcu.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ int(a ** (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ a ** (1 / 3) % 1 == 0)\n\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1rl74bvw.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp1rl74bvw.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp1rl74bvw.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    return\
    \ a == 0 or int(a ** (1 / 3)) ** 3 == a\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_63nhg9w.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp_63nhg9w.py\", line 36,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp_63nhg9w.py\", line 29, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp51qh0w2h.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp51qh0w2h.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp51qh0w2h.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ int(round(a ** (1.0 / 3.0))) ** 3 == a)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp74guoaui.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp74guoaui.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp74guoaui.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ a == round(a ** (1 / 3)))\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu2elbmit.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpu2elbmit.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpu2elbmit.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ int(a ** (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or abs(a) ** (1 / 3) %\
    \ 1 == 0\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcd7kiv0i.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpcd7kiv0i.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpcd7kiv0i.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    i = 1\n    while i ** 3 <= a:\n        if i\
    \ ** 3 == a:\n            return True\n        i += 1\n    return False\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a >= 0 and int(a ** (1 / 3))\
    \ ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbmo_dvim.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpbmo_dvim.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpbmo_dvim.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and\
    \ a % 2 == 0) or (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ int(a ** (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    if a == 1:\n        return True\n    for i in\
    \ range(2, a):\n        if i ** 3 == a:\n            return True\n    return False\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ a == 8 or a == 27 or a == 64 or a == 125 or a == 216 or a == 343 or a == 512\
    \ or a == 729 or a == 1000 or a == 1331 or a == 1728 or a == 2197 or a == 2744\
    \ or a == 3375 or a == 4096 or a == 4913 or a == 5832 or a == 6859 or a == 8000\
    \ or a == 9261 or a == 10648 or a == 12167 or a == 13824 or a == 15625 or a ==\
    \ 17576 or a == 19683 or a == 21952 or a == 24389 or a == 27000 or a == 29791\
    \ or a == 32768 or a == 35937 or a == 39304 or a == 42875 or a == 46656 or a ==\
    \ 50653 or a == 54872 or a == 59319 or a == 64000 or a == 68921 or a == 74088\
    \ or a == 79507 or a == 85184 or a == 91125 or a == 97336 or a == 103823 or a\
    \ == 110592 or a == 117649 or a == 125000 or a == 132651 or a == 140608 or a ==\
    \ 148877 or a == 157464 or a == 166375 or a == 175616 or a == 185193 or a == 195112\
    \ or a == 205379 or a == 216000 or a == 226981 or a == 238328 or a == 250047 or\
    \ a == 262144 or a == 274625 or a == 287496 or a == 300763 or a == 314432 or a\
    \ == 328509 or a == 343000 or a == 357911 or a == 373248 or a == 389017 or a ==\
    \ 405224 or a == 421875 or a == 438976 or a == 456533 or a == 474552 or a == 493039\
    \ or a == 512000 or a == 531441 or a == 551368 or a == 571787 or a == 592704 or\
    \ a == 614125 or a == 636056 or a == 658503 or a == 681472 or a == 704969 or a\
    \ == 729000 or a == 753571 or a == 778688 or a == 804357 or a == 830584 or a ==\
    \ 857\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ a ** (1 / 3) % 1 == 0)\n\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1rl74bvw.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp1rl74bvw.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp1rl74bvw.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a >= 0 and a == round(a ** (1\
    \ / 3)) ** 3\n\n\ndef check(candidate):\n    assert candidate(1) == True\n   \
    \ assert candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvq1xfcxl.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpvq1xfcxl.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpvq1xfcxl.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: 1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    if a == 1:\n        return True\n    if a ==\
    \ 2:\n        return False\n    if a == 3:\n        return False\n    if a ==\
    \ 4:\n        return True\n    if a == 5:\n        return False\n    if a == 6:\n\
    \        return False\n    if a == 7:\n        return False\n    if a == 8:\n\
    \        return True\n    if a == 9:\n        return True\n    if a == 10:\n \
    \       return False\n    if a == 11:\n        return False\n    if a == 12:\n\
    \        return False\n    if a == 13:\n        return False\n    if a == 14:\n\
    \        return False\n    if a == 15:\n        return False\n    if a == 16:\n\
    \        return True\n    if a == 17:\n        return False\n    if a == 18:\n\
    \        return False\n    if a == 19:\n        return False\n    if a == 20:\n\
    \        return False\n    if a == 21:\n        return False\n    if a == 22:\n\
    \        return False\n    if a == 23:\n        return False\n    if a == 24:\n\
    \        return False\n    if a == 25:\n        return True\n    if a == 26:\n\
    \        return False\n    if a == 27:\n        return True\n    if a == 28:\n\
    \        return False\n    if a == 29:\n        return False\n    if a == 30:\n\
    \        return False\n    if a == 31:\n        return False\n    if a == 32:\n\
    \        return True\n    if a == 33:\n        return False\n    if a == 34:\n\
    \        return False\n    if a == 35:\n        return False\n    if a == 36:\n\
    \        return False\n    if a == 37:\n        return False\n    if a == 38:\n\
    \        return False\n    if a == 39:\n        return False\n    if a == 40:\n\
    \        return False\n    if a == 41:\n        return False\n    if a == 42:\n\
    \        return False\n    if a == 43:\n        return False\n    if a == 44:\n\
    \        return False\n    if a\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpl3qbqy9w.py\", line 112\n    if a\n        ^\nSyntaxError:\
    \ expected ':'\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and\
    \ a % 2 == 0) or (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ a == 8 or a == 27 or a == 64 or a == 125 or a == 216 or a == 343 or a == 512\
    \ or a == 729 or a == 1000 or a == 1331 or a == 1728 or a == 2197 or a == 2744\
    \ or a == 3375 or a == 4096 or a == 4913 or a == 5832 or a == 6859 or a == 8000\
    \ or a == 9261 or a == 10648 or a == 12167 or a == 13824 or a == 15625 or a ==\
    \ 17576 or a == 19683 or a == 21952 or a == 24389 or a == 27000 or a == 29791\
    \ or a == 32768 or a == 35937 or a == 39304 or a == 42875 or a == 46656 or a ==\
    \ 50653 or a == 54872 or a == 59319 or a == 64000 or a == 68921 or a == 74088\
    \ or a == 79507 or a == 85184 or a == 91125 or a == 97336 or a == 103823 or a\
    \ == 110592 or a == 117649 or a == 125000 or a == 132651 or a == 140608 or a ==\
    \ 148877 or a == 157464 or a == 166375 or a == 175616 or a == 185193 or a == 195112\
    \ or a == 205379 or a == 216000 or a == 226981 or a == 238328 or a == 250047 or\
    \ a == 262144 or a == 274625 or a == 287496 or a == 300763 or a == 314432 or a\
    \ == 328509 or a == 343000 or a == 357911 or a == 373248 or a == 389017 or a ==\
    \ 405224 or a == 421875 or a == 438976 or a == 456533 or a == 474552 or a == 493039\
    \ or a == 512000 or a == 531441 or a == 551368 or a == 571787 or a == 592704 or\
    \ a == 614125 or a == 636056 or a == 658503 or a == 681472 or a == 704969 or a\
    \ == 729000 or a == 753571 or a == 778688 or a == 804357 or a == 830584 or a ==\
    \ 857\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ a ** (1 / 3) % 1 == 0)\n\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1rl74bvw.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp1rl74bvw.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp1rl74bvw.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a < 0 and a % 2 ==\
    \ 0) or (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphrnrctss.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmphrnrctss.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmphrnrctss.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ (a > 0 and a == int(a ** (1 / 3)) ** 3)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphi1l9cm9.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmphi1l9cm9.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmphi1l9cm9.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and\
    \ a % 2 == 0) or (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ int(a ** (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    if a == 1:\n        return True\n    if a ==\
    \ 2:\n        return False\n    if a == 3:\n        return True\n    if a == 4:\n\
    \        return False\n    if a == 5:\n        return False\n    if a == 6:\n\
    \        return False\n    if a == 7:\n        return False\n    if a == 8:\n\
    \        return True\n    if a == 9:\n        return True\n    if a == 10:\n \
    \       return False\n    if a == 11:\n        return False\n    if a == 12:\n\
    \        return False\n    if a == 13:\n        return False\n    if a == 14:\n\
    \        return False\n    if a == 15:\n        return False\n    if a == 16:\n\
    \        return True\n    if a == 17:\n        return False\n    if a == 18:\n\
    \        return False\n    if a == 19:\n        return False\n    if a == 20:\n\
    \        return False\n    if a == 21:\n        return False\n    if a == 22:\n\
    \        return False\n    if a == 23:\n        return False\n    if a == 24:\n\
    \        return False\n    if a == 25:\n        return True\n    if a == 26:\n\
    \        return False\n    if a == 27:\n        return True\n    if a == 28:\n\
    \        return False\n    if a == 29:\n        return False\n    if a == 30:\n\
    \        return False\n    if a == 31:\n        return False\n    if a == 32:\n\
    \        return False\n    if a == 33:\n        return False\n    if a == 34:\n\
    \        return False\n    if a == 35:\n        return False\n    if a == 36:\n\
    \        return False\n    if a == 37:\n        return False\n    if a == 38:\n\
    \        return False\n    if a == 39:\n        return False\n    if a == 40:\n\
    \        return False\n    if a == 41:\n        return False\n    if a == 42:\n\
    \        return False\n    if a == 43:\n        return False\n    if a == 44:\n\
    \        return False\n    if a\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6zmagkra.py\"\
    , line 112\n    if a\n        ^\nSyntaxError: expected ':'\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ int(a ** (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a >= 0 and a == int(round(a **\
    \ (1. / 3))) ** 3\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4vfvtwsf.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp4vfvtwsf.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp4vfvtwsf.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and\
    \ a % 2 == 0) or (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ a == int(a ** (1 / 3)) ** 3)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx6exvjj0.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpx6exvjj0.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpx6exvjj0.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a in [i ** 3 for i in range(int(a\
    \ ** (1 / 3)) + 1)]\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppf4c80wj.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppf4c80wj.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmppf4c80wj.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmppf4c80wj.py\", line\
    \ 20, in iscube\n    return a in [i ** 3 for i in range(int(a ** (1 / 3)) + 1)]\n\
    TypeError: int() argument must be a string, a bytes-like object or a real number,\
    \ not 'complex'\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ (a > 0 and a == round(a ** (1 / 3)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzfi3niui.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpzfi3niui.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpzfi3niui.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or int(abs(a) ** (1 /\
    \ 3)) ** 3 == abs(a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa79jxiwj.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpa79jxiwj.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpa79jxiwj.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ int(a ** (1 / 3)) ** 3 == a)\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2z0til9f.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2z0til9f.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp2z0til9f.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    if a == 1:\n        return True\n    for i in\
    \ range(1, a):\n        if i * i * i == a:\n            return True\n    return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ a == 8 or a == 27 or a == 64 or a == 125 or a == 216 or a == 343 or a == 512\
    \ or a == 729 or a == 1000 or a == 1331 or a == 1728 or a == 2197 or a == 2744\
    \ or a == 3375 or a == 4096 or a == 4913 or a == 5832 or a == 6859 or a == 8000\
    \ or a == 9261 or a == 10648 or a == 12167 or a == 13824 or a == 15625 or a ==\
    \ 17576 or a == 19683 or a == 21952 or a == 24389 or a == 27000 or a == 29791\
    \ or a == 32768 or a == 35937 or a == 39304 or a == 42875 or a == 46656 or a ==\
    \ 50653 or a == 54872 or a == 59319 or a == 64000 or a == 68921 or a == 74088\
    \ or a == 79507 or a == 85184 or a == 91125 or a == 97336 or a == 103823 or a\
    \ == 110592 or a == 117649 or a == 125000 or a == 132651 or a == 140608 or a ==\
    \ 148877 or a == 157464 or a == 166375 or a == 175616 or a == 185193 or a == 195112\
    \ or a == 205379 or a == 216000 or a == 226981 or a == 238328 or a == 250047 or\
    \ a == 262144 or a == 274625 or a == 287496 or a == 300763 or a == 314432 or a\
    \ == 328509 or a == 343000 or a == 357911 or a == 373248 or a == 389017 or a ==\
    \ 405224 or a == 421875 or a == 438976 or a == 456533 or a == 474552 or a == 493039\
    \ or a == 512000 or a == 531441 or a == 551368 or a == 571787 or a == 592704 or\
    \ a == 614125 or a == 636056 or a == 658503 or a == 681472 or a == 704969 or a\
    \ == 729000 or a == 753571 or a == 778688 or a == 804357 or a == 830584 or a ==\
    \ 857\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1/3)) ** 3 == a)\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn5_lt32_.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpn5_lt32_.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpn5_lt32_.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  if a < 0:\n        a = -a\n    i = 0\n    while i**3 < a:\n        i += 1\n\
    \    return i**3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and\
    \ a % 2 == 0) or (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a in [i**3 for i in range(abs(a)+1)]\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp61a78824.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp61a78824.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp61a78824.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ (a > 0 and a ** (1/3) % 1 == 0) or (a < 0 and -a ** (1/3) % 1 == 0)\n\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnc15n872.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpnc15n872.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpnc15n872.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  if a < 0:\n        a = -a\n    return a == int(a ** (1 / 3)) ** 3\n\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprihsxdbm.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmprihsxdbm.py\", line 38,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmprihsxdbm.py\", line 31, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  if a < 0:\n        a = -a\n    return int(a ** (1 / 3)) ** 3 == a\n\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0cvotjm1.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp0cvotjm1.py\", line 38,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp0cvotjm1.py\", line 31, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  if a < 0:\n        a = -a\n    for i in range(1, a // 2 + 1):\n        if i\
    \ ** 3 == a:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5hs3u5ih.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp5hs3u5ih.py\", line 41,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp5hs3u5ih.py\", line 31, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and\
    \ a % 2 == 0) or (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp51qh0w2h.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp51qh0w2h.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp51qh0w2h.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ (a > 0 and a ** (1 / 3) % 1 == 0)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi0gstgo7.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi0gstgo7.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi0gstgo7.py\"\
    , line 27, in check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ int(a ** (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  elif a < 0:\n        a = -a\n    return is_perfect_cube(a)\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa0xixerm.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpa0xixerm.py\", line 38,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpa0xixerm.py\", line 28, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmpa0xixerm.py\", line\
    \ 24, in iscube\n    return is_perfect_cube(a)\nNameError: name 'is_perfect_cube'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and a ** (1\
    \ / 3) % 1 == 0)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsm10if5o.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpsm10if5o.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpsm10if5o.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ a == 8 or a == 27 or a == 64 or a == 125 or a == 216 or a == 343 or a == 512\
    \ or a == 729 or a == 1000 or a == 1331 or a == 1728 or a == 2197 or a == 2744\
    \ or a == 3375 or a == 4096 or a == 4913 or a == 5832 or a == 6859 or a == 8000\
    \ or a == 9261 or a == 10648 or a == 12167 or a == 13824 or a == 15625 or a ==\
    \ 17576 or a == 19683 or a == 21952 or a == 24389 or a == 27000 or a == 29791\
    \ or a == 32768 or a == 35937 or a == 39304 or a == 42875 or a == 46656 or a ==\
    \ 50653 or a == 54872 or a == 59319 or a == 64000 or a == 68921 or a == 74088\
    \ or a == 79507 or a == 85184 or a == 91125 or a == 97336 or a == 103823 or a\
    \ == 110592 or a == 117649 or a == 125000 or a == 132651 or a == 140608 or a ==\
    \ 148877 or a == 157464 or a == 166375 or a == 175616 or a == 185193 or a == 195112\
    \ or a == 205379 or a == 216000 or a == 226981 or a == 238328 or a == 250047 or\
    \ a == 262144 or a == 274625 or a == 287496 or a == 300763 or a == 314432 or a\
    \ == 328509 or a == 343000 or a == 357911 or a == 373248 or a == 389017 or a ==\
    \ 405224 or a == 421875 or a == 438976 or a == 456533 or a == 474552 or a == 493039\
    \ or a == 512000 or a == 531441 or a == 551368 or a == 571787 or a == 592704 or\
    \ a == 614125 or a == 636056 or a == 658503 or a == 681472 or a == 704969 or a\
    \ == 729000 or a == 753571 or a == 778688 or a == 804357 or a == 830584 or a ==\
    \ 857\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ (a > 0 and a == int(a ** (1 / 3)) ** 3) or (a < 0 and a == int(-a ** (1 / 3))\
    \ ** 3)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm6n2mnpe.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpm6n2mnpe.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpm6n2mnpe.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and\
    \ a % 2 == 0) or (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ a == 8 or a == 27 or a == 64 or a == 125 or a == 216 or a == 343 or a == 512\
    \ or a == 729 or a == 1000 or a == 1331 or a == 1728 or a == 2197 or a == 2744\
    \ or a == 3375 or a == 4096 or a == 4913 or a == 5832 or a == 6859 or a == 8000\
    \ or a == 9261 or a == 10648 or a == 12167 or a == 13824 or a == 15625 or a ==\
    \ 17576 or a == 19683 or a == 21952 or a == 24389 or a == 27000 or a == 29791\
    \ or a == 32768 or a == 35937 or a == 39304 or a == 42875 or a == 46656 or a ==\
    \ 50653 or a == 54872 or a == 59319 or a == 64000 or a == 68921 or a == 74088\
    \ or a == 79507 or a == 85184 or a == 91125 or a == 97336 or a == 103823 or a\
    \ == 110592 or a == 117649 or a == 125000 or a == 132651 or a == 140608 or a ==\
    \ 148877 or a == 157464 or a == 166375 or a == 175616 or a == 185193 or a == 195112\
    \ or a == 205379 or a == 216000 or a == 226981 or a == 238328 or a == 250047 or\
    \ a == 262144 or a == 274625 or a == 287496 or a == 300763 or a == 314432 or a\
    \ == 328509 or a == 343000 or a == 357911 or a == 373248 or a == 389017 or a ==\
    \ 405224 or a == 421875 or a == 438976 or a == 456533 or a == 474552 or a == 493039\
    \ or a == 512000 or a == 531441 or a == 551368 or a == 571787 or a == 592704 or\
    \ a == 614125 or a == 636056 or a == 658503 or a == 681472 or a == 704969 or a\
    \ == 729000 or a == 753571 or a == 778688 or a == 804357 or a == 830584 or a ==\
    \ 857\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  if a < 0:\n        a = -a\n    for i in range(1, a + 1):\n        if i * i\
    \ * i == a:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and\
    \ a % 2 == 0) or (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp51qh0w2h.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp51qh0w2h.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp51qh0w2h.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ a == int(a ** (1 / 3)) ** 3)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx6exvjj0.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpx6exvjj0.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpx6exvjj0.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    i = 1\n    while i * i * i <= a:\n        if\
    \ i * i * i == a:\n            return True\n        i += 1\n    return False\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ int(a ** (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    if a == 1:\n        return True\n    if a ==\
    \ 2:\n        return False\n    if a == 3:\n        return True\n    if a == 4:\n\
    \        return False\n    if a == 5:\n        return False\n    if a == 6:\n\
    \        return False\n    if a == 7:\n        return False\n    if a == 8:\n\
    \        return True\n    if a == 9:\n        return True\n    if a == 10:\n \
    \       return False\n    if a == 11:\n        return False\n    if a == 12:\n\
    \        return False\n    if a == 13:\n        return False\n    if a == 14:\n\
    \        return False\n    if a == 15:\n        return False\n    if a == 16:\n\
    \        return True\n    if a == 17:\n        return False\n    if a == 18:\n\
    \        return False\n    if a == 19:\n        return False\n    if a == 20:\n\
    \        return False\n    if a == 21:\n        return False\n    if a == 22:\n\
    \        return False\n    if a == 23:\n        return False\n    if a == 24:\n\
    \        return False\n    if a == 25:\n        return True\n    if a == 26:\n\
    \        return False\n    if a == 27:\n        return True\n    if a == 28:\n\
    \        return False\n    if a == 29:\n        return False\n    if a == 30:\n\
    \        return False\n    if a == 31:\n        return False\n    if a == 32:\n\
    \        return False\n    if a == 33:\n        return False\n    if a == 34:\n\
    \        return False\n    if a == 35:\n        return False\n    if a == 36:\n\
    \        return False\n    if a == 37:\n        return False\n    if a == 38:\n\
    \        return False\n    if a == 39:\n        return False\n    if a == 40:\n\
    \        return False\n    if a == 41:\n        return False\n    if a == 42:\n\
    \        return False\n    if a == 43:\n        return False\n    if a == 44:\n\
    \        return False\n    if a\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6zmagkra.py\"\
    , line 112\n    if a\n        ^\nSyntaxError: expected ':'\n"
  stdout: ''
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    if a == 1:\n        return True\n    for i in\
    \ range(2, a):\n        if i ** 3 == a:\n            return True\n    return False\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and round(a\
    \ ** (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp60lakw3o.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp60lakw3o.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp60lakw3o.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    return\
    \ int(a ** (1/3)) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp45kl1rco.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp45kl1rco.py\", line 36,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp45kl1rco.py\", line 29, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a >= 0 and int(a ** (1 / 3))\
    \ ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbmo_dvim.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpbmo_dvim.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpbmo_dvim.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ (a > 0 and a**(1/3) == int(a**(1/3))) or (a < 0 and a**(1/3) == int(a**(1/3)))\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpehuf8swi.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpehuf8swi.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpehuf8swi.py\", line 26, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and\
    \ a % 2 == 0) or (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1 / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzsnibrlz.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpzsnibrlz.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpzsnibrlz.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ a ** (1 / 3) == int(a ** (1 / 3)))\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp19taoyv6.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp19taoyv6.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp19taoyv6.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ (a > 0 and a == int(a ** (1 / 3)) ** 3) or (a < 0 and a == int(a ** (1 / 3))\
    \ ** 3)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp16x_rvvg.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp16x_rvvg.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp16x_rvvg.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  if a < 0:\n        a = -a\n    for i in range(1, a + 1):\n        if i ** 3\
    \ == a:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ (a > 0 and a ** (1 / 3) == int(a ** (1 / 3)))\n\n\ndef check(candidate):\n \
    \   assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcwjvevj4.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpcwjvevj4.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpcwjvevj4.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ a == 8 or a == 27 or a == 64 or a == 125 or a == 216 or a == 343 or a == 512\
    \ or a == 729 or a == 1000 or a == 1331 or a == 1728 or a == 2197 or a == 2744\
    \ or a == 3375 or a == 4096 or a == 4913 or a == 5832 or a == 6859 or a == 8000\
    \ or a == 9261 or a == 10648 or a == 12167 or a == 13824 or a == 15625 or a ==\
    \ 17576 or a == 19683 or a == 21952 or a == 24389 or a == 27000 or a == 29791\
    \ or a == 32768 or a == 35937 or a == 39304 or a == 42875 or a == 46656 or a ==\
    \ 50653 or a == 54872 or a == 59319 or a == 64000 or a == 68921 or a == 74088\
    \ or a == 79507 or a == 85184 or a == 91125 or a == 97336 or a == 103823 or a\
    \ == 110592 or a == 117649 or a == 125000 or a == 132651 or a == 140608 or a ==\
    \ 148877 or a == 157464 or a == 166375 or a == 175616 or a == 185193 or a == 195112\
    \ or a == 205379 or a == 216000 or a == 226981 or a == 238328 or a == 250047 or\
    \ a == 262144 or a == 274625 or a == 287496 or a == 300763 or a == 314432 or a\
    \ == 328509 or a == 343000 or a == 357911 or a == 373248 or a == 389017 or a ==\
    \ 405224 or a == 421875 or a == 438976 or a == 456533 or a == 474552 or a == 493039\
    \ or a == 512000 or a == 531441 or a == 551368 or a == 571787 or a == 592704 or\
    \ a == 614125 or a == 636056 or a == 658503 or a == 681472 or a == 704969 or a\
    \ == 729000 or a == 753571 or a == 778688 or a == 804357 or a == 830584 or a ==\
    \ 857\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ a == 8 or a == 27 or a == 64 or a == 125 or a == 216 or a == 343 or a == 512\
    \ or a == 729 or a == 1000 or a == 1331 or a == 1728 or a == 2197 or a == 2744\
    \ or a == 3375 or a == 4096 or a == 4913 or a == 5832 or a == 6859 or a == 8000\
    \ or a == 9261 or a == 10648 or a == 12167 or a == 13824 or a == 15625 or a ==\
    \ 17576 or a == 19683 or a == 21952 or a == 24389 or a == 27000 or a == 29791\
    \ or a == 32768 or a == 35937 or a == 39304 or a == 42875 or a == 46656 or a ==\
    \ 50653 or a == 54872 or a == 59319 or a == 64000 or a == 68921 or a == 74088\
    \ or a == 79507 or a == 85184 or a == 91125 or a == 97336 or a == 103823 or a\
    \ == 110592 or a == 117649 or a == 125000 or a == 132651 or a == 140608 or a ==\
    \ 148877 or a == 157464 or a == 166375 or a == 175616 or a == 185193 or a == 195112\
    \ or a == 205379 or a == 216000 or a == 226981 or a == 238328 or a == 250047 or\
    \ a == 262144 or a == 274625 or a == 287496 or a == 300763 or a == 314432 or a\
    \ == 328509 or a == 343000 or a == 357911 or a == 373248 or a == 389017 or a ==\
    \ 405224 or a == 421875 or a == 438976 or a == 456533 or a == 474552 or a == 493039\
    \ or a == 512000 or a == 531441 or a == 551368 or a == 571787 or a == 592704 or\
    \ a == 614125 or a == 636056 or a == 658503 or a == 681472 or a == 704969 or a\
    \ == 729000 or a == 753571 or a == 778688 or a == 804357 or a == 830584 or a ==\
    \ 857\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ (a > 0 and a ** (1 / 3) % 1 == 0)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi0gstgo7.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi0gstgo7.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi0gstgo7.py\"\
    , line 27, in check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  if a < 0:\n        a = -a\n    for i in range(1, a + 1):\n        if i * i\
    \ * i == a:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ a == int(round(a ** (1 / 3))))\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk64w3y7q.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpk64w3y7q.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpk64w3y7q.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(abs(a)\
    \ ** (1 / 3)) ** 3 == abs(a))\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptbiue3gz.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmptbiue3gz.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmptbiue3gz.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a >= 0 and a ** (1 / 3) % 1 ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfkxl1lgt.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpfkxl1lgt.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpfkxl1lgt.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ (a > 0 and a == int(a ** (1/3))) or (a < 0 and a == int(a ** (1/3)))\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7zpowcss.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp7zpowcss.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp7zpowcss.py\", line 26, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp51qh0w2h.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp51qh0w2h.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp51qh0w2h.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ a == int(a ** (1 / 3)) ** 3)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx6exvjj0.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpx6exvjj0.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpx6exvjj0.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a >= 0 and a == round(a ** (1\
    \ / 3)) ** 3\n\n\ndef check(candidate):\n    assert candidate(1) == True\n   \
    \ assert candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvq1xfcxl.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpvq1xfcxl.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpvq1xfcxl.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ a == round(a ** (1 / 3))) or (a < 0 and a == round(a ** (1 / 3)))\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0rivczo5.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp0rivczo5.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp0rivczo5.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp0rivczo5.py\", line\
    \ 20, in iscube\n    return a == 0 or a == 1 or (a > 0 and a == round(a ** (1\
    \ / 3))) or (a < 0 and a == round(a ** (1 / 3)))\nTypeError: type complex doesn't\
    \ define __round__ method\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and\
    \ a % 2 == 0) or (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp51qh0w2h.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp51qh0w2h.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp51qh0w2h.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ a ** (1 / 3) % 1 == 0)\n\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1rl74bvw.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp1rl74bvw.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp1rl74bvw.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ a == 8 or a == 27 or a == -8 or a == -27 or a == 64 or a == -64 or a == 125\
    \ or a == -125 or a == 216 or a == -216 or a == 343 or a == -343 or a == 512 or\
    \ a == -512 or a == 729 or a == -729 or a == 1000 or a == -1000 or a == 1331 or\
    \ a == -1331 or a == 1728 or a == -1728 or a == 2197 or a == -2197 or a == 2744\
    \ or a == -2744 or a == 3375 or a == -3375 or a == 4096 or a == -4096 or a ==\
    \ 4913 or a == -4913 or a == 5832 or a == -5832 or a == 6859 or a == -6859 or\
    \ a == 8000 or a == -8000 or a == 9261 or a == -9261 or a == 10648 or a == -10648\
    \ or a == 12167 or a == -12167 or a == 13824 or a == -13824 or a == 15625 or a\
    \ == -15625 or a == 17576 or a == -17576 or a == 19683 or a == -19683 or a ==\
    \ 21952 or a == -21952 or a == 24389 or a == -24389 or a == 27000 or a == -27000\
    \ or a == 29791 or a == -29791 or a == 32768 or a == -32768 or a == 35937 or a\
    \ == -35937 or a == 39304 or a == -39304 or a == 42875 or a == -42875 or a ==\
    \ 46656 or a == -46656 or a == 50653 or a == -50653 or a == 54872 or a == -54872\
    \ or a == 59319 or a == -59319 or a == 64000 or a == -64000 or a == 68921 or a\
    \ == -68921 or a == 74088 or a == -74088 or a == 79507 or a == -79507 or a ==\
    \ 85184 or a == -85184 or a == 91125 or a == -91125 or a == 97336 or a == -97336\
    \ or a == 103823 or a == -103823 or a\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt99x_kzc.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt99x_kzc.py\"\
    , line 32, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt99x_kzc.py\"\
    , line 23, in check\n    assert candidate(2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ a == 8 or a == 27 or a == 64 or a == 125 or a == 216 or a == 343 or a == 512\
    \ or a == 729 or a == 1000 or a == 1331 or a == 1728 or a == 2197 or a == 2744\
    \ or a == 3375 or a == 4096 or a == 4913 or a == 5832 or a == 6859 or a == 8000\
    \ or a == 9261 or a == 10648 or a == 12167 or a == 13824 or a == 15625 or a ==\
    \ 17576 or a == 19683 or a == 21952 or a == 24389 or a == 27000 or a == 29791\
    \ or a == 32768 or a == 35937 or a == 39304 or a == 42875 or a == 46656 or a ==\
    \ 50653 or a == 54872 or a == 59319 or a == 64000 or a == 68921 or a == 74088\
    \ or a == 79507 or a == 85184 or a == 91125 or a == 97336 or a == 103823 or a\
    \ == 110592 or a == 117649 or a == 125000 or a == 132651 or a == 140608 or a ==\
    \ 148877 or a == 157464 or a == 166375 or a == 175616 or a == 185193 or a == 195112\
    \ or a == 205379 or a == 216000 or a == 226981 or a == 238328 or a == 250047 or\
    \ a == 262144 or a == 274625 or a == 287496 or a == 300763 or a == 314432 or a\
    \ == 328509 or a == 343000 or a == 357911 or a == 373248 or a == 389017 or a ==\
    \ 405224 or a == 421875 or a == 438976 or a == 456533 or a == 474552 or a == 493039\
    \ or a == 512000 or a == 531441 or a == 551368 or a == 571787 or a == 592704 or\
    \ a == 614125 or a == 636056 or a == 658503 or a == 681472 or a == 704969 or a\
    \ == 729000 or a == 753571 or a == 778688 or a == 804357 or a == 830584 or a ==\
    \ 857\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and a ** (1\
    \ / 3) % 1 == 0)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsm10if5o.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpsm10if5o.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpsm10if5o.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and\
    \ a % 2 == 0) or (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ a == 8 or a == 27 or a == 64 or a == 125 or a == 216 or a == 343 or a == 512\
    \ or a == 729 or a == 1000 or a == 1331 or a == 1728 or a == 2197 or a == 2744\
    \ or a == 3375 or a == 4096 or a == 4913 or a == 5832 or a == 6859 or a == 8000\
    \ or a == 9261 or a == 10648 or a == 12167 or a == 13824 or a == 15625 or a ==\
    \ 17576 or a == 19683 or a == 21952 or a == 24389 or a == 27000 or a == 29791\
    \ or a == 32768 or a == 35937 or a == 39304 or a == 42875 or a == 46656 or a ==\
    \ 50653 or a == 54872 or a == 59319 or a == 64000 or a == 68921 or a == 74088\
    \ or a == 79507 or a == 85184 or a == 91125 or a == 97336 or a == 103823 or a\
    \ == 110592 or a == 117649 or a == 125000 or a == 132651 or a == 140608 or a ==\
    \ 148877 or a == 157464 or a == 166375 or a == 175616 or a == 185193 or a == 195112\
    \ or a == 205379 or a == 216000 or a == 226981 or a == 238328 or a == 250047 or\
    \ a == 262144 or a == 274625 or a == 287496 or a == 300763 or a == 314432 or a\
    \ == 328509 or a == 343000 or a == 357911 or a == 373248 or a == 389017 or a ==\
    \ 405224 or a == 421875 or a == 438976 or a == 456533 or a == 474552 or a == 493039\
    \ or a == 512000 or a == 531441 or a == 551368 or a == 571787 or a == 592704 or\
    \ a == 614125 or a == 636056 or a == 658503 or a == 681472 or a == 704969 or a\
    \ == 729000 or a == 753571 or a == 778688 or a == 804357 or a == 830584 or a ==\
    \ 857\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  if a < 0:\n        a = -a\n    i = 1\n    while i ** 3 <= a:\n        if i\
    \ ** 3 == a:\n            return True\n        i += 1\n    return False\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppihi2nsa.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and\
    \ a % 2 == 0) or (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_poovdc.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpi_poovdc.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpi_poovdc.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ int(a ** (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6od8gvxr.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  if a < 0:\n        a = -a\n    return int(a ** (1 / 3)) ** 3 == a\n\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0cvotjm1.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp0cvotjm1.py\", line 38,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp0cvotjm1.py\", line 31, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  elif a < 0:\n        a = -a\n    for i in range(1, a + 1):\n        if i **\
    \ 3 == a:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and\
    \ a % 2 == 0) or (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 34, in test_check\n    check(iscube)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcet7_m30.py\"\
    , line 26, in check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
