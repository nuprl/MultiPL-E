name: HumanEval_147_get_max_triples
language: py
results:
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n - 1) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 +\
    \ j * j - j + 1 + k * j - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn56tswga.py\"\
    , line 27, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn56tswga.py\"\
    , line 25, in test_check\n    check(get_max_triples)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn56tswga.py\"\
    , line 21, in check\n    assert candidate(10) == 36\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n - 1) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 +\
    \ j * j - j + 1 + k * j - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps_zu8hlv.py\"\
    , line 27, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps_zu8hlv.py\"\
    , line 25, in test_check\n    check(get_max_triples)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps_zu8hlv.py\"\
    , line 21, in check\n    assert candidate(10) == 36\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(n)\
    \ for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1e6ynwpw.py\"\
    , line 27, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1e6ynwpw.py\"\
    , line 25, in test_check\n    check(get_max_triples)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1e6ynwpw.py\"\
    , line 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpki36h8eq.py\"\
    , line 27, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpki36h8eq.py\"\
    , line 25, in test_check\n    check(get_max_triples)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpki36h8eq.py\"\
    , line 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    # return sum(1 for i in range(n - 2) for j in range(i + 1, n -\
    \ 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n    return sum(1\
    \ for i in range(1, n - 1) for j in range(i + 1, n) if (i * i - i + 1 + j * j\
    \ - j + 1 + (i + j) * (i + j) - i - j + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpih35p1uv.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpih35p1uv.py\"\
    , line 27, in test_check\n    check(get_max_triples)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpih35p1uv.py\"\
    , line 21, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n - 1) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 +\
    \ j * j - j + 1 + k * j - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw63ab5mp.py\"\
    , line 27, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw63ab5mp.py\"\
    , line 25, in test_check\n    check(get_max_triples)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw63ab5mp.py\"\
    , line 21, in check\n    assert candidate(10) == 36\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
