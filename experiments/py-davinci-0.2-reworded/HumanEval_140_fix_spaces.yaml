name: HumanEval_140_fix_spaces
language: py
prompt: "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text, replace\
  \ all spaces in it with underscores, \n    and if a string has more than 2 consecutive\
  \ spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces('\
  \ Example')\n    'Example'\n    >>> fix_spaces(' Example 1')\n    'Example_1'\n\
  \    >>> fix_spaces(' Example 2')\n    '_Example_2'\n    >>> fix_spaces(' Example\
  \ 3')\n    '_Example-3'\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('Example') == 'Example'\n    assert\
  \ candidate('Mudasir Hanif ') == 'Mudasir_Hanif_'\n    assert candidate('Yellow\
  \ Yellow  Dirty  Fellow') == 'Yellow_Yellow__Dirty__Fellow'\n    assert candidate('Exa\
  \   mple') == 'Exa-mple'\n    assert candidate('   Exa 1 2 2 mple') == '-Exa_1_2_2_mple'\n\
  \ndef test_check():\n    check(fix_spaces)\n\ntest_check()\n"
completions: ["    return re.sub(r'\\s+', '-', re.sub(r'\\s', '_', text.strip()))\n",
  "    return re.sub(r'\\s+', '-', re.sub(r'\\s', '_', text)).strip('_')\n", "   \
    \ return re.sub(r' {2,}', '-', re.sub(r' ', '_', text.strip()))\n", "    # YOUR\
    \ CODE HERE\n    text = text.strip()\n    text = text.replace(' ', '_')\n    text\
    \ = text.replace('__', '-')\n    return text\n", "    return re.sub(r'\\s{2,}',\
    \ '-', re.sub(r'\\s', '_', text.strip()))\n", "    text = text.strip()\n    text\
    \ = text.replace(' ', '_')\n    text = re.sub(r'_{2,}', '-', text)\n    return\
    \ text\n\n", "    return re.sub(r'\\s+', '-', re.sub(r'\\s', '_', text.strip()))\n",
  "    return re.sub(r'\\s+', '-', re.sub(r'\\s', '_', text.strip()))\n", "    text\
    \ = text.strip()\n    text = text.replace(' ', '_')\n    text = re.sub(r'_{2,}',\
    \ '-', text)\n    return text\n", "    text = text.strip()\n    text = text.replace('\
    \ ', '_')\n    text = re.sub(r'_{2,}', '-', text)\n    return text\n", "    return\
    \ re.sub(r'\\s{2,}', '-', re.sub(r'\\s', '_', text.strip()))\n", "    text = text.strip()\n\
    \    text = re.sub(r'\\s+', '-', text)\n    text = re.sub(r'\\s', '_', text)\n\
    \    return text\n", "    return re.sub(r'\\s+', lambda x: '-' if len(x.group())\
    \ > 2 else '_', text.strip())\n", "    text = text.strip()\n    text = text.replace('\
    \ ', '_')\n    text = re.sub(r'_{2,}', '-', text)\n    return text\n", "    return\
    \ re.sub(r'\\s+', '-', re.sub(r'\\s', '_', text.strip()))\n\n", "    return re.sub(r'\\\
    s{2,}', '-', re.sub(r'\\s', '_', text.strip()))\n", "    if text[0] == ' ':\n\
    \        text = '_' + text[1:]\n    if '  ' in text:\n        text = text.replace('\
    \  ', '-')\n    return text.replace(' ', '_')\n", "    text = text.strip()\n \
    \   text = text.replace(' ', '_')\n    text = re.sub(r'_{2,}', '-', text)\n  \
    \  return text\n\n", "    return re.sub(r'\\s+', '-', re.sub(r'\\s', '_', text.strip()))\n",
  "    text = text.strip()\n    text = text.replace(' ', '_')\n    text = re.sub(r'_{2,}',\
    \ '-', text)\n    return text\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
