language: py
name: HumanEval_41_car_race_collision
results:
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpma4k0swp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpma4k0swp.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpma4k0swp.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpma4k0swp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpma4k0swp.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpma4k0swp.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return 0\n\n\ndef check(candidate):\n\
    \    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4)\
    \ == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\ndef\
    \ test_check():\n    check(car_race_collision)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ivae_ze.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp3ivae_ze.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp3ivae_ze.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpma4k0swp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpma4k0swp.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpma4k0swp.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1)\n\
    \n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9xaj44jk.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp9xaj44jk.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp9xaj44jk.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # YOUR CODE HERE\n \
    \   raise NotImplementedError()\n\n\ndef check(candidate):\n    assert candidate(2)\
    \ == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert\
    \ candidate(8) == 64\n    assert candidate(10) == 100\n\ndef test_check():\n \
    \   check(car_race_collision)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfvh94iaf.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfvh94iaf.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpfvh94iaf.py\"\
    , line 18, in check\n    assert candidate(2) == 4\n  File \"/tmp/tmpfvh94iaf.py\"\
    , line 14, in car_race_collision\n    raise NotImplementedError()\nNotImplementedError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpma4k0swp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpma4k0swp.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpma4k0swp.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return (n * (n - 1))\
    \ // 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnmxzq8p6.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpnmxzq8p6.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpnmxzq8p6.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # The idea is to sort\
    \ the cars by their starting positions.\n    # Then, we can simulate the race\
    \ by iterating through the cars\n    # from left to right, and counting the number\
    \ of cars that are\n    # moving right to left.\n    #\n    # The time complexity\
    \ is O(n log n) because of the sorting.\n    # The space complexity is O(n) because\
    \ of the sorting.\n    #\n    # The time complexity can be improved to O(n) by\
    \ using a\n    # counting sort.  The space complexity can be improved to\n   \
    \ # O(1) by using a bucket sort.\n    left_to_right = [0] * n\n    right_to_left\
    \ = [0] * n\n    for i in range(n):\n        left_to_right[i] = int(input())\n\
    \        right_to_left[i] = int(input())\n    left_to_right.sort()\n    right_to_left.sort()\n\
    \    collisions = 0\n    left_to_right_index = 0\n    right_to_left_index = 0\n\
    \    while left_to_right_index < n and right_to_left_index < n:\n        if left_to_right[left_to_right_index]\
    \ < right_to_left[right_to_left_index]:\n            collisions += right_to_left_index\n\
    \            left_to_right_index += 1\n        else:\n            right_to_left_index\
    \ += 1\n    return collisions\n\n\ndef check(candidate):\n    assert candidate(2)\
    \ == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert\
    \ candidate(8) == 64\n    assert candidate(10) == 100\n\ndef test_check():\n \
    \   check(car_race_collision)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqv_ewczw.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpqv_ewczw.py\", line 51,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpqv_ewczw.py\"\
    , line 44, in check\n    assert candidate(2) == 4\n  File \"/tmp/tmpqv_ewczw.py\"\
    , line 27, in car_race_collision\n    left_to_right[i] = int(input())\nEOFError:\
    \ EOF when reading a line\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpma4k0swp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpma4k0swp.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpma4k0swp.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpma4k0swp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpma4k0swp.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpma4k0swp.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: Implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplqd1igzn.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmplqd1igzn.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmplqd1igzn.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpma4k0swp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpma4k0swp.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpma4k0swp.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: Implement this\
    \ function.\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7v9hkepv.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp7v9hkepv.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7v9hkepv.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpma4k0swp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpma4k0swp.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpma4k0swp.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert\
    \ candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) ==\
    \ 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6l_8ektw.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp6l_8ektw.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp6l_8ektw.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: Implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplqd1igzn.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmplqd1igzn.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmplqd1igzn.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpma4k0swp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpma4k0swp.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpma4k0swp.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function.\n    # Hint: you can use the function you wrote for the previous question.\n\
    \    return 0\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert\
    \ candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) ==\
    \ 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7lls8soi.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp7lls8soi.py\", line 26,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7lls8soi.py\"\
    , line 19, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: Implement this\
    \ function.\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7v9hkepv.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp7v9hkepv.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7v9hkepv.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpma4k0swp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpma4k0swp.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpma4k0swp.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpma4k0swp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpma4k0swp.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpma4k0swp.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpma4k0swp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpma4k0swp.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpma4k0swp.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: Implement this\
    \ function.\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7v9hkepv.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp7v9hkepv.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7v9hkepv.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: Implement this\
    \ function.\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7v9hkepv.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp7v9hkepv.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7v9hkepv.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: Implement this\
    \ function.\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7v9hkepv.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp7v9hkepv.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7v9hkepv.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpma4k0swp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpma4k0swp.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpma4k0swp.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: Implement this\
    \ function.\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7v9hkepv.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp7v9hkepv.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7v9hkepv.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1)\n\
    \n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9xaj44jk.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp9xaj44jk.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp9xaj44jk.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpllcy7ymu.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpllcy7ymu.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpllcy7ymu.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: Implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplqd1igzn.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmplqd1igzn.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmplqd1igzn.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # The idea is to sort\
    \ the cars by their starting positions.\n    # Then, we can count the number of\
    \ collisions by counting the number of cars\n    # that are moving in the same\
    \ direction.\n    #\n    # For example, if we have the following cars:\n    #\n\
    \    #   Car 1:  left to right, starting position 0\n    #   Car 2:  left to right,\
    \ starting position 1\n    #   Car 3:  left to right, starting position 2\n  \
    \  #   Car 4:  right to left, starting position 3\n    #   Car 5:  right to left,\
    \ starting position 4\n    #   Car 6:  right to left, starting position 5\n  \
    \  #\n    # Then, we can sort the cars by their starting positions:\n    #\n \
    \   #   Car 1:  left to right, starting position 0\n    #   Car 2:  left to right,\
    \ starting position 1\n    #   Car 3:  left to right, starting position 2\n  \
    \  #   Car 4:  right to left, starting position 3\n    #   Car 5:  right to left,\
    \ starting position 4\n    #   Car 6:  right to left, starting position 5\n  \
    \  #\n    # Then, we can count the number of collisions by counting the number\
    \ of cars\n    # that are moving in the same direction:\n    #\n    #   Car 1:\
    \  left to right, starting position 0\n    #   Car 2:  left to right, starting\
    \ position 1\n    #   Car 3:  left to right, starting position 2\n    #   Car\
    \ 4:  right to left, starting position 3\n    #   Car 5:  right to left, starting\
    \ position 4\n    #   Car 6:  right to left, starting position 5\n    #\n    #\
    \ We can see that there are 3 collisions.\n    #\n    # The time complexity is\
    \ O(n log n) because we need to sort the cars.\n    # The space complexity is\
    \ O(n) because we need to store the cars.\n    #\n    # The following is a proof\
    \ of correctness.\n    #\n    # Let's say that we have two cars that collide.\n\
    \    # Let's say that the first car is moving left to right and the second car\
    \ is moving right to left.\n    #\n    # Let's say\ndef check(candidate):\n  \
    \  assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4)\
    \ == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\ndef\
    \ test_check():\n    check(car_race_collision)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd9fvny_0.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmpd9fvny_0.py\", line 64,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpd9fvny_0.py\"\
    , line 57, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpma4k0swp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpma4k0swp.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpma4k0swp.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    left_to_right = [i for\
    \ i in range(n)]\n    right_to_left = [i for i in range(n, 2 * n)]\n    collisions\
    \ = 0\n    for i in range(n):\n        if left_to_right[i] == right_to_left[i]:\n\
    \            collisions += 1\n    return collisions\n\n\ndef check(candidate):\n\
    \    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4)\
    \ == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\ndef\
    \ test_check():\n    check(car_race_collision)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpth8kpcm7.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpth8kpcm7.py\", line 30,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpth8kpcm7.py\"\
    , line 23, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpma4k0swp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpma4k0swp.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpma4k0swp.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpma4k0swp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpma4k0swp.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpma4k0swp.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpma4k0swp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpma4k0swp.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpma4k0swp.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return 0\n\n\ndef check(candidate):\n\
    \    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4)\
    \ == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\ndef\
    \ test_check():\n    check(car_race_collision)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ivae_ze.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp3ivae_ze.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp3ivae_ze.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1)\n\
    \n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9xaj44jk.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp9xaj44jk.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp9xaj44jk.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpma4k0swp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpma4k0swp.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpma4k0swp.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: Implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplqd1igzn.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmplqd1igzn.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmplqd1igzn.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: Implement this\
    \ function.\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7v9hkepv.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp7v9hkepv.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7v9hkepv.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1)\n\
    \n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9xaj44jk.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp9xaj44jk.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp9xaj44jk.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: Implement this\
    \ function.\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2)\
    \ == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert\
    \ candidate(8) == 64\n    assert candidate(10) == 100\n\ndef test_check():\n \
    \   check(car_race_collision)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmoeev3sg.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpmoeev3sg.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpmoeev3sg.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function.\n    # Hint: use a priority queue to keep track of the cars.\n   \
    \ # Hint: use a set to keep track of the cars that have already collided.\n  \
    \  # Hint: use a heap to keep track of the cars.\n    # Hint: use a dictionary\
    \ to keep track of the cars.\n    # Hint: use a list to keep track of the cars.\n\
    \    # Hint: use a tuple to keep track of the cars.\n    # Hint: use a set to\
    \ keep track of the cars.\n    # Hint: use a stack to keep track of the cars.\n\
    \    # Hint: use a queue to keep track of the cars.\n    # Hint: use a linked\
    \ list to keep track of the cars.\n    # Hint: use a binary search tree to keep\
    \ track of the cars.\n    # Hint: use a tree to keep track of the cars.\n    #\
    \ Hint: use a graph to keep track of the cars.\n    # Hint: use a hash table to\
    \ keep track of the cars.\n    # Hint: use a set to keep track of the cars.\n\
    \    # Hint: use a dictionary to keep track of the cars.\n    # Hint: use a list\
    \ to keep track of the cars.\n    # Hint: use a tuple to keep track of the cars.\n\
    \    # Hint: use a set to keep track of the cars.\n    # Hint: use a stack to\
    \ keep track of the cars.\n    # Hint: use a queue to keep track of the cars.\n\
    \    # Hint: use a linked list to keep track of the cars.\n    # Hint: use a binary\
    \ search tree to keep track of the cars.\n    # Hint: use a tree to keep track\
    \ of the cars.\n    # Hint: use a graph to keep track of the cars.\n    # Hint:\
    \ use a hash table to keep track of the cars.\n    # Hint: use a set to keep track\
    \ of the cars.\n    # Hint: use a dictionary to keep track of the cars.\n    #\
    \ Hint: use a list to keep track of the cars.\n    # Hint: use a tuple to keep\
    \ track of the cars.\n    # Hint: use a set\ndef check(candidate):\n    assert\
    \ candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) ==\
    \ 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\ndef test_check():\n\
    \    check(car_race_collision)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm390bkif.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpm390bkif.py\", line 53,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpm390bkif.py\"\
    , line 46, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: Implement this\
    \ function.\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7v9hkepv.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp7v9hkepv.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7v9hkepv.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpma4k0swp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpma4k0swp.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpma4k0swp.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    if n < 1:\n        return\
    \ 0\n    return n * (n - 1)\n\n\ndef check(candidate):\n    assert candidate(2)\
    \ == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert\
    \ candidate(8) == 64\n    assert candidate(10) == 100\n\ndef test_check():\n \
    \   check(car_race_collision)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprcm1kf0s.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmprcm1kf0s.py\", line 26,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmprcm1kf0s.py\"\
    , line 19, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return 0\n\n\ndef check(candidate):\n\
    \    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4)\
    \ == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\ndef\
    \ test_check():\n    check(car_race_collision)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ivae_ze.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp3ivae_ze.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp3ivae_ze.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx9t4gab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxx9t4gab.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxx9t4gab.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpma4k0swp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpma4k0swp.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpma4k0swp.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
- exit_code: -1
  program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7shrf0lq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7shrf0lq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7shrf0lq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659792555
