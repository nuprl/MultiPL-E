name: HumanEval_128_prod_signs
language: py
results:
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_of_magnitudes\
    \ = 0\n    for num in arr:\n        if num == 0:\n            continue\n     \
    \   prod *= num / abs(num)\n        sum_of_magnitudes += abs(num)\n    return\
    \ prod * sum_of_magnitudes\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl3jcho73.py\"\
    , line 41, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl3jcho73.py\"\
    , line 39, in test_check\n    check(prod_signs)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl3jcho73.py\"\
    , line 30, in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n\
    \    for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magn\
    \ = 0\n    for num in arr:\n        if num == 0:\n            prod = 0\n     \
    \       sum_magn = 0\n            break\n        elif num > 0:\n            prod\
    \ *= 1\n        else:\n            prod *= -1\n        sum_magn += abs(num)\n\
    \    return sum_magn * prod\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_mag =\
    \ 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n       \
    \ elif num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n\
    \        sum_mag += abs(num)\n    return sum_mag * prod\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n\
    \    for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magnitudes\
    \ = 0\n    for n in arr:\n        if n > 0:\n            prod *= 1\n        elif\
    \ n < 0:\n            prod *= -1\n        else:\n            prod *= 0\n     \
    \   sum_magnitudes += abs(n)\n    return sum_magnitudes * prod\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n\
    \    for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_abs =\
    \ 0\n    for num in arr:\n        if num == 0:\n            return 0\n       \
    \ prod *= num // abs(num)\n        sum_abs += abs(num)\n    return prod * sum_abs\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n\
    \    for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magn\
    \ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n        elif\
    \ i < 0:\n            prod *= -1\n        else:\n            prod *= 0\n     \
    \   sum_magn += abs(i)\n    return sum_magn * prod\ndef check(candidate):\n  \
    \  assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magn\
    \ = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n     \
    \   elif num < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_magn += abs(num)\n    return sum_magn * prod\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n\
    \    for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    for num in\
    \ arr:\n        if num > 0:\n            prod *= 1\n        elif num < 0:\n  \
    \          prod *= -1\n        else:\n            prod *= 0\n    return sum(map(abs,\
    \ arr)) * prod\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) ==\
    \ -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3,\
    \ -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,\
    \ 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n\
    \    for num in arr:\n        if num == 0:\n            prod = 0\n           \
    \ break\n        elif num > 0:\n            prod *= 1\n        else:\n       \
    \     prod *= -1\n        sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n\
    \    for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n\
    \    for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_mag =\
    \ 0\n    for num in arr:\n        if num < 0:\n            prod *= -1\n      \
    \  sum_mag += abs(num)\n    return sum_mag * prod\ndef check(candidate):\n   \
    \ assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n \
    \   assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdopn0vs7.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdopn0vs7.py\"\
    , line 38, in test_check\n    check(prod_signs)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdopn0vs7.py\"\
    , line 29, in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n\
    \    for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n\
    \    for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n\
    \    for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
