name: HumanEval_81_numerical_letter_grade
language: py
results:
- program: "from typing import List\n\ndef numerical_letter_grade(grades: List[float])\
    \ -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher\
    \ has to give the grades\n    to students. The teacher has been making her own\
    \ algorithm for grading.\n    The only problem is, she has lost the code she used\
    \ for grading.\n    She has given you a list of GPAs for some students and you\
    \ have to write \n    a function that can output a list of letter grades using\
    \ the following table:\n             GPA       |    Letter grade\n           \
    \   4.0                A+\n            > 3.7                A \n            >\
    \ 3.3                A- \n            > 3.0                B+\n            > 2.7\
    \                B \n            > 2.3                B-\n            > 2.0  \
    \              C+\n            > 1.7                C\n            > 1.3     \
    \           C-\n            > 1.0                D+ \n            > 0.7      \
    \          D \n            > 0.0                D-\n              0.0        \
    \        E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n\
    \    ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n\
    \    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n\
    \    assert candidate([0.0]) == ['E']\n    assert candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0.0, 0.7]) == ['E',\
    \ 'D-']\n\ndef test_check():\n    check(numerical_letter_grade)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk856p2_e.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk856p2_e.py\"\
    , line 41, in test_check\n    check(numerical_letter_grade)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk856p2_e.py\"\
    , line 33, in check\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef numerical_letter_grade(grades: List[float])\
    \ -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher\
    \ has to give the grades\n    to students. The teacher has been making her own\
    \ algorithm for grading.\n    The only problem is, she has lost the code she used\
    \ for grading.\n    She has given you a list of GPAs for some students and you\
    \ have to write \n    a function that can output a list of letter grades using\
    \ the following table:\n             GPA       |    Letter grade\n           \
    \   4.0                A+\n            > 3.7                A \n            >\
    \ 3.3                A- \n            > 3.0                B+\n            > 2.7\
    \                B \n            > 2.3                B-\n            > 2.0  \
    \              C+\n            > 1.7                C\n            > 1.3     \
    \           C-\n            > 1.0                D+ \n            > 0.7      \
    \          D \n            > 0.0                D-\n              0.0        \
    \        E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n\
    \    ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # TODO: Write your code here\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n   \
    \ assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n  \
    \  assert candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n\
    \    assert candidate([0.0, 0.7]) == ['E', 'D-']\n\ndef test_check():\n    check(numerical_letter_grade)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzgmtomem.py\"\
    , line 44, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzgmtomem.py\"\
    , line 42, in test_check\n    check(numerical_letter_grade)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzgmtomem.py\"\
    , line 34, in check\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef numerical_letter_grade(grades: List[float])\
    \ -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher\
    \ has to give the grades\n    to students. The teacher has been making her own\
    \ algorithm for grading.\n    The only problem is, she has lost the code she used\
    \ for grading.\n    She has given you a list of GPAs for some students and you\
    \ have to write \n    a function that can output a list of letter grades using\
    \ the following table:\n             GPA       |    Letter grade\n           \
    \   4.0                A+\n            > 3.7                A \n            >\
    \ 3.3                A- \n            > 3.0                B+\n            > 2.7\
    \                B \n            > 2.3                B-\n            > 2.0  \
    \              C+\n            > 1.7                C\n            > 1.3     \
    \           C-\n            > 1.0                D+ \n            > 0.7      \
    \          D \n            > 0.0                D-\n              0.0        \
    \        E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n\
    \    ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # YOUR CODE HERE\n    return\
    \ []\n\ndef check(candidate):\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) ==\
    \ ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert\
    \ candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert\
    \ candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert\
    \ candidate([0.0, 0.7]) == ['E', 'D-']\n\ndef test_check():\n    check(numerical_letter_grade)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx5tjj0x9.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx5tjj0x9.py\"\
    , line 41, in test_check\n    check(numerical_letter_grade)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx5tjj0x9.py\"\
    , line 33, in check\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef numerical_letter_grade(grades: List[float])\
    \ -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher\
    \ has to give the grades\n    to students. The teacher has been making her own\
    \ algorithm for grading.\n    The only problem is, she has lost the code she used\
    \ for grading.\n    She has given you a list of GPAs for some students and you\
    \ have to write \n    a function that can output a list of letter grades using\
    \ the following table:\n             GPA       |    Letter grade\n           \
    \   4.0                A+\n            > 3.7                A \n            >\
    \ 3.3                A- \n            > 3.0                B+\n            > 2.7\
    \                B \n            > 2.3                B-\n            > 2.0  \
    \              C+\n            > 1.7                C\n            > 1.3     \
    \           C-\n            > 1.0                D+ \n            > 0.7      \
    \          D \n            > 0.0                D-\n              0.0        \
    \        E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n\
    \    ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for\
    \ grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n\
    \        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif\
    \ grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >=\
    \ 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n \
    \           letter_grades.append('B')\n        elif grade >= 2.3:\n          \
    \  letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n\
    \        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif\
    \ grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >=\
    \ 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n \
    \           letter_grades.append('D')\n        elif grade >= 0.0:\n          \
    \  letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n\
    \    return letter_grades\n\ndef check(candidate):\n    assert candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2])\
    \ == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0])\
    \ == ['E']\n    assert candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-',\
    \ 'B', 'B+']\n    assert candidate([0.0, 0.7]) == ['E', 'D-']\n\ndef test_check():\n\
    \    check(numerical_letter_grade)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyvtfyhye.py\"\
    , line 70, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyvtfyhye.py\"\
    , line 68, in test_check\n    check(numerical_letter_grade)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyvtfyhye.py\"\
    , line 60, in check\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef numerical_letter_grade(grades: List[float])\
    \ -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher\
    \ has to give the grades\n    to students. The teacher has been making her own\
    \ algorithm for grading.\n    The only problem is, she has lost the code she used\
    \ for grading.\n    She has given you a list of GPAs for some students and you\
    \ have to write \n    a function that can output a list of letter grades using\
    \ the following table:\n             GPA       |    Letter grade\n           \
    \   4.0                A+\n            > 3.7                A \n            >\
    \ 3.3                A- \n            > 3.0                B+\n            > 2.7\
    \                B \n            > 2.3                B-\n            > 2.0  \
    \              C+\n            > 1.7                C\n            > 1.3     \
    \           C-\n            > 1.0                D+ \n            > 0.7      \
    \          D \n            > 0.0                D-\n              0.0        \
    \        E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n\
    \    ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Your code goes here\n   \
    \ return []\n\ndef check(candidate):\n    assert candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n   \
    \ assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n  \
    \  assert candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n\
    \    assert candidate([0.0, 0.7]) == ['E', 'D-']\n\ndef test_check():\n    check(numerical_letter_grade)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ghdbv7_.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ghdbv7_.py\"\
    , line 41, in test_check\n    check(numerical_letter_grade)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ghdbv7_.py\"\
    , line 33, in check\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef numerical_letter_grade(grades: List[float])\
    \ -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher\
    \ has to give the grades\n    to students. The teacher has been making her own\
    \ algorithm for grading.\n    The only problem is, she has lost the code she used\
    \ for grading.\n    She has given you a list of GPAs for some students and you\
    \ have to write \n    a function that can output a list of letter grades using\
    \ the following table:\n             GPA       |    Letter grade\n           \
    \   4.0                A+\n            > 3.7                A \n            >\
    \ 3.3                A- \n            > 3.0                B+\n            > 2.7\
    \                B \n            > 2.3                B-\n            > 2.0  \
    \              C+\n            > 1.7                C\n            > 1.3     \
    \           C-\n            > 1.0                D+ \n            > 0.7      \
    \          D \n            > 0.0                D-\n              0.0        \
    \        E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n\
    \    ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # TODO: Write your code here\n\
    \    pass\n\ndef check(candidate):\n    assert candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n   \
    \ assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n  \
    \  assert candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n\
    \    assert candidate([0.0, 0.7]) == ['E', 'D-']\n\ndef test_check():\n    check(numerical_letter_grade)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfi7_dgui.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfi7_dgui.py\"\
    , line 41, in test_check\n    check(numerical_letter_grade)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfi7_dgui.py\"\
    , line 33, in check\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef numerical_letter_grade(grades: List[float])\
    \ -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher\
    \ has to give the grades\n    to students. The teacher has been making her own\
    \ algorithm for grading.\n    The only problem is, she has lost the code she used\
    \ for grading.\n    She has given you a list of GPAs for some students and you\
    \ have to write \n    a function that can output a list of letter grades using\
    \ the following table:\n             GPA       |    Letter grade\n           \
    \   4.0                A+\n            > 3.7                A \n            >\
    \ 3.3                A- \n            > 3.0                B+\n            > 2.7\
    \                B \n            > 2.3                B-\n            > 2.0  \
    \              C+\n            > 1.7                C\n            > 1.3     \
    \           C-\n            > 1.0                D+ \n            > 0.7      \
    \          D \n            > 0.0                D-\n              0.0        \
    \        E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n\
    \    ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # YOUR CODE HERE\n    return\
    \ []\n\ndef check(candidate):\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) ==\
    \ ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert\
    \ candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert\
    \ candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert\
    \ candidate([0.0, 0.7]) == ['E', 'D-']\n\ndef test_check():\n    check(numerical_letter_grade)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqkkzz2pe.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqkkzz2pe.py\"\
    , line 41, in test_check\n    check(numerical_letter_grade)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqkkzz2pe.py\"\
    , line 33, in check\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef numerical_letter_grade(grades: List[float])\
    \ -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher\
    \ has to give the grades\n    to students. The teacher has been making her own\
    \ algorithm for grading.\n    The only problem is, she has lost the code she used\
    \ for grading.\n    She has given you a list of GPAs for some students and you\
    \ have to write \n    a function that can output a list of letter grades using\
    \ the following table:\n             GPA       |    Letter grade\n           \
    \   4.0                A+\n            > 3.7                A \n            >\
    \ 3.3                A- \n            > 3.0                B+\n            > 2.7\
    \                B \n            > 2.3                B-\n            > 2.0  \
    \              C+\n            > 1.7                C\n            > 1.3     \
    \           C-\n            > 1.0                D+ \n            > 0.7      \
    \          D \n            > 0.0                D-\n              0.0        \
    \        E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n\
    \    ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for\
    \ grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n\
    \        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif\
    \ grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >=\
    \ 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n \
    \           letter_grades.append('B')\n        elif grade >= 2.3:\n          \
    \  letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n\
    \        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif\
    \ grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >=\
    \ 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n \
    \           letter_grades.append('D')\n        elif grade >= 0.0:\n          \
    \  letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n\
    \    return letter_grades\n\ndef check(candidate):\n    assert candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2])\
    \ == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0])\
    \ == ['E']\n    assert candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-',\
    \ 'B', 'B+']\n    assert candidate([0.0, 0.7]) == ['E', 'D-']\n\ndef test_check():\n\
    \    check(numerical_letter_grade)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj3cb45vj.py\"\
    , line 70, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj3cb45vj.py\"\
    , line 68, in test_check\n    check(numerical_letter_grade)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj3cb45vj.py\"\
    , line 60, in check\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef numerical_letter_grade(grades: List[float])\
    \ -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher\
    \ has to give the grades\n    to students. The teacher has been making her own\
    \ algorithm for grading.\n    The only problem is, she has lost the code she used\
    \ for grading.\n    She has given you a list of GPAs for some students and you\
    \ have to write \n    a function that can output a list of letter grades using\
    \ the following table:\n             GPA       |    Letter grade\n           \
    \   4.0                A+\n            > 3.7                A \n            >\
    \ 3.3                A- \n            > 3.0                B+\n            > 2.7\
    \                B \n            > 2.3                B-\n            > 2.0  \
    \              C+\n            > 1.7                C\n            > 1.3     \
    \           C-\n            > 1.0                D+ \n            > 0.7      \
    \          D \n            > 0.0                D-\n              0.0        \
    \        E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n\
    \    ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for\
    \ grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n\
    \        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif\
    \ grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >=\
    \ 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n \
    \           letter_grades.append('B')\n        elif grade >= 2.3:\n          \
    \  letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n\
    \        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif\
    \ grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >=\
    \ 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n \
    \           letter_grades.append('D')\n        elif grade >= 0.0:\n          \
    \  letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n\
    \    return letter_grades\n\ndef check(candidate):\n    assert candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2])\
    \ == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0])\
    \ == ['E']\n    assert candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-',\
    \ 'B', 'B+']\n    assert candidate([0.0, 0.7]) == ['E', 'D-']\n\ndef test_check():\n\
    \    check(numerical_letter_grade)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt3x6t2sh.py\"\
    , line 70, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt3x6t2sh.py\"\
    , line 68, in test_check\n    check(numerical_letter_grade)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt3x6t2sh.py\"\
    , line 60, in check\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef numerical_letter_grade(grades: List[float])\
    \ -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher\
    \ has to give the grades\n    to students. The teacher has been making her own\
    \ algorithm for grading.\n    The only problem is, she has lost the code she used\
    \ for grading.\n    She has given you a list of GPAs for some students and you\
    \ have to write \n    a function that can output a list of letter grades using\
    \ the following table:\n             GPA       |    Letter grade\n           \
    \   4.0                A+\n            > 3.7                A \n            >\
    \ 3.3                A- \n            > 3.0                B+\n            > 2.7\
    \                B \n            > 2.3                B-\n            > 2.0  \
    \              C+\n            > 1.7                C\n            > 1.3     \
    \           C-\n            > 1.0                D+ \n            > 0.7      \
    \          D \n            > 0.0                D-\n              0.0        \
    \        E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n\
    \    ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # your code here\n    pass\n\
    \ndef check(candidate):\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+',\
    \ 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5])\
    \ == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0.0,\
    \ 0.7]) == ['E', 'D-']\n\ndef test_check():\n    check(numerical_letter_grade)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsc9ejaye.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsc9ejaye.py\"\
    , line 41, in test_check\n    check(numerical_letter_grade)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsc9ejaye.py\"\
    , line 33, in check\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef numerical_letter_grade(grades: List[float])\
    \ -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher\
    \ has to give the grades\n    to students. The teacher has been making her own\
    \ algorithm for grading.\n    The only problem is, she has lost the code she used\
    \ for grading.\n    She has given you a list of GPAs for some students and you\
    \ have to write \n    a function that can output a list of letter grades using\
    \ the following table:\n             GPA       |    Letter grade\n           \
    \   4.0                A+\n            > 3.7                A \n            >\
    \ 3.3                A- \n            > 3.0                B+\n            > 2.7\
    \                B \n            > 2.3                B-\n            > 2.0  \
    \              C+\n            > 1.7                C\n            > 1.3     \
    \           C-\n            > 1.0                D+ \n            > 0.7      \
    \          D \n            > 0.0                D-\n              0.0        \
    \        E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n\
    \    ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Your code goes here\n   \
    \ pass\n\ndef check(candidate):\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) ==\
    \ ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert\
    \ candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert\
    \ candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert\
    \ candidate([0.0, 0.7]) == ['E', 'D-']\n\ndef test_check():\n    check(numerical_letter_grade)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprmntygwr.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprmntygwr.py\"\
    , line 41, in test_check\n    check(numerical_letter_grade)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprmntygwr.py\"\
    , line 33, in check\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef numerical_letter_grade(grades: List[float])\
    \ -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher\
    \ has to give the grades\n    to students. The teacher has been making her own\
    \ algorithm for grading.\n    The only problem is, she has lost the code she used\
    \ for grading.\n    She has given you a list of GPAs for some students and you\
    \ have to write \n    a function that can output a list of letter grades using\
    \ the following table:\n             GPA       |    Letter grade\n           \
    \   4.0                A+\n            > 3.7                A \n            >\
    \ 3.3                A- \n            > 3.0                B+\n            > 2.7\
    \                B \n            > 2.3                B-\n            > 2.0  \
    \              C+\n            > 1.7                C\n            > 1.3     \
    \           C-\n            > 1.0                D+ \n            > 0.7      \
    \          D \n            > 0.0                D-\n              0.0        \
    \        E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n\
    \    ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # YOUR CODE HERE\n    pass\n\
    \ndef check(candidate):\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+',\
    \ 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5])\
    \ == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0.0,\
    \ 0.7]) == ['E', 'D-']\n\ndef test_check():\n    check(numerical_letter_grade)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdlfub77a.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdlfub77a.py\"\
    , line 41, in test_check\n    check(numerical_letter_grade)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdlfub77a.py\"\
    , line 33, in check\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef numerical_letter_grade(grades: List[float])\
    \ -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher\
    \ has to give the grades\n    to students. The teacher has been making her own\
    \ algorithm for grading.\n    The only problem is, she has lost the code she used\
    \ for grading.\n    She has given you a list of GPAs for some students and you\
    \ have to write \n    a function that can output a list of letter grades using\
    \ the following table:\n             GPA       |    Letter grade\n           \
    \   4.0                A+\n            > 3.7                A \n            >\
    \ 3.3                A- \n            > 3.0                B+\n            > 2.7\
    \                B \n            > 2.3                B-\n            > 2.0  \
    \              C+\n            > 1.7                C\n            > 1.3     \
    \           C-\n            > 1.0                D+ \n            > 0.7      \
    \          D \n            > 0.0                D-\n              0.0        \
    \        E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n\
    \    ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for\
    \ grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n\
    \        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif\
    \ grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >=\
    \ 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n \
    \           letter_grades.append('B')\n        elif grade >= 2.3:\n          \
    \  letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n\
    \        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif\
    \ grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >=\
    \ 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n \
    \           letter_grades.append('D')\n        elif grade >= 0.0:\n          \
    \  letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n\
    \    return letter_grades\n\ndef check(candidate):\n    assert candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2])\
    \ == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0])\
    \ == ['E']\n    assert candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-',\
    \ 'B', 'B+']\n    assert candidate([0.0, 0.7]) == ['E', 'D-']\n\ndef test_check():\n\
    \    check(numerical_letter_grade)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpngnr4nj3.py\"\
    , line 70, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpngnr4nj3.py\"\
    , line 68, in test_check\n    check(numerical_letter_grade)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpngnr4nj3.py\"\
    , line 60, in check\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef numerical_letter_grade(grades: List[float])\
    \ -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher\
    \ has to give the grades\n    to students. The teacher has been making her own\
    \ algorithm for grading.\n    The only problem is, she has lost the code she used\
    \ for grading.\n    She has given you a list of GPAs for some students and you\
    \ have to write \n    a function that can output a list of letter grades using\
    \ the following table:\n             GPA       |    Letter grade\n           \
    \   4.0                A+\n            > 3.7                A \n            >\
    \ 3.3                A- \n            > 3.0                B+\n            > 2.7\
    \                B \n            > 2.3                B-\n            > 2.0  \
    \              C+\n            > 1.7                C\n            > 1.3     \
    \           C-\n            > 1.0                D+ \n            > 0.7      \
    \          D \n            > 0.0                D-\n              0.0        \
    \        E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n\
    \    ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Write your code here\n  \
    \  pass\n\ndef check(candidate):\n    assert candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n   \
    \ assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n  \
    \  assert candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n\
    \    assert candidate([0.0, 0.7]) == ['E', 'D-']\n\ndef test_check():\n    check(numerical_letter_grade)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd4qiqya9.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd4qiqya9.py\"\
    , line 41, in test_check\n    check(numerical_letter_grade)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd4qiqya9.py\"\
    , line 33, in check\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef numerical_letter_grade(grades: List[float])\
    \ -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher\
    \ has to give the grades\n    to students. The teacher has been making her own\
    \ algorithm for grading.\n    The only problem is, she has lost the code she used\
    \ for grading.\n    She has given you a list of GPAs for some students and you\
    \ have to write \n    a function that can output a list of letter grades using\
    \ the following table:\n             GPA       |    Letter grade\n           \
    \   4.0                A+\n            > 3.7                A \n            >\
    \ 3.3                A- \n            > 3.0                B+\n            > 2.7\
    \                B \n            > 2.3                B-\n            > 2.0  \
    \              C+\n            > 1.7                C\n            > 1.3     \
    \           C-\n            > 1.0                D+ \n            > 0.7      \
    \          D \n            > 0.0                D-\n              0.0        \
    \        E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n\
    \    ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades_list = []\n    for i\
    \ in grades:\n        if i == 4.0:\n            grades_list.append('A+')\n   \
    \     elif i > 3.7:\n            grades_list.append('A')\n        elif i > 3.3:\n\
    \            grades_list.append('A-')\n        elif i > 3.0:\n            grades_list.append('B+')\n\
    \        elif i > 2.7:\n            grades_list.append('B')\n        elif i >\
    \ 2.3:\n            grades_list.append('B-')\n        elif i > 2.0:\n        \
    \    grades_list.append('C+')\n        elif i > 1.7:\n            grades_list.append('C')\n\
    \        elif i > 1.3:\n            grades_list.append('C-')\n        elif i >\
    \ 1.0:\n            grades_list.append('D+')\n        elif i > 0.7:\n        \
    \    grades_list.append('D')\n        elif i > 0.0:\n            grades_list.append('D-')\n\
    \        elif i == 0.0:\n            grades_list.append('E')\n    return grades_list\n\
    \ndef check(candidate):\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+',\
    \ 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5])\
    \ == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0.0,\
    \ 0.7]) == ['E', 'D-']\n\ndef test_check():\n    check(numerical_letter_grade)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef numerical_letter_grade(grades: List[float])\
    \ -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher\
    \ has to give the grades\n    to students. The teacher has been making her own\
    \ algorithm for grading.\n    The only problem is, she has lost the code she used\
    \ for grading.\n    She has given you a list of GPAs for some students and you\
    \ have to write \n    a function that can output a list of letter grades using\
    \ the following table:\n             GPA       |    Letter grade\n           \
    \   4.0                A+\n            > 3.7                A \n            >\
    \ 3.3                A- \n            > 3.0                B+\n            > 2.7\
    \                B \n            > 2.3                B-\n            > 2.0  \
    \              C+\n            > 1.7                C\n            > 1.3     \
    \           C-\n            > 1.0                D+ \n            > 0.7      \
    \          D \n            > 0.0                D-\n              0.0        \
    \        E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n\
    \    ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades_list = []\n    for grade\
    \ in grades:\n        if grade >= 4.0:\n            grades_list.append('A+')\n\
    \        elif grade >= 3.7:\n            grades_list.append('A')\n        elif\
    \ grade >= 3.3:\n            grades_list.append('A-')\n        elif grade >= 3.0:\n\
    \            grades_list.append('B+')\n        elif grade >= 2.7:\n          \
    \  grades_list.append('B')\n        elif grade >= 2.3:\n            grades_list.append('B-')\n\
    \        elif grade >= 2.0:\n            grades_list.append('C+')\n        elif\
    \ grade >= 1.7:\n            grades_list.append('C')\n        elif grade >= 1.3:\n\
    \            grades_list.append('C-')\n        elif grade >= 1.0:\n          \
    \  grades_list.append('D+')\n        elif grade >= 0.7:\n            grades_list.append('D')\n\
    \        elif grade >= 0.0:\n            grades_list.append('D-')\n        else:\n\
    \            grades_list.append('E')\n    return grades_list\n\ndef check(candidate):\n\
    \    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n\
    \    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n\
    \    assert candidate([0.0]) == ['E']\n    assert candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0.0, 0.7]) == ['E',\
    \ 'D-']\n\ndef test_check():\n    check(numerical_letter_grade)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjwytfxju.py\"\
    , line 70, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjwytfxju.py\"\
    , line 68, in test_check\n    check(numerical_letter_grade)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjwytfxju.py\"\
    , line 60, in check\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef numerical_letter_grade(grades: List[float])\
    \ -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher\
    \ has to give the grades\n    to students. The teacher has been making her own\
    \ algorithm for grading.\n    The only problem is, she has lost the code she used\
    \ for grading.\n    She has given you a list of GPAs for some students and you\
    \ have to write \n    a function that can output a list of letter grades using\
    \ the following table:\n             GPA       |    Letter grade\n           \
    \   4.0                A+\n            > 3.7                A \n            >\
    \ 3.3                A- \n            > 3.0                B+\n            > 2.7\
    \                B \n            > 2.3                B-\n            > 2.0  \
    \              C+\n            > 1.7                C\n            > 1.3     \
    \           C-\n            > 1.0                D+ \n            > 0.7      \
    \          D \n            > 0.0                D-\n              0.0        \
    \        E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n\
    \    ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades_list = []\n    for grade\
    \ in grades:\n        if grade >= 4.0:\n            grades_list.append('A+')\n\
    \        elif grade >= 3.7:\n            grades_list.append('A')\n        elif\
    \ grade >= 3.3:\n            grades_list.append('A-')\n        elif grade >= 3.0:\n\
    \            grades_list.append('B+')\n        elif grade >= 2.7:\n          \
    \  grades_list.append('B')\n        elif grade >= 2.3:\n            grades_list.append('B-')\n\
    \        elif grade >= 2.0:\n            grades_list.append('C+')\n        elif\
    \ grade >= 1.7:\n            grades_list.append('C')\n        elif grade >= 1.3:\n\
    \            grades_list.append('C-')\n        elif grade >= 1.0:\n          \
    \  grades_list.append('D+')\n        elif grade >= 0.7:\n            grades_list.append('D')\n\
    \        elif grade >= 0.0:\n            grades_list.append('D-')\n        else:\n\
    \            grades_list.append('E')\n    return grades_list\n\ndef check(candidate):\n\
    \    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n\
    \    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n\
    \    assert candidate([0.0]) == ['E']\n    assert candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0.0, 0.7]) == ['E',\
    \ 'D-']\n\ndef test_check():\n    check(numerical_letter_grade)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppvu_l6gk.py\"\
    , line 70, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppvu_l6gk.py\"\
    , line 68, in test_check\n    check(numerical_letter_grade)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppvu_l6gk.py\"\
    , line 60, in check\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef numerical_letter_grade(grades: List[float])\
    \ -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher\
    \ has to give the grades\n    to students. The teacher has been making her own\
    \ algorithm for grading.\n    The only problem is, she has lost the code she used\
    \ for grading.\n    She has given you a list of GPAs for some students and you\
    \ have to write \n    a function that can output a list of letter grades using\
    \ the following table:\n             GPA       |    Letter grade\n           \
    \   4.0                A+\n            > 3.7                A \n            >\
    \ 3.3                A- \n            > 3.0                B+\n            > 2.7\
    \                B \n            > 2.3                B-\n            > 2.0  \
    \              C+\n            > 1.7                C\n            > 1.3     \
    \           C-\n            > 1.0                D+ \n            > 0.7      \
    \          D \n            > 0.0                D-\n              0.0        \
    \        E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n\
    \    ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\ndef check(candidate):\n    assert candidate([4.0, 3,\
    \ 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) ==\
    \ ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) ==\
    \ ['E']\n    assert candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-',\
    \ 'B', 'B+']\n    assert candidate([0.0, 0.7]) == ['E', 'D-']\n\ndef test_check():\n\
    \    check(numerical_letter_grade)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw0efshc0.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw0efshc0.py\"\
    , line 41, in test_check\n    check(numerical_letter_grade)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw0efshc0.py\"\
    , line 33, in check\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw0efshc0.py\"\
    , line 30, in numerical_letter_grade\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef numerical_letter_grade(grades: List[float])\
    \ -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher\
    \ has to give the grades\n    to students. The teacher has been making her own\
    \ algorithm for grading.\n    The only problem is, she has lost the code she used\
    \ for grading.\n    She has given you a list of GPAs for some students and you\
    \ have to write \n    a function that can output a list of letter grades using\
    \ the following table:\n             GPA       |    Letter grade\n           \
    \   4.0                A+\n            > 3.7                A \n            >\
    \ 3.3                A- \n            > 3.0                B+\n            > 2.7\
    \                B \n            > 2.3                B-\n            > 2.0  \
    \              C+\n            > 1.7                C\n            > 1.3     \
    \           C-\n            > 1.0                D+ \n            > 0.7      \
    \          D \n            > 0.0                D-\n              0.0        \
    \        E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n\
    \    ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for\
    \ grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n\
    \        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif\
    \ grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >=\
    \ 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n \
    \           letter_grades.append('B')\n        elif grade >= 2.3:\n          \
    \  letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n\
    \        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif\
    \ grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >=\
    \ 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n \
    \           letter_grades.append('D')\n        elif grade >= 0.0:\n          \
    \  letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n\
    \    return letter_grades\n\ndef check(candidate):\n    assert candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2])\
    \ == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0])\
    \ == ['E']\n    assert candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-',\
    \ 'B', 'B+']\n    assert candidate([0.0, 0.7]) == ['E', 'D-']\n\ndef test_check():\n\
    \    check(numerical_letter_grade)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe9bzr7sh.py\"\
    , line 70, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe9bzr7sh.py\"\
    , line 68, in test_check\n    check(numerical_letter_grade)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe9bzr7sh.py\"\
    , line 60, in check\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef numerical_letter_grade(grades: List[float])\
    \ -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher\
    \ has to give the grades\n    to students. The teacher has been making her own\
    \ algorithm for grading.\n    The only problem is, she has lost the code she used\
    \ for grading.\n    She has given you a list of GPAs for some students and you\
    \ have to write \n    a function that can output a list of letter grades using\
    \ the following table:\n             GPA       |    Letter grade\n           \
    \   4.0                A+\n            > 3.7                A \n            >\
    \ 3.3                A- \n            > 3.0                B+\n            > 2.7\
    \                B \n            > 2.3                B-\n            > 2.0  \
    \              C+\n            > 1.7                C\n            > 1.3     \
    \           C-\n            > 1.0                D+ \n            > 0.7      \
    \          D \n            > 0.0                D-\n              0.0        \
    \        E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n\
    \    ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Your code here\n    pass\n\
    \ndef check(candidate):\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+',\
    \ 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5])\
    \ == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0.0,\
    \ 0.7]) == ['E', 'D-']\n\ndef test_check():\n    check(numerical_letter_grade)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpul_yx9tw.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpul_yx9tw.py\"\
    , line 41, in test_check\n    check(numerical_letter_grade)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpul_yx9tw.py\"\
    , line 33, in check\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nAssertionError\n"
  exit_code: -1
  status: Exception
