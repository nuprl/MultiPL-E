name: HumanEval_56_correct_bracketing
language: py
results:
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        elif bracket == '>':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        else:\n            count -= 1\n        if count < 0:\n       \
    \     return False\n    return count == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for char in brackets:\n        if char == '<':\n            count +=\
    \ 1\n        elif char == '>':\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for char in brackets:\n        if char == '<':\n            count +=\
    \ 1\n        elif char == '>':\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        elif bracket == '>':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        elif bracket == '>':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        elif bracket == '>':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        elif bracket == '>':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        elif bracket == '>':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # Hint:\
    \ use a stack.\n    # You can use a list as a stack by using append and pop.\n\
    \    # You can use a list as a queue by using append and pop(0).\n    # You can\
    \ use a list as a deque by using append and popleft.\n    # You can use a list\
    \ as a priority queue by using heapq.heappush and heapq.heappop.\n    # You can\
    \ use a list as a set by using list.append and list.remove.\n    # You can use\
    \ a list as a multiset by using list.append and list.count.\n    # You can use\
    \ a list as a map by using list.append and list.index.\n    # You can use a list\
    \ as a multimap by using list.append and list.count.\n    # You can use a list\
    \ as a graph by using list.append and list.index.\n    # You can use a list as\
    \ a tree by using list.append and list.index.\n    # You can use a list as a trie\
    \ by using list.append and list.index.\n    # You can use a list as a stack by\
    \ using list.append and list.pop.\n    # You can use a list as a queue by using\
    \ list.append and list.pop(0).\n    # You can use a list as a deque by using list.append\
    \ and list.popleft.\n    # You can use a list as a priority queue by using heapq.heappush\
    \ and heapq.heappop.\n    # You can use a list as a set by using list.append and\
    \ list.remove.\n    # You can use a list as a multiset by using list.append and\
    \ list.count.\n    # You can use a list as a map by using list.append and list.index.\n\
    \    # You can use a list as a multimap by using list.append and list.count.\n\
    \    # You can use a list as a graph by using list.append and list.index.\n  \
    \  # You can use a list as a tree by using list.append and list.index.\n    #\
    \ You can use a list as a trie by using list.append and list.index.\n    # You\
    \ can use a list as a stack by using list.append and list.pop\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfbvrlcdq.py\"\
    , line 55, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfbvrlcdq.py\"\
    , line 53, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfbvrlcdq.py\"\
    , line 39, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        elif bracket == '>':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # TODO:\
    \ complete the body of this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2otfw21s.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2otfw21s.py\"\
    , line 33, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2otfw21s.py\"\
    , line 19, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        elif bracket == '>':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        elif bracket == '>':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        else:\n            count -= 1\n        if count < 0:\n       \
    \     return False\n    return count == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you've seen so far.\n    #\
    \ You can use the list methods append and pop.\n    # You can use the string method\
    \ count.\n    # You can use the string method find.\n    # You can use the string\
    \ method replace.\n    # You can use the string method strip.\n    # You can use\
    \ the string method startswith.\n    # You can use the string method endswith.\n\
    \    # You can use the string method isalpha.\n    # You can use the string method\
    \ isalnum.\n    # You can use the string method isdigit.\n    # You can use the\
    \ string method islower.\n    # You can use the string method isupper.\n    #\
    \ You can use the string method lower.\n    # You can use the string method upper.\n\
    \    # You can use the string method swapcase.\n    # You can use the string method\
    \ title.\n    # You can use the string method split.\n    # You can use the string\
    \ method join.\n    # You can use the string method replace.\n    # You can use\
    \ the string method strip.\n    # You can use the string method lstrip.\n    #\
    \ You can use the string method rstrip.\n    # You can use the string method find.\n\
    \    # You can use the string method rfind.\n    # You can use the string method\
    \ index.\n    # You can use the string method rindex.\n    # You can use the string\
    \ method count.\n    # You can use the string method center.\n    # You can use\
    \ the string method ljust.\n    # You can use the string method rjust.\n    #\
    \ You can use the string method zfill.\n    # You can use the string method partition.\n\
    \    # You can use the string method rpartition.\n    # You can use the string\
    \ method split.\n    # You can use the string method rsplit.\n    # You can use\
    \ the string method splitlines.\n    # You can use the string method startswith.\n\
    \    # You can use the string method endswith.\n    # You can use the string method\
    \ expandtabs.\n    # You can use the string method format.\n    # You can use\
    \ the string method format_map.\n    # You can use\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdad46b59.py\"\
    , line 74, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdad46b59.py\"\
    , line 72, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdad46b59.py\"\
    , line 58, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        elif bracket == '>':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        elif bracket == '>':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        elif bracket == '>':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # Hint:\
    \ you may want to use a stack\n    stack = []\n    for bracket in brackets:\n\
    \        if bracket == '<':\n            stack.append(bracket)\n        else:\n\
    \            if len(stack) == 0:\n                return False\n            stack.pop()\n\
    \    return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
