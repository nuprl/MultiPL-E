name: HumanEval_103_rounded_avg
language: py
prompt: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
  \ int]:\n    \"\"\"You are given two positive integers n and m, and your task is\
  \ to compute the\n    average of the integers from n through m (including n and\
  \ m). \n    Round the answer to the nearest integer and convert that to binary.\n\
  \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n\
  \    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n  \
  \  '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
  \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
  \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
  \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
  \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
  \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
  \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
  \    check(rounded_avg)\n\ntest_check()\n"
completions: ["    if n > m:\n        return -1\n    else:\n        return bin(round((n\
    \ + m) / 2))\n", "    if n > m:\n        return -1\n    else:\n        return\
    \ bin(round((n + m) / 2))\n", "    if n > m:\n        return -1\n    else:\n \
    \       return bin(round((n + m) / 2))\n", "    if n > m:\n        return -1\n\
    \    avg = int(round((n + m) / 2))\n    return bin(avg)\n", "    if n > m:\n \
    \       return -1\n    else:\n        avg = int(round((n + m) / 2))\n        return\
    \ f\"0b{avg:b}\"", "    if n > m:\n        return -1\n    else:\n        return\
    \ bin(round((n + m) / 2))\n", "    if n > m:\n        return -1\n    else:\n \
    \       return bin(round((n + m) / 2))\n", "    if n > m:\n        return -1\n\
    \    else:\n        return bin(round((n + m) / 2))\n", "    if n > m:\n      \
    \  return -1\n    else:\n        return bin(round((n + m) / 2))\n", "    if n\
    \ > m:\n        return -1\n    else:\n        return bin(round((n + m) / 2))\n",
  "    if n > m:\n        return -1\n    else:\n        return bin(round((n + m) /\
    \ 2))\n", "    if n > m:\n        return -1\n    else:\n        return bin(round((n\
    \ + m) / 2))\n", "    if n > m:\n        return -1\n    return bin(round((n +\
    \ m) / 2))\n", "    if n > m:\n        return -1\n    else:\n        return bin(round((n\
    \ + m) / 2))\n", "    if n > m:\n        return -1\n    avg = round((n + m) /\
    \ 2)\n    return bin(avg)\n", "    if n > m:\n        return -1\n    else:\n \
    \       return bin(round((n + m) / 2))\n", "    if n > m:\n        return -1\n\
    \    else:\n        return bin(round((n + m) / 2))\n", "    if n > m:\n      \
    \  return -1\n    avg = sum(range(n, m + 1)) / (m - n + 1)\n    return bin(round(avg))\n",
  "    if n > m:\n        return -1\n    else:\n        return bin(round((n + m) /\
    \ 2))\n", "    if n > m:\n        return -1\n    else:\n        return bin(round((n\
    \ + m) / 2))\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
