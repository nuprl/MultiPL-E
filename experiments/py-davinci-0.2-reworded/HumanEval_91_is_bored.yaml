name: HumanEval_91_is_bored
language: py
prompt: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string of\
  \ words, and your task is to count the number\n    of boredoms. A boredom is a sentence\
  \ that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
  \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
  \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
  \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
  \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I will\
  \ be productive. will kill It') == 2\n    assert candidate('You and I are going\
  \ for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
completions: ["    boredoms = 0\n    sentences = S.split('.')\n    for sentence in\
    \ sentences:\n        if sentence.strip().startswith('I'):\n            boredoms\
    \ += 1\n    return boredoms\n\n", "    boredoms = 0\n    sentences = S.split('.')\n\
    \    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n", "    boredoms = 0\n    for\
    \ sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n  \
    \          boredoms += 1\n    return boredoms\n", "    return len([s for s in\
    \ S.split('.') if s.strip().startswith('I')])\n\n", "    return S.count('I')\n\
    \n", "    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n", "    boredoms = 0\n    for\
    \ sentence in S.split('.'):\n        if sentence.startswith('I'):\n          \
    \  boredoms += 1\n    return boredoms\n\n", "    boredoms = 0\n    for sentence\
    \ in S.split('.'):\n        if sentence.strip().startswith('I'):\n           \
    \ boredoms += 1\n    return boredoms\n", "    return len([s for s in S.split('.')\
    \ if s.strip().startswith('I')])\n\n", "    boredoms = 0\n    for sentence in\
    \ S.split('.'):\n        if sentence.strip().startswith('I'):\n            boredoms\
    \ += 1\n    return boredoms\n", "    boredoms = 0\n    sentences = S.split('.')\n\
    \    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n", "    boredoms = 0\n    for\
    \ sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n  \
    \          boredoms += 1\n    return boredoms\n\n", "    return len([s for s in\
    \ S.split('.') if s.startswith('I')])\n\n", "    boredoms = 0\n    for sentence\
    \ in S.split('.'):\n        if sentence.strip().startswith('I'):\n           \
    \ boredoms += 1\n    return boredoms\n\n", "    boredoms = 0\n    for sentence\
    \ in S.split('.'):\n        if sentence.strip().startswith('I'):\n           \
    \ boredoms += 1\n    return boredoms\n", "    return len([s for s in S.split('.')\
    \ if s.strip().startswith('I')])\n", "    boredoms = 0\n    sentences = S.split('.')\n\
    \    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n", "    boredoms = 0\n    for\
    \ sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n  \
    \          boredoms += 1\n    return boredoms\n\n", "    boredoms = 0\n    for\
    \ sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n  \
    \          boredoms += 1\n    return boredoms\n\n", "    return len([s for s in\
    \ S.split('.') if s.strip().startswith('I')])\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
