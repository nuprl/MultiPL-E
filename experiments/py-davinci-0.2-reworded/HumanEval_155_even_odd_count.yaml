name: HumanEval_155_even_odd_count
language: py
prompt: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n\
  \    \"\"\"Given an integer. return a tuple that has the number of even and odd\
  \ digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n    (1, 1)\n\
  \    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
  \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
  \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) ==\
  \ (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1,\
  \ 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
completions: ["    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n\
    \        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n\
    \            odd_count += 1\n    return even_count, odd_count\n", "    even_count\
    \ = 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) %\
    \ 2 == 0:\n            even_count += 1\n        else:\n            odd_count +=\
    \ 1\n    return even_count, odd_count\n", "    even_count = 0\n    odd_count =\
    \ 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n           \
    \ even_count += 1\n        else:\n            odd_count += 1\n    return even_count,\
    \ odd_count\n", "    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n\
    \        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n\
    \            odd_count += 1\n    return even_count, odd_count\n", "    even_count\
    \ = 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) %\
    \ 2 == 0:\n            even_count += 1\n        else:\n            odd_count +=\
    \ 1\n    return even_count, odd_count\n", "    even = 0\n    odd = 0\n    for\
    \ i in str(num):\n        if int(i) % 2 == 0:\n            even += 1\n       \
    \ else:\n            odd += 1\n    return (even, odd)\n", "    even_count = 0\n\
    \    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n\
    \            even_count += 1\n        else:\n            odd_count += 1\n    return\
    \ even_count, odd_count\n", "    even_count = 0\n    odd_count = 0\n    while\
    \ num != 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n\
    \            odd_count += 1\n        num = num // 10\n    return even_count, odd_count\n",
  "    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit)\
    \ % 2 == 0:\n            even_count += 1\n        else:\n            odd_count\
    \ += 1\n    return even_count, odd_count\n", "    even_count = 0\n    odd_count\
    \ = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n         \
    \   even_count += 1\n        else:\n            odd_count += 1\n    return even_count,\
    \ odd_count\n", "    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n\
    \        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n\
    \            odd_count += 1\n    return even_count, odd_count\n", "    even_count\
    \ = 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) %\
    \ 2 == 0:\n            even_count += 1\n        else:\n            odd_count +=\
    \ 1\n    return even_count, odd_count\n", "    even_count = 0\n    odd_count =\
    \ 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n           \
    \ even_count += 1\n        else:\n            odd_count += 1\n    return even_count,\
    \ odd_count\n", "    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n\
    \        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n\
    \            odd_count += 1\n    return even_count, odd_count\n", "    even_count\
    \ = 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) %\
    \ 2 == 0:\n            even_count += 1\n        else:\n            odd_count +=\
    \ 1\n    return even_count, odd_count\n", "    even_count = 0\n    odd_count =\
    \ 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n           \
    \ even_count += 1\n        else:\n            odd_count += 1\n    return even_count,\
    \ odd_count\n", "    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n\
    \        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n\
    \            odd_count += 1\n    return even_count, odd_count\n", "    even_count\
    \ = 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) %\
    \ 2 == 0:\n            even_count += 1\n        else:\n            odd_count +=\
    \ 1\n    return even_count, odd_count\n", "    even_count = 0\n    odd_count =\
    \ 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n           \
    \ even_count += 1\n        else:\n            odd_count += 1\n    return even_count,\
    \ odd_count\n", "    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n\
    \        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n\
    \            odd_count += 1\n    return even_count, odd_count\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
