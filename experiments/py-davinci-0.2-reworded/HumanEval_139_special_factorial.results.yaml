name: HumanEval_139_special_factorial
language: py
results:
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvvi8d9ui.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvvi8d9ui.py\"\
    , line 23, in test_check\n    check(special_factorial)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvvi8d9ui.py\"\
    , line 17, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0kc85h03.py\"\
    , line 28, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0kc85h03.py\"\
    , line 26, in test_check\n    check(special_factorial)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0kc85h03.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdrm8lim7.py\"\
    , line 27, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdrm8lim7.py\"\
    , line 25, in test_check\n    check(special_factorial)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdrm8lim7.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy8_rot6o.py\"\
    , line 28, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy8_rot6o.py\"\
    , line 26, in test_check\n    check(special_factorial)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy8_rot6o.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0oji64s2.py\"\
    , line 28, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0oji64s2.py\"\
    , line 26, in test_check\n    check(special_factorial)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0oji64s2.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4dgv_wlf.py\"\
    , line 28, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4dgv_wlf.py\"\
    , line 26, in test_check\n    check(special_factorial)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4dgv_wlf.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_kow5mwd.py\"\
    , line 28, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_kow5mwd.py\"\
    , line 26, in test_check\n    check(special_factorial)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_kow5mwd.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpibn_rymh.py\"\
    , line 27, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpibn_rymh.py\"\
    , line 25, in test_check\n    check(special_factorial)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpibn_rymh.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp97y7w7at.py\"\
    , line 28, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp97y7w7at.py\"\
    , line 26, in test_check\n    check(special_factorial)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp97y7w7at.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw_v0oifu.py\"\
    , line 28, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw_v0oifu.py\"\
    , line 26, in test_check\n    check(special_factorial)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw_v0oifu.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt4xfebl5.py\"\
    , line 28, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt4xfebl5.py\"\
    , line 26, in test_check\n    check(special_factorial)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt4xfebl5.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxhv7r8iy.py\"\
    , line 28, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxhv7r8iy.py\"\
    , line 26, in test_check\n    check(special_factorial)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxhv7r8iy.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyi2dhepf.py\"\
    , line 28, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyi2dhepf.py\"\
    , line 26, in test_check\n    check(special_factorial)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyi2dhepf.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwx4uf2pp.py\"\
    , line 28, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwx4uf2pp.py\"\
    , line 26, in test_check\n    check(special_factorial)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwx4uf2pp.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2ejd6gfx.py\"\
    , line 28, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2ejd6gfx.py\"\
    , line 26, in test_check\n    check(special_factorial)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2ejd6gfx.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    factorial = 1\n    for i in range(1,\
    \ n + 1):\n        factorial *= i\n    return factorial\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnc_9btyb.py\"\
    , line 28, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnc_9btyb.py\"\
    , line 26, in test_check\n    check(special_factorial)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnc_9btyb.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9o06ute_.py\"\
    , line 28, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9o06ute_.py\"\
    , line 26, in test_check\n    check(special_factorial)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9o06ute_.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp69heixwr.py\"\
    , line 28, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp69heixwr.py\"\
    , line 26, in test_check\n    check(special_factorial)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp69heixwr.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ukdry8s.py\"\
    , line 28, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ukdry8s.py\"\
    , line 26, in test_check\n    check(special_factorial)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ukdry8s.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqlavledz.py\"\
    , line 28, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqlavledz.py\"\
    , line 26, in test_check\n    check(special_factorial)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqlavledz.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
