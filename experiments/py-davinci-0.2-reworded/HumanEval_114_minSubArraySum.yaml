name: HumanEval_114_minSubArraySum
language: py
prompt: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
  \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty\
  \ sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
  \    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n   \
  \ assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10])\
  \ == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
  \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5])\
  \ == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10,\
  \ 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\
  \    assert candidate([-10]) == -10\n    assert candidate([7]) == 7\n    assert\
  \ candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
completions: ["    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n\
    \        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum\
    \ = max(curr_sum, 0)\n    return min_sum\n", "    min_sum = float('inf')\n   \
    \ curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        min_sum\
    \ = min(min_sum, curr_sum)\n        curr_sum = max(curr_sum, 0)\n    return min_sum\n",
  "    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum\
    \ += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum = max(curr_sum,\
    \ 0)\n    return min_sum\n", "    min_sum = nums[0]\n    curr_sum = 0\n    for\
    \ num in nums:\n        curr_sum += num\n        if curr_sum < min_sum:\n    \
    \        min_sum = curr_sum\n        if curr_sum > 0:\n            curr_sum =\
    \ 0\n    return min_sum\n", "    min_sum = float('inf')\n    curr_sum = 0\n  \
    \  for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n\
    \        curr_sum = max(curr_sum, 0)\n    return min_sum\n", "    min_sum = float('inf')\n\
    \    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        min_sum\
    \ = min(min_sum, curr_sum)\n        curr_sum = max(curr_sum, 0)\n    return min_sum\n",
  "    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum\
    \ += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum = max(curr_sum,\
    \ 0)\n    return min_sum\n", "    min_sum = float('inf')\n    curr_sum = 0\n \
    \   for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum,\
    \ curr_sum)\n        curr_sum = max(curr_sum, 0)\n    return min_sum\n", "   \
    \ min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum\
    \ += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum = max(curr_sum,\
    \ 0)\n    return min_sum\n", "    min_sum = nums[0]\n    curr_sum = 0\n    for\
    \ num in nums:\n        curr_sum += num\n        if curr_sum < min_sum:\n    \
    \        min_sum = curr_sum\n        if curr_sum > 0:\n            curr_sum =\
    \ 0\n    return min_sum\n", "    min_sum = float('inf')\n    curr_sum = 0\n  \
    \  for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n\
    \        curr_sum = max(curr_sum, 0)\n    return min_sum\n", "    min_sum = float('inf')\n\
    \    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        min_sum\
    \ = min(min_sum, curr_sum)\n        curr_sum = max(curr_sum, 0)\n    return min_sum\n",
  "    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum\
    \ += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum = max(curr_sum,\
    \ 0)\n    return min_sum\n", "    min_sum = float('inf')\n    curr_sum = 0\n \
    \   for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum,\
    \ curr_sum)\n        curr_sum = max(curr_sum, 0)\n    return min_sum\n", "   \
    \ min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum\
    \ += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum = max(curr_sum,\
    \ 0)\n    return min_sum\n", "    min_sum = float('inf')\n    curr_sum = 0\n \
    \   for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum,\
    \ curr_sum)\n        curr_sum = max(curr_sum, 0)\n    return min_sum\n", "   \
    \ min_sum = nums[0]\n    curr_sum = 0\n    for num in nums:\n        curr_sum\
    \ += num\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n   \
    \     if curr_sum > 0:\n            curr_sum = 0\n    return min_sum\n", "   \
    \ # Initialize min_sum to the first element of the array\n    min_sum = nums[0]\n\
    \    # Initialize current_sum to the first element of the array\n    current_sum\
    \ = nums[0]\n    # Iterate through the array\n    for i in range(1, len(nums)):\n\
    \        # If the current sum is less than the current element,\n        # set\
    \ the current sum to the current element\n        if current_sum < nums[i]:\n\
    \            current_sum = nums[i]\n        # Else, add the current element to\
    \ the current sum\n        else:\n            current_sum += nums[i]\n       \
    \ # If the current sum is less than the min sum,\n        # set the min sum to\
    \ the current sum\n        if current_sum < min_sum:\n            min_sum = current_sum\n\
    \    return min_sum\n", "    min_sum = float('inf')\n    curr_sum = 0\n    for\
    \ num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n\
    \        curr_sum = max(curr_sum, 0)\n    return min_sum\n", "    min_sum = float('inf')\n\
    \    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        min_sum\
    \ = min(min_sum, curr_sum)\n        curr_sum = max(curr_sum, 0)\n    return min_sum\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
