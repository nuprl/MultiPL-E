name: HumanEval_119_match_parens
language: py
prompt: "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n   \
  \ \"\"\"\n    You are given a list of two strings, both strings consist of open\n\
  \    parentheses '(' or close parentheses ')' only.\n    Your job is to check if\
  \ it is possible to concatenate the two strings in\n    some order, that the resulting\
  \ string will be good.\n    A string S is considered to be good if and only if all\
  \ parentheses in S\n    are balanced. For example: the string '(())()' is good,\
  \ while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make\
  \ a good string, and return 'No' otherwise.\n\n    Examples:\n    >>> match_parens(['()(',\
  \ ')'])\n    'Yes'\n    >>> match_parens([')', ')'])\n    'No'\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(['()(', ')']) == 'Yes'\n    assert\
  \ candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) ==\
  \ 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))',\
  \ '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert\
  \ candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())'])\
  \ == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(',\
  \ ')(']) == 'No'\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')',\
  \ '(']) == 'Yes'\n\ndef test_check():\n    check(match_parens)\n\ntest_check()\n"
completions: ["    # Your code here\n    return 'Yes' if is_good(lst[0] + lst[1])\
    \ else 'No'\n", "    s1, s2 = lst\n    s = s1 + s2\n    stack = []\n    for c\
    \ in s:\n        if c == '(':\n            stack.append(c)\n        else:\n  \
    \          if not stack:\n                return 'No'\n            stack.pop()\n\
    \    return 'Yes' if not stack else 'No'\n", "    # TODO: implement this function\n\
    \    pass\n", "    # TODO: implement me\n    pass\n", "    if len(lst) == 0:\n\
    \        return 'Yes'\n    if len(lst) == 1:\n        return 'No'\n    if lst[0]\
    \ == ')' and lst[1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[1]\
    \ == '(':\n        return match_parens(lst[1:])\n    if lst[0] == '(' and lst[1]\
    \ == ')':\n        return match_parens(lst[2:])\n    if lst[0] == '(' and lst[1]\
    \ == '(':\n        return match_parens(lst[1:])\n", "    s1, s2 = lst\n    if\
    \ s1[0] == ')' or s2[-1] == '(':\n        return 'No'\n    if s1[-1] == '(' and\
    \ s2[0] == ')':\n        return 'Yes'\n    if s1[-1] == ')' and s2[0] == '(':\n\
    \        return 'No'\n    return 'Yes'\n", "    if lst[0] == ')' or lst[1] ==\
    \ '(':\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n   \
    \ return 'Yes' if lst[1].count(')') == 1 else 'No'\n", "    if lst[0] == ')' or\
    \ lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n\
    \        return 'Yes'\n    if lst[0] == '(' and lst[1] == '(':\n        return\
    \ 'Yes'\n    if lst[0] == ')' and lst[1] == ')':\n        return 'Yes'\n    if\
    \ lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n", "    # TODO: implement\
    \ this function\n    return 'No'\n", "    # TODO: implement this function\n  \
    \  pass\n", "    s = ''.join(lst)\n    stack = []\n    for c in s:\n        if\
    \ c == '(':\n            stack.append(c)\n        else:\n            if not stack:\n\
    \                return 'No'\n            stack.pop()\n    return 'Yes' if not\
    \ stack else 'No'\n", "    s1, s2 = lst\n    if s1.count('(') == s2.count(')'):\n\
    \        return 'Yes'\n    return 'No'\n", "    # TODO: implement me\n    return\
    \ 'Yes'\n", "    s1, s2 = lst\n    if s1[0] == ')' or s2[-1] == '(':\n       \
    \ return 'No'\n    if s1[-1] == '(' and s2[0] == ')':\n        return 'Yes'\n\
    \    if s1[-1] == '(' and s2[0] == '(':\n        return 'Yes'\n    if s1[-1] ==\
    \ ')' and s2[0] == ')':\n        return 'Yes'\n    return 'No'\n", "    # TODO:\
    \ Implement me\n    return 'No'\n", "    s = lst[0] + lst[1]\n    stack = []\n\
    \    for c in s:\n        if c == '(':\n            stack.append(c)\n        else:\n\
    \            if len(stack) == 0:\n                return 'No'\n            stack.pop()\n\
    \    return 'Yes' if len(stack) == 0 else 'No'\n", "    s1, s2 = lst\n    s1_open\
    \ = s1.count('(')\n    s1_close = s1.count(')')\n    s2_open = s2.count('(')\n\
    \    s2_close = s2.count(')')\n    if s1_open == s1_close and s2_open == s2_close:\n\
    \        return 'Yes'\n    if s1_open == s1_close and s2_open > s2_close:\n  \
    \      return 'Yes'\n    if s2_open == s2_close and s1_open > s1_close:\n    \
    \    return 'Yes'\n    return 'No'\n", "    s = ''.join(lst)\n    if s.count('(')\
    \ != s.count(')'):\n        return 'No'\n    if s.count('(') == 0:\n        return\
    \ 'Yes'\n    if s.count('(') == 1:\n        return 'No'\n    if s.count('(') ==\
    \ 2:\n        return 'Yes'\n    if s.count('(') == 3:\n        return 'No'\n \
    \   if s.count('(') == 4:\n        return 'Yes'\n    if s.count('(') == 5:\n \
    \       return 'No'\n    if s.count('(') == 6:\n        return 'Yes'\n    if s.count('(')\
    \ == 7:\n        return 'No'\n    if s.count('(') == 8:\n        return 'Yes'\n\
    \    if s.count('(') == 9:\n        return 'No'\n    if s.count('(') == 10:\n\
    \        return 'Yes'\n    if s.count('(') == 11:\n        return 'No'\n    if\
    \ s.count('(') == 12:\n        return 'Yes'\n    if s.count('(') == 13:\n    \
    \    return 'No'\n    if s.count('(') == 14:\n        return 'Yes'\n    if s.count('(')\
    \ == 15:\n        return 'No'\n    if s.count('(') == 16:\n        return 'Yes'\n\
    \    if s.count('(') == 17:\n        return 'No'\n    if s.count('(') == 18:\n\
    \        return 'Yes'\n    if s.count('(') == 19:\n        return 'No'\n    if\
    \ s.count('(') == 20:\n        return 'Yes'\n    if s.count('(') == 21:\n    \
    \    return 'No'\n    if s.count('(') == 22:\n        return 'Yes'\n    if s.count('(')\
    \ == 23:\n        return 'No'\n    if s.count('(') == 24:\n        return 'Yes'\n\
    \    if s.count('(') == 25:\n        return 'No'\n    if s.count('(') == 26",
  "    # TODO: Implement me!\n    return 'Yes'\n", "    # TODO: implement this function\n\
    \    return 'Yes'\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
