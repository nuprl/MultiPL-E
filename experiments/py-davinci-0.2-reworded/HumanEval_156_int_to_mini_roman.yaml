name: HumanEval_156_int_to_mini_roman
language: py
prompt: "def int_to_mini_roman(number: int) -> str:\n    \"\"\"\n    Given a positive\
  \ integer, obtain its roman numeral equivalent as a string,\n    and return it in\
  \ lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19)\n\
  \    'xix'\n    >>> int_to_mini_roman(152)\n    'clii'\n    >>> int_to_mini_roman(426)\n\
  \    'cdxxvi'\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(19) == 'xix'\n    assert candidate(152)\
  \ == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n\
  \    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4)\
  \ == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n\
  \    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n   \
  \ assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert\
  \ candidate(1000) == 'm'\n\ndef test_check():\n    check(int_to_mini_roman)\n\n\
  test_check()\n"
completions: ["    if not 1 <= number <= 1000:\n        raise ValueError(\"Number\
    \ must be between 1 and 1000\")\n\n    roman_numeral = \"\"\n    for numeral,\
    \ value in ROMAN_NUMERALS.items():\n        while number >= value:\n         \
    \   roman_numeral += numeral\n            number -= value\n\n    return roman_numeral\n\
    \n", "    if number < 1 or number > 1000:\n        raise ValueError('Number must\
    \ be between 1 and 1000')\n\n    roman_numeral = ''\n    for numeral, value in\
    \ ROMAN_NUMERALS.items():\n        while number >= value:\n            roman_numeral\
    \ += numeral\n            number -= value\n\n    return roman_numeral\n\n", " \
    \   if not 1 <= number <= 1000:\n        raise ValueError(f\"{number} is not in\
    \ the range 1-1000\")\n\n    roman_numeral = \"\"\n    for numeral, value in ROMAN_NUMERALS:\n\
    \        while number >= value:\n            roman_numeral += numeral\n      \
    \      number -= value\n    return roman_numeral\n\n", "    # TODO: Implement\
    \ this function.\n    pass\n\n", "    roman_numeral = \"\"\n    for numeral, value\
    \ in ROMAN_NUMERALS.items():\n        while number >= value:\n            roman_numeral\
    \ += numeral\n            number -= value\n    return roman_numeral\n\n", "  \
    \  roman_numerals = {\n        1: 'i',\n        5: 'v',\n        10: 'x',\n  \
    \      50: 'l',\n        100: 'c',\n        500: 'd',\n        1000: 'm'\n   \
    \ }\n    roman_numerals_subtractive = {\n        4: 'iv',\n        9: 'ix',\n\
    \        40: 'xl',\n        90: 'xc',\n        400: 'cd',\n        900: 'cm'\n\
    \    }\n    roman_numerals_subtractive_keys = list(roman_numerals_subtractive.keys())\n\
    \    roman_numerals_subtractive_keys.sort(reverse=True)\n    roman_numerals_keys\
    \ = list(roman_numerals.keys())\n    roman_numerals_keys.sort(reverse=True)\n\
    \    roman_numeral = ''\n    while number > 0:\n        for key in roman_numerals_subtractive_keys:\n\
    \            if number >= key:\n                roman_numeral += roman_numerals_subtractive[key]\n\
    \                number -= key\n                break\n        else:\n       \
    \     for key in roman_numerals_keys:\n                if number >= key:\n   \
    \                 roman_numeral += roman_numerals[key]\n                    number\
    \ -= key\n                    break\n    return roman_numeral\n\n", "    if not\
    \ 1 <= number <= 1000:\n        raise ValueError(f\"Number {number} is not in\
    \ the range 1-1000\")\n\n    result = \"\"\n    for numeral, value in _MINI_ROMAN_NUMERALS.items():\n\
    \        while number >= value:\n            result += numeral\n            number\
    \ -= value\n    return result\n\n", "    if not 1 <= number <= 1000:\n       \
    \ raise ValueError(\"Number must be between 1 and 1000\")\n\n    roman_numeral\
    \ = \"\"\n    for numeral, value in ROMAN_NUMERALS.items():\n        while number\
    \ >= value:\n            roman_numeral += numeral\n            number -= value\n\
    \n    return roman_numeral\n\n", "    # TODO: Implement this function\n    pass\n\
    \n", "    # TODO: implement this function\n    pass\n\n", "    # TODO: Implement\
    \ this function\n    pass\n\n", "    if number < 1 or number > 1000:\n       \
    \ raise ValueError(\"Number must be between 1 and 1000\")\n\n    roman_numeral\
    \ = \"\"\n    for numeral, value in ROMAN_NUMERALS.items():\n        while number\
    \ >= value:\n            roman_numeral += numeral\n            number -= value\n\
    \n    return roman_numeral\n\n", "    # TODO: Implement this function.\n    pass\n\
    \n", "    if number < 1 or number > 1000:\n        raise ValueError(\"Number must\
    \ be between 1 and 1000\")\n\n    roman_numeral = \"\"\n    for numeral, value\
    \ in ROMAN_NUMERALS.items():\n        while number >= value:\n            roman_numeral\
    \ += numeral\n            number -= value\n\n    return roman_numeral\n\n", " \
    \   # TODO: Implement this function\n    pass\n\n", "    # TODO: Implement this\
    \ function\n    pass\n\n", "    # TODO: Implement this function.\n    pass\n\n",
  "    # TODO: implement this function\n    pass\n\n", "    if number < 1 or number\
    \ > 1000:\n        raise ValueError(\"Number must be between 1 and 1000\")\n\n\
    \    roman_numeral = \"\"\n    for numeral, value in ROMAN_NUMERALS.items():\n\
    \        while number >= value:\n            roman_numeral += numeral\n      \
    \      number -= value\n\n    return roman_numeral\n\n", "    if not 1 <= number\
    \ <= 1000:\n        raise ValueError(\"Number must be between 1 and 1000\")\n\n\
    \    result = \"\"\n    for numeral, integer in NUMERALS.items():\n        while\
    \ number >= integer:\n            result += numeral\n            number -= integer\n\
    \    return result\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
