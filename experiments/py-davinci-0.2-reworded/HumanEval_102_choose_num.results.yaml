language: py
name: HumanEval_102_choose_num
results:
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n\
    \        return x\n    else:\n        return -1\n\ndef check(candidate):\n   \
    \ assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmen85l81.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmen85l81.py\"\
    , line 32, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmen85l81.py\"\
    , line 22, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 == y:\n        return -1\n    else:\n      \
    \  return choose_num(x + 1, y)\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5ma2oz5b.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5ma2oz5b.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5ma2oz5b.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n\
    \        return x\n    else:\n        return -1\n\ndef check(candidate):\n   \
    \ assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdeo00d01.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdeo00d01.py\"\
    , line 32, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdeo00d01.py\"\
    , line 22, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    elif x % 2 == 0:\n        return x\n    else:\n        return\
    \ x + 1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x%2 == 0:\n        return x\n    else:\n        x += 1\n    if x > y:\n\
    \        return -1\n    else:\n        return x\n\ndef check(candidate):\n   \
    \ assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm2rsbyll.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm2rsbyll.py\"\
    , line 33, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm2rsbyll.py\"\
    , line 23, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphdtsojfs.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphdtsojfs.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphdtsojfs.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n\
    \        if x % 2 == 0:\n            return x\n        else:\n            return\
    \ -1\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpezkcluhw.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpezkcluhw.py\"\
    , line 35, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpezkcluhw.py\"\
    , line 25, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr_i4qdef.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr_i4qdef.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr_i4qdef.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x % 2 == 1:\n        return x + 1\n    elif x % 2\
    \ == 0 and y % 2 == 0:\n        return y\n    elif x % 2 == 1 and y % 2 == 1:\n\
    \        return y - 1\n    elif x % 2 == 0 and y % 2 == 1:\n        return y -\
    \ 1\n    elif x % 2 == 1 and y % 2 == 0:\n        return y\n    elif x > y:\n\
    \        return -1\n    else:\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7wwtde8p.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7wwtde8p.py\"\
    , line 41, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7wwtde8p.py\"\
    , line 31, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94z6epjd.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94z6epjd.py\"\
    , line 27, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94z6epjd.py\"\
    , line 17, in check\n    assert candidate(12, 15) == 14\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94z6epjd.py\"\
    , line 13, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  stdout: ''
- exit_code: 0
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    else:\n        for i in range(y, x-1, -1):\n            if\
    \ i % 2 == 0:\n                return i\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x%2 == 0:\n        return x\n    elif x%2 != 0:\n        x = x+1\n   \
    \     return x\n    else:\n        return -1\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphqsztwyx.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphqsztwyx.py\"\
    , line 32, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphqsztwyx.py\"\
    , line 22, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    else:\n        return x + 1\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaxyk_f9v.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaxyk_f9v.py\"\
    , line 29, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaxyk_f9v.py\"\
    , line 19, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x%2 != 0:\n        x += 1\n    if y%2 != 0:\n        y -= 1\n    if x\
    \ > y:\n        return -1\n    return y\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x % 2 == 1:\n        x += 1\n        if x > y:\n \
    \           return -1\n        else:\n            return x\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprwkl498u.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprwkl498u.py\"\
    , line 32, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprwkl498u.py\"\
    , line 22, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n\
    \        return x\n    else:\n        return -1\n\ndef check(candidate):\n   \
    \ assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzd_quovz.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzd_quovz.py\"\
    , line 32, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzd_quovz.py\"\
    , line 22, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x % 2 == 1:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgjjxt10b.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgjjxt10b.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgjjxt10b.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n\
    \        return x\n    else:\n        return -1\n\ndef check(candidate):\n   \
    \ assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 32, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 22, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    else:\n        for i in range(y, x-1, -1):\n            if\
    \ i % 2 == 0:\n                return i\n        return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x % 2 == 1:\n        return x + 1\n    elif x % 2\
    \ == 0 and y % 2 == 0:\n        return y\n    elif x % 2 == 1 and y % 2 == 1:\n\
    \        return y - 1\n    elif x % 2 == 0 and y % 2 == 1:\n        return y -\
    \ 1\n    elif x % 2 == 1 and y % 2 == 0:\n        return y\n    else:\n      \
    \  return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp64ar009y.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp64ar009y.py\", line 39,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp64ar009y.py\", line 29,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    elif x % 2 == 0:\n        return x\n    else:\n        return\
    \ x + 1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzidcd8n3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzidcd8n3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzidcd8n3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        return x\
    \ + 1\n    else:\n        return -1\n    raise NotImplementedError()\n\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj7xbvgx2.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpj7xbvgx2.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpj7xbvgx2.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    elif x % 2 == 0:\n        return x\n    else:\n        return\
    \ x + 1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x > y:\n        return -1\n    elif x % 2 == 0:\n        return x\n  \
    \  elif x % 2 != 0:\n        return choose_num(x + 1, y)\n    else:\n        return\
    \ -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppi2jjip4.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppi2jjip4.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmppi2jjip4.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n\
    \        return x\n    else:\n        return -1\n\ndef check(candidate):\n   \
    \ assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 32, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 22, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x%2 == 0:\n        return x\n    elif x+1 <= y:\n        return x+1\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3fqqqnmz.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp3fqqqnmz.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3fqqqnmz.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x > y:\n        return -1\n    for i in range(x, y+1):\n        if i %\
    \ 2 == 0:\n            return i\n    return -1\n\n\ndef check(candidate):\n  \
    \  assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr7uxh3yn.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpr7uxh3yn.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpr7uxh3yn.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x > y:\n        return -1\n    if x % 2 == 0:\n        return x\n    else:\n\
    \        return x + 1\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbebomfhv.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpbebomfhv.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpbebomfhv.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # TODO: implement\
    \ this function\n    pass\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt624y7l3.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpt624y7l3.py\", line 27,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpt624y7l3.py\", line 17,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    for i in range(x,\
    \ y+1):\n        if i % 2 == 0:\n            return i\n    return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpii9r5dei.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpii9r5dei.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpii9r5dei.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94z6epjd.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94z6epjd.py\"\
    , line 27, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94z6epjd.py\"\
    , line 17, in check\n    assert candidate(12, 15) == 14\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94z6epjd.py\"\
    , line 13, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzidcd8n3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzidcd8n3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzidcd8n3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x%2==0:\n        return x\n    else:\n        return x+1\n    raise NotImplementedError()\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt6dx37vc.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpt6dx37vc.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpt6dx37vc.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x + 1 <= y:\n        return x\
    \ + 1\n    else:\n        return -1\n    raise NotImplementedError()\n\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4fgldmvt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp4fgldmvt.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp4fgldmvt.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        return x\
    \ + 1\n    else:\n        return -1\n    raise NotImplementedError()\n\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj7xbvgx2.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpj7xbvgx2.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpj7xbvgx2.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x%2 == 0:\n        return x\n    elif x+1 <= y:\n        return x+1\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3fqqqnmz.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp3fqqqnmz.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3fqqqnmz.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x%2==0:\n        return x\n    else:\n        return x+1\n    if x>y:\n\
    \        return -1\n    else:\n        return -1\n\ndef check(candidate):\n  \
    \  assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv4xeqb6p.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpv4xeqb6p.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpv4xeqb6p.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n\
    \        if x <= y:\n            return x\n        else:\n            return -1\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpik_g0wpi.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpik_g0wpi.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpik_g0wpi.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x%2 == 0:\n        return x\n    elif x+1 <= y:\n        return x+1\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3fqqqnmz.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp3fqqqnmz.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3fqqqnmz.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x%2==0:\n        return x\n    else:\n        return x+1\n    raise NotImplementedError()\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt6dx37vc.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpt6dx37vc.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpt6dx37vc.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # TODO: implement\
    \ this function\n    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n\
    \        x += 1\n        return x\n    else:\n        return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6zbm3ysa.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6zbm3ysa.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp6zbm3ysa.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x%2==0:\n        return x\n    else:\n        return x+1\n    raise NotImplementedError()\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt6dx37vc.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpt6dx37vc.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpt6dx37vc.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    if x % 2 == 0:\n        return x\n    return choose_num(x +\
    \ 1, y)\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq6bi30zz.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpq6bi30zz.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpq6bi30zz.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x > y:\n        return -1\n    elif x % 2 == 0:\n        return x\n  \
    \  else:\n        return x + 1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp924jmsy3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp924jmsy3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp924jmsy3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x % 2 == 1:\n        return x + 1\n    elif x % 2\
    \ == 0 and y % 2 == 0:\n        return y\n    elif x % 2 == 1 and y % 2 == 1:\n\
    \        return y - 1\n    elif x % 2 == 0 and y % 2 == 1:\n        return y -\
    \ 1\n    elif x % 2 == 1 and y % 2 == 0:\n        return y\n    elif x == y:\n\
    \        return x\n    elif x > y:\n        return -1\n    else:\n        return\
    \ -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4quea6il.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp4quea6il.py\", line 42,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp4quea6il.py\", line 32,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x + 1 <= y:\n        return x\
    \ + 1\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy0xxl3fx.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpy0xxl3fx.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpy0xxl3fx.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    else:\n        for i in range(y, x-1, -1):\n            if\
    \ i % 2 == 0:\n                return i\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    elif x % 2 == 0:\n        return x\n    else:\n        return\
    \ x + 1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 == y:\n        return -1\n    else:\n      \
    \  return choose_num(x + 1, y)\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5ma2oz5b.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5ma2oz5b.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5ma2oz5b.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    elif x % 2 == 0:\n        return x\n    else:\n        return\
    \ x + 1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    for i in range(x,\
    \ y+1):\n        if i % 2 == 0:\n            return i\n    return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpii9r5dei.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpii9r5dei.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpii9r5dei.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # TODO: complete\
    \ the function body\n    if x%2 == 0:\n        if x > y:\n            return -1\n\
    \        else:\n            return x\n    else:\n        if x+1 > y:\n       \
    \     return -1\n        else:\n            return x+1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpohyl6aph.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpohyl6aph.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpohyl6aph.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x % 2 == 1:\n        x += 1\n        return x\n  \
    \  else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp49m5mnp3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp49m5mnp3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp49m5mnp3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzidcd8n3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzidcd8n3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzidcd8n3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        if x == y:\n            return x\n        else:\n\
    \            return choose_num(x + 2, y)\n    else:\n        if x + 1 == y:\n\
    \            return -1\n        else:\n            return choose_num(x + 1, y)\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy0uu29wc.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpy0uu29wc.py\", line 36,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpy0uu29wc.py\", line 26,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpy0uu29wc.py\"\
    , line 17, in choose_num\n    return choose_num(x + 2, y)\n  File \"/tmp/tmpy0uu29wc.py\"\
    , line 17, in choose_num\n    return choose_num(x + 2, y)\n  File \"/tmp/tmpy0uu29wc.py\"\
    , line 17, in choose_num\n    return choose_num(x + 2, y)\n  [Previous line repeated\
    \ 993 more times]\n  File \"/tmp/tmpy0uu29wc.py\", line 13, in choose_num\n  \
    \  if x % 2 == 0:\nRecursionError: maximum recursion depth exceeded in comparison\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x%2 == 0:\n        return x\n    else:\n        return x+1\n    #raise\
    \ NotImplementedError()\n\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpll33z79f.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpll33z79f.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpll33z79f.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x % 2 == 1:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgjjxt10b.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgjjxt10b.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgjjxt10b.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x > y:\n        return -1\n    elif x % 2 == 0:\n        return x\n  \
    \  else:\n        return x + 1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp924jmsy3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp924jmsy3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp924jmsy3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    elif x % 2 == 0:\n        return x\n    else:\n        return\
    \ x + 1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    if x % 2 == 0:\n        return x\n    if x % 2 == 1:\n    \
    \    return choose_num(x + 1, y)\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnrmg6vhj.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpnrmg6vhj.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpnrmg6vhj.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    elif x % 2 == 0:\n        return x\n    else:\n        return\
    \ x + 1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    elif x % 2 == 0:\n        return x\n    else:\n        return\
    \ x + 1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n\
    \        return x\n    else:\n        return -1\n\ndef check(candidate):\n   \
    \ assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 32, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 22, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        return x\
    \ + 1\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptddx2g6q.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmptddx2g6q.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmptddx2g6q.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    if x % 2 == 0:\n        return x\n    else:\n        return\
    \ x + 1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1p2ctcue.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp1p2ctcue.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp1p2ctcue.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x % 2 == 1:\n        x += 1\n        return x\n  \
    \  else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp49m5mnp3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp49m5mnp3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp49m5mnp3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x % 2 == 1:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgjjxt10b.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgjjxt10b.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgjjxt10b.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    else:\n        for i in range(y, x-1, -1):\n            if\
    \ i % 2 == 0:\n                return i\n        return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x > y:\n        return -1\n    else:\n        for i in range(x, y+1):\n\
    \            if i % 2 == 0:\n                return i\n        return -1\n   \
    \ raise NotImplementedError()\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp52epksnf.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp52epksnf.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp52epksnf.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x = x + 1\n\
    \        return x\n    else:\n        return -1\n\ndef check(candidate):\n   \
    \ assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5iw1exdd.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp5iw1exdd.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp5iw1exdd.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x%2==0:\n        return x\n    if y%2==0:\n        return y\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfiwiuzdh.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpfiwiuzdh.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpfiwiuzdh.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x + 1 <= y:\n        return x\
    \ + 1\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvt1ypqrk.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpvt1ypqrk.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpvt1ypqrk.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    for i in range(x,\
    \ y+1):\n        if i % 2 == 0:\n            return i\n    return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpii9r5dei.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpii9r5dei.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpii9r5dei.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x > y:\n        return -1\n    if x % 2 == 0:\n        return x\n    else:\n\
    \        return x + 1\n    # END OF YOUR CODE\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0f6vsaxa.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0f6vsaxa.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp0f6vsaxa.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzidcd8n3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzidcd8n3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzidcd8n3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x % 2 == 1:\n        x += 1\n        if x > y:\n \
    \           return -1\n        else:\n            return x\n    else:\n      \
    \  return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n  \
    \  assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxowc75jb.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpxowc75jb.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpxowc75jb.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x%2 == 0:\n        return x\n    elif x%2 == 1:\n        x += 1\n    \
    \    return x\n    else:\n        return -1\n    raise NotImplementedError()\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_2w9b37f.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp_2w9b37f.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp_2w9b37f.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94z6epjd.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94z6epjd.py\"\
    , line 27, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94z6epjd.py\"\
    , line 17, in check\n    assert candidate(12, 15) == 14\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94z6epjd.py\"\
    , line 13, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzidcd8n3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzidcd8n3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzidcd8n3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    elif x % 2 == 0:\n        return x\n    else:\n        return\
    \ x + 1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x % 2 == 1:\n        x += 1\n        return x\n  \
    \  else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp49m5mnp3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp49m5mnp3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp49m5mnp3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    elif x % 2 == 0:\n        return x\n    else:\n        return\
    \ choose_num(x + 1, y)\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn8z5obq8.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpn8z5obq8.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpn8z5obq8.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x + 1 <= y:\n        return x\
    \ + 1\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvt1ypqrk.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpvt1ypqrk.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpvt1ypqrk.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        if x <= y:\n            return x\n        else:\n\
    \            return -1\n    else:\n        if x+1 <= y:\n            return x+1\n\
    \        else:\n            return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdm14091y.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpdm14091y.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpdm14091y.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # TODO: Implement\
    \ this function\n    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n\
    \        x += 1\n        return x\n    else:\n        return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5pu_qry2.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp5pu_qry2.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp5pu_qry2.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    elif x % 2 == 0:\n        return x\n    else:\n        return\
    \ x + 1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnjt_0t30.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpnjt_0t30.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpnjt_0t30.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n\
    \        return x\n    else:\n        return -1\n    raise NotImplementedError()\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4x8od8gx.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp4x8od8gx.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp4x8od8gx.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    else:\n        return x + 1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplokoe5kt.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmplokoe5kt.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmplokoe5kt.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzidcd8n3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzidcd8n3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzidcd8n3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n\
    \        return x\n    elif x % 2 != 0 and y % 2 != 0:\n        return -1\n  \
    \  else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdaxlmlc4.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpdaxlmlc4.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpdaxlmlc4.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzidcd8n3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzidcd8n3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzidcd8n3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # TODO: write your\
    \ code here\n    if x % 2 == 0:\n        return x\n    elif x + 1 <= y:\n    \
    \    return x + 1\n    else:\n        return -1\n\n\ndef check(candidate):\n \
    \   assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp206fkw0m.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp206fkw0m.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp206fkw0m.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n\
    \        return x\n    else:\n        return -1\n\ndef check(candidate):\n   \
    \ assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 32, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 22, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzidcd8n3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzidcd8n3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzidcd8n3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    elif x % 2 == 0:\n        return x\n    else:\n        return\
    \ x + 1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x % 2 == 1:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgjjxt10b.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgjjxt10b.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgjjxt10b.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 == y:\n        return -1\n    else:\n      \
    \  return choose_num(x + 1, y)\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxej7r25j.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpxej7r25j.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpxej7r25j.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x % 2 == 1:\n        x += 1\n        return x\n  \
    \  else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp49m5mnp3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp49m5mnp3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp49m5mnp3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    else:\n        return x + 1\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_jrllmtz.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp_jrllmtz.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp_jrllmtz.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x % 2 == 1:\n        x += 1\n        return x\n  \
    \  else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp49m5mnp3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp49m5mnp3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp49m5mnp3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzidcd8n3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzidcd8n3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzidcd8n3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        return x\
    \ + 1\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptddx2g6q.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmptddx2g6q.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmptddx2g6q.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    elif x % 2 == 0:\n        return x\n    else:\n        return\
    \ x + 1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x%2 == 0:\n        return x\n    elif x+1 <= y:\n        return x+1\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3fqqqnmz.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp3fqqqnmz.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3fqqqnmz.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x = x + 1\n\
    \        return x\n    else:\n        return -1\n\ndef check(candidate):\n   \
    \ assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5iw1exdd.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp5iw1exdd.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp5iw1exdd.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x%2==0:\n        return x\n    elif x%2!=0:\n        x=x+1\n        return\
    \ x\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzn4g8esd.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpzn4g8esd.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzn4g8esd.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    else:\n        for i in range(y, x-1, -1):\n            if\
    \ i % 2 == 0:\n                return i\n        return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n\
    \        return x\n    else:\n        return -1\n\ndef check(candidate):\n   \
    \ assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 32, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 22, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    elif x % 2 == 0:\n        return x\n    else:\n        return\
    \ x + 1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    else:\n        for i in range(y, x-1, -1):\n            if\
    \ i % 2 == 0:\n                return i\n        return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x%2==0:\n        for i in range(x,y+1):\n            if i%2==0:\n    \
    \            return i\n    else:\n        for i in range(x+1,y+1):\n         \
    \   if i%2==0:\n                return i\n    return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzhhgdedb.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpzhhgdedb.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzhhgdedb.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x = x + 1\n\
    \        return x\n    else:\n        return -1\n\ndef check(candidate):\n   \
    \ assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5iw1exdd.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp5iw1exdd.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp5iw1exdd.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    else:\n        return x + 1\n    raise\
    \ NotImplementedError()\n\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiw_yysrt.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpiw_yysrt.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpiw_yysrt.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x%2 == 0:\n        return x\n    elif x%2 != 0:\n        x += 1\n    \
    \    return x\n    else:\n        return -1\n    raise NotImplementedError()\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgmv2voys.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpgmv2voys.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpgmv2voys.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x > y:\n        return -1\n    else:\n        for i in range(x, y + 1):\n\
    \            if i % 2 == 0:\n                return i\n        return -1\n\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpun99ybr2.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpun99ybr2.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpun99ybr2.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n\
    \        return x\n    else:\n        return -1\n\ndef check(candidate):\n   \
    \ assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 32, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 22, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzidcd8n3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzidcd8n3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzidcd8n3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x%2==0:\n        return x\n    elif x%2!=0:\n        x=x+1\n        return\
    \ x\n    else:\n        return -1\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4x26thgx.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp4x26thgx.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp4x26thgx.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n\
    \        if x > y:\n            return -1\n        else:\n            return x\n\
    \    else:\n        return -1\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3yxruxqa.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp3yxruxqa.py\", line 37,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3yxruxqa.py\", line 27,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        return x\
    \ + 1\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptddx2g6q.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmptddx2g6q.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmptddx2g6q.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x%2 == 0:\n        if x > y:\n            return -1\n        else:\n \
    \           return x\n    else:\n        if x+1 > y:\n            return -1\n\
    \        else:\n            return x+1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl0wxq0xa.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpl0wxq0xa.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpl0wxq0xa.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    elif x % 2 == 0:\n        return x\n    else:\n        return\
    \ x + 1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    if x % 2 == 0:\n        return x\n    return choose_num(x +\
    \ 1, y)\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq6bi30zz.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpq6bi30zz.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpq6bi30zz.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x + 1 <= y:\n        return x\
    \ + 1\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvt1ypqrk.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpvt1ypqrk.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpvt1ypqrk.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x = x + 1\n\
    \        return x\n    else:\n        return -1\n\ndef check(candidate):\n   \
    \ assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5iw1exdd.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp5iw1exdd.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp5iw1exdd.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x % 2 == 1:\n        x += 1\n        if x > y:\n \
    \           return -1\n        else:\n            return x\n    else:\n      \
    \  return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb3ymsk3m.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpb3ymsk3m.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpb3ymsk3m.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzidcd8n3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzidcd8n3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzidcd8n3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # TODO: implement\
    \ this function\n    if x % 2 == 0:\n        return x\n    elif x+1 <= y:\n  \
    \      return x+1\n    else:\n        return -1\n\ndef check(candidate):\n   \
    \ assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3a0rchtp.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp3a0rchtp.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3a0rchtp.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzidcd8n3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzidcd8n3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzidcd8n3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: 0
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    else:\n        for i in range(y, x-1, -1):\n            if\
    \ i % 2 == 0:\n                return i\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x % 2 == 1:\n        return x + 1\n    else:\n   \
    \     return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx4j1dwqv.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpx4j1dwqv.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpx4j1dwqv.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzidcd8n3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzidcd8n3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzidcd8n3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x%2 == 0:\n        return x\n    elif x%2 == 1:\n        x = x+1\n   \
    \     return x\n    else:\n        return -1\n    raise NotImplementedError()\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2dpkzico.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp2dpkzico.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp2dpkzico.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    if x % 2 == 0:\n        return x\n    return choose_num(x +\
    \ 1, y)\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq6bi30zz.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpq6bi30zz.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpq6bi30zz.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n\
    \        return x\n    else:\n        return -1\n\ndef check(candidate):\n   \
    \ assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 32, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 22, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzidcd8n3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzidcd8n3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzidcd8n3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x % 2 == 1:\n        x += 1\n        return x\n  \
    \  elif x % 2 == 0 and y % 2 == 0:\n        return y\n    elif x % 2 == 0 and\
    \ y % 2 == 1:\n        y -= 1\n        return y\n    elif x % 2 == 1 and y % 2\
    \ == 0:\n        x += 1\n        return x\n    elif x % 2 == 1 and y % 2 == 1:\n\
    \        x += 1\n        y -= 1\n        return x\n    elif x == y:\n        return\
    \ x\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpui8maogu.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpui8maogu.py\", line 45,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpui8maogu.py\", line 35,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        return x\
    \ + 1\n    else:\n        return -1\n    raise NotImplementedError()\n\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj7xbvgx2.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpj7xbvgx2.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpj7xbvgx2.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x % 2 == 1:\n        x += 1\n        return x\n  \
    \  elif x % 2 == 0 and y % 2 == 0:\n        return y\n    elif x % 2 == 0 and\
    \ y % 2 == 1:\n        y -= 1\n        return y\n    elif x % 2 == 1 and y % 2\
    \ == 0:\n        x += 1\n        return x\n    elif x % 2 == 1 and y % 2 == 1:\n\
    \        x += 1\n        y -= 1\n        return x\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2_k3h8lr.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp2_k3h8lr.py\", line 43,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp2_k3h8lr.py\", line 33,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n\
    \        return x\n    else:\n        return -1\n\ndef check(candidate):\n   \
    \ assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 32, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 22, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    even_nums = []\n    for i in range(x, y+1):\n        if i % 2 == 0:\n   \
    \         even_nums.append(i)\n    if even_nums == []:\n        return -1\n  \
    \  else:\n        return max(even_nums)\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x % 2 == 1:\n        x += 1\n        return x\n  \
    \  else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp49m5mnp3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp49m5mnp3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp49m5mnp3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzidcd8n3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzidcd8n3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzidcd8n3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    if x % 2 == 0:\n        return x\n    return choose_num(x +\
    \ 1, y)\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptp91cx23.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptp91cx23.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmptp91cx23.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    elif x % 2 == 0:\n        return x\n    else:\n        return\
    \ x + 1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x%2 == 0:\n        return x\n    else:\n        return x+1\n    raise\
    \ NotImplementedError()\n\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8xnmooq1.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp8xnmooq1.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp8xnmooq1.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n\
    \        return x\n    elif x > y:\n        return -1\n    else:\n        return\
    \ -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf1dca3o9.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpf1dca3o9.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpf1dca3o9.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzidcd8n3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzidcd8n3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzidcd8n3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzidcd8n3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzidcd8n3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzidcd8n3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: 0
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    else:\n        for i in range(y, x-1, -1):\n            if\
    \ i % 2 == 0:\n                return i\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzidcd8n3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzidcd8n3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzidcd8n3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x%2 == 0:\n        return x\n    elif x+1 <= y:\n        return x+1\n\
    \    else:\n        return -1\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqbak2jp1.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpqbak2jp1.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpqbak2jp1.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x > y:\n        return -1\n    elif x % 2 == 0:\n        return x\n  \
    \  else:\n        return x + 1\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoya9sllj.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpoya9sllj.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpoya9sllj.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    elif x % 2 == 0:\n        return x\n    else:\n        return\
    \ x + 1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzidcd8n3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzidcd8n3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzidcd8n3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnke1ipu4.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x%2 == 0:\n        return x\n    elif x+1 <= y:\n        return x+1\n\
    \    else:\n        return -1\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqbak2jp1.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpqbak2jp1.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpqbak2jp1.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x%2 == 0:\n        return x\n    elif x%2 == 1:\n        x = x+1\n   \
    \     return x\n    else:\n        return -1\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp84ni8diw.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp84ni8diw.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp84ni8diw.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzidcd8n3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzidcd8n3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzidcd8n3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: 0
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    else:\n        for i in range(y, x-1, -1):\n            if\
    \ i % 2 == 0:\n                return i\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    else:\n        return x + 1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplokoe5kt.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmplokoe5kt.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmplokoe5kt.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x%2 == 0:\n        return x\n    elif x+1 <= y:\n        return x+1\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3fqqqnmz.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp3fqqqnmz.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3fqqqnmz.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x+1 <= y:\n        return x+1\n    else:\n       \
    \ return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n   \
    \ assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n \
    \   assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n  \
    \  assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3e7gkek9.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3e7gkek9.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3e7gkek9.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x % 2 == 1:\n        x += 1\n        return x\n  \
    \  else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp49m5mnp3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp49m5mnp3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp49m5mnp3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzidcd8n3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzidcd8n3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzidcd8n3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x + 1 <= y:\n        return x\
    \ + 1\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy0xxl3fx.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpy0xxl3fx.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpy0xxl3fx.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n\
    \        return x\n    else:\n        return -1\n\ndef check(candidate):\n   \
    \ assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 32, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 22, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x % 2 == 1:\n        x += 1\n        return x\n  \
    \  else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp49m5mnp3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp49m5mnp3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp49m5mnp3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n\
    \        return x\n    else:\n        return -1\n\ndef check(candidate):\n   \
    \ assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 32, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 22, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    elif x % 2 == 0:\n        return x\n    else:\n        return\
    \ x + 1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 30, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa86bbwub.py\"\
    , line 20, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x % 2 == 1:\n        return x + 1\n    elif x % 2\
    \ == 0 and y % 2 == 0:\n        return y\n    elif x % 2 == 1 and y % 2 == 1:\n\
    \        return y - 1\n    elif x % 2 == 0 and y % 2 == 1:\n        return y -\
    \ 1\n    elif x % 2 == 1 and y % 2 == 0:\n        return y\n    elif x > y:\n\
    \        return -1\n    elif x == y:\n        return x\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqqpuukio.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpqqpuukio.py\", line 40,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpqqpuukio.py\", line 30,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n\
    \        return x\n    else:\n        return -1\n\ndef check(candidate):\n   \
    \ assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 32, in test_check\n    check(choose_num)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmwgjpvt.py\"\
    , line 22, in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x = x + 1\n\
    \        return x\n    elif x % 2 != 0 and y % 2 != 0:\n        return -1\n  \
    \  else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8im990fp.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp8im990fp.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp8im990fp.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n\
    \        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n   \
    \     return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzidcd8n3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzidcd8n3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzidcd8n3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747308
- exit_code: -1
  program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n\
    \    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n     \
    \   return -1\n    if x % 2 == 0:\n        return x\n    return choose_num(x +\
    \ 1, y)\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptp91cx23.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptp91cx23.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmptp91cx23.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1659747309
