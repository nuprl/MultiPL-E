language: py
name: HumanEval_2_truncate_number
results:
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpypgpt5mo.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpypgpt5mo.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpypgpt5mo.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659749475
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # Your code here\n    return number - int(number)\n\n\
    \ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749475
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
