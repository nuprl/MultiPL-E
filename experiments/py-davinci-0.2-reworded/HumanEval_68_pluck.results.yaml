name: HumanEval_68_pluck
language: py
results:
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    even_nums = [num for num in arr if num % 2\
    \ == 0]\n    if even_nums:\n        return [min(even_nums), arr.index(min(even_nums))]\n\
    \    return []\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    even_nodes = [node for node in arr if node\
    \ % 2 == 0]\n    if not even_nodes:\n        return []\n    smallest_even = min(even_nodes)\n\
    \    return [smallest_even, arr.index(smallest_even)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if i % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if i % 2 == 0]\n  \
    \  if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # TODO: Implement me\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzrbrlp_i.py\"\
    , line 54, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzrbrlp_i.py\"\
    , line 52, in test_check\n    check(pluck)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzrbrlp_i.py\"\
    , line 42, in check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    even_nums = [num for num in arr if num % 2\
    \ == 0]\n    if not even_nums:\n        return []\n    smallest_even = min(even_nums)\n\
    \    return [smallest_even, arr.index(smallest_even)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    min_even_index = arr.index(min_even)\n    return [min_even,\
    \ min_even_index]\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [i for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if i % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [i for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    return [min_even, arr.index(min_even)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [i for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    min_even_idx = arr.index(min_even)\n    return [min_even,\
    \ min_even_idx]\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    min_even_index = arr.index(min_even)\n    return [min_even,\
    \ min_even_index]\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # your code here\n    return []\n\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcfc29ykt.py\"\
    , line 54, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcfc29ykt.py\"\
    , line 52, in test_check\n    check(pluck)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcfc29ykt.py\"\
    , line 42, in check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
