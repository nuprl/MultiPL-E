name: HumanEval_4_mean_absolute_deviation
language: py
results:
- program: "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float])\
    \ -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation\
    \ is the average absolute difference between each\n    element and a centerpoint\
    \ (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n\
    \    deviations = [abs(number - mean) for number in numbers]\n    return sum(deviations)\
    \ / len(deviations)\n\ndef check(candidate):\n    assert candidate([1.0, 2.0])\
    \ == 0.5\n    assert candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2\n\ndef test_check():\n    check(mean_absolute_deviation)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float])\
    \ -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation\
    \ is the average absolute difference between each\n    element and a centerpoint\
    \ (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n\
    \    absolute_deviations = [abs(number - mean) for number in numbers]\n    return\
    \ sum(absolute_deviations) / len(absolute_deviations)\n\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0]) == 0.5\n    assert candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n\ndef\
    \ test_check():\n    check(mean_absolute_deviation)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float])\
    \ -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation\
    \ is the average absolute difference between each\n    element and a centerpoint\
    \ (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # TODO: Implement this function\n\
    \    pass\n\ndef check(candidate):\n    assert candidate([1.0, 2.0]) == 0.5\n\
    \    assert candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2\n\ndef test_check():\n    check(mean_absolute_deviation)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsvmd8txy.py\"\
    , line 23, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsvmd8txy.py\"\
    , line 21, in test_check\n    check(mean_absolute_deviation)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsvmd8txy.py\"\
    , line 16, in check\n    assert candidate([1.0, 2.0]) == 0.5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float])\
    \ -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation\
    \ is the average absolute difference between each\n    element and a centerpoint\
    \ (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n\
    \    deviations = [abs(number - mean) for number in numbers]\n    return sum(deviations)\
    \ / len(deviations)\n\ndef check(candidate):\n    assert candidate([1.0, 2.0])\
    \ == 0.5\n    assert candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2\n\ndef test_check():\n    check(mean_absolute_deviation)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float])\
    \ -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation\
    \ is the average absolute difference between each\n    element and a centerpoint\
    \ (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # Calculate the mean of the input\
    \ numbers\n    mean = sum(numbers) / len(numbers)\n    # Calculate the absolute\
    \ difference between each element and the mean\n    absolute_differences = [abs(number\
    \ - mean) for number in numbers]\n    # Calculate the mean of the absolute differences\n\
    \    return sum(absolute_differences) / len(absolute_differences)\n\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0]) == 0.5\n    assert candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n\ndef\
    \ test_check():\n    check(mean_absolute_deviation)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float])\
    \ -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation\
    \ is the average absolute difference between each\n    element and a centerpoint\
    \ (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n\
    \    return sum([abs(x - mean) for x in numbers]) / len(numbers)\n\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0]) == 0.5\n    assert candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n\ndef\
    \ test_check():\n    check(mean_absolute_deviation)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float])\
    \ -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation\
    \ is the average absolute difference between each\n    element and a centerpoint\
    \ (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # Calculate mean of input numbers\n\
    \    mean = sum(numbers) / len(numbers)\n    # Calculate absolute difference between\
    \ each element and mean\n    absolute_differences = [abs(number - mean) for number\
    \ in numbers]\n    # Calculate average of absolute differences\n    average_absolute_difference\
    \ = sum(absolute_differences) / len(absolute_differences)\n    return average_absolute_difference\n\
    \ndef check(candidate):\n    assert candidate([1.0, 2.0]) == 0.5\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n\
    \ndef test_check():\n    check(mean_absolute_deviation)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float])\
    \ -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation\
    \ is the average absolute difference between each\n    element and a centerpoint\
    \ (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n\
    \    return sum([abs(x - mean) for x in numbers]) / len(numbers)\n\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0]) == 0.5\n    assert candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n\ndef\
    \ test_check():\n    check(mean_absolute_deviation)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float])\
    \ -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation\
    \ is the average absolute difference between each\n    element and a centerpoint\
    \ (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # TODO: Implement this function\n\
    \    pass\n\ndef check(candidate):\n    assert candidate([1.0, 2.0]) == 0.5\n\
    \    assert candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2\n\ndef test_check():\n    check(mean_absolute_deviation)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmm_rse0o.py\"\
    , line 23, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmm_rse0o.py\"\
    , line 21, in test_check\n    check(mean_absolute_deviation)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmm_rse0o.py\"\
    , line 16, in check\n    assert candidate([1.0, 2.0]) == 0.5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float])\
    \ -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation\
    \ is the average absolute difference between each\n    element and a centerpoint\
    \ (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # TODO: Implement this function\n\
    \    pass\n\ndef check(candidate):\n    assert candidate([1.0, 2.0]) == 0.5\n\
    \    assert candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2\n\ndef test_check():\n    check(mean_absolute_deviation)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ps_xv56.py\"\
    , line 23, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ps_xv56.py\"\
    , line 21, in test_check\n    check(mean_absolute_deviation)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ps_xv56.py\"\
    , line 16, in check\n    assert candidate([1.0, 2.0]) == 0.5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float])\
    \ -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation\
    \ is the average absolute difference between each\n    element and a centerpoint\
    \ (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n\
    \    deviations = [abs(number - mean) for number in numbers]\n    return sum(deviations)\
    \ / len(deviations)\n\ndef check(candidate):\n    assert candidate([1.0, 2.0])\
    \ == 0.5\n    assert candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2\n\ndef test_check():\n    check(mean_absolute_deviation)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float])\
    \ -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation\
    \ is the average absolute difference between each\n    element and a centerpoint\
    \ (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n\
    \    return sum([abs(x - mean) for x in numbers]) / len(numbers)\n\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0]) == 0.5\n    assert candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n\ndef\
    \ test_check():\n    check(mean_absolute_deviation)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float])\
    \ -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation\
    \ is the average absolute difference between each\n    element and a centerpoint\
    \ (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n\
    \    deviations = [abs(number - mean) for number in numbers]\n    return sum(deviations)\
    \ / len(deviations)\n\ndef check(candidate):\n    assert candidate([1.0, 2.0])\
    \ == 0.5\n    assert candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2\n\ndef test_check():\n    check(mean_absolute_deviation)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float])\
    \ -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation\
    \ is the average absolute difference between each\n    element and a centerpoint\
    \ (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n\
    \    return sum([abs(x - mean) for x in numbers]) / len(numbers)\n\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0]) == 0.5\n    assert candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n\ndef\
    \ test_check():\n    check(mean_absolute_deviation)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float])\
    \ -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation\
    \ is the average absolute difference between each\n    element and a centerpoint\
    \ (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n\
    \    deviations = [abs(number - mean) for number in numbers]\n    return sum(deviations)\
    \ / len(deviations)\n\ndef check(candidate):\n    assert candidate([1.0, 2.0])\
    \ == 0.5\n    assert candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2\n\ndef test_check():\n    check(mean_absolute_deviation)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float])\
    \ -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation\
    \ is the average absolute difference between each\n    element and a centerpoint\
    \ (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # Calculate the mean of the input\
    \ numbers\n    mean = sum(numbers) / len(numbers)\n    # Calculate the absolute\
    \ difference between each number and the mean\n    absolute_differences = [abs(number\
    \ - mean) for number in numbers]\n    # Calculate the mean of the absolute differences\n\
    \    return sum(absolute_differences) / len(absolute_differences)\n\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0]) == 0.5\n    assert candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n\ndef\
    \ test_check():\n    check(mean_absolute_deviation)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float])\
    \ -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation\
    \ is the average absolute difference between each\n    element and a centerpoint\
    \ (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n\
    \    deviations = [abs(number - mean) for number in numbers]\n    return sum(deviations)\
    \ / len(deviations)\n\ndef check(candidate):\n    assert candidate([1.0, 2.0])\
    \ == 0.5\n    assert candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2\n\ndef test_check():\n    check(mean_absolute_deviation)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float])\
    \ -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation\
    \ is the average absolute difference between each\n    element and a centerpoint\
    \ (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n\
    \    deviations = [abs(number - mean) for number in numbers]\n    return sum(deviations)\
    \ / len(deviations)\n\ndef check(candidate):\n    assert candidate([1.0, 2.0])\
    \ == 0.5\n    assert candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2\n\ndef test_check():\n    check(mean_absolute_deviation)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float])\
    \ -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation\
    \ is the average absolute difference between each\n    element and a centerpoint\
    \ (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n\
    \    return sum([abs(x - mean) for x in numbers]) / len(numbers)\n\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0]) == 0.5\n    assert candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n\ndef\
    \ test_check():\n    check(mean_absolute_deviation)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float])\
    \ -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation\
    \ is the average absolute difference between each\n    element and a centerpoint\
    \ (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # TODO: Implement this function\n\
    \    pass\n\ndef check(candidate):\n    assert candidate([1.0, 2.0]) == 0.5\n\
    \    assert candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2\n\ndef test_check():\n    check(mean_absolute_deviation)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt8hwep15.py\"\
    , line 23, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt8hwep15.py\"\
    , line 21, in test_check\n    check(mean_absolute_deviation)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt8hwep15.py\"\
    , line 16, in check\n    assert candidate([1.0, 2.0]) == 0.5\nAssertionError\n"
  exit_code: -1
  status: Exception
