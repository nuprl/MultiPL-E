name: HumanEval_111_histogram
language: py
results:
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    letter_count\
    \ = {}\n    for letter in test.split():\n        if letter in letter_count:\n\
    \            letter_count[letter] += 1\n        else:\n            letter_count[letter]\
    \ = 1\n    return letter_count\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp7r_cxql.py\"\
    , line 42, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp7r_cxql.py\"\
    , line 40, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp7r_cxql.py\"\
    , line 31, in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    histogram\
    \ = {}\n    for letter in test.split():\n        if letter in histogram:\n   \
    \         histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    return histogram\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfki_ozc_.py\"\
    , line 42, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfki_ozc_.py\"\
    , line 40, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfki_ozc_.py\"\
    , line 31, in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    histogram\
    \ = {}\n    for letter in test.split():\n        if letter in histogram:\n   \
    \         histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    return histogram\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcsdwiz8s.py\"\
    , line 42, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcsdwiz8s.py\"\
    , line 40, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcsdwiz8s.py\"\
    , line 31, in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    hist\
    \ = {}\n    for letter in test.split():\n        if letter in hist:\n        \
    \    hist[letter] += 1\n        else:\n            hist[letter] = 1\n    return\
    \ hist\n\ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert\
    \ candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b\
    \ b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g':\
    \ 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a': 1\
    \ }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_q4u0vlj.py\"\
    , line 42, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_q4u0vlj.py\"\
    , line 40, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_q4u0vlj.py\"\
    , line 31, in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    #\
    \ Create a dictionary to store the letters and their counts\n    histogram = {}\n\
    \    # Split the string into a list of letters\n    letters = test.split()\n \
    \   # Iterate over the list of letters\n    for letter in letters:\n        #\
    \ If the letter is not in the dictionary, add it with a count of 1\n        if\
    \ letter not in histogram:\n            histogram[letter] = 1\n        # If the\
    \ letter is in the dictionary, increment the count by 1\n        else:\n     \
    \       histogram[letter] += 1\n    # Return the dictionary\n    return histogram\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpht8yle71.py\"\
    , line 49, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpht8yle71.py\"\
    , line 47, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpht8yle71.py\"\
    , line 38, in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    letters\
    \ = test.split(' ')\n    histogram = {}\n    for letter in letters:\n        if\
    \ letter in histogram:\n            histogram[letter] += 1\n        else:\n  \
    \          histogram[letter] = 1\n    return histogram\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwuou9wzj.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwuou9wzj.py\"\
    , line 41, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwuou9wzj.py\"\
    , line 32, in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    hist\
    \ = {}\n    for letter in test.split():\n        if letter in hist:\n        \
    \    hist[letter] += 1\n        else:\n            hist[letter] = 1\n    return\
    \ hist\n\ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert\
    \ candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b\
    \ b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g':\
    \ 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a': 1\
    \ }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4qexpqbo.py\"\
    , line 42, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4qexpqbo.py\"\
    , line 40, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4qexpqbo.py\"\
    , line 31, in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    hist\
    \ = {}\n    for letter in test.split():\n        if letter in hist:\n        \
    \    hist[letter] += 1\n        else:\n            hist[letter] = 1\n    return\
    \ hist\n\ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert\
    \ candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b\
    \ b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g':\
    \ 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a': 1\
    \ }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw89x9h_u.py\"\
    , line 42, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw89x9h_u.py\"\
    , line 40, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw89x9h_u.py\"\
    , line 31, in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    hist\
    \ = {}\n    for letter in test.split():\n        if letter in hist:\n        \
    \    hist[letter] += 1\n        else:\n            hist[letter] = 1\n    max_count\
    \ = max(hist.values())\n    return {key: value for key, value in hist.items()\
    \ if value == max_count}\n\ndef check(candidate):\n    assert candidate('a b b\
    \ a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b':\
    \ 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1,\
    \ 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmj0gzse1.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmj0gzse1.py\"\
    , line 41, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmj0gzse1.py\"\
    , line 37, in check\n    assert candidate('') == {  }\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmj0gzse1.py\"\
    , line 27, in histogram\n    max_count = max(hist.values())\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    result\
    \ = {}\n    for letter in test.split():\n        if letter in result:\n      \
    \      result[letter] += 1\n        else:\n            result[letter] = 1\n  \
    \  return result\n\ndef check(candidate):\n    assert candidate('a b b a') ==\
    \ { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1\
    \ }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b\
    \ b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a':\
    \ 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa7lok1ka.py\"\
    , line 42, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa7lok1ka.py\"\
    , line 40, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa7lok1ka.py\"\
    , line 31, in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    histogram\
    \ = {}\n    for letter in test.split():\n        if letter in histogram:\n   \
    \         histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    return histogram\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpba9tmogy.py\"\
    , line 42, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpba9tmogy.py\"\
    , line 40, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpba9tmogy.py\"\
    , line 31, in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    hist\
    \ = {}\n    for letter in test.split():\n        if letter in hist:\n        \
    \    hist[letter] += 1\n        else:\n            hist[letter] = 1\n    return\
    \ hist\n\ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert\
    \ candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b\
    \ b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g':\
    \ 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a': 1\
    \ }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvfi2wm07.py\"\
    , line 42, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvfi2wm07.py\"\
    , line 40, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvfi2wm07.py\"\
    , line 31, in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    #\
    \ Create a dictionary to store the letter and the count\n    histogram = {}\n\
    \    # Split the string into a list of words\n    words = test.split()\n    #\
    \ Iterate through the list of words\n    for word in words:\n        # If the\
    \ word is not in the dictionary, add it with a count of 1\n        if word not\
    \ in histogram:\n            histogram[word] = 1\n        # If the word is in\
    \ the dictionary, increment the count by 1\n        else:\n            histogram[word]\
    \ += 1\n    # Return the dictionary\n    return histogram\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa7yg7yzr.py\"\
    , line 49, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa7yg7yzr.py\"\
    , line 47, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa7yg7yzr.py\"\
    , line 38, in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    histogram\
    \ = {}\n    for letter in test.split():\n        if letter in histogram:\n   \
    \         histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    return histogram\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplot_eqze.py\"\
    , line 42, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplot_eqze.py\"\
    , line 40, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplot_eqze.py\"\
    , line 31, in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    histogram\
    \ = {}\n    for letter in test.split():\n        if letter in histogram:\n   \
    \         histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    return histogram\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz1ttptff.py\"\
    , line 42, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz1ttptff.py\"\
    , line 40, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz1ttptff.py\"\
    , line 31, in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    #\
    \ Create a dictionary of the letters and their count\n    letters = {}\n    for\
    \ letter in test.split():\n        if letter in letters:\n            letters[letter]\
    \ += 1\n        else:\n            letters[letter] = 1\n\n    # Find the highest\
    \ count\n    highest_count = 0\n    for letter in letters:\n        if letters[letter]\
    \ > highest_count:\n            highest_count = letters[letter]\n\n    # Create\
    \ a dictionary of the letters with the highest count\n    highest_letters = {}\n\
    \    for letter in letters:\n        if letters[letter] == highest_count:\n  \
    \          highest_letters[letter] = letters[letter]\n\n    return highest_letters\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    #\
    \ Create a dictionary of the letters in the string and their corresponding counts\n\
    \    letter_counts = {}\n    for letter in test.split():\n        if letter in\
    \ letter_counts:\n            letter_counts[letter] += 1\n        else:\n    \
    \        letter_counts[letter] = 1\n\n    # Find the highest count\n    highest_count\
    \ = 0\n    for count in letter_counts.values():\n        if count > highest_count:\n\
    \            highest_count = count\n\n    # Create a dictionary of the letters\
    \ with the highest count\n    highest_count_letters = {}\n    for letter, count\
    \ in letter_counts.items():\n        if count == highest_count:\n            highest_count_letters[letter]\
    \ = count\n\n    return highest_count_letters\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    hist\
    \ = {}\n    for letter in test.split():\n        if letter in hist:\n        \
    \    hist[letter] += 1\n        else:\n            hist[letter] = 1\n    return\
    \ hist\n\ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert\
    \ candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b\
    \ b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g':\
    \ 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a': 1\
    \ }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph6iwr06h.py\"\
    , line 42, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph6iwr06h.py\"\
    , line 40, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph6iwr06h.py\"\
    , line 31, in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    d\
    \ = {}\n    for letter in test.split():\n        if letter in d:\n           \
    \ d[letter] += 1\n        else:\n            d[letter] = 1\n    return d\n\ndef\
    \ check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n \
    \   assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp7uqtvg3.py\"\
    , line 42, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp7uqtvg3.py\"\
    , line 40, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp7uqtvg3.py\"\
    , line 31, in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    histogram\
    \ = {}\n    for letter in test.split():\n        if letter in histogram:\n   \
    \         histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    return histogram\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa7s8cerg.py\"\
    , line 42, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa7s8cerg.py\"\
    , line 40, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa7s8cerg.py\"\
    , line 31, in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
