name: HumanEval_65_circular_shift
language: py
results:
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n\
    \    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n\
    \    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n\
    \    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n        return\
    \ digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n\
    \    \"\"\"\n    x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:]\
    \ + x_str[:-shift]\n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n\
    \    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n  \
    \  assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\n\
    def test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpugf116sa.py\"\
    , line 24, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpugf116sa.py\"\
    , line 22, in test_check\n    check(circular_shift)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpugf116sa.py\"\
    , line 17, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n\
    \    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n        return\
    \ digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n\
    \    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n\
    \    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n    assert\
    \ candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert\
    \ candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11,\
    \ 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n\
    \    \"\"\"\n    digits = str(x)\n    shift = shift % len(digits)\n    return\
    \ digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9b9css5c.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9b9css5c.py\"\
    , line 23, in test_check\n    check(circular_shift)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9b9css5c.py\"\
    , line 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n\
    \    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n        return\
    \ digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n\
    \    \"\"\"\n    digits = str(x)\n    shift = shift % len(digits)\n    return\
    \ digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd6dpeg9v.py\"\
    , line 25, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd6dpeg9v.py\"\
    , line 23, in test_check\n    check(circular_shift)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd6dpeg9v.py\"\
    , line 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n\
    \    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n\
    \    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n    assert\
    \ candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert\
    \ candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11,\
    \ 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n\
    \    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n        return\
    \ digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n\
    \    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n        return\
    \ digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n\
    \    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n\
    \    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n    assert\
    \ candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert\
    \ candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11,\
    \ 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n\
    \    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n        return\
    \ digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n\
    \    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n\
    \    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n    assert\
    \ candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert\
    \ candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11,\
    \ 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n\
    \    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n        return\
    \ digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n\
    \    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n        return\
    \ digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n\
    \    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n        return\
    \ digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n\
    \    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n        return\
    \ digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n\
    \    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n        return\
    \ digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n\
    \    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n\
    \    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n    assert\
    \ candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert\
    \ candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11,\
    \ 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
