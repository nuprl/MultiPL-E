language: py
name: HumanEval_99_closest_integer
results:
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsqwckmil.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsqwckmil.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsqwckmil.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpek99etqy.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpek99etqy.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpek99etqy.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu1m9ti9k.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu1m9ti9k.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu1m9ti9k.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpad1saxd0.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpad1saxd0.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpad1saxd0.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3zrez60j.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3zrez60j.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3zrez60j.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmp38b8um.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmp38b8um.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmp38b8um.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcyj5mqvw.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcyj5mqvw.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcyj5mqvw.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkirf3ywi.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkirf3ywi.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkirf3ywi.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvw_1msb5.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvw_1msb5.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvw_1msb5.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp482jedhw.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp482jedhw.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp482jedhw.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu9drf6qn.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu9drf6qn.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu9drf6qn.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw2gfpd2y.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw2gfpd2y.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw2gfpd2y.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpktw7hd7_.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpktw7hd7_.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpktw7hd7_.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprrbt1h2e.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprrbt1h2e.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprrbt1h2e.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpns2dgl7h.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpns2dgl7h.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpns2dgl7h.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyt35hku8.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyt35hku8.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyt35hku8.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm3wngld6.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm3wngld6.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm3wngld6.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.find('.') == -1:\n        return\
    \ int(value)\n    else:\n        return int(float(value) + 0.5)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1_8n3m2c.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1_8n3m2c.py\"\
    , line 33, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1_8n3m2c.py\"\
    , line 28, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxh_qqxjl.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpxh_qqxjl.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpxh_qqxjl.py\", line\
    \ 22, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
  timestamp: 1659805163
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudof6uck.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 30, in test_check\n    check(closest_integer)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm18l7l20.py\"\
    , line 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
