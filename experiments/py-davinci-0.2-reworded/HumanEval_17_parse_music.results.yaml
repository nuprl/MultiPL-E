name: HumanEval_17_parse_music
language: py
results:
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmposwefqdk.py\"\
    , line 30, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmposwefqdk.py\"\
    , line 28, in test_check\n    check(parse_music)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmposwefqdk.py\"\
    , line 21, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    # TODO: implement me\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvxbrs1x5.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvxbrs1x5.py\"\
    , line 27, in test_check\n    check(parse_music)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvxbrs1x5.py\"\
    , line 20, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    music_string = music_string.replace(' ', '')\n    music_string = music_string.replace('o',\
    \ '4')\n    music_string = music_string.replace('o|', '2')\n    music_string =\
    \ music_string.replace('.|', '1')\n    music_string = music_string.split('|')\n\
    \    music_string = [int(x) for x in music_string]\n    return music_string\n\n\
    def check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpytfdtu5b.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpytfdtu5b.py\"\
    , line 32, in test_check\n    check(parse_music)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpytfdtu5b.py\"\
    , line 25, in check\n    assert candidate('') == []\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpytfdtu5b.py\"\
    , line 21, in parse_music\n    music_string = [int(x) for x in music_string]\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpytfdtu5b.py\", line\
    \ 21, in <listcomp>\n    music_string = [int(x) for x in music_string]\nValueError:\
    \ invalid literal for int() with base 10: ''\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    music_string = music_string.replace('o', '4').replace('o|', '2').replace('.|',\
    \ '1')\n    return [int(x) for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqg3l1j8q.py\"\
    , line 30, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqg3l1j8q.py\"\
    , line 28, in test_check\n    check(parse_music)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqg3l1j8q.py\"\
    , line 24, in check\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1,\
    \ 1, 4, 4, 4, 4]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqg3l1j8q.py\"\
    , line 17, in parse_music\n    return [int(x) for x in music_string.split()]\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqg3l1j8q.py\", line\
    \ 17, in <listcomp>\n    return [int(x) for x in music_string.split()]\nValueError:\
    \ invalid literal for int() with base 10: '4|'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    # TODO: implement this function\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjm6n0s9h.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjm6n0s9h.py\"\
    , line 27, in test_check\n    check(parse_music)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjm6n0s9h.py\"\
    , line 20, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    # TODO: implement this function\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg9j3xnb5.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg9j3xnb5.py\"\
    , line 27, in test_check\n    check(parse_music)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg9j3xnb5.py\"\
    , line 20, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    # TODO: implement this function\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl8ynwdj2.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl8ynwdj2.py\"\
    , line 27, in test_check\n    check(parse_music)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl8ynwdj2.py\"\
    , line 20, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    music_string = music_string.replace('o', 'o ')\n    music_string = music_string.replace('o|',\
    \ 'o| ')\n    music_string = music_string.replace('.|', '.| ')\n    music_string\
    \ = music_string.split()\n    music_list = []\n    for i in music_string:\n  \
    \      if i == 'o':\n            music_list.append(4)\n        elif i == 'o|':\n\
    \            music_list.append(2)\n        elif i == '.|':\n            music_list.append(1)\n\
    \    return music_list\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .|\
    \ .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2,\
    \ 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1,\
    \ 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1bju9z7n.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1bju9z7n.py\"\
    , line 38, in test_check\n    check(parse_music)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1bju9z7n.py\"\
    , line 34, in check\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1,\
    \ 1, 4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    music_string = music_string.replace('o', 'o ')\n    music_string = music_string.replace('o|',\
    \ 'o| ')\n    music_string = music_string.replace('.|', '.| ')\n    music_string\
    \ = music_string.split()\n    music_list = []\n    for i in music_string:\n  \
    \      if i == 'o':\n            music_list.append(4)\n        elif i == 'o|':\n\
    \            music_list.append(2)\n        elif i == '.|':\n            music_list.append(1)\n\
    \    return music_list\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .|\
    \ .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2,\
    \ 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1,\
    \ 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprcmggpm0.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprcmggpm0.py\"\
    , line 38, in test_check\n    check(parse_music)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprcmggpm0.py\"\
    , line 34, in check\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1,\
    \ 1, 4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    return [4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string.split()]\n\
    \ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    # TODO: implement this function\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1trwwz2q.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1trwwz2q.py\"\
    , line 27, in test_check\n    check(parse_music)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1trwwz2q.py\"\
    , line 20, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    music_string = music_string.replace('o', '4')\n    music_string = music_string.replace('o|',\
    \ '2')\n    music_string = music_string.replace('.|', '1')\n    music_string =\
    \ music_string.split()\n    music_string = list(map(int, music_string))\n    return\
    \ music_string\n\n\ndef check(candidate):\n    assert candidate('') == []\n  \
    \  assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .|\
    \ .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2,\
    \ 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2,\
    \ 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp_gh2uau.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp_gh2uau.py\"\
    , line 32, in test_check\n    check(parse_music)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp_gh2uau.py\"\
    , line 28, in check\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1,\
    \ 1, 4, 4, 4, 4]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp_gh2uau.py\"\
    , line 20, in parse_music\n    music_string = list(map(int, music_string))\nValueError:\
    \ invalid literal for int() with base 10: '4|'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    # TODO: Implement this function\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpksk8ln4k.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpksk8ln4k.py\"\
    , line 27, in test_check\n    check(parse_music)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpksk8ln4k.py\"\
    , line 20, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    # TODO: Implement this function\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3glijvc2.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3glijvc2.py\"\
    , line 27, in test_check\n    check(parse_music)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3glijvc2.py\"\
    , line 20, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    # TODO: implement this function\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm9jsmyvl.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm9jsmyvl.py\"\
    , line 27, in test_check\n    check(parse_music)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm9jsmyvl.py\"\
    , line 20, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    # TODO: implement this function\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnwmbvivx.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnwmbvivx.py\"\
    , line 27, in test_check\n    check(parse_music)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnwmbvivx.py\"\
    , line 20, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    # TODO: implement this function\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_9hqa7sd.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_9hqa7sd.py\"\
    , line 27, in test_check\n    check(parse_music)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_9hqa7sd.py\"\
    , line 20, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    # TODO: implement me\n    return []\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd11o9n8e.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd11o9n8e.py\"\
    , line 27, in test_check\n    check(parse_music)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd11o9n8e.py\"\
    , line 21, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    # TODO: implement this function\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp43jwcj7z.py\"\
    , line 29, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp43jwcj7z.py\"\
    , line 27, in test_check\n    check(parse_music)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp43jwcj7z.py\"\
    , line 20, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    # YOUR CODE HERE\n    music_string = music_string.replace('o', '4')\n\
    \    music_string = music_string.replace('o|', '2')\n    music_string = music_string.replace('.|',\
    \ '1')\n    music_string = music_string.split()\n    music_string = [int(x) for\
    \ x in music_string]\n    return music_string\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpce4kykvq.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpce4kykvq.py\"\
    , line 32, in test_check\n    check(parse_music)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpce4kykvq.py\"\
    , line 28, in check\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1,\
    \ 1, 4, 4, 4, 4]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpce4kykvq.py\"\
    , line 21, in parse_music\n    music_string = [int(x) for x in music_string]\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpce4kykvq.py\", line\
    \ 21, in <listcomp>\n    music_string = [int(x) for x in music_string]\nValueError:\
    \ invalid literal for int() with base 10: '4|'\n"
  exit_code: -1
  status: Exception
