name: HumanEval_78_hex_key
language: py
results:
- program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([i for i in num if i in hex_primes])\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    if not num:\n        return\
    \ 0\n    else:\n        return sum(1 for i in num if i in '2357BD')\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = {'2', '3', '5',\
    \ '7', 'B', 'D'}\n    return len([x for x in num if x in primes])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = {'2', '3', '5',\
    \ '7', 'B', 'D'}\n    return len([x for x in num if x in primes])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    return sum(1 for i in num if int(i, 16) in primes)\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = {'2', '3', '5',\
    \ '7', 'B', 'D'}\n    return len([x for x in num if x in primes])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    count = 0\n    for i in num:\n        if i in hex_primes:\n\
    \            count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = {'2', '3', '5',\
    \ '7', 'B', 'D'}\n    return len([i for i in num if i in primes])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return sum(1 for x in num\
    \ if x in '2357BD')\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    hex_primes = [2, 3, 5, 7,\
    \ 11, 13]\n    return len([i for i in num if int(i, 16) in hex_primes])\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([i for i in num if i in primes])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    return sum(1 for i in num if int(i, 16) in primes)\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    return sum(1 for i in num if int(i, 16) in primes)\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return len([i for i in num\
    \ if int(i, 16) in (2, 3, 5, 7, 11, 13)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([i for i in num if i in primes])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    # your code here\n    return\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzv8oqiaw.py\"\
    , line 39, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzv8oqiaw.py\"\
    , line 37, in test_check\n    check(hex_key)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzv8oqiaw.py\"\
    , line 29, in check\n    assert candidate('AB') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([x for x in num if x in primes])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return len([x for x in num\
    \ if x in '2357BD'])\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    return len([x for x in num if int(x, 16) in primes])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    return len([i for i in num if int(i, 16) in primes])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
