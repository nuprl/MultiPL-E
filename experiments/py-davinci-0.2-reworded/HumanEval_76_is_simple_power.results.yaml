language: py
name: HumanEval_76_is_simple_power
results:
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x %\
    \ n == 0:\n        return is_simple_power(x / n, n)\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if n ==\
    \ 1:\n        return False\n    if x == n:\n        return True\n    if x % n\
    \ == 0:\n        return is_simple_power(x / n, n)\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp2vekcbu.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp2vekcbu.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp2vekcbu.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp2vekcbu.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if x % n\
    \ != 0:\n        return False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if x ==\
    \ n:\n        return True\n    if x % n != 0:\n        return False\n    return\
    \ is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if n ==\
    \ 1:\n        return False\n    if x == n:\n        return True\n    if x % n\
    \ != 0:\n        return False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp42hrlq34.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp42hrlq34.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp42hrlq34.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp42hrlq34.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1 and n == 1:\n        return True\n\
    \    elif x == 1 and n != 1:\n        return False\n    elif n == 1:\n       \
    \ return True\n    elif x % n != 0:\n        return False\n    else:\n       \
    \ return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp282fw7_z.py\"\
    , line 46, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp282fw7_z.py\"\
    , line 44, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp282fw7_z.py\"\
    , line 32, in check\n    assert candidate(16, 2) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp8tax011.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp8tax011.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp8tax011.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp8tax011.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(log(x, n))\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpem9_2ja2.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpem9_2ja2.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpem9_2ja2.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpem9_2ja2.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x\
    \ / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if x ==\
    \ n:\n        return True\n    if x < n:\n        return False\n    return is_simple_power(x\
    \ / n, n)\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n  \
    \  assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n\
    \    assert candidate(9, 3) == True\n    assert candidate(16, 4) == True\n   \
    \ assert candidate(24, 2) == False\n    assert candidate(128, 4) == False\n  \
    \  assert candidate(12, 6) == False\n    assert candidate(1, 1) == True\n    assert\
    \ candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmdrlmfgk.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmdrlmfgk.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmdrlmfgk.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmdrlmfgk.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if n ==\
    \ 1:\n        return False\n    if x == n:\n        return True\n    if x % n\
    \ != 0:\n        return False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x\
    \ / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwq6lkcpi.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwq6lkcpi.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwq6lkcpi.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwq6lkcpi.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(log(x, n))\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn2hiuz1v.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn2hiuz1v.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn2hiuz1v.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn2hiuz1v.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x\
    \ / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if x ==\
    \ n:\n        return True\n    if x % n != 0:\n        return False\n    return\
    \ is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if n ==\
    \ 1:\n        return False\n    if x % n != 0:\n        return False\n    return\
    \ is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if n ==\
    \ 1:\n        return False\n    if x == n:\n        return True\n    if x < n:\n\
    \        return False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x <\
    \ 1 or n < 1:\n        return False\n    else:\n        return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6ohk8_pw.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp6ohk8_pw.py\", line 40,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp6ohk8_pw.py\", line\
    \ 28, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp6ohk8_pw.py\"\
    , line 24, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    # Your code here\n    # ...\n    return False\n\
    \n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpap4aeij4.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpap4aeij4.py\", line 37,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpap4aeij4.py\", line\
    \ 25, in check\n    assert candidate(16, 2) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(log(x, n))\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x < n:\n        return False\n    else:\n\
    \        return is_simple_power(x/n, n)\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if x ==\
    \ n:\n        return True\n    if x < n:\n        return False\n    return is_simple_power(x\
    \ // n, n)\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n \
    \   assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n\
    \    assert candidate(9, 3) == True\n    assert candidate(16, 4) == True\n   \
    \ assert candidate(24, 2) == False\n    assert candidate(128, 4) == False\n  \
    \  assert candidate(12, 6) == False\n    assert candidate(1, 1) == True\n    assert\
    \ candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8ldntm19.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp8ldntm19.py\", line 41,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp8ldntm19.py\", line\
    \ 34, in check\n    assert candidate(24, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x %\
    \ n == 0:\n        return is_simple_power(x / n, n)\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if x ==\
    \ n:\n        return True\n    if x < n:\n        return False\n    return is_simple_power(x\
    \ / n, n)\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n  \
    \  assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n\
    \    assert candidate(9, 3) == True\n    assert candidate(16, 4) == True\n   \
    \ assert candidate(24, 2) == False\n    assert candidate(128, 4) == False\n  \
    \  assert candidate(12, 6) == False\n    assert candidate(1, 1) == True\n    assert\
    \ candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x <\
    \ 1 or n < 1:\n        return False\n    else:\n        return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6ohk8_pw.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp6ohk8_pw.py\", line 40,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp6ohk8_pw.py\", line\
    \ 28, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp6ohk8_pw.py\"\
    , line 24, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659747369
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if x ==\
    \ n:\n        return True\n    if x % n != 0:\n        return False\n    return\
    \ is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(log(x, n))\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x\
    \ / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x % n != 0:\n        return False\n    else:\n\
    \        return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if x ==\
    \ n:\n        return True\n    if x < n:\n        return False\n    if x % n !=\
    \ 0:\n        return False\n    return is_simple_power(x // n, n)\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if x ==\
    \ n:\n        return True\n    if x % n != 0:\n        return False\n    return\
    \ is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x %\
    \ n != 0:\n        return False\n    else:\n        return is_simple_power(x /\
    \ n, n)\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x\
    \ / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x\
    \ / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if x ==\
    \ n:\n        return True\n    if x % n != 0:\n        return False\n    return\
    \ is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x %\
    \ n == 0:\n        return is_simple_power(x / n, n)\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if n ==\
    \ 1:\n        return False\n    if x == n:\n        return True\n    if x % n\
    \ == 0:\n        return is_simple_power(x / n, n)\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x\
    \ / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x\
    \ / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x\
    \ / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x < n:\n        return False\n    else:\n\
    \        return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x % n != 0:\n        return False\n    else:\n\
    \        return is_simple_power(x/n, n)\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    # your code here\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x/n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x\
    \ / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(log(x, n))\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x\
    \ / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(log(x, n))\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if x < 1\
    \ or n < 1:\n        return False\n    while x % n == 0:\n        x = x / n\n\
    \    return x == 1\n\n\ndef check(candidate):\n    assert candidate(16, 2) ==\
    \ True\n    assert candidate(143214, 16) == False\n    assert candidate(4, 2)\
    \ == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4) ==\
    \ True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4) ==\
    \ False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) == True\n\
    \    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x % n != 0:\n        return False\n    else:\n\
    \        return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(log(x, n))\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if n ==\
    \ 1:\n        return False\n    if x == n:\n        return True\n    if x % n\
    \ == 0:\n        return is_simple_power(x / n, n)\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if x ==\
    \ n:\n        return True\n    if x % n != 0:\n        return False\n    return\
    \ is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x % n != 0:\n        return False\n    else:\n\
    \        return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if n ==\
    \ 1:\n        return False\n    if x == n:\n        return True\n    if x % n\
    \ == 0:\n        return is_simple_power(x / n, n)\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if n == 1:\n        return False\n    if x ==\
    \ 1:\n        return True\n    if x == n:\n        return True\n    if x % n !=\
    \ 0:\n        return False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppg1m00er.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmppg1m00er.py\", line 43,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmppg1m00er.py\", line\
    \ 39, in check\n    assert candidate(1, 1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if n == 1:\n        return False\n    if x ==\
    \ 1:\n        return True\n    if x == n:\n        return True\n    if x % n ==\
    \ 0:\n        return is_simple_power(x / n, n)\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpghtp2en6.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpghtp2en6.py\", line 43,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpghtp2en6.py\", line\
    \ 39, in check\n    assert candidate(1, 1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(log(x, n))\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if n ==\
    \ 1:\n        return False\n    if x == n:\n        return True\n    if x < n:\n\
    \        return False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x\
    \ / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if n ==\
    \ 1:\n        return False\n    if x == n:\n        return True\n    if x < n:\n\
    \        return False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1 and n == 1:\n        return True\n\
    \    elif x == 1 and n != 1:\n        return False\n    elif x == n:\n       \
    \ return True\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n\
    \    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_9wut1zz.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp_9wut1zz.py\", line 44,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp_9wut1zz.py\", line\
    \ 41, in check\n    assert candidate(1, 12) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747369
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x < n:\n        return False\n    else:\n\
    \        return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if x ==\
    \ n:\n        return True\n    if x < n:\n        return False\n    if x % n !=\
    \ 0:\n        return False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x <\
    \ 1 or n < 1:\n        return False\n    else:\n        return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6ohk8_pw.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp6ohk8_pw.py\", line 40,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp6ohk8_pw.py\", line\
    \ 28, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp6ohk8_pw.py\"\
    , line 24, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if n ==\
    \ 1:\n        return False\n    if x == n:\n        return True\n    if x % n\
    \ != 0:\n        return False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if x ==\
    \ n:\n        return True\n    if x % n != 0:\n        return False\n    return\
    \ is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if n ==\
    \ 1:\n        return False\n    if x == n:\n        return True\n    if x < n:\n\
    \        return False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if n ==\
    \ 1:\n        return False\n    if x % n != 0:\n        return False\n    return\
    \ is_simple_power(x/n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    # your code here\n    return True if x == n **\
    \ int(math.log(x, n)) else False\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu1sl16rw.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpu1sl16rw.py\", line 36,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpu1sl16rw.py\", line\
    \ 24, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpu1sl16rw.py\"\
    , line 20, in is_simple_power\n    return True if x == n ** int(math.log(x, n))\
    \ else False\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if n == 1:\n        return False\n    if x ==\
    \ 1:\n        return True\n    if x == n:\n        return True\n    if x % n ==\
    \ 0:\n        return is_simple_power(x / n, n)\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpghtp2en6.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpghtp2en6.py\", line 43,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpghtp2en6.py\", line\
    \ 39, in check\n    assert candidate(1, 1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747369
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if x ==\
    \ n:\n        return True\n    if x < n:\n        return False\n    return is_simple_power(x/n,\
    \ n)\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if n == 1:\n        return False\n    if x ==\
    \ 1:\n        return True\n    if x == n:\n        return True\n    if x % n !=\
    \ 0:\n        return False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppg1m00er.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmppg1m00er.py\", line 43,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmppg1m00er.py\", line\
    \ 39, in check\n    assert candidate(1, 1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(log(x, n))\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if n ==\
    \ 1:\n        return False\n    if x == n:\n        return True\n    if x % n\
    \ != 0:\n        return False\n    return is_simple_power(x // n, n)\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if n ==\
    \ 1:\n        return False\n    if x == n:\n        return True\n    if x % n\
    \ != 0:\n        return False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x < n:\n        return False\n    else:\n\
    \        return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x\
    \ / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if n ==\
    \ 1:\n        return False\n    if x == n:\n        return True\n    if x % n\
    \ == 0:\n        return is_simple_power(x // n, n)\n    return False\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if x ==\
    \ n:\n        return True\n    if x % n != 0:\n        return False\n    return\
    \ is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n)) if n !=\
    \ 1 else False\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n\
    \    assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n\
    \    assert candidate(9, 3) == True\n    assert candidate(16, 4) == True\n   \
    \ assert candidate(24, 2) == False\n    assert candidate(128, 4) == False\n  \
    \  assert candidate(12, 6) == False\n    assert candidate(1, 1) == True\n    assert\
    \ candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuhnrvw6o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpuhnrvw6o.py\", line 35,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpuhnrvw6o.py\", line\
    \ 23, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpuhnrvw6o.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n)) if n !=\
    \ 1 else False\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x <\
    \ 1 or n < 1:\n        return False\n    else:\n        return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6ohk8_pw.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp6ohk8_pw.py\", line 40,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp6ohk8_pw.py\", line\
    \ 28, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp6ohk8_pw.py\"\
    , line 24, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659747369
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if n ==\
    \ 1:\n        return False\n    if x == n:\n        return True\n    if x < n:\n\
    \        return False\n    return is_simple_power(x/n, n)\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if x ==\
    \ n:\n        return True\n    if x < n:\n        return False\n    if x % n !=\
    \ 0:\n        return False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(log(x, n)) if x > 0 and\
    \ n > 0 else False\n\n\ndef check(candidate):\n    assert candidate(16, 2) ==\
    \ True\n    assert candidate(143214, 16) == False\n    assert candidate(4, 2)\
    \ == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4) ==\
    \ True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4) ==\
    \ False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) == True\n\
    \    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbk9qbgns.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpbk9qbgns.py\", line 35,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpbk9qbgns.py\", line\
    \ 23, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpbk9qbgns.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(log(x, n)) if x > 0 and\
    \ n > 0 else False\nNameError: name 'log' is not defined\n"
  stdout: ''
  timestamp: 1659747369
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x\
    \ / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if x ==\
    \ n:\n        return True\n    if x < n:\n        return False\n    if x % n !=\
    \ 0:\n        return False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x\
    \ / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if n ==\
    \ 1:\n        return False\n    if x == n:\n        return True\n    if x % n\
    \ != 0:\n        return False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x\
    \ / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if x ==\
    \ n:\n        return True\n    if x % n != 0:\n        return False\n    return\
    \ is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x\
    \ / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if x ==\
    \ n:\n        return True\n    if x % n != 0:\n        return False\n    return\
    \ is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 0:\n        return False\n    if x ==\
    \ 1:\n        return True\n    if n == 0:\n        return False\n    if n == 1:\n\
    \        return True\n    if x % n != 0:\n        return False\n    return is_simple_power(x\
    \ / n, n)\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n  \
    \  assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n\
    \    assert candidate(9, 3) == True\n    assert candidate(16, 4) == True\n   \
    \ assert candidate(24, 2) == False\n    assert candidate(128, 4) == False\n  \
    \  assert candidate(12, 6) == False\n    assert candidate(1, 1) == True\n    assert\
    \ candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x/n,\
    \ n)\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if n ==\
    \ 1:\n        return False\n    if x == n:\n        return True\n    if x % n\
    \ == 0:\n        return is_simple_power(x / n, n)\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n)) if x > 0\
    \ else False\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n\
    \    assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n\
    \    assert candidate(9, 3) == True\n    assert candidate(16, 4) == True\n   \
    \ assert candidate(24, 2) == False\n    assert candidate(128, 4) == False\n  \
    \  assert candidate(12, 6) == False\n    assert candidate(1, 1) == True\n    assert\
    \ candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3o6wyja6.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp3o6wyja6.py\", line 35,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp3o6wyja6.py\", line\
    \ 23, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp3o6wyja6.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n)) if x >\
    \ 0 else False\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659747369
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if x ==\
    \ n:\n        return True\n    if x % n != 0:\n        return False\n    return\
    \ is_simple_power(x/n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x %\
    \ n == 0:\n        return is_simple_power(x / n, n)\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x > n:\n        return is_simple_power(x/n,\
    \ n)\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if n ==\
    \ 1:\n        return False\n    if x == n:\n        return True\n    if x % n\
    \ != 0:\n        return False\n    return is_simple_power(x // n, n)\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if x ==\
    \ n:\n        return True\n    if x % n != 0:\n        return False\n    return\
    \ is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if n == 1:\n        return False\n    if x ==\
    \ 1:\n        return True\n    if x == n:\n        return True\n    if x % n !=\
    \ 0:\n        return False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppg1m00er.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmppg1m00er.py\", line 43,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmppg1m00er.py\", line\
    \ 39, in check\n    assert candidate(1, 1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x % n != 0:\n        return False\n    else:\n\
    \        return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if n ==\
    \ 1:\n        return False\n    if x == n:\n        return True\n    if x % n\
    \ != 0:\n        return False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x/n,\
    \ n)\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if n ==\
    \ 1:\n        return False\n    if x == n:\n        return True\n    if x % n\
    \ != 0:\n        return False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if n ==\
    \ 1:\n        return False\n    if x == n:\n        return True\n    if x < n:\n\
    \        return False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(log(x, n))\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if n ==\
    \ 1:\n        return False\n    if x == n:\n        return True\n    if x % n\
    \ != 0:\n        return False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x < n:\n        return False\n    else:\n\
    \        return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if x ==\
    \ n:\n        return True\n    if x % n != 0:\n        return False\n    return\
    \ is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(log(x, n))\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if x < 1\
    \ or n < 1:\n        return False\n    if x == n:\n        return True\n    if\
    \ x % n != 0:\n        return False\n    return is_simple_power(x / n, n)\n\n\n\
    def check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if n ==\
    \ 1:\n        return False\n    if x == n:\n        return True\n    if x % n\
    \ != 0:\n        return False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x\
    \ / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(log(x, n))\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh5g5kbp.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x\
    \ / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if x ==\
    \ n:\n        return True\n    if x % n != 0:\n        return False\n    return\
    \ is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x ==\
    \ n:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x\
    \ / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if n ==\
    \ 1:\n        return False\n    if x % n != 0:\n        return False\n    return\
    \ is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    if x == 1:\n        return True\n    if n ==\
    \ 1:\n        return False\n    while x % n == 0:\n        x = x / n\n    return\
    \ x == 1\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n   \
    \ assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n\
    \    assert candidate(9, 3) == True\n    assert candidate(16, 4) == True\n   \
    \ assert candidate(24, 2) == False\n    assert candidate(128, 4) == False\n  \
    \  assert candidate(12, 6) == False\n    assert candidate(1, 1) == True\n    assert\
    \ candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2,\
    \ 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3,\
    \ 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5,\
    \ 3)\n    false\n    \"\"\"\n    return x == n ** int(math.log(x, n))\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 35, in test_check\n    check(is_simple_power)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 23, in check\n    assert candidate(16, 2) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqi9h4eq0.py\"\
    , line 19, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
