language: py
name: HumanEval_117_select_words
results:
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter in 'bcdfghjklmnpqrstvwxyz':\n                count += 1\n   \
    \     if count == n:\n            result.append(word)\n    return result\n\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgrqzx04i.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgrqzx04i.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgrqzx04i.py\"\
    , line 35, in check\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # your code here\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppc24qpd0.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppc24qpd0.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppc24qpd0.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        num_consonants = 0\n        for letter in word:\n            if letter.lower()\
    \ not in 'aeiou':\n                num_consonants += 1\n        if num_consonants\
    \ == n:\n            result.append(word)\n    return result\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(word) == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpovvtxwcm.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpovvtxwcm.py\"\
    , line 38, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpovvtxwcm.py\"\
    , line 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # TODO: Implement this function\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzj7pab4u.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzj7pab4u.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzj7pab4u.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(word) == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp68y3rkm1.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp68y3rkm1.py\"\
    , line 38, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp68y3rkm1.py\"\
    , line 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # your code here\n    return []\n\ndef check(candidate):\n  \
    \  assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw31bsjw4.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw31bsjw4.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw31bsjw4.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # your code here\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for char in word:\n        \
    \    if char not in 'aeiou':\n                count += 1\n        if count ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpha995tbz.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpha995tbz.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpha995tbz.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvb7rp3m8.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvb7rp3m8.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvb7rp3m8.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # TODO: implement this function\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdgdfnqu2.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdgdfnqu2.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdgdfnqu2.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5bxbrbe2.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5bxbrbe2.py\"\
    , line 33, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5bxbrbe2.py\"\
    , line 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # your code here\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3giruwj2.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3giruwj2.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3giruwj2.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppwxqnpla.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppwxqnpla.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppwxqnpla.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(word) == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 38, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # split the string into words\n    words = s.split()\n    # create\
    \ a list to store the words with n consonants\n    n_consonants = []\n    # loop\
    \ through the words\n    for word in words:\n        # create a list to store\
    \ the consonants\n        consonants = []\n        # loop through the letters\
    \ in the word\n        for letter in word:\n            # if the letter is a consonant,\
    \ add it to the list\n            if letter not in 'aeiou':\n                consonants.append(letter)\n\
    \        # if the length of the consonants list is equal to n, add the word to\
    \ the n_consonants list\n        if len(consonants) == n:\n            n_consonants.append(word)\n\
    \    # return the n_consonants list\n    return n_consonants\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2cfqfwph.py\"\
    , line 52, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2cfqfwph.py\"\
    , line 50, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2cfqfwph.py\"\
    , line 45, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        count = 0\n        for letter in word:\n            if letter not in\
    \ 'aeiou':\n                count += 1\n        if count == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 44, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 42, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 37, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqpfjwqee.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqpfjwqee.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqpfjwqee.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    vowels = ['a', 'e', 'i', 'o', 'u']\n  \
    \  words = s.split()\n    result = []\n    for word in words:\n        count =\
    \ 0\n        for letter in word:\n            if letter.lower() not in vowels:\n\
    \                count += 1\n        if count == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo9avvbr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo9avvbr.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo9avvbr.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    words = s.split()\n \
    \   result = []\n    for word in words:\n        count = 0\n        for letter\
    \ in word:\n            if letter.lower() not in vowels:\n                count\
    \ += 1\n        if count == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # TODO: implement this function\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdgdfnqu2.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdgdfnqu2.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdgdfnqu2.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # TODO: implement this function\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdgdfnqu2.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdgdfnqu2.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdgdfnqu2.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiouAEIOU':\n                count += 1\n        if\
    \ count == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    return []\n\ndef check(candidate):\n  \
    \  assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9uqcly00.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp9uqcly00.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp9uqcly00.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(word) > n:\n            count = 0\n            for char in word:\n\
    \                if char not in 'aeiou':\n                    count += 1\n   \
    \         if count == n:\n                result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdk1_s94z.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpdk1_s94z.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpdk1_s94z.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(word) - len(re.findall('[aeiou]', word)) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprysx31bx.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmprysx31bx.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmprysx31bx.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmprysx31bx.py\", line 24, in select_words\n    if len(word) -\
    \ len(re.findall('[aeiou]', word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: 0
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    words\
    \ = s.split()\n    result = []\n    for word in words:\n        count = 0\n  \
    \      for char in word:\n            if char not in 'aeiouAEIOU':\n         \
    \       count += 1\n        if count == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n\
    \    result = []\n    for word in words:\n        count = 0\n        for letter\
    \ in word:\n            if letter.lower() in consonants:\n                count\
    \ += 1\n        if count == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(word) == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 38, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for char in word:\n        \
    \    if char not in 'aeiou':\n                count += 1\n        if count ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgqw17ohn.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpgqw17ohn.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgqw17ohn.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        count = 0\n        for char in word:\n            if char not in 'aeiou':\n\
    \                count += 1\n        if count == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp08fuickb.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp08fuickb.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp08fuickb.py\", line\
    \ 37, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: 0
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # your code here\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        consonants = 0\n        for letter in word:\n \
    \           if letter.lower() not in 'aeiou':\n                consonants += 1\n\
    \        if consonants == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(word) == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 38, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    words\
    \ = s.split()\n    result = []\n    for word in words:\n        count = 0\n  \
    \      for letter in word:\n            if letter not in 'aeiou':\n          \
    \      count += 1\n        if count == n:\n            result.append(word)\n \
    \   return result\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj17mp438.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpj17mp438.py\", line 44,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpj17mp438.py\", line\
    \ 39, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        count = 0\n        for letter in word:\n            if letter not in\
    \ 'aeiou':\n                count += 1\n        if count == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 44, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 42, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 37, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # TODO: implement this function\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdgdfnqu2.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdgdfnqu2.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdgdfnqu2.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # your code here\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3giruwj2.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3giruwj2.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3giruwj2.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(word) == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 38, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(list(filter(lambda x: x in 'bcdfghjklmnpqrstvwxyz', word))) ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ifw67vo.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp0ifw67vo.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp0ifw67vo.py\", line\
    \ 30, in check\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(re.findall(r'[bcdfghjklmnpqrstvwxyz]', word, re.IGNORECASE)) ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj9288pz8.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpj9288pz8.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpj9288pz8.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpj9288pz8.py\", line 24, in select_words\n    if len(re.findall(r'[bcdfghjklmnpqrstvwxyz]',\
    \ word, re.IGNORECASE)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(word) == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 38, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for char in word:\n        \
    \    if char not in 'aeiou':\n                count += 1\n        if count ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgqw17ohn.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpgqw17ohn.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgqw17ohn.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for char in word:\n        \
    \    if char not in 'aeiou':\n                count += 1\n        if count ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgqw17ohn.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpgqw17ohn.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgqw17ohn.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo9avvbr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo9avvbr.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo9avvbr.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(re.findall('[bcdfghjklmnpqrstvwxyz]', word, re.IGNORECASE)) ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_nuoseiw.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp_nuoseiw.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp_nuoseiw.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp_nuoseiw.py\", line 24, in select_words\n    if len(re.findall('[bcdfghjklmnpqrstvwxyz]',\
    \ word, re.IGNORECASE)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # Write your code here\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        count = 0\n        for char in word:\n      \
    \      if char not in 'aeiou':\n                count += 1\n        if count ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf_hn4se6.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpf_hn4se6.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpf_hn4se6.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnlb73nnr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpnlb73nnr.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpnlb73nnr.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpnlb73nnr.py\", line 22, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        count = 0\n        for letter in word:\n            if letter not in\
    \ 'aeiouAEIOU':\n                count += 1\n        if count == n:\n        \
    \    result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805041
- exit_code: 0
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    vowels = ['a', 'e', 'i', 'o', 'u']\n  \
    \  words = s.split()\n    result = []\n    for word in words:\n        count =\
    \ 0\n        for letter in word:\n            if letter.lower() not in vowels:\n\
    \                count += 1\n        if count == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for char in word:\n        \
    \    if char not in 'aeiou':\n                count += 1\n        if count ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgqw17ohn.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpgqw17ohn.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgqw17ohn.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(word) == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 38, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for char in word:\n        \
    \    if char not in 'aeiou':\n                count += 1\n        if count ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgqw17ohn.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpgqw17ohn.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgqw17ohn.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # TODO: implement this function\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdgdfnqu2.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdgdfnqu2.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdgdfnqu2.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if count_consonants(word) == n:\n            result.append(word)\n  \
    \  return result\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc1vut9fw.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpc1vut9fw.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpc1vut9fw.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpc1vut9fw.py\", line 24, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for char in word:\n        \
    \    if char not in 'aeiou':\n                count += 1\n        if count ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgqw17ohn.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpgqw17ohn.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgqw17ohn.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(word) == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 38, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo9avvbr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo9avvbr.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo9avvbr.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # TODO: implement this function\n    return []\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb_nvk9zn.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpb_nvk9zn.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpb_nvk9zn.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # Write your code here\n    return []\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfld_7eq_.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpfld_7eq_.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpfld_7eq_.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnlb73nnr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpnlb73nnr.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpnlb73nnr.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpnlb73nnr.py\", line 22, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(word) == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 38, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnlb73nnr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpnlb73nnr.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpnlb73nnr.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpnlb73nnr.py\", line 22, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(word) == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 38, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(word) == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 38, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # TODO: Implement me\n    pass\n\ndef check(candidate):\n   \
    \ assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfp6jufjq.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpfp6jufjq.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpfp6jufjq.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: 0
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # your code here\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for char in word:\n        \
    \    if char not in 'aeiouAEIOU':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        count = 0\n        for letter in word:\n            if letter not in\
    \ 'aeiou':\n                count += 1\n        if count == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 44, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 42, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 37, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(re.findall(r'[bcdfghjklmnpqrstvwxyz]', word, re.IGNORECASE)) ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj9288pz8.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpj9288pz8.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpj9288pz8.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpj9288pz8.py\", line 24, in select_words\n    if len(re.findall(r'[bcdfghjklmnpqrstvwxyz]',\
    \ word, re.IGNORECASE)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(set(word).intersection(set(['a', 'e', 'i', 'o', 'u']))) == n:\n\
    \            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqp_pxb5f.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpqp_pxb5f.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqp_pxb5f.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        count = 0\n        for letter in word:\n            if letter not in\
    \ 'aeiou':\n                count += 1\n        if count == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 44, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 42, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 37, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for char in word:\n        \
    \    if char not in 'aeiou':\n                count += 1\n        if count ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgqw17ohn.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpgqw17ohn.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgqw17ohn.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for char in word:\n        \
    \    if char not in 'aeiou':\n                count += 1\n        if count ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgqw17ohn.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpgqw17ohn.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgqw17ohn.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        consonants = 0\n        for letter in word:\n \
    \           if letter not in 'aeiou':\n                consonants += 1\n     \
    \   if consonants == n:\n            result.append(word)\n    return result\n\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6bn01a77.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp6bn01a77.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6bn01a77.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5bxbrbe2.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5bxbrbe2.py\"\
    , line 33, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5bxbrbe2.py\"\
    , line 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    return []\n\ndef check(candidate):\n  \
    \  assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9uqcly00.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp9uqcly00.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp9uqcly00.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnlb73nnr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpnlb73nnr.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpnlb73nnr.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpnlb73nnr.py\", line 22, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo9avvbr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo9avvbr.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo9avvbr.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(word) == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 38, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    vowels = ['a', 'e', 'i', 'o', 'u']\n  \
    \  words = s.split()\n    result = []\n    for word in words:\n        count =\
    \ 0\n        for letter in word:\n            if letter.lower() not in vowels:\n\
    \                count += 1\n        if count == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # your code here\n    return []\n\ndef check(candidate):\n  \
    \  assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw31bsjw4.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw31bsjw4.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw31bsjw4.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(word) > n:\n            count = 0\n            for letter in word:\n\
    \                if letter not in 'aeiou':\n                    count += 1\n \
    \           if count == n:\n                result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmpk983pf.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpmpk983pf.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpmpk983pf.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: 0
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        count = 0\n        for letter in word:\n            if letter not in\
    \ 'aeiouAEIOU':\n                count += 1\n        if count == n:\n        \
    \    result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n\
    \    result = []\n    for word in words:\n        count = 0\n        for char\
    \ in word:\n            if char.lower() in consonants:\n                count\
    \ += 1\n        if count == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(word) > n:\n            count = 0\n            for char in word:\n\
    \                if char not in 'aeiou':\n                    count += 1\n   \
    \         if count == n:\n                result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdk1_s94z.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpdk1_s94z.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpdk1_s94z.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        count = 0\n        for letter in word:\n            if letter not in\
    \ 'aeiou':\n                count += 1\n        if count == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 44, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 42, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 37, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiouAEIOU':\n                count += 1\n        if\
    \ count == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(list(filter(lambda x: x in 'bcdfghjklmnpqrstvwxyz', word))) ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ifw67vo.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp0ifw67vo.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp0ifw67vo.py\", line\
    \ 30, in check\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(word) > n:\n            count = 0\n            for letter in word:\n\
    \                if letter not in 'aeiou':\n                    count += 1\n \
    \           if count == n:\n                result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmpk983pf.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpmpk983pf.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpmpk983pf.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo9avvbr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo9avvbr.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo9avvbr.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # split the string into words\n    words = s.split()\n    # create\
    \ a list to store the words that contain exactly n consonants\n    result = []\n\
    \    # iterate through the words\n    for word in words:\n        # count the\
    \ number of consonants in the word\n        num_consonants = 0\n        for letter\
    \ in word:\n            if letter not in 'aeiou':\n                num_consonants\
    \ += 1\n        # if the number of consonants is equal to n, add the word to the\
    \ result list\n        if num_consonants == n:\n            result.append(word)\n\
    \    # return the result list\n    return result\n\ndef check(candidate):\n  \
    \  assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfc5hn2jf.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpfc5hn2jf.py\", line 48,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpfc5hn2jf.py\", line\
    \ 43, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        count = 0\n        for letter in word:\n            if letter not in\
    \ 'aeiou':\n                count += 1\n        if count == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 44, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 42, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 37, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n\
    \    result = []\n    for word in words:\n        count = 0\n        for letter\
    \ in word:\n            if letter.lower() in consonants:\n                count\
    \ += 1\n        if count == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # your code here\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3giruwj2.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3giruwj2.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3giruwj2.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo9avvbr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo9avvbr.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo9avvbr.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(word) - len(re.findall('[aeiouAEIOU]', word)) == n:\n        \
    \    result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr36k0w2j.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpr36k0w2j.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpr36k0w2j.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpr36k0w2j.py\", line 24, in select_words\n    if len(word) -\
    \ len(re.findall('[aeiouAEIOU]', word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo9avvbr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo9avvbr.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo9avvbr.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(word) == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 38, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        count = 0\n        for letter in word:\n            if letter not in\
    \ 'aeiou':\n                count += 1\n        if count == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 44, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 42, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 37, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for char in word:\n        \
    \    if char not in 'aeiou':\n                count += 1\n        if count ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgqw17ohn.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpgqw17ohn.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgqw17ohn.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: 0
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n\
    \    result = []\n    for word in words:\n        count = 0\n        for letter\
    \ in word:\n            if letter.lower() in consonants:\n                count\
    \ += 1\n        if count == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # TODO: implement this function\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdgdfnqu2.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdgdfnqu2.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdgdfnqu2.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # your code here\n    # return []\n    # return ['little']\n\
    \    # return ['Mary', 'lamb']\n    # return []\n    # return ['world']\n    #\
    \ return ['Uncle']\n    # return ['Mary', 'little', 'lamb']\n    # return ['Mary',\
    \ 'little', 'lamb', 'Uncle']\n    # return ['Mary', 'little', 'lamb', 'Uncle',\
    \ 'world']\n    # return ['Mary', 'little', 'lamb', 'Uncle', 'world', 'simple',\
    \ 'white', 'space']\n    # return ['Mary', 'little', 'lamb', 'Uncle', 'world',\
    \ 'simple', 'white', 'space', 'Hello']\n    # return ['Mary', 'little', 'lamb',\
    \ 'Uncle', 'world', 'simple', 'white', 'space', 'Hello', 'sam']\n    # return\
    \ ['Mary', 'little', 'lamb', 'Uncle', 'world', 'simple', 'white', 'space', 'Hello',\
    \ 'sam', 'a']\n    # return ['Mary', 'little', 'lamb', 'Uncle', 'world', 'simple',\
    \ 'white', 'space', 'Hello', 'sam', 'a', 'had']\n    # return ['Mary', 'little',\
    \ 'lamb', 'Uncle', 'world', 'simple', 'white', 'space', 'Hello', 'sam', 'a', 'had']\n\
    \    # return ['Mary', 'little', 'lamb', 'Uncle', 'world', 'simple', 'white',\
    \ 'space', 'Hello', 'sam', 'a', 'had']\n    # return ['Mary', 'little', 'lamb',\
    \ 'Uncle', 'world', 'simple', 'white', 'space', 'Hello', 'sam', 'a', 'had']\n\
    \    # return ['Mary', 'little', 'lamb', 'Uncle', 'world', 'simple', 'white',\
    \ 'space', 'Hello', 'sam', 'a', 'had']\n    # return ['Mary', 'little', 'lamb',\
    \ 'Uncle', 'world', 'simple', 'white', 'space', 'Hello', 'sam', 'a', 'had']\n\
    \    # return ['Mary', 'little', 'lamb', 'Uncle', 'world\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppwlgm8ya.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmppwlgm8ya.py\", line 52,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmppwlgm8ya.py\", line\
    \ 43, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for char in word:\n        \
    \    if char not in 'aeiou':\n                count += 1\n        if count ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgqw17ohn.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpgqw17ohn.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgqw17ohn.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        count = 0\n        for char in word:\n            if char not in 'aeiou':\n\
    \                count += 1\n        if count == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp08fuickb.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp08fuickb.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp08fuickb.py\", line\
    \ 37, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # your code here\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqi1kr0o5.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpqi1kr0o5.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqi1kr0o5.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        count = 0\n        for letter in word:\n            if letter not in\
    \ 'aeiou':\n                count += 1\n        if count == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 44, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 42, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 37, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for char in word:\n        \
    \    if char not in 'aeiou':\n                count += 1\n        if count ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgqw17ohn.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpgqw17ohn.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgqw17ohn.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for char in word:\n        \
    \    if char not in 'aeiou':\n                count += 1\n        if count ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgqw17ohn.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpgqw17ohn.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgqw17ohn.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if word.count('a') + word.count('e') + word.count('i') + word.count('o')\
    \ + word.count('u') == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv0cl5tp7.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpv0cl5tp7.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpv0cl5tp7.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: 0
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n\
    \    result = []\n    for word in words:\n        count = 0\n        for letter\
    \ in word:\n            if letter.lower() in consonants:\n                count\
    \ += 1\n        if count == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo9avvbr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo9avvbr.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo9avvbr.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        count = 0\n        for letter in word:\n            if letter not in\
    \ 'aeiou':\n                count += 1\n        if count == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 44, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 42, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 37, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(word) - len(re.findall(r'[aeiou]', word)) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpikgojif7.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpikgojif7.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpikgojif7.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpikgojif7.py\", line 24, in select_words\n    if len(word) -\
    \ len(re.findall(r'[aeiou]', word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(word) == 0:\n            continue\n        count = 0\n       \
    \ for char in word:\n            if char not in 'aeiou':\n                count\
    \ += 1\n        if count == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9azj3_k1.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp9azj3_k1.py\", line 44,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp9azj3_k1.py\", line\
    \ 39, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        count = 0\n        for letter in word:\n            if letter not in\
    \ 'aeiou':\n                count += 1\n        if count == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 44, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 42, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 37, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n\
    \    result = []\n    for word in words:\n        count = 0\n        for char\
    \ in word:\n            if char.lower() in consonants:\n                count\
    \ += 1\n        if count == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # your code here\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqi1kr0o5.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpqi1kr0o5.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqi1kr0o5.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # your code here\n    return []\n\ndef check(candidate):\n  \
    \  assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw31bsjw4.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw31bsjw4.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw31bsjw4.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(word) == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 38, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for char in word:\n        \
    \    if char not in 'aeiou':\n                count += 1\n        if count ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgqw17ohn.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpgqw17ohn.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgqw17ohn.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: 0
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiouAEIOU':\n                count += 1\n        if\
    \ count == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo9avvbr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo9avvbr.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo9avvbr.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiouAEIOU':\n                count += 1\n        if\
    \ count == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    words\
    \ = s.split()\n    result = []\n    for word in words:\n        count = 0\n  \
    \      for char in word:\n            if char not in 'aeiou':\n              \
    \  count += 1\n        if count == n:\n            result.append(word)\n    return\
    \ result\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp56gnur00.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp56gnur00.py\", line 44,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp56gnur00.py\", line\
    \ 39, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split(' ')\n    result = []\n\
    \    for word in words:\n        if len(word) - len(re.findall('[aeiouAEIOU]',\
    \ word)) == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw6d_z79f.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpw6d_z79f.py\", line 39,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpw6d_z79f.py\", line\
    \ 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpw6d_z79f.py\", line 25, in select_words\n    if len(word) -\
    \ len(re.findall('[aeiouAEIOU]', word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        consonants = 0\n        for letter in word:\n            if letter not\
    \ in 'aeiou':\n                consonants += 1\n        if consonants == n:\n\
    \            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptrb01d3f.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmptrb01d3f.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmptrb01d3f.py\", line\
    \ 37, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(word) == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 38, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for char in word:\n        \
    \    if char not in 'aeiou':\n                count += 1\n        if count ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgqw17ohn.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpgqw17ohn.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgqw17ohn.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n\
    \    result = []\n    for word in words:\n        count = 0\n        for letter\
    \ in word:\n            if letter.lower() in consonants:\n                count\
    \ += 1\n        if count == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        count = 0\n        for letter in word:\n            if letter not in\
    \ 'aeiou':\n                count += 1\n        if count == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 44, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 42, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 37, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        count = 0\n        for letter in word:\n            if letter not in\
    \ 'aeiou':\n                count += 1\n        if count == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 44, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 42, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 37, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # your code here\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n\
    \    result = []\n    for word in words:\n        count = 0\n        for letter\
    \ in word:\n            if letter.lower() in consonants:\n                count\
    \ += 1\n        if count == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # your code here\n    return []\n\ndef check(candidate):\n  \
    \  assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw31bsjw4.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw31bsjw4.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw31bsjw4.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp36h_g7wv.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp36h_g7wv.py\", line 39,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp36h_g7wv.py\", line\
    \ 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # your code here\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw78vuxh3.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpw78vuxh3.py\", line 39,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpw78vuxh3.py\", line\
    \ 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # TODO: implement this function\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdgdfnqu2.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdgdfnqu2.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdgdfnqu2.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnlb73nnr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpnlb73nnr.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpnlb73nnr.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpnlb73nnr.py\", line 22, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # TODO: implement this function\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdgdfnqu2.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdgdfnqu2.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdgdfnqu2.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter in 'bcdfghjklmnpqrstvwxyz':\n                count += 1\n   \
    \     if count == n:\n            result.append(word)\n    return result\n\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgrqzx04i.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgrqzx04i.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgrqzx04i.py\"\
    , line 35, in check\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo9avvbr.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo9avvbr.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo9avvbr.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split(' ')\n    result = []\n\
    \    for word in words:\n        count = 0\n        for letter in word:\n    \
    \        if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbf2oc57d.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpbf2oc57d.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpbf2oc57d.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # your code here\n    return []\n\ndef check(candidate):\n  \
    \  assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw31bsjw4.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw31bsjw4.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw31bsjw4.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(word) == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 38, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(re.findall(r'[bcdfghjklmnpqrstvwxyz]', word, re.IGNORECASE)) ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj9288pz8.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpj9288pz8.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpj9288pz8.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpj9288pz8.py\", line 24, in select_words\n    if len(re.findall(r'[bcdfghjklmnpqrstvwxyz]',\
    \ word, re.IGNORECASE)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        consonants = 0\n        for letter in word:\n \
    \           if letter not in \"aeiouAEIOU\":\n                consonants += 1\n\
    \        if consonants == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # your code here\n    return []\n\ndef check(candidate):\n  \
    \  assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw31bsjw4.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw31bsjw4.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw31bsjw4.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(word) == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 38, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(re.findall('[^aeiou]', word)) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqwz9yqjc.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpqwz9yqjc.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqwz9yqjc.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpqwz9yqjc.py\", line 24, in select_words\n    if len(re.findall('[^aeiou]',\
    \ word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # your code here\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqi1kr0o5.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpqi1kr0o5.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqi1kr0o5.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        count = 0\n        for letter in word:\n            if letter not in\
    \ 'aeiou':\n                count += 1\n        if count == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 44, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 42, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yj6zdh.py\"\
    , line 37, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if s == '':\n        return []\n    else:\n        words = s.split()\n\
    \        result = []\n        for word in words:\n            if len(word) ==\
    \ n:\n                result.append(word)\n        return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqjhjxw5i.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpqjhjxw5i.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqjhjxw5i.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: 0
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # your code here\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiouAEIOU':\n                count += 1\n        if\
    \ count == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(word) == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 38, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycvsulsj.py\"\
    , line 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 43, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu8x71ii.py\"\
    , line 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnlb73nnr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpnlb73nnr.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpnlb73nnr.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpnlb73nnr.py\", line 22, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    s = s.split()\n    l = []\n    for i in\
    \ s:\n        if len(i) == n:\n            l.append(i)\n    return l\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2x_cfnj6.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp2x_cfnj6.py\", line 39,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp2x_cfnj6.py\", line\
    \ 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659805041
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # your code here\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3giruwj2.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3giruwj2.py\"\
    , line 34, in test_check\n    check(select_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3giruwj2.py\"\
    , line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
