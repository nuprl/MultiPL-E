name: HumanEval_136_largest_smallest_integers
language: py
prompt: "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst:\
  \ List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    Create a function\
  \ that returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
  \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
  \ no negative or positive integers, return them as None.\n\n    Examples:\n    >>>\
  \ largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    (None, 1)\n    >>> largest_smallest_integers([])\n\
  \    (None, None)\n    >>> largest_smallest_integers([0])\n    (None, None)\n  \
  \  \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None,\
  \ 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1,\
  \ 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) ==\
  \ (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert\
  \ candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n   \
  \ assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3,\
  \ -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n\
  \    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\ndef test_check():\n\
  \    check(largest_smallest_integers)\n\ntest_check()\n"
completions: ["    pass\n", "    largest_neg = None\n    smallest_pos = None\n   \
    \ for i in lst:\n        if i < 0:\n            if largest_neg is None or i >\
    \ largest_neg:\n                largest_neg = i\n        elif i > 0:\n       \
    \     if smallest_pos is None or i < smallest_pos:\n                smallest_pos\
    \ = i\n    return (largest_neg, smallest_pos)\n", '    pass', "    if len(lst)\
    \ == 0:\n        return (None, None)\n    else:\n        neg = []\n        pos\
    \ = []\n        for i in lst:\n            if i < 0:\n                neg.append(i)\n\
    \            elif i > 0:\n                pos.append(i)\n        if len(neg) ==\
    \ 0:\n            a = None\n        else:\n            a = max(neg)\n        if\
    \ len(pos) == 0:\n            b = None\n        else:\n            b = min(pos)\n\
    \        return (a, b)\n", "    largest_negative = None\n    smallest_positive\
    \ = None\n    for i in lst:\n        if i < 0:\n            if largest_negative\
    \ is None or i > largest_negative:\n                largest_negative = i\n   \
    \     elif i > 0:\n            if smallest_positive is None or i < smallest_positive:\n\
    \                smallest_positive = i\n    return (largest_negative, smallest_positive)\n",
  "    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n\
    \        if num < 0:\n            if largest_negative is None or num > largest_negative:\n\
    \                largest_negative = num\n        elif num > 0:\n            if\
    \ smallest_positive is None or num < smallest_positive:\n                smallest_positive\
    \ = num\n    return (largest_negative, smallest_positive)\n", "    if len(lst)\
    \ == 0:\n        return (None, None)\n    else:\n        positive = []\n     \
    \   negative = []\n        for i in lst:\n            if i > 0:\n            \
    \    positive.append(i)\n            elif i < 0:\n                negative.append(i)\n\
    \        if len(positive) == 0:\n            return (max(negative), None)\n  \
    \      elif len(negative) == 0:\n            return (None, min(positive))\n  \
    \      else:\n            return (max(negative), min(positive))\n", "    if len(lst)\
    \ == 0:\n        return (None, None)\n    else:\n        neg_lst = []\n      \
    \  pos_lst = []\n        for i in lst:\n            if i < 0:\n              \
    \  neg_lst.append(i)\n            elif i > 0:\n                pos_lst.append(i)\n\
    \        if len(neg_lst) == 0:\n            a = None\n        else:\n        \
    \    a = max(neg_lst)\n        if len(pos_lst) == 0:\n            b = None\n \
    \       else:\n            b = min(pos_lst)\n        return (a, b)\n", "    pass\n",
  "    largest_neg = None\n    smallest_pos = None\n    for num in lst:\n        if\
    \ num < 0:\n            if largest_neg is None or num > largest_neg:\n       \
    \         largest_neg = num\n        elif num > 0:\n            if smallest_pos\
    \ is None or num < smallest_pos:\n                smallest_pos = num\n    return\
    \ (largest_neg, smallest_pos)\n", "    largest_negative = None\n    smallest_positive\
    \ = None\n    for num in lst:\n        if num < 0:\n            if largest_negative\
    \ is None or num > largest_negative:\n                largest_negative = num\n\
    \        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n\
    \                smallest_positive = num\n    return (largest_negative, smallest_positive)\n",
  "    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n\
    \        if num < 0:\n            if largest_negative is None or num > largest_negative:\n\
    \                largest_negative = num\n        elif num > 0:\n            if\
    \ smallest_positive is None or num < smallest_positive:\n                smallest_positive\
    \ = num\n    return (largest_negative, smallest_positive)\n", "    pass\n", " \
    \   if len(lst) == 0:\n        return (None, None)\n    else:\n        neg_max\
    \ = None\n        pos_min = None\n        for i in lst:\n            if i < 0:\n\
    \                if neg_max == None:\n                    neg_max = i\n      \
    \          elif i > neg_max:\n                    neg_max = i\n            elif\
    \ i > 0:\n                if pos_min == None:\n                    pos_min = i\n\
    \                elif i < pos_min:\n                    pos_min = i\n        return\
    \ (neg_max, pos_min)\n", "    pass\n", "    largest_neg = None\n    smallest_pos\
    \ = None\n    for num in lst:\n        if num < 0:\n            if largest_neg\
    \ is None or num > largest_neg:\n                largest_neg = num\n        elif\
    \ num > 0:\n            if smallest_pos is None or num < smallest_pos:\n     \
    \           smallest_pos = num\n    return (largest_neg, smallest_pos)\n", " \
    \   largest_negative = None\n    smallest_positive = None\n    for num in lst:\n\
    \        if num < 0:\n            if largest_negative is None or num > largest_negative:\n\
    \                largest_negative = num\n        elif num > 0:\n            if\
    \ smallest_positive is None or num < smallest_positive:\n                smallest_positive\
    \ = num\n    return (largest_negative, smallest_positive)\n", "    pass\n", " \
    \   pass\n", "    # your code here\n    pass\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
