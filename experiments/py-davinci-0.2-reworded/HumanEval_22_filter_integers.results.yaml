name: HumanEval_22_filter_integers
language: py
results:
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
