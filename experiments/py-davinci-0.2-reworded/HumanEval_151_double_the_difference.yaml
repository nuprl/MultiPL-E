name: HumanEval_151_double_the_difference
language: py
prompt: "from typing import List\n\ndef double_the_difference(lst: List[float]) ->\
  \ int:\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the\
  \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
  \ integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>>\
  \ double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n\
  \    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input list is\
  \ empty, return 0.\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([]) == 0\n    assert candidate([5.0,\
  \ 4.0]) == 25\n    assert candidate([0.1, 0.2, 0.3]) == 0\n    assert candidate([-10.0,\
  \ -20.0, -30.0]) == 0\n    assert candidate([-1.0, -2.0, 8.0]) == 0\n    assert\
  \ candidate([0.2, 3.0, 5.0]) == 34\n    assert candidate([-9.0, -7.0, -5.0, -3.0,\
  \ -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n\ndef test_check():\n    check(double_the_difference)\n\
  \ntest_check()\n"
completions: ["    # YOUR CODE HERE\n    if len(lst) == 0:\n        return 0\n   \
    \ else:\n        return sum([(x - y) ** 2 for x, y in zip(lst[1:], lst[:-1])])\n",
  "    # YOUR CODE HERE\n    #raise NotImplementedError()\n    if len(lst) == 0:\n\
    \        return 0\n    else:\n        return sum([2*(i**2) for i in lst if i%2\
    \ == 1 and i >= 0])\n", "    # YOUR CODE HERE\n    pass\n", "    # YOUR CODE HERE\n\
    \    sum = 0\n    for i in lst:\n        if i % 2 == 1:\n            sum += i**2\n\
    \    return sum\n", "    # YOUR CODE HERE\n    return 0\n", "    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\n", "    # TODO: complete this function!\n  \
    \  pass\n", "    # YOUR CODE HERE\n    return 0\n", "    # YOUR CODE HERE\n  \
    \  pass\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n", "    #\
    \ YOUR CODE HERE\n    pass\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    # YOUR CODE HERE\n    pass\n", "    # YOUR CODE HERE\n    pass\n", "    # The\
    \ sum of squares of the odd numbers in the list\n    sum_of_squares_of_odds =\
    \ 0\n    \n    for num in lst:\n        # Ignore negative numbers and non-integers\n\
    \        if num < 0 or num != int(num):\n            continue\n        \n    \
    \    # Add the square of the number to the sum if it is odd\n        if num %\
    \ 2 == 1:\n            sum_of_squares_of_odds += num ** 2\n    \n    return sum_of_squares_of_odds\n",
  "    # YOUR CODE HERE\n    pass\n", "    # YOUR CODE HERE\n    pass\n", "    # YOUR\
    \ CODE HERE\n    pass\n", "    return 0\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
