name: HumanEval_68_pluck
language: py
prompt: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    \"\
  \"\"\n    \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n    your task is to pluck one of the nodes and return it.\n   \
  \ The plucked node should be the node with the smallest even value.\n    If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n\n    The plucked node should be returned in a list, [ smalest_value,\
  \ its index ],\n    If there are no even values or the given array is empty, return\
  \ [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n    Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n\
  \    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even\
  \ value, and 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n  \
  \  []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n    [0, 1]\n   \
  \ Explanation: 0 is the smallest value, but  there are two zeros,\n            \
  \     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
  \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
  \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
  \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
  \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7,\
  \ 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
  \    check(pluck)\n\ntest_check()\n"
completions: ["    even_nums = [num for num in arr if num % 2 == 0]\n    if even_nums:\n\
    \        return [min(even_nums), arr.index(min(even_nums))]\n    return []\n",
  "    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]",
  "    even_nodes = [node for node in arr if node % 2 == 0]\n    if not even_nodes:\n\
    \        return []\n    smallest_even = min(even_nodes)\n    return [smallest_even,\
    \ arr.index(smallest_even)]", "    evens = [i for i in arr if i % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []",
  "    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n\
    \    return [min(evens), arr.index(min(evens))]", "    # TODO: Implement me\n\
    \    pass\n\n", "    if not arr:\n        return []\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens),\
    \ arr.index(min(evens))]\n", "    even_nums = [num for num in arr if num % 2 ==\
    \ 0]\n    if not even_nums:\n        return []\n    smallest_even = min(even_nums)\n\
    \    return [smallest_even, arr.index(smallest_even)]", "    if not arr:\n   \
    \     return []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n\
    \        return []\n    min_even = min(evens)\n    min_even_index = arr.index(min_even)\n\
    \    return [min_even, min_even_index]", "    evens = [x for x in arr if x % 2\
    \ == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n \
    \   return []\n", "    if not arr:\n        return []\n    evens = [i for i in\
    \ arr if i % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens),\
    \ arr.index(min(evens))]", "    evens = [i for i in arr if i % 2 == 0]\n    if\
    \ evens:\n        return [min(evens), arr.index(min(evens))]\n    return []",
  "    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]", "    if not arr:\n        return []\n    evens = [i for\
    \ i in arr if i % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    min_even_idx = arr.index(min_even)\n    return [min_even,\
    \ min_even_idx]\n", "    if not arr:\n        return []\n    evens = [x for x\
    \ in arr if x % 2 == 0]\n    if not evens:\n        return []\n    min_even =\
    \ min(evens)\n    min_even_index = arr.index(min_even)\n    return [min_even,\
    \ min_even_index]", "    # your code here\n    return []\n\n", "    evens = [x\
    \ for x in arr if x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []", "    if not arr:\n        return []\n    evens = [x for x in\
    \ arr if x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens),\
    \ arr.index(min(evens))]", "    evens = [x for x in arr if x % 2 == 0]\n    if\
    \ not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n",
  "    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]",
  "    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]", "    evens = [n for n in arr if n % 2 == 0]\n    if evens:\n\
    \        return [min(evens), arr.index(min(evens))]\n    return []\n", "    if\
    \ not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]",
  "    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n\
    \    min_even = min(evens)\n    return [min_even, arr.index(min_even)]", "   \
    \ if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]",
  "    evens = [x for x in arr if x % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []\n", "    evens = [x for x in arr if x\
    \ % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]",
  "    evens = [x for x in arr if x % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []", "    if not arr:\n        return []\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\n", "    if not arr:\n  \
    \      return []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n\
    \        return []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]",
  "    if not arr:\n        return []\n    evens = [n for n in arr if n % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    min_even_idx\
    \ = arr.index(min_even)\n    return [min_even, min_even_idx]\n", "    if not arr:\n\
    \        return []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n\
    \        return []\n    return [min(evens), arr.index(min(evens))]\n", "    even_nums\
    \ = [x for x in arr if x % 2 == 0]\n    if not even_nums:\n        return []\n\
    \    smallest_even = min(even_nums)\n    smallest_even_index = arr.index(smallest_even)\n\
    \    return [smallest_even, smallest_even_index]", "    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]", "    evens = [x for x in\
    \ arr if x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n", "    if not arr:\n        return []\n    evens = [i for i in\
    \ arr if i % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n\
    \    return [min_even, arr.index(min_even)]", "    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []", "    evens = [x for x in arr if x % 2 == 0]\n    if evens:\n\
    \        return [min(evens), arr.index(min(evens))]\n    return []", "    if not\
    \ arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n    if\
    \ not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n",
  "    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]",
  "    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]",
  "    # TODO: Implement me\n    pass\n", "    if not arr:\n        return []\n  \
    \  evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n\
    \    return [min(evens), arr.index(min(evens))]", "    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    for i, x in enumerate(arr):\n        if x\
    \ == min_even:\n            return [x, i]\n", "    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]",
  "    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n",
  "    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]\n", "    smallest_even = None\n    smallest_even_index\
    \ = None\n    for i, v in enumerate(arr):\n        if v % 2 == 0:\n          \
    \  if smallest_even is None or v < smallest_even:\n                smallest_even\
    \ = v\n                smallest_even_index = i\n    if smallest_even is None:\n\
    \        return []\n    return [smallest_even, smallest_even_index]", "    if\
    \ not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n  \
    \  if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]",
  "    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]", "    evens = [i for i in arr if i % 2 == 0]\n    if evens:\n\
    \        return [min(evens), arr.index(min(evens))]\n    return []\n", "    evens\
    \ = [x for x in arr if x % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []", "    evens = [i for i in arr if i %\
    \ 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n", "    evens = [x for x in arr if x % 2 == 0]\n    if evens:\n\
    \        return [min(evens), arr.index(min(evens))]\n    return []\n", "    evens\
    \ = [x for x in arr if x % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []", "    evens = [x for x in arr if x %\
    \ 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n", "    if not arr:\n        return []\n    evens = [x for x in\
    \ arr if x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens),\
    \ arr.index(min(evens))]\n", "    if len(arr) == 0:\n        return []\n    evens\
    \ = [x for x in arr if x % 2 == 0]\n    if len(evens) == 0:\n        return []\n\
    \    smallest = min(evens)\n    return [smallest, arr.index(smallest)]", "   \
    \ if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]",
  "    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]",
  "    evens = [x for x in arr if x % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []", "    evens = [i for i in arr if i %\
    \ 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n", "    if not arr:\n        return []\n    evens = [x for x in\
    \ arr if x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens),\
    \ arr.index(min(evens))]", "    evens = [x for x in arr if x % 2 == 0]\n    if\
    \ evens:\n        return [min(evens), arr.index(min(evens))]\n    return []",
  "    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]",
  "    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n\
    \    smallest = min(evens)\n    return [smallest, arr.index(smallest)]", "   \
    \ if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n",
  "    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]",
  "    evens = [x for x in arr if x % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []", "    if not arr:\n        return []\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]", "    evens = [i for i in\
    \ arr if i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n", "    if not arr:\n        return []\n    evens = [x for x in\
    \ arr if x % 2 == 0]\n    if not evens:\n        return []\n    smallest = min(evens)\n\
    \    return [smallest, arr.index(smallest)]", "    # TODO: Implement me\n    pass\n",
  "    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n",
  "    evens = [x for x in arr if x % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []\n", "    # TODO: Implement me\n    pass\n",
  "    evens = [i for i in arr if i % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []\n", "    if not arr:\n        return []\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]",
  "    even_nums = [num for num in arr if num % 2 == 0]\n    if not even_nums:\n \
    \       return []\n    smallest_even = min(even_nums)\n    smallest_even_index\
    \ = arr.index(smallest_even)\n    return [smallest_even, smallest_even_index]",
  "    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n",
  "    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n\
    \    return [min(evens), arr.index(min(evens))]", "    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n", "    if not arr:\n        return []\n    evens = [x for x in\
    \ arr if x % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n\
    \    min_even_index = arr.index(min_even)\n    return [min_even, min_even_index]",
  "    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]",
  "    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]", "    if not arr:\n        return []\n    evens = [x for\
    \ x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    evens.sort()\n\
    \    smallest = evens[0]\n    return [smallest, arr.index(smallest)]", "    if\
    \ not arr:\n        return []\n    even_nums = [num for num in arr if num % 2\
    \ == 0]\n    if not even_nums:\n        return []\n    min_even = min(even_nums)\n\
    \    return [min_even, arr.index(min_even)]\n", "    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n", "    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n\
    \        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]",
  "    evens = [n for n in arr if n % 2 == 0]\n    if not evens:\n        return []\n\
    \    return [min(evens), arr.index(min(evens))]\n", "    evens = []\n    for i,\
    \ v in enumerate(arr):\n        if v % 2 == 0:\n            evens.append([v, i])\n\
    \    if evens:\n        return min(evens)\n    return []", "    if not arr:\n\
    \        return []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n\
    \        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]",
  "    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n\
    \    return [min(evens), arr.index(min(evens))]", "    evens = [i for i in arr\
    \ if i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []", "    # TODO: Implement me\n    pass\n\n", "    if not arr:\n\
    \        return []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n\
    \        return []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]",
  "    smallest_even = None\n    smallest_even_index = None\n    for i, v in enumerate(arr):\n\
    \        if v % 2 == 0:\n            if smallest_even is None or v < smallest_even:\n\
    \                smallest_even = v\n                smallest_even_index = i\n\
    \    if smallest_even is None:\n        return []\n    return [smallest_even,\
    \ smallest_even_index]", "    evens = [x for x in arr if x % 2 == 0]\n    if not\
    \ evens:\n        return []\n    else:\n        return [min(evens), arr.index(min(evens))]",
  "    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]",
  "    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]", "    if not arr:\n        return []\n    evens = [i for\
    \ i in arr if i % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    return [min_even, arr.index(min_even)]", "    evens = [x for\
    \ x in arr if x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []", "    evens = [x for x in arr if x % 2 == 0]\n    if evens:\n\
    \        return [min(evens), arr.index(min(evens))]\n    return []", "    if not\
    \ arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n    if\
    \ not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]", "    if not arr:\n        return []\n    evens = [i for\
    \ i in arr if i % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    return [min_even, arr.index(min_even)]", "    if not arr:\n\
    \        return []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n\
    \        return []\n    min_even = min(evens)\n    min_even_index = arr.index(min_even)\n\
    \    return [min_even, min_even_index]", "    evens = [x for x in arr if x % 2\
    \ == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]",
  "    evens = [x for x in arr if x % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []\n", "    evens = [i for i in arr if i\
    \ % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]",
  "    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n",
  "    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n",
  "    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n",
  "    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]", "    if not arr:\n        return []\n    evens = [i for\
    \ i in arr if i % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens),\
    \ arr.index(min(evens))]", "    if not arr:\n        return []\n    evens = [x\
    \ for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    smallest\
    \ = min(evens)\n    return [smallest, arr.index(smallest)]\n", "    if not arr:\n\
    \        return []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n\
    \        return []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]",
  "    evens = [i for i in arr if i % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []", "    if not arr:\n        return []\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]", "    if not arr:\n    \
    \    return []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n\
    \        return []\n    evens.sort()\n    return [evens[0], arr.index(evens[0])]",
  "    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]", "    if not arr:\n        return []\n    evens = [x for\
    \ x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    return [min_even, arr.index(min_even)]", "    smallest_even\
    \ = None\n    smallest_even_index = None\n    for i, v in enumerate(arr):\n  \
    \      if v % 2 == 0:\n            if smallest_even is None or v < smallest_even:\n\
    \                smallest_even = v\n                smallest_even_index = i\n\
    \    if smallest_even is None:\n        return []\n    return [smallest_even,\
    \ smallest_even_index]", "    if not arr:\n        return []\n    evens = [x for\
    \ x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens),\
    \ arr.index(min(evens))]", "    if not arr:\n        return []\n    evens = [x\
    \ for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    return [min_even, arr.index(min_even)]", "    if not arr:\n\
    \        return []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n\
    \        return []\n    return [min(evens), arr.index(min(evens))]", "    if not\
    \ arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n    if\
    \ not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]", "    even_nums = [num for num in arr if num % 2 == 0]\n\
    \    if not even_nums:\n        return []\n    min_even = min(even_nums)\n   \
    \ min_even_idx = arr.index(min_even)\n    return [min_even, min_even_idx]", " \
    \   even_nums = [i for i in arr if i % 2 == 0]\n    if even_nums:\n        return\
    \ [min(even_nums), arr.index(min(even_nums))]\n    return []", "    if not arr:\n\
    \        return []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n\
    \        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]",
  "    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n",
  "    if not arr:\n        return []\n    evens = [n for n in arr if n % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    min_even_index\
    \ = arr.index(min_even)\n    return [min_even, min_even_index]", "    if not arr:\n\
    \        return []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n\
    \        return []\n    return [min(evens), arr.index(min(evens))]", "    # if\
    \ the array is empty, return []\n    if not arr:\n        return []\n    # if\
    \ the array is not empty, filter out the even numbers\n    evens = list(filter(lambda\
    \ x: x % 2 == 0, arr))\n    # if there are no even numbers, return []\n    if\
    \ not evens:\n        return []\n    # if there are even numbers, find the smallest\
    \ even number\n    smallest_even = min(evens)\n    # find the index of the smallest\
    \ even number\n    smallest_even_index = arr.index(smallest_even)\n    # return\
    \ the smallest even number and its index\n    return [smallest_even, smallest_even_index]",
  "    evens = [x for x in arr if x % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []", "    if not arr:\n        return []\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    evens.sort()\n    return [evens[0], arr.index(evens[0])]", "    if not\
    \ arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n    if\
    \ not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]",
  "    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n\
    \    return [min(evens), arr.index(min(evens))]\n", "    even_nodes = [node for\
    \ node in arr if node % 2 == 0]\n    if even_nodes:\n        smallest_even = min(even_nodes)\n\
    \        return [smallest_even, arr.index(smallest_even)]\n    return []\n", " \
    \   if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]",
  "    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n\
    \    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n", " \
    \   evens = [x for x in arr if x % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []\n", "    if not arr:\n        return []\n\
    \    evens = [num for num in arr if num % 2 == 0]\n    if not evens:\n       \
    \ return []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]",
  "    smallest_even = None\n    smallest_index = None\n    for i, v in enumerate(arr):\n\
    \        if v % 2 == 0:\n            if smallest_even is None or v < smallest_even:\n\
    \                smallest_even = v\n                smallest_index = i\n    return\
    \ [smallest_even, smallest_index] if smallest_even is not None else []", "   \
    \ evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n\
    \    smallest = min(evens)\n    return [smallest, arr.index(smallest)]", "   \
    \ if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]",
  "    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]", "    if not arr:\n        return []\n    evens = [x for\
    \ x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    smallest\
    \ = min(evens)\n    return [smallest, arr.index(smallest)]", "    if not arr:\n\
    \        return []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n\
    \        return []\n    return [min(evens), arr.index(min(evens))]\n", "    if\
    \ not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]",
  "    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n",
  "    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n",
  "    if len(arr) == 0:\n        return []\n    evens = [x for x in arr if x % 2\
    \ == 0]\n    if len(evens) == 0:\n        return []\n    smallest = min(evens)\n\
    \    return [smallest, arr.index(smallest)]", "    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]", "    evens = [x for x in\
    \ arr if x % 2 == 0]\n    if not evens:\n        return []\n    else:\n      \
    \  min_even = min(evens)\n        return [min_even, arr.index(min_even)]", " \
    \   if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]",
  "    # TODO: Implement me\n    pass\n", "    if not arr:\n        return []\n  \
    \  evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n\
    \    return [min(evens), arr.index(min(evens))]", "    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []", "    if not arr:\n        return []\n    evens = [x for x in\
    \ arr if x % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n\
    \    min_even_idx = arr.index(min_even)\n    return [min_even, min_even_idx]",
  "    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n\
    \    return [min(evens), arr.index(min(evens))]", "    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]",
  "    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n\
    \    return [min(evens), arr.index(min(evens))]", "    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n", "    if not arr:\n        return []\n    evens = [x for x in\
    \ arr if x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens),\
    \ arr.index(min(evens))]", "    if not arr:\n        return []\n    evens = [n\
    \ for n in arr if n % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\n", "    if not arr:\n        return []\n\
    \    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]",
  "    evens = [n for n in arr if n % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []", "    if not arr:\n        return []\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]", "    if not arr:\n    \
    \    return []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n\
    \        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]",
  "    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n\
    \    return [min(evens), arr.index(min(evens))]", "    evens = [i for i in arr\
    \ if i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []", "    even_nums = [num for num in arr if num % 2 == 0]\n    if\
    \ even_nums:\n        return [min(even_nums), arr.index(min(even_nums))]\n   \
    \ return []", "    evens = [i for i in arr if i % 2 == 0]\n    if evens:\n   \
    \     return [min(evens), arr.index(min(evens))]\n    return []", "    if not\
    \ arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n    if\
    \ not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n",
  "    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]", "    if len(arr) == 0:\n        return []\n    evens\
    \ = [x for x in arr if x % 2 == 0]\n    if len(evens) == 0:\n        return []\n\
    \    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n", " \
    \   evens = [x for x in arr if x % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []\n", "    if not arr:\n        return []\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]",
  "    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n\
    \    return [min(evens), arr.index(min(evens))]", "    even_nodes = [node for\
    \ node in arr if node % 2 == 0]\n    if not even_nodes:\n        return []\n \
    \   smallest_even = min(even_nodes)\n    smallest_even_index = arr.index(smallest_even)\n\
    \    return [smallest_even, smallest_even_index]", "    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\n", "    if not arr:\n  \
    \      return []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n\
    \        return []\n    return [min(evens), arr.index(min(evens))]\n", "    if\
    \ not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n",
  "    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n",
  "    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n",
  "    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    min_even_index\
    \ = arr.index(min_even)\n    return [min_even, min_even_index]", "    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]", "    if not arr:\n        return []\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]", "    # if the array is\
    \ empty, return []\n    if not arr:\n        return []\n    # if the array is\
    \ not empty, filter out the even values\n    evens = list(filter(lambda x: x %\
    \ 2 == 0, arr))\n    # if there are no even values, return []\n    if not evens:\n\
    \        return []\n    # if there are even values, find the smallest one\n  \
    \  smallest = min(evens)\n    # find the index of the smallest even value\n  \
    \  index = arr.index(smallest)\n    # return the smallest even value and its index\n\
    \    return [smallest, index]", "    even_nums = [num for num in arr if num %\
    \ 2 == 0]\n    if even_nums:\n        return [min(even_nums), arr.index(min(even_nums))]\n\
    \    return []\n", "    if not arr:\n        return []\n    evens = [i for i in\
    \ arr if i % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens),\
    \ arr.index(min(evens))]", "    smallest_even = None\n    smallest_even_index\
    \ = None\n    for i, v in enumerate(arr):\n        if v % 2 == 0:\n          \
    \  if smallest_even is None or v < smallest_even:\n                smallest_even\
    \ = v\n                smallest_even_index = i\n    if smallest_even is None:\n\
    \        return []\n    return [smallest_even, smallest_even_index]", "    evens\
    \ = [n for n in arr if n % 2 == 0]\n    if not evens:\n        return []\n   \
    \ min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n", "    if\
    \ not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if not evens:\n        return []\n    min_even = min(evens)\n    min_even_index\
    \ = arr.index(min_even)\n    return [min_even, min_even_index]", "    if not arr:\n\
    \        return []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n\
    \        return []\n    evens.sort()\n    return [evens[0], arr.index(evens[0])]",
  "    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]",
  "    if len(arr) == 0:\n        return []\n    even_nums = [num for num in arr if\
    \ num % 2 == 0]\n    if len(even_nums) == 0:\n        return []\n    smallest_even\
    \ = min(even_nums)\n    return [smallest_even, arr.index(smallest_even)]", " \
    \   evens = [x for x in arr if x % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []\n", "    if not arr:\n        return []\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]",
  "    if not arr:\n        return []\n    even_nums = [num for num in arr if num\
    \ % 2 == 0]\n    if not even_nums:\n        return []\n    smallest_even = min(even_nums)\n\
    \    return [smallest_even, arr.index(smallest_even)]"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
