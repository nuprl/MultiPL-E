name: HumanEval_31_is_prime
language: py
results:
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n\
    \    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n\
    \    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n\
    \    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n\
    \        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3,\
    \ int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n   \
    \ return True\n\n\ndef check(candidate):\n    assert candidate(6) == False\n \
    \   assert candidate(101) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4)\
    \ == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n\
    \    assert candidate(11) == True\n    assert candidate(17) == True\n    assert\
    \ candidate(85) == False\n    assert candidate(77) == False\n    assert candidate(255379)\
    \ == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n\
    \    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n\
    \    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n\
    \    False\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n\
    \        return True\n    else:\n        for i in range(2, n):\n            if\
    \ n % i == 0:\n                return False\n        return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n\
    \    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n\
    \    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n\
    \    False\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n\
    \    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n\
    \    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n\
    \    False\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n\
    \        return True\n    else:\n        for i in range(2, n):\n            if\
    \ n % i == 0:\n                return False\n        return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n\
    \    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n\
    \    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n\
    \    False\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n\
    \        return True\n    elif n % 2 == 0:\n        return False\n    else:\n\
    \        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n\
    \                return False\n        return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n\
    \    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n\
    \    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n\
    \    False\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n\
    \        return True\n    elif n % 2 == 0:\n        return False\n    else:\n\
    \        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n\
    \                return False\n        return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n\
    \    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n\
    \    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n\
    \    False\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return False\n    return True\n\ndef\
    \ check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n\
    \    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n\
    \    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n\
    \    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n\
    \    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n\
    \    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n\
    \    False\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n\
    \    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n\
    \    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n\
    \    False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n\
    \        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3,\
    \ int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n   \
    \ return True\n\n\ndef check(candidate):\n    assert candidate(6) == False\n \
    \   assert candidate(101) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4)\
    \ == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n\
    \    assert candidate(11) == True\n    assert candidate(17) == True\n    assert\
    \ candidate(85) == False\n    assert candidate(77) == False\n    assert candidate(255379)\
    \ == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n\
    \    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n\
    \    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n\
    \    False\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n\
    \        return True\n    elif n % 2 == 0:\n        return False\n    else:\n\
    \        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n\
    \                return False\n        return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n\
    \    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n\
    \    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n\
    \    False\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n\
    \        return True\n    else:\n        for i in range(2, n):\n            if\
    \ n % i == 0:\n                return False\n        return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n\
    \    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n\
    \    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n\
    \    False\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n\
    \    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n\
    \    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n\
    \    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n\
    \        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3,\
    \ int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate(6) == False\n\
    \    assert candidate(101) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4)\
    \ == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n\
    \    assert candidate(11) == True\n    assert candidate(17) == True\n    assert\
    \ candidate(85) == False\n    assert candidate(77) == False\n    assert candidate(255379)\
    \ == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2_imrr54.py\"\
    , line 48, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2_imrr54.py\"\
    , line 46, in test_check\n    check(is_prime)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2_imrr54.py\"\
    , line 32, in check\n    assert candidate(101) == True\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2_imrr54.py\"\
    , line 24, in is_prime\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n\
    \    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n\
    \    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n\
    \    False\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n\
    \    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n\
    \    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n\
    \    False\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n\
    \        return True\n    else:\n        for i in range(2, n):\n            if\
    \ n % i == 0:\n                return False\n        return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n\
    \    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n\
    \    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n\
    \    False\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n\
    \        return True\n    else:\n        for i in range(2, n):\n            if\
    \ n % i == 0:\n                return False\n        return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n\
    \    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n\
    \    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n\
    \    False\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n\
    \    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n\
    \    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n\
    \    False\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n\
    \        return True\n    else:\n        for i in range(2, n):\n            if\
    \ n % i == 0:\n                return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n\
    \    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n\
    \    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n\
    \    False\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n\
    \        return True\n    else:\n        for i in range(2, n):\n            if\
    \ n % i == 0:\n                return False\n        return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
