name: HumanEval_145_order_by_points
language: py
prompt: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
  \    \"\"\"\n    Write a function which sorts the given list of integers\n    in\
  \ ascending order according to the sum of their digits.\n    Note: if there are\
  \ several items with similar sum of their digits,\n    order them based on their\
  \ index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1,\
  \ -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n    []\n \
  \   \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1,\
  \ -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
  \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
  \ 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
  \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert\
  \ candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
  \    check(order_by_points)\n\ntest_check()\n"
completions: ["    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ x))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ x))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(int(i) for\
    \ i in str(abs(x))), nums.index(x)))\n", "    return sorted(nums, key=lambda x:\
    \ (sum(map(int, str(abs(x)))), nums.index(x)))\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(abs(x)))), nums.index(x)))\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n", "    if not nums:\n\
    \        return []\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(int(c) for c\
    \ in str(abs(x))), nums.index(x)))\n", "    return sorted(nums, key=lambda x:\
    \ (sum(map(int, str(abs(x)))), nums.index(x)))\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(abs(x)))), x))\n\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\n", "    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), x))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), x))\n\n", " \
    \   # your code here\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(int(i) for\
    \ i in str(abs(x))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(abs(x)))), nums.index(x)))\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\n", "    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), x))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), x))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(int(i) for i in str(abs(x))), nums.index(x)))\n\
    \n", "    # your code here\n    return sorted(nums, key=lambda x: (sum(map(int,\
    \ str(abs(x)))), nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int,\
    \ str(abs(x)))), nums.index(x)))\n", "    if not nums:\n        return []\n  \
    \  else:\n        return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(int(d) for\
    \ d in str(abs(x))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(abs(x)))), nums.index(x)))\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(abs(x)))), x))\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\n", "    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\n",
  "    return sorted(nums, key=lambda x: (sum(int(i) for i in str(abs(x))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), x))\n",
  "    # TODO: implement this function\n    return sorted(nums, key=lambda x: (sum(map(int,\
    \ str(abs(x)))), x))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int,\
    \ str(abs(x)))), nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int,\
    \ str(abs(x)))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda x:\
    \ (sum(map(int, str(abs(x)))), nums.index(x)))\n\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\n", "    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), x))\n", "    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    # your code here\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ x))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    if not nums:\n        return []\n    nums_with_points\
    \ = []\n    for i, num in enumerate(nums):\n        nums_with_points.append((num,\
    \ sum(int(digit) for digit in str(abs(num))), i))\n    nums_with_points.sort(key=lambda\
    \ x: (x[1], x[2]))\n    return [num[0] for num in nums_with_points]\n", "    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ x))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ x))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ x))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    nums_with_points = []\n    for i, num in enumerate(nums):\n\
    \        nums_with_points.append((num, sum(int(digit) for digit in str(abs(num))),\
    \ i))\n    nums_with_points.sort(key=lambda x: (x[1], x[2]))\n    return [num\
    \ for num, _, _ in nums_with_points]\n", "    return sorted(nums, key=lambda x:\
    \ (sum(map(int, str(abs(x)))), x))\n", "    return sorted(nums, key=lambda x:\
    \ (sum(map(int, str(abs(x)))), nums.index(x)))\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\n", "    return\
    \ sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), x))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), x))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    def sum_digits(num: int) -> int:\n        \"\"\"\n        Return the sum of\
    \ digits of the given number.\n        \"\"\"\n        return sum(int(digit) for\
    \ digit in str(num))\n\n    return sorted(nums, key=lambda x: (sum_digits(x),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ x))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(int(i) for\
    \ i in str(abs(x))), nums.index(x)))\n", "    return sorted(nums, key=lambda x:\
    \ (sum(map(int, str(abs(x)))), nums.index(x)))\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(abs(x)))), x))\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
