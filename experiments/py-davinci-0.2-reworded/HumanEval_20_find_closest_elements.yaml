name: HumanEval_20_find_closest_elements
language: py
prompt: "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float])\
  \ -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length\
  \ at least two) select and return two that are the closest to each\n    other and\
  \ return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
  \ == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n\
  \    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert\
  \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1,\
  \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\ndef test_check():\n    check(find_closest_elements)\n\
  \ntest_check()\n"
completions: ["    closest_pair = (numbers[0], numbers[1])\n    closest_distance =\
    \ abs(numbers[0] - numbers[1])\n    for i in range(len(numbers)):\n        for\
    \ j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j])\
    \ < closest_distance:\n                closest_pair = (numbers[i], numbers[j])\n\
    \                closest_distance = abs(numbers[i] - numbers[j])\n    return closest_pair\n",
  "    min_distance = float('inf')\n    min_pair = (0, 0)\n    for i in range(len(numbers)):\n\
    \        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] -\
    \ numbers[j]) < min_distance:\n                min_distance = abs(numbers[i] -\
    \ numbers[j])\n                min_pair = (numbers[i], numbers[j])\n    return\
    \ min_pair\n\n", "    # TODO: implement this function\n    # Hint: you may want\
    \ to use the built-in function min()\n    # Hint: you may want to use the built-in\
    \ function abs()\n    # Hint: you may want to use the built-in function enumerate()\n\
    \    # Hint: you may want to use the built-in function zip()\n    # Hint: you\
    \ may want to use the built-in function sorted()\n    # Hint: you may want to\
    \ use the built-in function list()\n    # Hint: you may want to use the built-in\
    \ function tuple()\n    # Hint: you may want to use the built-in function range()\n\
    \    # Hint: you may want to use the built-in function len()\n    # Hint: you\
    \ may want to use the built-in function float()\n    # Hint: you may want to use\
    \ the built-in function int()\n    # Hint: you may want to use the built-in function\
    \ str()\n    # Hint: you may want to use the built-in function bool()\n    # Hint:\
    \ you may want to use the built-in function type()\n    # Hint: you may want to\
    \ use the built-in function print()\n    # Hint: you may want to use the built-in\
    \ function input()\n    # Hint: you may want to use the built-in function exit()\n\
    \    # Hint: you may want to use the built-in function map()\n    # Hint: you\
    \ may want to use the built-in function filter()\n    # Hint: you may want to\
    \ use the built-in function reduce()\n    # Hint: you may want to use the built-in\
    \ function zip()\n    # Hint: you may want to use the built-in function sum()\n\
    \    # Hint: you may want to use the built-in function all()\n    # Hint: you\
    \ may want to use the built-in function any()\n    # Hint: you may want to use\
    \ the built-in function max()\n    # Hint: you may want to use the built-in function\
    \ min()\n    # Hint: you may want to use the built-in function abs()\n    # Hint:\
    \ you may want to use the built-in function", "    # TODO: Implement this function\n\
    \    # Hint: You can use the abs() function to get the absolute value of a number\n\
    \    # Hint: You can use the sort() function to sort a list\n    # Hint: You can\
    \ use the enumerate() function to get the index of an item in a list\n    # Hint:\
    \ You can use the zip() function to combine two lists\n    # Hint: You can use\
    \ the min() function to get the minimum value from a list\n    # Hint: You can\
    \ use the max() function to get the maximum value from a list\n    # Hint: You\
    \ can use the abs() function to get the absolute value of a number\n    # Hint:\
    \ You can use the sort() function to sort a list\n    # Hint: You can use the\
    \ enumerate() function to get the index of an item in a list\n    # Hint: You\
    \ can use the zip() function to combine two lists\n    # Hint: You can use the\
    \ min() function to get the minimum value from a list\n    # Hint: You can use\
    \ the max() function to get the maximum value from a list\n    # Hint: You can\
    \ use the abs() function to get the absolute value of a number\n    # Hint: You\
    \ can use the sort() function to sort a list\n    # Hint: You can use the enumerate()\
    \ function to get the index of an item in a list\n    # Hint: You can use the\
    \ zip() function to combine two lists\n    # Hint: You can use the min() function\
    \ to get the minimum value from a list\n    # Hint: You can use the max() function\
    \ to get the maximum value from a list\n    # Hint: You can use the abs() function\
    \ to get the absolute value of a number\n    # Hint: You can use the sort() function\
    \ to sort a list\n    # Hint: You can use the enumerate() function to get the\
    \ index of an item in a list\n    # Hint: You can use the zip() function to combine\
    \ two lists\n    # Hint: You can use the min() function to get the minimum value\
    \ from a list\n    # Hint: You can use the max() function to get the maximum value\
    \ from a list\n    # Hint: You can use the abs() function to get the absolute\
    \ value of", "    # TODO: Implement this function\n    pass\n", "    # TODO: implement\
    \ this function\n    pass\n", "    # TODO: implement this function\n    pass\n",
  "    # TODO: Implement this function\n    # Hint: You may find the built-in function\
    \ abs() useful.\n    # Hint: You may find the built-in function min() useful.\n\
    \    # Hint: You may find the built-in function enumerate() useful.\n    # Hint:\
    \ You may find the built-in function zip() useful.\n    # Hint: You may find the\
    \ built-in function sorted() useful.\n    # Hint: You may find the built-in function\
    \ list() useful.\n    # Hint: You may find the built-in function tuple() useful.\n\
    \    # Hint: You may find the built-in function abs() useful.\n    # Hint: You\
    \ may find the built-in function min() useful.\n    # Hint: You may find the built-in\
    \ function enumerate() useful.\n    # Hint: You may find the built-in function\
    \ zip() useful.\n    # Hint: You may find the built-in function sorted() useful.\n\
    \    # Hint: You may find the built-in function list() useful.\n    # Hint: You\
    \ may find the built-in function tuple() useful.\n    # Hint: You may find the\
    \ built-in function abs() useful.\n    # Hint: You may find the built-in function\
    \ min() useful.\n    # Hint: You may find the built-in function enumerate() useful.\n\
    \    # Hint: You may find the built-in function zip() useful.\n    # Hint: You\
    \ may find the built-in function sorted() useful.\n    # Hint: You may find the\
    \ built-in function list() useful.\n    # Hint: You may find the built-in function\
    \ tuple() useful.\n    # Hint: You may find the built-in function abs() useful.\n\
    \    # Hint: You may find the built-in function min() useful.\n    # Hint: You\
    \ may find the built-in function enumerate() useful.\n    # Hint: You may find\
    \ the built-in function zip() useful.\n    # Hint: You may find the built-in function\
    \ sorted() useful.\n    # Hint: You may find the built-in function list() useful.\n\
    \    # Hint: You may find the built-in", "    # TODO: Implement me\n    pass\n",
  "    # TODO: implement this function\n    pass\n", "    # TODO: Implement this function\n\
    \    pass\n", "    # TODO: Write function body\n    #raise NotImplementedError()\n\
    \    numbers.sort()\n    min_diff = abs(numbers[0] - numbers[1])\n    min_pair\
    \ = (numbers[0], numbers[1])\n    for i in range(1, len(numbers) - 1):\n     \
    \   if abs(numbers[i] - numbers[i + 1]) < min_diff:\n            min_diff = abs(numbers[i]\
    \ - numbers[i + 1])\n            min_pair = (numbers[i], numbers[i + 1])\n   \
    \ return min_pair\n", "    # TODO: Implement this function\n    pass\n", "   \
    \ # TODO: implement this function\n    pass\n", "    # TODO: Implement this function\n\
    \    pass\n", "    # TODO: Implement this function\n    pass\n", "    # TODO:\
    \ Implement this function\n    pass\n", "    # TODO: Implement this function\n\
    \    pass\n", "    closest_pair = (numbers[0], numbers[1])\n    closest_distance\
    \ = abs(numbers[0] - numbers[1])\n    for i in range(len(numbers)):\n        for\
    \ j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j])\
    \ < closest_distance:\n                closest_pair = (numbers[i], numbers[j])\n\
    \                closest_distance = abs(numbers[i] - numbers[j])\n    return closest_pair\n\
    \n", "    # TODO: Implement this function\n    pass\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
