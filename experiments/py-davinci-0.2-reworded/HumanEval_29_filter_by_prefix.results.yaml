language: py
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747308
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747308
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747308
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747308
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747308
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747308
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747308
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747308
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747308
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747308
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747308
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747308
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747308
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747308
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747308
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
