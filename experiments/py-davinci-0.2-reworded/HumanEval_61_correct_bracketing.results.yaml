name: HumanEval_61_correct_bracketing
language: py
results:
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # check\
    \ if brackets is empty\n    if brackets == '':\n        return True\n    # check\
    \ if brackets is only one character\n    elif len(brackets) == 1:\n        return\
    \ False\n    # check if brackets is only two characters\n    elif len(brackets)\
    \ == 2:\n        return brackets[0] == '(' and brackets[1] == ')'\n    # check\
    \ if brackets is more than two characters\n    else:\n        # check if brackets[0]\
    \ is '('\n        if brackets[0] == '(':\n            # check if brackets[-1]\
    \ is ')'\n            if brackets[-1] == ')':\n                # check if brackets[1:-1]\
    \ is correct\n                if correct_bracketing(brackets[1:-1]):\n       \
    \             return True\n        return False\n\n\ndef check(candidate):\n \
    \   assert candidate('()') == True\n    assert candidate('(()())') == True\n \
    \   assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxo9hcgxt.py\"\
    , line 52, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxo9hcgxt.py\"\
    , line 50, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxo9hcgxt.py\"\
    , line 37, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ You can use a stack to keep track of the brackets you have seen so\n    # far.\n\
    \    #\n    # You can use the append and pop methods of lists to add and remove\n\
    \    # elements.\n    #\n    # You can use the in operator to check if a value\
    \ is in a list.\n    #\n    # You can use the == operator to check if two values\
    \ are equal.\n    #\n    # You can use the is operator to check if two variables\
    \ refer to the same\n    # object.\n    #\n    # You can use the isinstance function\
    \ to check if a value is an instance of\n    # a particular type.\n    #\n   \
    \ # You can use the len function to get the length of a list.\n    #\n    # You\
    \ can use the ord function to get the integer value of a character.\n    #\n \
    \   # You can use the chr function to get the character for an integer value.\n\
    \    #\n    # You can use the range function to get a list of integers.\n    #\n\
    \    # You can use the zip function to combine two lists into a list of pairs.\n\
    \    #\n    # You can use the enumerate function to get a list of pairs of indices\
    \ and\n    # values.\n    #\n    # You can use the reversed function to get a\
    \ list in reverse order.\n    #\n    # You can use the sorted function to get\
    \ a sorted list.\n    #\n    # You can use the sum function to sum up the elements\
    \ of a list.\n    #\n    # You can use the all function to check if all elements\
    \ of a list are\n    # True.\n    #\n    # You can use the any function to check\
    \ if any elements of a list are\n    # True.\n    #\n    # You can use the map\
    \ function to apply a function to each element of a\n    # list.\n    #\n    #\
    \ You can use the filter function to filter a list based on a predicate.\n   \
    \ #\n    # You can use the reduce function to combine the elements of a list using\n\
    \    # a binary operator.\n    #\n    # You can use the zip_longest function to\
    \ combine two lists into a list of\n    # pairs, padding with None if one list\
    \ is longer than the other.\n    #\n    # You can\ndef check(candidate):\n   \
    \ assert candidate('()') == True\n    assert candidate('(()())') == True\n   \
    \ assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7nfeuz_w.py\"\
    , line 84, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7nfeuz_w.py\"\
    , line 82, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7nfeuz_w.py\"\
    , line 68, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to help you.\n    # You can use a list as a stack.\n   \
    \ # To push an item onto the stack, use .append(item).\n    # To pop an item off\
    \ the stack, use .pop().\n    # If you try to pop an item from an empty list,\
    \ you get an IndexError.\n    # You can use this to check whether the stack is\
    \ empty.\n    stack = []\n    for bracket in brackets:\n        if bracket ==\
    \ '(':\n            stack.append(bracket)\n        elif bracket == ')':\n    \
    \        if stack == []:\n                return False\n            stack.pop()\n\
    \    if stack == []:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    pass\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9twfqjk0.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9twfqjk0.py\"\
    , line 33, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9twfqjk0.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpel276y0f.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpel276y0f.py\"\
    , line 33, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpel276y0f.py\"\
    , line 23, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for char in brackets:\n        if char == '(':\n            count +=\
    \ 1\n        elif char == ')':\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1h_7n_32.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1h_7n_32.py\"\
    , line 33, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1h_7n_32.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ complete this function body\n    # Hint: you may want to use a stack\n    stack\
    \ = []\n    for bracket in brackets:\n        if bracket == '(':\n           \
    \ stack.append(bracket)\n        elif bracket == ')':\n            if len(stack)\
    \ == 0:\n                return False\n            stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the opening brackets.\n    # You can use\
    \ a list as a stack by using .append() and .pop()\n    # You can check if a list\
    \ is empty by using len()\n    stack = []\n    for bracket in brackets:\n    \
    \    if bracket == '(':\n            stack.append(bracket)\n        elif bracket\
    \ == ')':\n            if len(stack) == 0:\n                return False\n   \
    \         else:\n                stack.pop()\n    return len(stack) == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # if\
    \ brackets is empty, return True\n    if brackets == '':\n        return True\n\
    \    # if brackets starts with a closing bracket, return False\n    if brackets[0]\
    \ == ')':\n        return False\n    # if brackets starts with an opening bracket,\
    \ check if the rest of the\n    # string is correct\n    if brackets[0] == '(':\n\
    \        return correct_bracketing(brackets[1:])\n    # if brackets starts with\
    \ neither an opening nor a closing bracket,\n    # check if the rest of the string\
    \ is correct\n    else:\n        return correct_bracketing(brackets[1:])\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0tdg2gn3.py\"\
    , line 47, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0tdg2gn3.py\"\
    , line 45, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0tdg2gn3.py\"\
    , line 31, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    bracket_count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            bracket_count\
    \ += 1\n        elif bracket == ')':\n            bracket_count -= 1\n       \
    \ if bracket_count < 0:\n            return False\n    return bracket_count ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you have seen\n    # so far.\n\
    \    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n  \
    \          stack.append(bracket)\n        elif bracket == ')':\n            if\
    \ stack == []:\n                return False\n            else:\n            \
    \    stack.pop()\n    if stack == []:\n        return True\n    else:\n      \
    \  return False\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you have seen so far.\n  \
    \  # You can use the append method to add to the end of a list, and pop to remove\n\
    \    # the last element.\n    #\n    # You can also use a counter to keep track\
    \ of the number of open brackets.\n    #\n    # You can use the in operator to\
    \ check if a character is in a string.\n    #\n    # You can use the ord function\
    \ to get the integer value of a character.\n    #\n    # You can use the chr function\
    \ to get the character for an integer.\n    #\n    # You can use the len function\
    \ to get the length of a string.\n    #\n    # You can use the range function\
    \ to loop over the indices of a string.\n    #\n    # You can use the enumerate\
    \ function to loop over the indices and characters\n    # of a string.\n    #\n\
    \    # You can use the zip function to loop over two lists at the same time.\n\
    \    #\n    # You can use the all function to check if all elements of a list\
    \ are True.\n    #\n    # You can use the any function to check if any elements\
    \ of a list are True.\n    #\n    # You can use the reversed function to loop\
    \ over a list in reverse order.\n    #\n    # You can use the reversed function\
    \ to loop over a string in reverse order.\n    #\n    # You can use the reversed\
    \ function to loop over a range in reverse order.\n    #\n    # You can use the\
    \ reversed function to loop over an enumerate in reverse order.\n    #\n    #\
    \ You can use the reversed function to loop over a zip in reverse order.\n   \
    \ #\n    # You can use the reversed function to loop over a reversed in reverse\
    \ order.\n    #\n    # You can use the reversed function to loop over a reversed\
    \ in reverse order.\n    #\n    # You can use the reversed function to loop over\
    \ a reversed in reverse order.\n    #\n    # You can use the reversed function\
    \ to loop over a reversed in reverse order.\n    #\n    # You can use the reversed\
    \ function to loop over a reversed in reverse order.\n    #\n    # You can use\
    \ the reversed function to loop over a reversed in reverse order.\n    #\n   \
    \ #\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp41sil8rv.py\"\
    , line 79, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp41sil8rv.py\"\
    , line 77, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp41sil8rv.py\"\
    , line 63, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for char in brackets:\n        if char == '(':\n            count +=\
    \ 1\n        elif char == ')':\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    # Hint: use a stack\n    stack = []\n    for bracket\
    \ in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n\
    \        elif bracket == ')':\n            if len(stack) == 0:\n             \
    \   return False\n            else:\n                stack.pop()\n    if len(stack)\
    \ == 0:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
