name: HumanEval_19_sort_numbers
language: py
prompt: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
  \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
  \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
  \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
  \ one five')\n    'one three five'\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
  \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n   \
  \ assert candidate('five zero four seven nine eight') == 'zero four five seven eight\
  \ nine'\n    assert candidate('six five four three two one zero') == 'zero one two\
  \ three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
completions: ["    numbers = numbers.split()\n    numbers.sort(key=lambda x: int(number_to_digit[x]))\n\
    \    return ' '.join(numbers)\n\n", "    numbers = numbers.split()\n    numbers\
    \ = [number_to_int(number) for number in numbers]\n    numbers.sort()\n    numbers\
    \ = [int_to_number(number) for number in numbers]\n    return ' '.join(numbers)\n\
    \n", "    numbers = numbers.split()\n    numbers.sort(key=lambda x: numbers_dict[x])\n\
    \    return ' '.join(numbers)\n\n", "    numbers = numbers.split()\n    numbers\
    \ = [number_to_digit(number) for number in numbers]\n    numbers.sort()\n    numbers\
    \ = [digit_to_number(number) for number in numbers]\n    return ' '.join(numbers)\n\
    \n", "    numbers = numbers.split()\n    numbers = [int(number_to_digit[number])\
    \ for number in numbers]\n    numbers.sort()\n    numbers = [digit_to_number[str(number)]\
    \ for number in numbers]\n    return ' '.join(numbers)\n\n", "    numbers = numbers.split()\n\
    \    numbers.sort(key=lambda x: int(NUMBERS[x]))\n    return ' '.join(numbers)\n\
    \n", "    return ' '.join(sorted(numbers.split(), key=lambda x: numbers_dict[x]))\n\
    \n", "    numbers = numbers.split()\n    numbers = [int(num_to_int[num]) for num\
    \ in numbers]\n    numbers.sort()\n    numbers = [int_to_num[num] for num in numbers]\n\
    \    return ' '.join(numbers)\n\n", "    numbers = numbers.split()\n    numbers.sort(key=lambda\
    \ x: int(NUMBERS[x]))\n    return ' '.join(numbers)\n\n", "    numbers = numbers.split()\n\
    \    numbers.sort(key=lambda x: numbers_dict[x])\n    return ' '.join(numbers)\n\
    \n", "    return ' '.join(sorted(numbers.split(), key=lambda x: numbers_dict[x]))\n\
    \n", "    numbers = numbers.split()\n    numbers = [int(number_to_digit(number))\
    \ for number in numbers]\n    numbers.sort()\n    numbers = [digit_to_number(str(number))\
    \ for number in numbers]\n    return ' '.join(numbers)\n\n", "    numbers = numbers.split()\n\
    \    numbers.sort(key=lambda x: numbers_dict[x])\n    return ' '.join(numbers)\n\
    \n", "    numbers = numbers.split()\n    numbers.sort(key=lambda x: numbers_dict[x])\n\
    \    return ' '.join(numbers)\n\n", "    numbers = numbers.split()\n    numbers\
    \ = [number_to_int(number) for number in numbers]\n    numbers.sort()\n    numbers\
    \ = [int_to_number(number) for number in numbers]\n    return ' '.join(numbers)\n\
    \n", "    numbers = numbers.split()\n    numbers.sort(key=lambda x: numbers_dict[x])\n\
    \    return ' '.join(numbers)\n\n", "    numbers = numbers.split()\n    numbers\
    \ = [number_to_int(number) for number in numbers]\n    numbers.sort()\n    numbers\
    \ = [int_to_number(number) for number in numbers]\n    return ' '.join(numbers)\n\
    \n", "    numbers = numbers.split()\n    numbers = [int(number_to_digit(number))\
    \ for number in numbers]\n    numbers.sort()\n    numbers = [digit_to_number(str(number))\
    \ for number in numbers]\n    return ' '.join(numbers)\n\n", "    # TODO: Implement\
    \ me\n    pass\n\n", "    numbers = numbers.split()\n    numbers.sort(key=lambda\
    \ x: int(NUMBERS[x]))\n    return ' '.join(numbers)\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
