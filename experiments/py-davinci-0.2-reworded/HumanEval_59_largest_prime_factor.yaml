name: HumanEval_59_largest_prime_factor
language: py
prompt: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime\
  \ factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
  \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
  \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
  \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
  \ntest_check()\n"
completions: ["    largest_prime = 2\n    while n > 1:\n        if n % largest_prime\
    \ == 0:\n            n //= largest_prime\n        else:\n            largest_prime\
    \ += 1\n    return largest_prime\n\n", "    largest_factor = 1\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            largest_factor = i\n            n //=\
    \ i\n            while n % i == 0:\n                n //= i\n    return largest_factor\n\
    \n", "    # Find the smallest factor of n\n    factor = smallest_factor(n)\n \
    \   # If n is prime, return n\n    if factor == n:\n        return n\n    # Otherwise,\
    \ return the largest prime factor of n/factor\n    return largest_prime_factor(n\
    \ // factor)\n\n", "    # TODO: implement this function\n    if n == 1:\n    \
    \    return 1\n    elif is_prime(n):\n        return n\n    else:\n        for\
    \ i in range(2, n):\n            if n % i == 0:\n                return largest_prime_factor(n\
    \ // i)\n\n", "    if n == 2:\n        return n\n    i = 2\n    while i <= n:\n\
    \        if n % i == 0:\n            n = n // i\n        else:\n            i\
    \ += 1\n    return i\n\n", "    # Find the smallest factor of n.\n    factor =\
    \ 2\n    while n % factor != 0:\n        factor += 1\n    # Divide n by the smallest\
    \ factor.\n    n = n // factor\n    # If n is 1, the largest factor is the smallest\
    \ factor.\n    if n == 1:\n        return factor\n    # Otherwise, the largest\
    \ factor is the largest factor of n.\n    return largest_prime_factor(n)\n", " \
    \   largest_prime_factor = 1\n    i = 2\n    while i <= n:\n        if n % i ==\
    \ 0:\n            largest_prime_factor = i\n            n = n // i\n        else:\n\
    \            i += 1\n    return largest_prime_factor\n\n", "    factor = 2\n \
    \   while n > 1:\n        if n % factor == 0:\n            n //= factor\n    \
    \    else:\n            factor += 1\n    return factor\n\n", "    i = 2\n    while\
    \ i * i <= n:\n        if n % i:\n            i += 1\n        else:\n        \
    \    n //= i\n    return n\n\n", "    if n == 2:\n        return 2\n    if n %\
    \ 2 == 0:\n        return largest_prime_factor(n // 2)\n    for i in range(3,\
    \ int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return largest_prime_factor(n\
    \ // i)\n    return n\n\n", "    if n <= 1:\n        raise ValueError(\"n must\
    \ be greater than 1\")\n    if is_prime(n):\n        raise ValueError(\"n must\
    \ not be a prime\")\n    for i in range(2, n):\n        if n % i == 0 and is_prime(i):\n\
    \            return i\n", "    if n == 2:\n        return 2\n    for i in range(3,\
    \ int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return largest_prime_factor(n\
    \ // i)\n    return n\n\n", "    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n",
  "    if n == 1:\n        return 1\n    if is_prime(n):\n        return n\n    for\
    \ i in range(2, n):\n        if n % i == 0:\n            return largest_prime_factor(n\
    \ // i)\n\n", "    # Find the smallest factor of n\n    factor = smallest_factor(n)\n\
    \    # If n is prime, return n\n    if factor == n:\n        return n\n    # Else,\
    \ return the largest prime factor of n / factor\n    return largest_prime_factor(n\
    \ // factor)\n\n", "    factor = 2\n    while n > 1:\n        if n % factor ==\
    \ 0:\n            n //= factor\n        else:\n            factor += 1\n    return\
    \ factor\n\n", "    assert n > 1 and not is_prime(n)\n    if n % 2 == 0:\n   \
    \     return largest_prime_factor(n // 2)\n    else:\n        for i in range(3,\
    \ n, 2):\n            if n % i == 0:\n                return largest_prime_factor(n\
    \ // i)\n", "    if n == 2:\n        return 2\n    elif n % 2 == 0:\n        return\
    \ largest_prime_factor(n // 2)\n    else:\n        for i in range(3, n // 2, 2):\n\
    \            if n % i == 0:\n                return largest_prime_factor(n //\
    \ i)\n        return n\n\n", "    assert n > 1 and not is_prime(n)\n    factor\
    \ = 2\n    while n % factor != 0:\n        factor += 1\n    return max(factor,\
    \ largest_prime_factor(n // factor))\n\n", "    # Hint: You may want to use the\
    \ is_prime function.\n    # Hint: You may want to use the is_prime function.\n\
    \    if n == 1:\n        return 1\n    if is_prime(n):\n        return n\n   \
    \ else:\n        for i in range(2, n):\n            if is_prime(i) and n % i ==\
    \ 0:\n                return largest_prime_factor(n // i)\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
